(()=>{var e={910:(e,t,i)=>{let r,s,n,o,a,l,h,c,u,d,p,g,m,f,w,v;var y=Object.create,b=Object.defineProperty,C=Object.getOwnPropertyDescriptor,R=Object.getOwnPropertyNames,S=Object.getPrototypeOf,P=Object.prototype.hasOwnProperty,A=(e,t)=>{for(var i in t)b(e,i,{get:t[i],enumerable:!0})},k=(e,t,i,r)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let s of R(t))P.call(e,s)||s===i||b(e,s,{get:()=>t[s],enumerable:!(r=C(t,s))||r.enumerable});return e},D={};A(D,{AzureDevOps:()=>es,AzureDevopsUtils:()=>tZ,Bitbucket:()=>eu,BitbucketServer:()=>em,BitbucketServerUtils:()=>t2,BitbucketUtils:()=>t0,EntityIdentifierProviderType:()=>t7,EntityIdentifierUtils:()=>t4,EntityType:()=>t5,EntityVersion:()=>t8,GitBuildStatusStage:()=>T,GitBuildStatusState:()=>_,GitDiffLineType:()=>x,GitHub:()=>te,GitHubIssueCloseReason:()=>iJ,GitHubUtils:()=>iN,GitIssueState:()=>ew,GitLab:()=>tI,GitLabUtils:()=>iG,GitMergeStrategy:()=>I,GitProviderUtils:()=>im,GitPullRequestMergeableState:()=>O,GitPullRequestReviewState:()=>E,GitPullRequestState:()=>$,Jira:()=>tj,JiraServer:()=>tz,JiraUtils:()=>iQ,PullRequestAsyncStatus:()=>iK,Trello:()=>tJ,TrelloUtils:()=>iz,Utils:()=>iX,default:()=>iZ,isFetch:()=>M}),e.exports=k(b({},"__esModule",{value:!0}),D);var T=((r=T||{}).Build="build",r.Production="production",r.Staging="staging",r.Test="test",r),_=((s=_||{}).ActionRequired="ACTION_REQUIRED",s.Cancelled="CANCELLED",s.Error="ERROR",s.Failed="FAILED",s.Pending="PENDING",s.Running="RUNNING",s.Skipped="SKIPPED",s.Success="SUCCESS",s.Warning="WARNING",s.OptionalActionRequired="OPTIONAL_ACTION_REQUIRED",s),I=((n=I||{}).MergeCommit="MERGE_COMMIT",n.Rebase="REBASE",n.RebaseThenMergeCommit="REBASE_THEN_MERGE_COMMIT",n.FastForward="FAST_FORWARD",n.Squash="SQUASH",n),$=((o=$||{}).Open="OPEN",o.Closed="CLOSED",o.Merged="MERGED",o),E=((a=E||{}).Approved="APPROVED",a.ChangesRequested="CHANGES_REQUESTED",a.Commented="COMMENTED",a.ReviewRequested="REVIEW_REQUESTED",a),O=((l=O||{}).Behind="BEHIND",l.Blocked="BLOCKED",l.Conflicts="CONFLICTS",l.Mergeable="MERGEABLE",l.Unknown="UNKNOWN",l.UnknownAndBlocked="UNKNOWN_AND_BLOCKED",l.Unstable="UNSTABLE",l),x=((h=x||{}).ADDED="ADDED",h.DELETED="DELETED",h.UNMODIFIED="UNMODIFIED",h),F={APPROVED:0,COMMENTED:1,REVIEW_REQUESTED:2,CHANGES_REQUESTED:3},B=e=>e&&0!==e.length?e.reduce((e,t)=>F[t.state]>F[e]?t.state:e,"APPROVED"):null,L=(d=null!=(c=i(3092))?y(S(c)):{},k(!u&&c&&c.__esModule?d:b(d,"default",{value:c,enumerable:!0}),c)),U=globalThis.fetch||L.default,W=async e=>{let t=e.headers.get("content-type")||"",i=null;if(t.startsWith("application/json")){let t=await e.text();i=t.trim().length>0?JSON.parse(t):null}else if(t.startsWith("text/")||""===t)i=await e.text();else if(t.startsWith("application/vnd.github.raw+json"))i=await e.arrayBuffer();else throw Error(`Unsupported content-type: ${t}`);let r={body:i,headers:Object.fromEntries(e.headers.entries()),status:e.status,statusText:e.statusText};if(!e.ok){let t=Error(e.statusText);throw Object.assign(t,{response:r}),t}return r},q=e=>async({url:t,...i})=>W(await e(t,i)),M=(e,t=!1)=>"fetch"===e.name||t,N=class{constructor(e){let t=(null==e?void 0:e.request)||U;this.config={...e,request:M(t,null==e?void 0:e.forceIsFetch)?q(t):t}}updateConfig(e){this.config={...this.config,...e,request:e.request&&M(e.request,(null==e?void 0:e.forceIsFetch)??this.config.forceIsFetch)?q(e.request):this.config.request}}},H=class extends N{},G=(e,t)=>{let i={};return e&&(i.Authorization=`${t?"Basic":"Bearer"} ${e}`),i},V=e=>e?e.reduce((e,t)=>(e[t]=!0,e),{}):void 0,Q=(e,t,i)=>!e||t.some(t=>e[t])?i:"",j=(e,t={})=>G(t.token||e.token,t.isPAT||e.isPAT),z=e=>e.url.replace("/_apis/git/repositories/","/_git/").replace(`/${e.repository.project.id}/`,`/${encodeURIComponent(e.repository.project.name)}/`).replace(`/${e.repository.id}/`,`/${encodeURIComponent(e.repository.name)}/`).replace("/pullRequests/","/pullrequest/"),Y="https://app.vssps.visualstudio.com/_apis",K="https://dev.azure.com",J={active:"OPEN",completed:"MERGED",abandoned:"CLOSED"},Z={10:"APPROVED",5:"APPROVED",0:"REVIEW_REQUESTED",[-5]:"CHANGES_REQUESTED",[-10]:"CHANGES_REQUESTED"},X=e=>({id:e.id,name:e.displayName,username:e.uniqueName||e.displayName,email:null,avatarUrl:e.imageUrl,url:null}),ee=e=>e.startsWith("refs/heads/")?e.replace("refs/heads/",""):e,et=(e,t)=>{var i;let r=t.reviewers.filter(e=>0!==e.vote).map(e=>({reviewer:X(e),state:Z[e.vote]||"REVIEW_REQUESTED"}));return{id:t.pullRequestId.toString(),title:t.title,number:t.codeReviewId,state:J[t.status],isDraft:t.isDraft,commentCount:null,upvoteCount:null,author:X(t.createdBy),createdDate:new Date(t.creationDate),updatedDate:new Date(t.closedDate||t.creationDate),closedDate:t.closedDate?new Date(t.closedDate):null,mergedDate:t.closedDate&&"completed"===t.status?new Date(t.closedDate):null,repository:{id:t.repository.id,name:t.repository.name,project:t.repository.project.name,owner:{login:e},remoteInfo:null},headCommit:{buildStatuses:null},baseRef:{name:ee(t.targetRefName),oid:t.lastMergeTargetCommit.commitId},headRef:{name:ee(t.sourceRefName),oid:t.lastMergeSourceCommit.commitId},url:z(t),assignees:t.reviewers.map(X),reviews:r,reviewDecision:B(r),additions:null,deletions:null,fileCount:null,commitCount:null,headRepository:null,mergeableState:"UNKNOWN",labels:(null==(i=t.labels)?void 0:i.map(e=>({color:null,description:null,id:e.id,name:e.name})))??[],permissions:null}},ei=(e,t)=>({id:t.id,name:t.name,namespace:e,project:t.project.name,webUrl:t.webUrl,httpsUrl:t.remoteUrl,sshUrl:t.sshUrl,defaultBranch:t.defaultBranch?{name:ee(t.defaultBranch)}:null,permission:null}),er=(e,t,i,r)=>{var s,n;let o=i.fields,a=o["System.AssignedTo"],l=o["System.State"],h=o["System.WorkItemType"],c;return l&&h&&(c=null==(s=r[h])?void 0:s[l]),{id:i.id.toString(),number:i.id.toString(),title:o["System.Title"],commentCount:o["System.CommentCount"],author:{avatarUrl:o["System.CreatedBy"]._links.avatar.href,email:null,id:o["System.CreatedBy"].id,name:o["System.CreatedBy"].uniqueName,username:o["System.CreatedBy"].displayName,url:null},closedDate:o["Microsoft.VSTS.Common.ClosedDate"]?new Date(o["Microsoft.VSTS.Common.ClosedDate"]):null,createdDate:new Date(o["System.CreatedDate"]),updatedDate:new Date(o["System.ChangedDate"]),url:i._links.html.href,assignees:a?[{avatarUrl:a._links.avatar.href,email:null,id:a.id,name:a.uniqueName,username:a.displayName,url:null}]:[],description:null,state:{name:(null==c?void 0:c.title)||l,color:null},type:o["System.WorkItemType"],repository:null,project:{namespace:e,name:t,resourceId:null},upvoteCount:0,labels:(null==(n=i.fields["System.Tags"])?void 0:n.split(";").map(e=>({color:null,description:null,id:null,name:e.trim()})))??[]}},es=class extends N{async getCurrentUser(e={},t={}){if(t.isPAT||this.config.isPAT)throw Error("Azure DevOps does not support PATs for this function.");let i=await this.config.request({url:`${Y}/profile/profiles/me`,headers:j(this.config,t)});return{data:{id:i.body.id,name:i.body.displayName,username:i.body.displayName,email:i.body.emailAddress,avatarUrl:null,url:null}}}async getCurrentUserForInstance(e,t={}){let i=(await this.config.request({url:`${K}/${encodeURIComponent(e.namespace)}/_apis/ConnectionData`,headers:j(this.config,t)})).body.authorizedUser;if("Anonymous"===i.providerDisplayName)throw Error("Current user not found.");return{data:{id:i.id,name:i.providerDisplayName,username:i.providerDisplayName,email:i.properties.Account.$value,avatarUrl:null}}}async getUserForCommit(e,t={}){if(!e.repo.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let i=(await this.config.request({url:`${K}/${encodeURIComponent(e.repo.namespace)}/${encodeURIComponent(e.repo.project)}/_apis/git/repositories/${encodeURIComponent(e.repo.name)}/commits/${e.oid}`,headers:j(this.config,t)})).body.author;return{data:{name:i.name,email:i.email,avatarUrl:i.imageUrl}}}async getOrgsForUser(e,t={}){return{data:(await this.config.request({url:`${Y}/accounts?memberId=${e.userId}&api-version=6.0`,headers:j(this.config,t)})).body.value.map(e=>({id:e.accountId,name:e.accountName}))}}async getAzureProjects(e,t={}){let i=new URL(`${K}/${encodeURIComponent(e.namespace)}/_apis/projects`);i.searchParams.set("$top","100"),e.cursor&&i.searchParams.set("$skip",e.cursor);let r=await this.config.request({url:i.toString(),headers:j(this.config,t)}),s=r.headers["x-ms-continuationtoken"];return{pageInfo:{hasNextPage:!!s,endCursor:s||null},data:r.body.value.map(t=>({id:t.id,name:t.name,namespace:e.namespace}))}}async getAzureProjectScopeDescriptor(e,t={}){let{namespace:i,projectId:r}=e;return{data:{scope:(await this.config.request({url:`https://vssps.dev.azure.com/${encodeURIComponent(i)}/_apis/graph/descriptors/${r}?api-version=6.0`,headers:j(this.config,t)})).body.value}}}async getAzureGraphAccountsForAzureProject(e,t={}){let{namespace:i,projectScopeDescriptor:r,cursor:s}=e,n=new URL(`https://vssps.dev.azure.com/${encodeURIComponent(i)}/_apis/graph/users`);r&&n.searchParams.set("scopeDescriptor",r),s&&n.searchParams.set("continuationToken",s);let o=await this.config.request({url:n.toString(),headers:j(this.config,t)}),a=o.headers["x-ms-continuationtoken"];return{pageInfo:{endCursor:a||null,hasNextPage:!!a},data:o.body.value.map(e=>{var t;return{avatarUrl:(null==(t=e._links.avatar)?void 0:t.href)??null,descriptor:e.descriptor,email:e.mailAddress,name:e.displayName,storageKeyURL:e._links.storageKey.href,username:e.displayName}})}}async getAccountFromAzureGraphAccount(e,t={}){let{azureGraphAccount:i}=e,r=await this.config.request({url:i.storageKeyURL,headers:j(this.config,t)});return{data:{avatarUrl:i.avatarUrl,email:i.email,id:r.body.value,name:i.name,username:i.username,url:null}}}async getAccountsFromAzureGraphAccounts(e,t={}){let i=[];for(let r of e.azureGraphAccounts){let e=await this.getAccountFromAzureGraphAccount({azureGraphAccount:r},t);i.push(e.data)}return{data:i}}async getRepo(e,t={}){if(!e.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let i=await this.config.request({url:`${K}/${encodeURIComponent(e.namespace)}/${encodeURIComponent(e.project)}/_apis/git/repositories/${encodeURIComponent(e.name)}`,headers:j(this.config,t)});return{data:ei(e.namespace,i.body)}}async getRepos(e,t={}){let i=[],r=[];return await Promise.all(e.map(async e=>{try{let r=await this.getRepo(e,t);i.push(r.data)}catch(t){r.push({input:e,error:t})}})),{data:i,errors:r}}async getReposForAzureProject(e,t={}){if(!e.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');return{data:(await this.config.request({url:`${K}/${encodeURIComponent(e.namespace)}/${encodeURIComponent(e.project)}/_apis/git/repositories`,headers:j(this.config,t)})).body.value.map(t=>ei(e.namespace,t))}}async getRefs(e,t,i={}){if(!t.repo.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let r=new URL(`${K}/${encodeURIComponent(t.repo.namespace)}/${encodeURIComponent(t.repo.project)}/_apis/git/repositories/${encodeURIComponent(t.repo.name)}/refs`);r.searchParams.set("filter",e),r.searchParams.set("$top","100"),t.cursor&&r.searchParams.set("continuationToken",t.cursor);let s=await this.config.request({url:r.toString(),headers:j(this.config,i)}),n=s.headers["x-ms-continuationtoken"];return{pageInfo:{hasNextPage:!!n,endCursor:n||null},data:s.body.value.map(e=>({name:ee(e.name),commit:{oid:e.objectId,authoredDate:null,committedDate:null}}))}}async getBranches(e,t={}){return this.getRefs("heads",e,t)}async getTags(e,t={}){return this.getRefs("tags",e,t)}async getPullRequestsForRepoBase(e,t={},i=100){let{page:r,repo:s,assigneeLogins:n,authorLogin:o}=e||{};if(!s.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let a="searchCriteria.status=1";return n&&n.length&&(a+=`&searchCriteria.reviewerId=${n[0]}`),o&&(a+=`&searchCriteria.creatorId=${o}`),await this.config.request({url:`${t.baseUrl||K}/${encodeURIComponent(s.namespace)}/${encodeURIComponent(s.project||"")}/_apis/git/repositories/${encodeURIComponent(s.name)}/pullRequests?${a}&%24top=${i}&%24skip=${((r||1)-1)*i}`,headers:j(this.config,t)})}async getPullRequestsForRepo(e,t={}){let i=e.page||1,r=await this.getPullRequestsForRepoBase(e,t,100);return{pageInfo:{hasNextPage:100===r.body.value.length,nextPage:i+1},data:r.body.value.map(t=>et(e.repo.namespace,t))}}async getPullRequestsForRepos(e,t={}){if(!e.repos.every(e=>e.project))throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let{repos:i}=e||{},r=[];return await Promise.all(i.map(async i=>{try{(await this.getPullRequestsForRepoBase({repo:i,...e},t)).body.value.forEach(e=>{r.push(et(i.namespace,e))})}catch(e){if(404!==e.statusCode&&401!==e.statusCode)throw e}})),{data:r}}async getPullRequestsForProjectBase(e,t={},i=100){let{namespace:r,project:s,page:n,assigneeLogins:o,authorLogin:a}=e,l=new URL(`${t.baseUrl||K}/${encodeURIComponent(r)}/${encodeURIComponent(s)}/_apis/git/pullRequests`);return l.searchParams.set("searchCriteria.status","1"),l.searchParams.set("$top",i.toString()),l.searchParams.set("$skip",(((n||1)-1)*i).toString()),o&&o.length&&l.searchParams.set("searchCriteria.reviewerId",o[0]),a&&l.searchParams.set("searchCriteria.creatorId",a),await this.config.request({url:l.toString(),headers:j(this.config,t)})}async getPullRequestsForProject(e,t={}){let i=e.page||1,r=await this.getPullRequestsForProjectBase(e,t,100);return{pageInfo:{hasNextPage:100===r.body.value.length,nextPage:i+1},data:r.body.value.map(t=>et(e.namespace,t))}}async getPullRequestsForProjects(e,t={}){let{projects:i}=e||{},r=[];return await Promise.all(i.map(async i=>{try{(await this.getPullRequestsForProjectBase({...i,...e},t)).body.value.forEach(e=>{r.push(et(i.namespace,e))})}catch(e){if(404!==e.statusCode&&401!==e.statusCode)throw e}})),{data:r}}async getAzurePullRequestLastMergeStatus(e,t={}){if(!e.repo.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let{repo:{namespace:i,project:r,name:s},pullRequestId:n}=e,o=await this.config.request({url:`${t.baseUrl||K}/${encodeURIComponent(i)}/${encodeURIComponent(r||"")}/_apis/git/repositories/${s}/pullrequests/${n}?includeCommits=true?api-version=6.0`,headers:{...j(this.config,t)}});if(!o.body.mergeStatus)throw Error("Could not fetch pull request");return{data:o.body.mergeStatus}}async updatePullRequest(e,t,i){return await this.config.request({method:"PATCH",url:`${i.baseUrl||K}/${encodeURIComponent(e.repository.owner.login)}/${encodeURIComponent(e.repository.project)}/_apis/git/repositories/${e.repository.name}/pullrequests/${e.id}?api-version=6.0`,body:t,headers:{...j(this.config,i),"Content-Type":"application/json"}})}async closePullRequest(e,t={}){let{pullRequest:i}=e;if(!(await this.updatePullRequest(i,JSON.stringify({status:"abandoned"}),t)).body.status)throw Error("Could not close pull request")}async mergePullRequest(e,t={}){var i;let{pullRequest:r,mergeStrategy:s}=e,n;switch(s){case"MERGE_COMMIT":n="noFastForward";break;case"REBASE":n="rebase";break;case"REBASE_THEN_MERGE_COMMIT":n="rebaseMerge";break;case"SQUASH":n="squash"}let o={completionOptions:{mergeStrategy:n},lastMergeSourceCommit:{commitId:null==(i=r.headRef)?void 0:i.oid},status:"completed"};if(!(await this.updatePullRequest(r,JSON.stringify(o),t)).body.status)throw Error("Could not merge pull request")}async addPullRequestLabel(e,t={}){let{pullRequest:i,label:r}=e;if(!i.repository.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let s={name:r.name};if(!(await this.config.request({method:"POST",url:`${t.baseUrl||K}/${encodeURIComponent(i.repository.owner.login)}/${encodeURIComponent(i.repository.project)}/_apis/git/repositories/${i.repository.name}/pullrequests/${i.id}/labels?api-version=6.0`,body:JSON.stringify(s),headers:{...j(this.config,t),"Content-Type":"application/json"}})).body.id)throw Error("Could not add pull request label")}async removePullRequestLabel(e,t={}){let{pullRequest:i,label:r}=e;if(!i.repository.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');await this.config.request({method:"DELETE",url:`${t.baseUrl||K}/${encodeURIComponent(i.repository.owner.login)}/${encodeURIComponent(i.repository.project)}/_apis/git/repositories/${i.repository.name}/pullrequests/${i.id}/labels/${encodeURIComponent(r.name)}?api-version=6.0`,headers:{...j(this.config,t)}})}async setPullRequestLabels(e,t={}){let{pullRequest:i,labels:r}=e;if(!i.repository.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let s=i.labels;if(!s)throw Error('Azure DevOps requires "labels" for this function.');for(let e of r)s.find(t=>t.id===e.id)||await this.addPullRequestLabel({pullRequest:i,label:e},t);for(let e of s)r.find(t=>e.id===t.id)||await this.removePullRequestLabel({pullRequest:i,label:e},t)}async setPullRequestAsDraft(e,t={}){let{pullRequest:i,isDraft:r}=e;if(!(await this.updatePullRequest(i,JSON.stringify({isDraft:r}),t)).body.status)throw Error("Could not set the pull request as draft")}async addPullRequestReviewer(e,t={}){let{pullRequest:i,reviewer:r,isRequired:s}=e,n={id:r.id,isRequired:s};if(!(await this.config.request({method:"PUT",url:`${t.baseUrl||K}/${encodeURIComponent(i.repository.owner.login)}/${encodeURIComponent(i.repository.project)}/_apis/git/repositories/${i.repository.name}/pullrequests/${i.id}/reviewers/${r.id}?api-version=6.0`,body:JSON.stringify(n),headers:{...j(this.config,t),"Content-Type":"application/json"}})).body.id)throw Error("Could not add pull request reviewer")}async removePullRequestReviewer(e,t={}){let{pullRequest:i,reviewer:r}=e;await this.config.request({method:"DELETE",url:`${t.baseUrl||K}/${encodeURIComponent(i.repository.owner.login)}/${encodeURIComponent(i.repository.project)}/_apis/git/repositories/${i.repository.name}/pullrequests/${i.id}/reviewers/${r.id}?api-version=6.0`,headers:{...j(this.config,t),Accept:"application/json"}})}async setPullRequestReviewers(e,t={}){let{pullRequest:i,reviewers:r}=e;for(let e of r)i.assignees.find(t=>t.id===e.id)||await this.addPullRequestReviewer({pullRequest:i,reviewer:e,isRequired:!0},t);for(let e of i.assignees)r.find(t=>e.id===t.id)||await this.removePullRequestReviewer({pullRequest:i,reviewer:e},t)}async getIssuesForAzureProject(e,t={}){let{page:i,assigneeLogins:r,authorLogin:s,mentionLogin:n,statusByWorkItemIdByStatusId:o}=e||{},a=i||1,l=["[Microsoft.VSTS.Common.ClosedDate] = ''","[System.TeamProject] = @project","[Microsoft.VSTS.Common.ResolvedDate] = ''"];s&&l.push(`[System.CreatedBy] = '${s.replace("'","''")}'`),r&&r[0]&&l.push(`[System.AssignedTo] = '${r[0].replace("'","''")}'`),n&&l.push("[System.Id] IN (@recentMentions)");let h=`Select [Microsoft.VSTS.Common.ClosedDate], [Microsoft.VSTS.Common.ResolvedDate] From WorkItems Where ${l.join(" AND ")} order by [System.CreatedDate] desc`,c=await this.config.request({url:`${t.baseUrl||K}/${encodeURIComponent(e.namespace)}/${encodeURIComponent(e.project)}/_apis/wit/wiql?api-version=6.0`,body:JSON.stringify({query:h}),method:"POST",headers:{...j(this.config,t),"Content-Type":"application/json"}}),u=c.body.workItems.slice((a-1)*200,200*a).map(e=>e.id);if(0==u.length)return{pageInfo:{hasNextPage:!1,nextPage:null},data:[]};let d=await this.config.request({url:`${t.baseUrl||K}/${encodeURIComponent(e.namespace)}/${encodeURIComponent(e.project)}/_apis/wit/workitemsbatch?api-version=6.0`,body:JSON.stringify({ids:u,$expand:"Links"}),method:"POST",headers:{...j(this.config,t),"Content-Type":"application/json"}});return{pageInfo:{hasNextPage:c.body.workItems.length>200*a,nextPage:a+1},data:d.body.value.map(t=>er(e.namespace,e.project,t,o||{}))}}async updateIssue(e,t,i={}){return await this.config.request({method:"PATCH",url:`${i.baseUrl||K}/${encodeURIComponent(e.project.namespace)}/${encodeURIComponent(e.project.name)}/_apis/wit/workitems/${e.id}?api-version=6.0`,body:JSON.stringify(t),headers:{...j(this.config,i),"Content-Type":"application/json-patch+json"}})}async setIssueStatus(e,t={}){var i;let{issue:r,status:s}=e,n=[{op:"add",path:"/fields/System.State",value:s.name}];if(!(null!=(i=(await this.updateIssue(r,n,t)).body.fields)&&i["System.State"]))throw Error("Could not set issue status")}async setIssueAssignee(e,t={}){var i;let{issue:r,assignee:s}=e,n=[{op:"add",path:"/fields/System.AssignedTo",value:(null==s?void 0:s.name)??""}];if(!(null!=(i=(await this.updateIssue(r,n,t)).body.fields)&&i["System.State"]))throw Error("Could not set issue assignee")}async setIssueLabels(e,t={}){var i;let{issue:r,labels:s}=e,n=[{op:"replace",path:"/fields/System.Tags",value:s.map(e=>e.name).join(";")}];if(!(null!=(i=(await this.updateIssue(r,n,t)).body.fields)&&i["System.Tags"]))throw Error("Could not set issue tags")}async getIssueTypesForAzureProject(e,t={}){if(!e.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let{namespace:i,project:r}=e;return{data:(await this.config.request({url:`${t.baseUrl||K}/${encodeURIComponent(i)}/${encodeURIComponent(r||"")}/_apis/wit/workitemtypes?api-version=6.0`,headers:{...j(this.config,t)}})).body.value}}async getLabelsForProject(e,t={}){let{namespace:i,project:r}=e;return{data:(await this.config.request({url:`${t.baseUrl||K}/${encodeURIComponent(i)}/${encodeURIComponent(r||"")}/_apis/wit/tags?api-version=6.0`,headers:{...j(this.config,t)}})).body.value.map(e=>({color:null,description:null,id:e.id,name:e.name,url:e.url}))}}},en=(e,t={})=>G(t.token||e.token,t.isPAT||e.isPAT),eo="https://api.bitbucket.org/2.0",ea={OPEN:"OPEN",MERGED:"MERGED",DECLINED:"CLOSED"},el=e=>({id:e.uuid,name:e.display_name||e.nickname,username:e.nickname||e.display_name,email:null,avatarUrl:e.links.avatar.href,url:e.links.html.href}),eh=e=>{var t,i;return{id:e.uuid,namespace:e.workspace.slug,name:e.slug,webUrl:e.links.html.href,httpsUrl:(null==(t=e.links.clone.find(e=>"https"===e.name))?void 0:t.href)??null,sshUrl:(null==(i=e.links.clone.find(e=>"ssh"===e.name))?void 0:i.href)??null,defaultBranch:{name:e.mainbranch.name},permission:null}},ec=e=>{let t=e.id;return{id:t.toString(),title:e.title,number:t,state:ea[e.state],isDraft:!1,commentCount:e.comment_count,upvoteCount:null,author:el(e.author),createdDate:new Date(e.created_on),updatedDate:new Date(e.updated_on),closedDate:null,mergedDate:null,repository:{id:e.destination.repository.uuid,name:e.destination.repository.name,owner:{login:e.destination.repository.full_name.split("/")[0]},remoteInfo:null},headCommit:{buildStatuses:null},baseRef:{name:e.destination.branch.name,oid:e.destination.commit.hash},headRef:{name:e.source.branch.name,oid:e.source.commit.hash},url:e.links.html.href,assignees:null,reviews:null,reviewDecision:null,additions:null,deletions:null,fileCount:null,commitCount:null,headRepository:null,mergeableState:"UNKNOWN",permissions:null}},eu=class extends N{async refreshToken(e){return{data:(await this.config.request({url:"https://bitbucket.org/site/oauth2/access_token",method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded",Authorization:`Basic ${e.base64ClientIDColonClientSecret}`},body:`grant_type=refresh_token&refresh_token=${e.refreshToken}`})).body}}async getCurrentUser(e={},t={}){return{data:el((await this.config.request({url:`${eo}/user`,headers:en(this.config,t)})).body)}}async getUserForCommit(e,t={}){var i;let r=(await this.config.request({url:`${eo}/repositories/${e.repo.namespace}/${e.repo.name}/commit/${e.oid}`,headers:en(this.config,t)})).body.author,s=r.raw.match(/([^<]+)<(.+)>/);return{data:{name:s?s[1].trim():null,email:s?s[2]:null,avatarUrl:(null==(i=r.user)?void 0:i.links.avatar.href)||null}}}async getRepo(e,t={}){return{data:eh((await this.config.request({url:`${eo}/repositories/${e.namespace}/${e.name}`,headers:en(this.config,t)})).body)}}async getRepos(e,t={}){let i=[],r=[];return await Promise.all(e.map(async e=>{try{let r=await this.getRepo(e,t);i.push(r.data)}catch(t){r.push({input:e,error:t})}})),{data:i,errors:r}}async getReposForCurrentUser(e,t={}){let i=new URL(`${eo}/repositories`);i.searchParams.set("role","member"),i.searchParams.set("pagelen","100"),e.cursor&&i.searchParams.set("after",e.cursor);let r=await this.config.request({url:i.toString(),headers:en(this.config,t)}),s=!!r.body.next,n=null;return r.body.next&&(n=new URL(r.body.next).searchParams.get("after")),{pageInfo:{hasNextPage:s,endCursor:n},data:r.body.values.map(eh)}}async getBranches(e,t={}){var i;let r=new URL(`${eo}/repositories/${e.repo.namespace}/${e.repo.name}/refs/branches`);r.searchParams.set("page",(null==(i=e.page)?void 0:i.toString())||"1"),r.searchParams.set("pagelen","100");let s=await this.config.request({url:r.toString(),headers:en(this.config,t)}),n=!!s.body.next;return{pageInfo:{hasNextPage:n,nextPage:n?s.body.page+1:null},data:s.body.values.map(e=>{let t=new Date(e.target.date);return{name:e.name,commit:{oid:e.target.hash,authoredDate:t,committedDate:t}}})}}async getTags(e,t={}){let i=new URL(`${eo}/repositories/${e.repo.namespace}/${e.repo.name}/refs/tags`);i.searchParams.set("pagelen","100"),e.cursor&&i.searchParams.set("page",e.cursor);let r=await this.config.request({url:i.toString(),headers:en(this.config,t)}),s=!!r.body.next,n=null;return r.body.next&&(n=new URL(r.body.next).searchParams.get("page")),{pageInfo:{hasNextPage:s,endCursor:n},data:r.body.values.map(e=>{let t=new Date(e.target.date);return{name:e.name,commit:{oid:e.target.hash,authoredDate:t,committedDate:t}}})}}async getPullRequestsForUser(e,t={}){var i;let r=new URL(`${eo}/pullrequests/${e.userId}`);r.searchParams.set("page",(null==(i=e.page)?void 0:i.toString())||"1"),r.searchParams.set("pagelen","50");let s=await this.config.request({url:r.toString(),headers:en(this.config,t)}),n=!!s.body.next;return{pageInfo:{hasNextPage:n,nextPage:n?s.body.page+1:null},data:s.body.values.map(ec)}}async getPullRequestsForRepoBase(e,t={}){var i;let r=new URL(`${eo}/repositories/${encodeURI(e.repo.namespace)}/${encodeURI(e.repo.name)}/pullrequests?state=OPEN`);return r.searchParams.set("page",(null==(i=e.page)?void 0:i.toString())||"1"),r.searchParams.set("pagelen","50"),await this.config.request({url:r.toString(),headers:en(this.config,t)})}async getPullRequestsForRepo(e,t={}){let i=[],r=await this.getPullRequestsForRepoBase(e,t);r.body.values.forEach(t=>{if(e.authorLogin&&t.author.uuid!==e.authorLogin)return null;i.push(ec(t))});let s=!!r.body.next;return{pageInfo:{hasNextPage:s,nextPage:s?r.body.page+1:null},data:i}}async getPullRequestsForRepos(e,t={}){let i=[];return await Promise.all(e.repos.map(async r=>{try{(await this.getPullRequestsForRepoBase({repo:r,...e},t)).body.values.forEach(t=>{if(e.authorLogin&&t.author.uuid!==e.authorLogin)return null;i.push(ec(t))})}catch(e){if(404!==e.statusCode&&401!==e.statusCode)throw e}})),{data:i}}async closePullRequest(e,t={}){let{pullRequest:i}=e;if(!(await this.config.request({method:"POST",url:`${eo}/repositories/${i.repository.owner.login}/${i.repository.name}/pullrequests/${i.id}/decline`,headers:en(this.config,t)})).body.title)throw Error("Could not close pull request")}async mergePullRequest(e,t={}){let{pullRequest:i,mergeStrategy:r}=e,s;switch(r){case"MERGE_COMMIT":s="merge_commit";break;case"FAST_FORWARD":s="fast_forward";break;case"SQUASH":s="squash"}let n={merge_strategy:s,type:"pullrequest"};if(!(await this.config.request({method:"POST",url:`${eo}/repositories/${i.repository.owner.login}/${i.repository.name}/pullrequests/${i.id}/merge`,body:JSON.stringify(n),headers:{...en(this.config,t),"Content-Type":"application/json"}})).body.title)throw Error("Could not merge pull request")}async setPullRequestReviewers(e,t={}){let{pullRequest:i,reviewers:r}=e,s={reviewers:r.map(e=>{if(e.username)throw Error('Bitbucket reviewer requires "username" for this function.');return{username:e.username}})};if(!(await this.config.request({method:"PUT",url:`${eo}/repositories/${i.repository.owner.login}/${i.repository.name}/pullrequests/${i.id}`,body:JSON.stringify(s),headers:{...en(this.config,t),"Content-Type":"application/json"}})).body.title)throw Error("Could not set pull request reviewers")}},ed=e=>({name:e.displayName,email:e.emailAddress,avatarUrl:e.avatarUrl??null,id:e.id.toString(),username:e.name,url:e.links.self[0].href}),ep=e=>{var t,i,r,s,n,o;let a={UNAPPROVED:"REVIEW_REQUESTED",NEEDS_WORK:"CHANGES_REQUESTED",APPROVED:"APPROVED"},l=e.reviewers.map(e=>({reviewer:ed(e.user),state:a[e.status]})),h=(null==(t=e.toRef.repository.links.clone.find(e=>"ssh"===e.name))?void 0:t.href)??null,c=(null==(i=e.toRef.repository.links.clone.find(e=>"https"===e.name))?void 0:i.href)??null;c||(c=(null==(r=e.toRef.repository.links.clone.find(e=>"http"===e.name))?void 0:r.href)??null);let u=(null==(s=e.fromRef.repository.links.clone.find(e=>"ssh"===e.name))?void 0:s.href)??null,d=(null==(n=e.fromRef.repository.links.clone.find(e=>"https"===e.name))?void 0:n.href)??null;return d||(d=(null==(o=e.fromRef.repository.links.clone.find(e=>"http"===e.name))?void 0:o.href)??null),{id:e.id.toString(),number:e.id,title:e.title,url:e.links.self[0].href,state:({OPEN:"OPEN",MERGED:"MERGED",DECLINED:"CLOSED"})[e.state],isDraft:!1,createdDate:new Date(e.createdDate),updatedDate:new Date(e.updatedDate),closedDate:e.closedDate?new Date(e.closedDate):null,mergedDate:"MERGED"==e.state&&e.closedDate?new Date(e.closedDate):null,baseRef:{name:e.toRef.displayId,oid:e.toRef.latestCommit},headRef:{name:e.fromRef.displayId,oid:e.fromRef.latestCommit},commentCount:e.properties.commentCount,upvoteCount:null,commitCount:null,fileCount:null,additions:null,deletions:null,author:ed(e.author.user),assignees:null,reviews:l,reviewDecision:B(l),repository:{id:e.toRef.repository.id.toString(),name:e.toRef.repository.name,owner:{login:e.toRef.repository.project.key},remoteInfo:c&&h?{cloneUrlHTTPS:c,cloneUrlSSH:h}:null},headRepository:{id:e.fromRef.repository.id.toString(),name:e.fromRef.repository.name,owner:{login:e.fromRef.repository.project.key},remoteInfo:d&&u?{cloneUrlHTTPS:d,cloneUrlSSH:u}:null},headCommit:null,mergeableState:"UNKNOWN",permissions:null,version:e.version}},eg=e=>{var t,i,r;return{id:e.id.toString(),namespace:e.project.key,name:e.slug,webUrl:(null==(t=e.links.self[0])?void 0:t.href)??null,httpsUrl:(null==(i=e.links.clone.find(e=>"https"===e.name))?void 0:i.href)??null,sshUrl:(null==(r=e.links.clone.find(e=>"ssh"===e.name))?void 0:r.href)??null,defaultBranch:null,permission:null}},em=class extends H{getBaseUrl(e){let t=e.baseUrl||this.config.baseUrl;if(!t)throw Error('Bitbucket Server requires "baseUrl"');return t}getRequestHeaders(e){return G(e.token||this.config.token)}async getCurrentUser(e={},t={}){let{headers:{"x-auserid":i,"x-ausername":r}}=await this.config.request({url:`${this.getBaseUrl(t)}/users?limit=2`,headers:this.getRequestHeaders(t)}),s=i?parseInt(i,10):null,n=decodeURIComponent(r),o=(await this.config.request({url:`${this.getBaseUrl(t)}/users?filter=${r}&avatarSize=64`,headers:this.getRequestHeaders(t)})).body.values.find(({emailAddress:e,id:t,name:i,slug:r})=>s?s===t:n===i||n===e||n===r);if(!o)throw Error("Could not find current Bitbucket Server user");return{data:ed(o)}}async getRepo(e,t={}){return{data:eg((await this.config.request({url:`${this.getBaseUrl(t)}/projects/${e.namespace}/repos/${e.name}`,headers:this.getRequestHeaders(t)})).body)}}async getRepos(e,t={}){let i=[],r=[];return await Promise.all(e.map(async e=>{try{let r=await this.getRepo(e,t);i.push(r.data)}catch(t){r.push({input:e,error:t})}})),{data:i,errors:r}}async getReposForCurrentUser(e,t={}){let i=e.page??0,r=await this.config.request({url:`${this.getBaseUrl(t)}/repos?start=${i}`,headers:this.getRequestHeaders(t)});return{pageInfo:{hasNextPage:!r.body.isLastPage,nextPage:r.body.nextPageStart},data:r.body.values.map(eg)}}async getPullRequestsForRepoBase(e,t={}){var i;let r=new URL(`${this.getBaseUrl(t)}/projects/${encodeURI(e.repo.namespace)}/repos/${encodeURI(e.repo.name)}/pull-requests?state=OPEN`);return r.searchParams.set("start",(null==(i=e.page)?void 0:i.toString())||"0"),r.searchParams.set("limit","50"),await this.config.request({url:r.toString(),headers:this.getRequestHeaders(t)})}async getPullRequestsForRepo(e,t={}){let i=[],r=await this.getPullRequestsForRepoBase(e,t);r.body.values.forEach(t=>{if(e.authorLogin&&t.author.user.name!==e.authorLogin)return null;i.push(ep(t))});let s=0!==r.body.values.length;return{pageInfo:{hasNextPage:s,nextPage:s?r.body.start+r.body.values.length:null},data:i}}async getPullRequestsForRepos(e,t={}){let i=[];return await Promise.all(e.repos.map(async r=>{try{(await this.getPullRequestsForRepoBase({repo:r,...e},t)).body.values.forEach(t=>{if(e.authorLogin&&t.author.user.name!==e.authorLogin)return null;i.push(ep(t))})}catch(e){if(404!==e.statusCode&&401!==e.statusCode)throw e}})),{data:i}}async getPullRequestsForCurrentUser(e,t={}){var i;let r=new URL(`${this.getBaseUrl(t)}/dashboard/pull-requests`);r.searchParams.set("state","OPEN"),r.searchParams.set("start",(null==(i=e.page)?void 0:i.toString())||"0"),r.searchParams.set("limit","50");let s=await this.config.request({url:r.toString(),headers:this.getRequestHeaders(t)}),n=0!==s.body.values.length;return{pageInfo:{hasNextPage:n,nextPage:n?s.body.start+s.body.values.length:null},data:s.body.values.map(ep)}}async closePullRequest(e,t={}){let{pullRequest:i}=e;if(void 0===i.version)throw Error('Bitbucket Server requires "version" for this function.');if(!(await this.config.request({method:"POST",url:`${this.getBaseUrl(t)}/projects/${i.repository.owner.login}/repos/${i.repository.name}/pull-requests/${i.id}/decline`,body:JSON.stringify({version:i.version}),headers:{...this.getRequestHeaders(t),"Content-Type":"application/json"}})).body.title)throw Error("Could not close pull request")}async mergePullRequest(e,t={}){let{pullRequest:i,mergeStrategyId:r}=e;if(e.mergeStrategy)throw Error('Bitbucket Server uses "mergeStrategyId" instead of "mergeStrategy".');if(void 0===i.version)throw Error('Bitbucket Server requires "version" for this function.');if(!(await this.config.request({method:"POST",url:`${this.getBaseUrl(t)}/projects/${i.repository.owner.login}/repos/${i.repository.name}/pull-requests/${i.id}/merge`,body:JSON.stringify({strategyId:r,version:i.version}),headers:{...this.getRequestHeaders(t),"Content-Type":"application/json"}})).body.title)throw Error("Could not merge pull request")}async getMergeStrategies(e={}){let t=await this.config.request({url:`${this.getBaseUrl(e)}/admin/pull-requests/git`,headers:{...this.getRequestHeaders(e),"Content-Type":"application/json"}});return{data:{defaultStrategy:t.body.mergeConfig.defaultStrategy,strategies:t.body.mergeConfig.strategies}}}async setPullRequestReviewers(e,t={}){let{pullRequest:i,reviewers:r}=e;if(void 0===i.version)throw Error('Bitbucket Server requires "version" for this function.');let s={reviewers:r.map(e=>{if(e.username)throw Error('Bitbucket Server reviewer requires "username" for this function.');return{user:{name:e.username}}}),version:i.version};if(!(await this.config.request({method:"PUT",url:`${this.getBaseUrl(t)}/projects/${i.repository.owner.login}/repos/${i.repository.name}/pull-requests/${i.id}`,body:JSON.stringify(s),headers:{...this.getRequestHeaders(t),"Content-Type":"application/json"}})).body.title)throw Error("Could not set pull request reviewers")}},ef=i(8127),ew=((p=ew||{}).Open="OPEN",p.Closed="CLOSED",p),ev={AS_CODE_OWNER:[3,0,0],CHECK_RUN:[3,0,0],LATEST_REVIEWS:[3,0,0],VIEWER_CAN_MERGE_AS_ADMIN:[3,5,0]},ey=(e,t)=>{let i=ev[t];for(let t=0;t<3&&!(e[t]>i[t]);t++)if(e[t]<i[t])return!1;return!0},eb="https://api.github.com",eC=`${eb}/graphql`,eR=`
description
dueOn
id
number
state
title
url
`,eS=`
... on CheckRun {
  completedAt
  conclusion
  name
  status
  permalink
  startedAt
}
`,eP=/\/api\/v\d+$/,eA=`
color
description
id
name
`,ek=e=>{if(e.endsWith("/api/graphql"))throw Error("The graphql endpoint is being used as the baseUrl. This package uses both GraphQL and REST APIs, and the REST version cannot be assumed. Use the REST endpoint as the baseUrl instead.")},eD=(e,t)=>{let i=t.baseUrl||e.baseUrl;return i?(ek(i=i.replace(/\/$/,"")),eP.test(i)&&(i=i.replace(eP,"")),`${i}/api/graphql`):eC},eT=(e,t)=>{let i=t.baseUrl||e.baseUrl;return i?(ek(i=i.replace(/\/$/,"")),eP.test(i)&&(i=i.replace(eP,"")),`${i}/api/v3`):eb},e_=(e,t,i)=>{let r=G(i.token||e.token);return r["X-Github-Next-Global-ID"]="1",r["Content-Type"]="application/json",r.Accept="application/vnd.github.merge-info-preview+json",e.request({url:eD(e,i),method:"POST",headers:r,body:JSON.stringify(t)})},eI={user:!0,"user:email":!0,"read:user":!0},e$=e=>e.some(e=>eI[e]),eE=(e=!1,t=!1,i)=>`
__typename
${Q(i,["graphQLId"],"id")}
${Q(i,["id"],"databaseId")}
${Q(i,["name"],"name")}
${Q(i,["name","username"],"login")}
${t?Q(i,["email"],"email"):""}
${Q(i,["avatarUrl"],`avatarUrl${e?"(size: $avatarSize)":""}`)}
${Q(i,["url"],"url")}
`,eO=(e=!1)=>`
latestReviews(first: 100) {
  nodes {
    author {
      ... on User {
        ${eE(!1,e)}
      }
    }
    state
  }
}
`,ex=(e=!1)=>`
__typename
id
databaseId
login
avatarUrl${e?"(size: $avatarSize)":""}
url
`,eF=(e,t=!1,i)=>`
id
databaseId
number
title
state
author {
  ... on User {
    ${eE(!1,t)}
  }
  ... on Bot {
    ${ex(!1)}
  }
}
commits(last: 1) {
  totalCount
  nodes {
    commit {
      ... on Commit {
        oid
        statusCheckRollup {
          contexts(first: 100) {
            totalCount
nodes {
  ${!i||ey(i,"CHECK_RUN")?eS:""}
  ... on StatusContext {
    context
    createdAt
    description
    state
    targetUrl
  }
}
          }
        }
      }
    }
  }
}
baseRef {
  name
  target {
    oid
  }
}
headRef {
  name
  target {
    oid
  }
}
repository {
  id
  databaseId
  name
  owner {
    login
  }
  url
  sshUrl
  viewerPermission
}
headRepository {
  id
  databaseId
  name
  owner {
    login
  }
  url
  sshUrl
}
${e?"isDraft":""}
url
createdAt
comments {
  totalCount
}
reactions(content: THUMBS_UP) {
  totalCount
}
updatedAt
closedAt
mergedAt
assignees(first: 100) {
  nodes {
    ${eE(!1,t)}
  }
}
reviewRequests(first: 100) {
  nodes {
    ${!i||ey(i,"AS_CODE_OWNER")?"asCodeOwner":""}
    requestedReviewer {
      ... on User {
        ${eE(!1,t)}
      }
    }
  }
}
${!i||ey(i,"LATEST_REVIEWS")?eO(t):""}
additions
deletions
changedFiles
mergeable
mergeStateStatus
milestone {
  ${eR}
}
labels(first: 100) {
  nodes {
    ${eA}
  }
}
${!i||ey(i,"VIEWER_CAN_MERGE_AS_ADMIN")?"viewerCanMergeAsAdmin":""} 
`,eB=(e=!1)=>`
id
databaseId
title
author {
  ... on User {
    ${eE(!1,e)}
  }
  ... on Bot {
    ${ex(!1)}
  }
}
closedAt
createdAt
number
updatedAt
url
reactions(content: THUMBS_UP) {
  totalCount
}
repository {
  databaseId
  id
  name
  owner {
    login
  }
}
comments {
  totalCount
}
assignees(first: 100) {
  nodes {
    ${eE(!1,e)}
  }
}
state
milestone {
  ${eR}
}
labels(first: 100) {
  nodes {
    ${eA}
  }
}
`,eL={"-linked":"-linked",archived:"archived",assignee:"assignee",author:"author",base:"base",closed:"closed",commenter:"commenter",comments:"comments",created:"created",draft:"draft",head:"head",label:"label",language:"language",linked:"linked",in:"in",interactions:"interactions",involves:"involves",is:"is",mentions:"mentions",merged:"merged",milestone:"milestone",no:"no",org:"org",project:"project",reactions:"reactions",repo:"repo",review:"review","reviewed-by":"reviewed-by","review-requested":"review-requested",state:"state",status:"status",team:"team","team-review-requested":"team-review-requested",type:"type",updated:"updated",user:"user","user-review-requested":"user-review-requested"},eU=RegExp('(([^\\s]+:)?\\"(?:[^\\"\\\\]|\\\\.)*\\"?)|([^\\"\\s]+)',"g"),eW=e=>{let t=[];return(e.match(eU)??[]).forEach(e=>{e.includes(":")&&"is:closed"!=e&&eL[e.split(":")[0]]&&t.push(e)}),t},eq=(e,t,i,r,s=!1,n=null)=>{let o="issue"===e;return{query:`
query SearchIssuesOrPullRequests($query: String! $after: String) {
  search(type:ISSUE query:$query first:100 after:$after) {
    pageInfo {
      hasNextPage
      endCursor
    }
    nodes {
      ... on ${o?"Issue":"PullRequest"} {
        ${o?eB(r):eF(s,r,n)}
      }
    }
  }
}`,variables:{query:`is:${e} is:open ${t}`,after:i}}},eM=(e=[])=>e.some(e=>(null==e?void 0:e.message)==="Field 'isDraft' doesn't exist on type 'PullRequest'"),eN=/@@ -(\d+)(?:,\d+ | )\+(\d+)(?:,\d+ | )@@(?:\\n)?/,eH=`
\\ No newline at end of file
+`,eG=(e,t,i,r)=>{let s=eN.exec(e);if(!s||!s[0]||!s[1])return[];let n=parseInt(s[1],10),o=parseInt(s[2],10),a=e.replace(eH,`
+`).split(`
`).slice(1),l=n-1,h=o-1,c=a.map(e=>{let t,i;switch(e[0]){case"-":t="DELETED",l+=1,i=`${e.slice(1)}
`;break;case"+":t="ADDED",h+=1,i=`${e.slice(1)}
`;break;default:t="UNMODIFIED",h+=1,l+=1,i=`${e}
`}return{line:i,oldLineNumber:"ADDED"!==t?l:null,newLineNumber:"DELETED"!==t?h:null,type:t}});if(null!==i&&null!==t&&null!==r&&i<t){let e=0,s=c.length,n="LEFT"===r?"oldLineNumber":"newLineNumber";for(let r=0;r<c.length;r++){let o=c[r][n];o===i?e=r:o===t&&(s=r)}c=c.slice(e,s+1)}return c},eV=`
id
databaseId
owner {
  login
}
name
url
sshUrl
defaultBranchRef {
  name
}
viewerPermission
`,eQ={__typename:"User",id:"U_kgDNJ5k",databaseId:10137,name:"Deleted user",login:"ghost",email:"",avatarUrl:"https://avatars.githubusercontent.com/u/10137?v=4",url:"https://github.com/ghost"},ej={APPROVED:"APPROVED",CHANGES_REQUESTED:"CHANGES_REQUESTED",COMMENTED:"COMMENTED",REVIEW_REQUESTED:"REVIEW_REQUESTED"},ez={MERGEABLE:"MERGEABLE",CONFLICTING:"CONFLICTS",UNKNOWN:"UNKNOWN"},eY={BEHIND:"BEHIND",BLOCKED:"BLOCKED",UNKNOWN:"UNKNOWN_AND_BLOCKED",UNSTABLE:"UNSTABLE",CLEAN:null,DIRTY:null,DRAFT:null,HAS_HOOKS:null},eK={OPEN:"OPEN",CLOSED:"CLOSED"},eJ=["ADMIN","MAINTAIN","TRIAGE","WRITE"],eZ=e=>({color:e.color,description:e.description,graphQLId:e.id,id:null,name:e.name}),eX=e=>({id:e.databaseId.toString(),graphQLId:e.id,namespace:e.owner.login,name:e.name,webUrl:e.url,httpsUrl:e.url.endsWith(".git")?e.url:`${e.url}.git`,sshUrl:e.sshUrl,defaultBranch:e.defaultBranchRef,permission:e.viewerPermission}),e0={OPEN:"OPEN",CLOSED:"CLOSED",MERGED:"MERGED"},e1={id:!0,graphQLId:!0,name:!0,username:!0,email:!0,avatarUrl:!0,url:!0},e2=(e,t=e1)=>{let i={};return t.id&&(i.id=e.databaseId.toString()),t.graphQLId&&(i.graphQLId=e.id),t.name&&(i.name=e.name??e.login),t.username&&(i.username=e.login),t.email&&(i.email=e.email??null),t.avatarUrl&&(i.avatarUrl=e.avatarUrl),t.url&&(i.url=e.url),i},e3=(e,t)=>"COMPLETED"!==e?({IN_PROGRESS:"RUNNING",PENDING:"PENDING",QUEUED:"PENDING",REQUESTED:"PENDING",WAITING:"PENDING"})[e]:({ACTION_REQUIRED:"ACTION_REQUIRED",CANCELLED:"CANCELLED",FAILURE:"FAILED",NEUTRAL:null,SKIPPED:"SKIPPED",STALE:"FAILED",STARTUP_FAILURE:"FAILED",SUCCESS:"SUCCESS",TIMED_OUT:"ERROR"})[t],e4=e=>({ERROR:"ERROR",EXPECTED:"PENDING",FAILURE:"FAILED",PENDING:"PENDING",SUCCESS:"SUCCESS"})[e],e8=e=>{var t,i,r,s,n,o,a,l,h,c,u;let d=null;e.author?(e.author.__typename,d=e.author):d=eQ;let p=((null==(t=e.reviewRequests)?void 0:t.nodes)||[]).filter(e=>!e.asCodeOwner),g=null==(i=e.headRepository)?void 0:i.url;g&&!g.endsWith(".git")&&(g=`${g}.git`);let m=null==(r=e.repository)?void 0:r.url;m&&!m.endsWith(".git")&&(m=`${m}.git`);let f=p.filter(e=>e.requestedReviewer&&"__typename"in e.requestedReviewer).map(e=>({reviewer:e2(e.requestedReviewer),state:"REVIEW_REQUESTED"})).concat(((null==(s=e.latestReviews)?void 0:s.nodes)||[]).map(e=>{let t=eQ;return e.author&&Object.keys(e.author).length>0&&(t=e.author),{reviewer:e2(t),state:ej[e.state]}}));return{id:e.databaseId.toString(),graphQLId:e.id,title:e.title,number:e.number,state:e0[e.state],commentCount:e.comments.totalCount,upvoteCount:e.reactions.totalCount,author:d?e2(d):null,createdDate:new Date(e.createdAt),isDraft:e.isDraft,repository:{id:e.repository.databaseId,graphQLId:e.repository.id,name:e.repository.name,owner:{login:e.repository.owner.login},remoteInfo:{cloneUrlHTTPS:m,cloneUrlSSH:e.repository.sshUrl}},headRepository:e.headRepository?{id:e.headRepository.databaseId,graphQLId:e.headRepository.id,name:e.headRepository.name,owner:{login:e.headRepository.owner.login},remoteInfo:{cloneUrlHTTPS:g,cloneUrlSSH:e.headRepository.sshUrl}}:null,headCommit:{buildStatuses:(null==(a=null==(o=null==(n=e.commits.nodes)?void 0:n[0].commit.statusCheckRollup)?void 0:o.contexts.nodes)?void 0:a.map(e=>"context"in e?{completedAt:null,description:e.description,name:e.context,state:e4(e.state),startedAt:new Date(e.createdAt),stage:null,url:e.targetUrl}:{completedAt:e.completedAt?new Date(e.completedAt):null,description:null,name:e.name,state:e3(e.status,e.conclusion),startedAt:e.startedAt?new Date(e.startedAt):null,stage:null,url:e.permalink}))??[]},headRef:e.headRef?{name:e.headRef.name,oid:(null==(l=e.headRef.target)?void 0:l.oid)??null}:null,baseRef:e.baseRef?{name:e.baseRef.name,oid:(null==(h=e.baseRef.target)?void 0:h.oid)??null}:null,url:e.url,updatedDate:new Date(e.updatedAt),closedDate:e.closedAt?new Date(e.closedAt):null,mergedDate:e.mergedAt?new Date(e.mergedAt):null,assignees:e.assignees.nodes?e.assignees.nodes.map(e=>e2(e)):null,reviews:f,reviewDecision:B(f),additions:e.additions,deletions:e.deletions,fileCount:e.changedFiles,commitCount:e.commits.totalCount,mergeableState:eY[e.mergeStateStatus]??ez[e.mergeable],milestone:e.milestone?e6(e.milestone):null,labels:(null==(u=null==(c=e.labels)?void 0:c.nodes)?void 0:u.map(eZ))??[],permissions:{canMerge:eJ.includes(e.repository.viewerPermission),canMergeAndBypassProtections:e.viewerCanMergeAsAdmin??!1}}},e5=e=>{let{comments:t,isOutdated:i,isResolved:r,originalLine:s,originalStartLine:n,startDiffSide:o}=e,{author:a,body:l,databaseId:h,id:c,path:u,publishedAt:d,url:p}=t.nodes[0];return{author:a?{avatarUrl:a.avatarUrl,email:null,name:a.login}:null,body:l,createdAt:d?new Date(d):null,diffLines:eG(t.nodes[0].diffHunk,s,n,o),id:h,isOutdated:i,isResolved:r,graphQLId:c,filename:u,replies:t.nodes.slice(1).map(e7),url:p}},e7=e=>({author:e.author?{avatarUrl:e.author.avatarUrl,email:null,name:e.author.login}:null,body:e.body,createdAt:e.publishedAt?new Date(e.publishedAt):null,graphQLId:e.id,id:e.databaseId,url:e.url}),e9=e=>{var t,i;let r=null;return e.author?(e.author.__typename,r=e.author):r=eQ,{id:e.databaseId.toString(),graphQLId:e.id,number:e.number,title:e.title,author:e2(r),commentCount:e.comments.totalCount,closedDate:e.closedAt?new Date(e.closedAt):null,createdDate:new Date(e.createdAt),description:null,state:{name:eK[e.state],color:null},type:null,repository:{id:e.repository.databaseId,graphQLId:e.repository.id,name:e.repository.name,owner:{login:e.repository.owner.login}},url:e.url,updatedDate:new Date(e.updatedAt),assignees:e.assignees.nodes?e.assignees.nodes.map(e=>e2(e)):[],upvoteCount:e.reactions.totalCount,milestone:e.milestone?e6(e.milestone):null,labels:(null==(i=null==(t=e.labels)?void 0:t.nodes)?void 0:i.map(eZ))??[]}},e6=e=>({id:e.number.toString(),graphQLId:e.id.toString(),number:e.number,title:e.title,description:e.description,isOpen:"OPEN"==e.state,url:e.url,startDate:null,dueDate:e.dueOn?new Date(e.dueOn):null}),te=class extends H{constructor(){super(...arguments),this._scopesCache={},this._enterpriseVersionsCache={}}async getScopes(e){let t=e.token||this.config.token;if(!t)return[];let i=this._scopesCache[t];if(!i){let r=(await e_(this.config,{query:"query { rateLimit(dryRun: true) { __typename } }"},e)).headers["x-oauth-scopes"];i=r?r.split(", "):[],this._scopesCache[t]=i}return i}async getEnterpriseVersion(e){let t=e.baseUrl||this.config.baseUrl;if(!t)return null;let i=this._enterpriseVersionsCache[t];if(!i){let r=await this.config.request({url:`${eT(this.config,e)}/meta`,headers:G(e.token||this.config.token)});if(!r.body.installed_version)return null;i=r.body.installed_version.split(".").slice(0,3).map(e=>parseInt(e,10)),this._enterpriseVersionsCache[t]=i}return i}getEnterpriseAvatarUrlIfNeeded(e,t,i){let r=i.baseUrl||this.config.baseUrl;return!r||r.startsWith(eb)?e:t?`https://avatars.githubusercontent.com/u/e?email=${encodeURIComponent(t)}`:""}async getCurrentUser(e={},t={}){var i;if(e.fields&&!e.fields.length)throw Error('"fields" must contain at least one field or be omitted');let r=V(e.fields),s=await this.getScopes(t),n=null==(i=(await e_(this.config,{query:`
query getCurrentUser {
  viewer {
    ${eE(!1,e$(s),r)}
  }
}
`},t)).body.data)?void 0:i.viewer;if(!n)throw Error("Current user not found.");return{data:e2(n,r)}}async getAccountsForRepo(e,t={}){var i,r,s,n,o,a;let l=await this.getScopes(t),{repo:{namespace:h,name:c},cursor:u}=e,d=await e_(this.config,{query:`
query getAccountsForRepo($owner: String!, $name: String! $cursor: String, $first: Int!) {
  repository(owner: $owner, name: $name) {
    assignableUsers(first: $first, after: $cursor) {
      nodes {
        ${eE(!1,e$(l))}
      }
      pageInfo {
        endCursor
        hasNextPage
      }
    }
  }
}
`,variables:{owner:h,name:c,cursor:u,first:100}},t);if(!d.body.data)throw Error((null==(i=d.body.errors)?void 0:i[0].message)||d.statusText||"Unknown error");return{pageInfo:(null==(s=null==(r=d.body.data.repository)?void 0:r.assignableUsers)?void 0:s.pageInfo)??{endCursor:null,hasNextPage:!1},data:(null==(a=null==(o=null==(n=d.body.data.repository)?void 0:n.assignableUsers)?void 0:o.nodes)?void 0:a.map(e=>e2(e)))??[]}}async getUserForCommit(e,t={}){var i,r;let s=null==(i=(await e_(this.config,{query:`
query getUserForCommit(
  $owner: String!
  $name: String!
  $oid: GitObjectID!
  $avatarSize: Int
) {
  repository(owner: $owner, name: $name) {
    object(oid: $oid) {
      ... on Commit {
        author {
          name
          email
          avatarUrl(size: $avatarSize)
        }
      }
    }
  }
}
`,variables:{owner:e.repo.namespace,name:e.repo.name,oid:e.oid,avatarSize:e.avatarSize}},t)).body.data)?void 0:i.repository;if(!s)throw Error("Repository not found.");let n=null==(r=s.object)?void 0:r.author;if(!n)throw Error("Commit not found.");return{data:{name:n.name,email:n.email,avatarUrl:this.getEnterpriseAvatarUrlIfNeeded(n.avatarUrl,n.email,t)}}}async createCommit(e,t={}){var i;let{commitMessage:r,deletedFiles:s,newOrModifiedFiles:n,repo:o,target:a}=e,l=await e_(this.config,{query:`
mutation createCommitOnBranch(
  $branchName: String!,
  $expectedHeadOid: GitObjectID!,
  $fileChanges: FileChanges!,
  $message: CommitMessage!,
  $repositoryNameWithOwner: String!,
) {
  createCommitOnBranch(input: {
    branch: {
      branchName: $branchName,
      repositoryNameWithOwner: $repositoryNameWithOwner,
    },
    expectedHeadOid: $expectedHeadOid,
    fileChanges: $fileChanges,
    message: $message
  }) {
    commit {
      authoredDate
      committedDate
      oid
    }
    ref {
      name
    }
  }
}
`,variables:{branchName:a.name,expectedHeadOid:a.oid,fileChanges:{additions:Object.entries(n).map(([e,t])=>({contents:ef.Base64.encode(t),path:e})),deletions:s.map(e=>({path:e}))},message:{body:r.description,headline:r.summary},repositoryNameWithOwner:`${o.namespace}/${o.name}`}},t);if(null!=(i=l.body.errors)&&i[0])throw Error(l.body.errors[0].message);if(!l.body.data)throw Error("Could not create commit");return{data:{name:l.body.data.createCommitOnBranch.ref.name,commit:{authoredDate:new Date(l.body.data.createCommitOnBranch.commit.authoredDate),committedDate:new Date(l.body.data.createCommitOnBranch.commit.committedDate),oid:l.body.data.createCommitOnBranch.commit.oid}}}}async getAccountForEmail(e,t={}){var i,r,s;let n=await this.getScopes(t),o=null==(s=null==(r=null==(i=(await e_(this.config,{query:`
query getAccountForEmail($query: String! $avatarSize: Int) {
  search(query: $query, type: USER, first: 1) {
    nodes {
      ... on User {
        ${eE(!0,e$(n))}
      }
    }
  }
}
`,variables:{query:`in:email ${e.email}`,avatarSize:e.avatarSize}},t)).body.data)?void 0:i.search)?void 0:r.nodes)?void 0:s[0];if(!o)throw Error("User not found.");return{data:e2({...o,avatarUrl:this.getEnterpriseAvatarUrlIfNeeded(o.avatarUrl,o.email,t)})}}async getAccountForUsername(e,t={}){var i;let r=await this.getScopes(t),s=null==(i=(await e_(this.config,{query:`
query getUserForUsername($login: String! $avatarSize: Int) {
  user(login: $login) {
    ${eE(!0,e$(r))}
  }
}
`,variables:{login:e.username,avatarSize:e.avatarSize}},t)).body.data)?void 0:i.user;if(!s)throw Error("User not found.");return{data:e2({...s,avatarUrl:this.getEnterpriseAvatarUrlIfNeeded(s.avatarUrl,s.email,t)})}}async getOrgsForCurrentUser(e={},t={}){var i,r;let s=await e_(this.config,{query:`
query getOrgsForCurrentUser($cursor: String, $first: Int!) {
  viewer {
    organizations(first: $first after: $cursor) {
      pageInfo {
        endCursor
        hasNextPage
      }
      nodes {
        id
        databaseId
        name
        login
        email
        avatarUrl
      }
    }
  }
}
`,variables:{cursor:e.cursor,first:100}},t);if(!(null!=(i=s.body.data)&&i.viewer.organizations))throw Error((null==(r=s.body.errors)?void 0:r[0].message)||s.statusText||"Unknown error");let n=s.body.data.viewer.organizations.nodes||[];return{pageInfo:s.body.data.viewer.organizations.pageInfo,data:n.map(e=>({id:e.databaseId.toString(),graphQLId:e.id,username:e.login,name:e.name||null,email:e.email||null,avatarUrl:e.avatarUrl}))}}async getRepo(e,t={}){var i;let r=await e_(this.config,{query:`
query getRepo($owner: String!, $name: String!) {
  repository(owner: $owner, name: $name) {
    ${eV}
  }
}
`,variables:{owner:e.namespace,name:e.name}},t);if(!(null!=(i=r.body.data)&&i.repository))throw Error(`Repository ${e.namespace}/${e.name} not found`);return{data:eX(r.body.data.repository)}}async getRepos(e,t={}){let i=e.map(({namespace:e,name:t},i)=>`
      getRepo_${i}: repository(owner: "${e}", name: "${t}") {
        ${eV}
      }
    `).join(`
`),r=await e_(this.config,{query:`
query batchGetRepos {
  ${i}
}
`},t);if(!r.body.data)throw Error(r.statusText||"Unknown error");let s=[],n=[];return e.forEach((e,t)=>{let i=r.body.data[`getRepo_${t}`];i?s.push(eX(i)):n.push({input:e})}),{data:s,errors:n}}async getReposForUsernames(e,t={}){var i;if(!e.usernames.length)return{pageInfo:{endCursor:null,hasNextPage:!1},data:[]};let r=await e_(this.config,{query:`
query getReposForUsernames($query: String!, $cursor: String, $first: Int!) {
  search(query: $query, type: REPOSITORY, first: $first, after: $cursor) {
    pageInfo {
      endCursor
      hasNextPage
    }
    nodes {
      ... on Repository {
        ${eV}
      }
    }
  }
}
`,variables:{query:`fork:true ${e.usernames.map(e=>`user:${e}`).join(" ")}`,cursor:e.cursor,first:100}},t);if(!r.body.data)throw Error((null==(i=r.body.errors)?void 0:i[0].message)||r.statusText||"Unknown error");let s=r.body.data.search.nodes||[];return{pageInfo:r.body.data.search.pageInfo,data:s.map(eX)}}async getReposForOwners(e,t={}){return this.getReposForUsernames({usernames:e.owners.filter(e=>e.username).map(e=>e.username),cursor:e.cursor},t)}async getRefs(e,t,i={}){var r;let s=null==(r=(await e_(this.config,{query:`
query getRefs($owner: String!, $name: String!, $refPrefix: String!, $cursor: String, $first: Int!) {
  repository(owner: $owner, name: $name) {
    refs(refPrefix: $refPrefix first: $first after: $cursor) {
      pageInfo {
        endCursor
        hasNextPage
      }
      nodes {
        name
        target {
          ... on Commit {
            oid
            authoredDate
            committedDate
          }
        }
      }
    }
  }
}
`,variables:{owner:t.repo.namespace,name:t.repo.name,refPrefix:e,cursor:t.cursor,first:100}},i)).body.data)?void 0:r.repository;if(!s)throw Error("Repository not found.");let n=s.refs;return n?{pageInfo:n.pageInfo,data:(n.nodes||[]).map(e=>{var t;let i=null!=(t=e.target)&&t.oid?e.target:null;return{name:e.name,commit:i?{oid:i.oid,authoredDate:new Date(i.authoredDate),committedDate:new Date(i.committedDate)}:null}})}:{pageInfo:{endCursor:null,hasNextPage:!1},data:[]}}async getBranches(e,t={}){return this.getRefs("refs/heads/",e,t)}async getTags(e,t={}){return this.getRefs("refs/tags/",e,t)}async getBlame(e,t={}){var i;let r=null==(i=(await e_(this.config,{query:`
query getBlame($owner: String!, $name: String!, $ref: String!, $path: String!) {
  repository(owner: $owner, name: $name) {
    object(expression: $ref) {
      ... on Commit {
        blame(path: $path) {
          ranges {
            startingLine
            endingLine
            commit {
              oid
              parents(first:100) {
                nodes {
                  oid
                }
              }
              authoredDate
              committedDate
              message
              author {
                name
                email
                avatarUrl
              }
              committer {
                name
                email
                avatarUrl
              }
              additions
              deletions
              changedFilesIfAvailable
            }
          }
        }
      }
    }
  }
}
`,variables:{owner:e.repo.namespace,name:e.repo.name,ref:e.ref,path:e.path}},t)).body.data)?void 0:i.repository;if(!r)throw Error("Repository not found.");let s=r.object;if(!s||!("blame"in s))throw Error("Ref not found.");if(0===s.blame.ranges.length)throw Error("File not found.");return{data:{ranges:s.blame.ranges.map(e=>{var t;return{startingLine:e.startingLine,endingLine:e.endingLine,commit:{oid:e.commit.oid,parentOids:(null==(t=e.commit.parents.nodes)?void 0:t.map(e=>e.oid))||[],authoredDate:new Date(e.commit.authoredDate),author:e.commit.author?{name:e.commit.author.name,email:e.commit.author.email,avatarUrl:e.commit.author.avatarUrl}:null,committedDate:new Date(e.commit.committedDate),committer:e.commit.committer?{name:e.commit.committer.name,email:e.commit.committer.email,avatarUrl:e.commit.committer.avatarUrl}:null,message:e.commit.message,fileCount:e.commit.changedFilesIfAvailable,additions:e.commit.additions,deletions:e.commit.deletions}}})}}}async getFileContents(e,t={}){let i=await this.config.request({url:`${eT(this.config,t)}/repos/${e.repo.namespace}/${e.repo.name}/contents/${encodeURIComponent(e.path)}?ref=${e.ref}`,headers:{...G(t.token||this.config.token),Accept:"application/vnd.github.raw+json"}});if(i.headers["content-type"].startsWith("application/json"))throw Error(`GitHub: got directory when fetching "${e.path}", getFileContents does not support fetching directories`);if(!i.headers["content-type"].startsWith("application/vnd.github.raw+json"))throw Error(`GitHub: unsupported content type "${i.headers["content-type"]}" when fetching "${e.path}"`);return{data:new Blob([i.body])}}async searchPullRequests(e,t={}){var i,r;let s=await this.getEnterpriseVersion(t),n=e$(await this.getScopes(t)),o=t=>eq("pr",t&&"boolean"==typeof e.isDraft?`${e.query} draft:${e.isDraft}`:e.query,e.cursor,n,t,s),a=await e_(this.config,o(!0),t);a.body.errors&&eM(a.body.errors)&&(this.config.baseUrl||t.baseUrl)&&(a=await e_(this.config,o(!1),t));let{data:l}=a.body;if(!l)throw Error((null==(i=a.body.errors)?void 0:i[0].message)||a.statusText||"Unknown error");return{pageInfo:{hasNextPage:l.search.pageInfo.hasNextPage,endCursor:l.search.pageInfo.endCursor},data:(null==(r=l.search.nodes)?void 0:r.map(e8))||[]}}async searchIssues(e,t={}){var i,r;let s=e$(await this.getScopes(t)),n=await e_(this.config,eq("issue",e.query,e.cursor,s),t),{data:o}=n.body;if(!o)throw Error((null==(i=n.body.errors)?void 0:i[0].message)||n.statusText||"Unknown error");return{pageInfo:{hasNextPage:o.search.pageInfo.hasNextPage,endCursor:o.search.pageInfo.endCursor},data:(null==(r=o.search.nodes)?void 0:r.map(e9))||[]}}async getPullRequestsAssociatedWithUser(e,t={}){return this.searchPullRequests({query:`involves:${e.username}`,cursor:e.cursor},t)}async getPullRequestsForRepos(e,t={}){let{assigneeLogins:i,updatedBefore:r,authorLogin:s,repos:n,reviewRequestedLogin:o,startQuery:a,mentionLogin:l}=e,h=eW(a||"");return n.forEach(e=>{h.push(`repo:${e.namespace}/${e.name}`)}),i&&i.forEach(e=>{h.push(`assignee:${e}`)}),r&&h.push(`updated:<${r}`),s&&h.push(`author:${s}`),o&&h.push(`review-requested:${o}`),l&&h.push(`mentions:${l}`),this.searchPullRequests({query:`sort:updated ${h.join(" ")}`,isDraft:e.isDraft,cursor:e.cursor},t)}async getPullRequestForRepo(e,t={}){var i,r;let s=await this.getEnterpriseVersion(t),n=e$(await this.getScopes(t)),o=t=>({query:`query getPullRequest(
  $owner: String!
  $name: String!
  $number: Int!
) {
  repository(
    owner: $owner,
    name: $name
  ) {
    pullRequest(number: $number) {
      ${eF(t,n,s)}
    }
  }
}`,variables:{owner:e.repo.namespace,name:e.repo.name,number:e.number}}),a=await e_(this.config,o(!0),t);a.body.errors&&eM(a.body.errors)&&(this.config.baseUrl||t.baseUrl)&&(a=await e_(this.config,o(!1),t));let{data:l}=a.body;if(!l)throw Error((null==(i=a.body.errors)?void 0:i[0].message)||a.statusText||"Unknown error");let h=null==(r=a.body.data)?void 0:r.repository.pullRequest;return{data:h?e8(h):null}}async getPullRequestByGraphQLId(e,t={}){var i,r;let s=await this.getEnterpriseVersion(t),n=e$(await this.getScopes(t)),o=t=>({query:`query getPullRequest(
  $graphQLId: ID!
) {
  node(id: $graphQLId) {
    ... on PullRequest {
      ${eF(t,n,s)}
    }
  }
}`,variables:{graphQLId:e.graphQLId}}),a=await e_(this.config,o(!0),t);a.body.errors&&eM(a.body.errors)&&(this.config.baseUrl||t.baseUrl)&&(a=await e_(this.config,o(!1),t));let{data:l}=a.body;if(!l)throw Error((null==(i=a.body.errors)?void 0:i[0].message)||a.statusText||"Unknown error");let h=null==(r=a.body.data)?void 0:r.node;return{data:h?e8(h):null}}async closePullRequest(e,t={}){var i,r,s;let{pullRequest:{graphQLId:n}}=e;if(!n)throw Error('GitHub requires "graphQLId" for this function.');let o=`mutation ClosePullRequest($pullRequestGraphQLId: ID!) {
  closePullRequest(input: { pullRequestId: $pullRequestGraphQLId }) {
    pullRequest {
      id
    }
  }
}`;if(!(null!=(s=null==(r=null==(i=(await e_(this.config,{query:`${o}`,variables:{pullRequestGraphQLId:n}},t)).body.data)?void 0:i.closePullRequest)?void 0:r.pullRequest)&&s.id))throw Error("Could not close pull request")}async mergePullRequest(e,t={}){var i,r,s,n;let o;let{pullRequest:a,mergeStrategy:l}=e;if(!a.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');if(!(null!=(i=a.headRef)&&i.oid))throw Error('GitHub requires "headRef.oid" for this function.');switch(l){case"MERGE_COMMIT":o="MERGE";break;case"REBASE":o="REBASE";break;case"SQUASH":o="SQUASH"}let h=`mutation MergePullRequest(
  $pullRequestGraphQLId: ID!,
  $expectedSourceSha: GitObjectID!,
  $mergeStrategy: PullRequestMergeMethod,
) {
  mergePullRequest(input: {
    pullRequestId: $pullRequestGraphQLId,
    expectedHeadOid: $expectedSourceSha,
    mergeMethod: $mergeStrategy,
  }) {
    pullRequest {
      id
    }
  }
}`;if(!(null!=(n=null==(s=null==(r=(await e_(this.config,{query:`${h}`,variables:{pullRequestGraphQLId:a.graphQLId,expectedSourceSha:a.headRef.oid,mergeStrategy:o}},t)).body.data)?void 0:r.mergePullRequest)?void 0:s.pullRequest)&&n.id))throw Error("Could not merge pull request")}async setPullRequestMilestone(e,t={}){var i,r,s;let{pullRequest:n,milestone:o}=e;if(!n.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');let a=`mutation SetPullRequestMilestone($pullRequestGraphQLId: ID!, $milestoneGraphQLId: ID) {
  updatePullRequest(input: { pullRequestId: $pullRequestGraphQLId, milestoneId: $milestoneGraphQLId }) {
    pullRequest {
      id
    }
  }
}`;if(!(null!=(s=null==(r=null==(i=(await e_(this.config,{query:`${a}`,variables:{pullRequestGraphQLId:n.graphQLId,milestoneGraphQLId:(null==o?void 0:o.graphQLId)??null}},t)).body.data)?void 0:i.updatePullRequest)?void 0:r.pullRequest)&&s.id))throw Error("Could not set milestone of pull request")}async markPullRequestReadyForReview(e,t){var i,r,s;let n=`mutation MarkReadyToReview($pullRequestGraphQLId: ID!) {
  markPullRequestReadyForReview(input: { pullRequestId: $pullRequestGraphQLId }) {
    pullRequest {
      id
    }
  }
}`;if(!(null!=(s=null==(r=null==(i=(await e_(this.config,{query:n,variables:{pullRequestGraphQLId:e}},t)).body.data)?void 0:i.markPullRequestReadyForReview)?void 0:r.pullRequest)&&s.id))throw Error("Could not mark pull request ready to review")}async convertPullRequestToDraft(e,t){var i,r,s;let n=`mutation ConvertToDraft($pullRequestGraphQLId: ID!) {
  convertPullRequestToDraft(input: { pullRequestId: $pullRequestGraphQLId }) {
    pullRequest {
      id
    }
  }
}`;if(!(null!=(s=null==(r=null==(i=(await e_(this.config,{query:n,variables:{pullRequestGraphQLId:e}},t)).body.data)?void 0:i.convertPullRequestToDraft)?void 0:r.pullRequest)&&s.id))throw Error("Could not convert pull request to draft")}async setPullRequestAsDraft(e,t={}){let{pullRequest:{graphQLId:i},isDraft:r}=e;if(!i)throw Error('GitHub requires "graphQLId" for this function.');if(r){await this.convertPullRequestToDraft(i,t);return}await this.markPullRequestReadyForReview(i,t)}async setPullRequestReviewers(e,t={}){var i,r,s;let{pullRequest:{reviews:n,graphQLId:o},reviewers:a}=e;if(!n)throw Error('GitHub requires "reviews" for this function');if(!o)throw Error('GitHub requires "graphQLId" for this function.');let l=n.filter(e=>"REVIEW_REQUESTED"!==e.state).map(e=>{if(!e.reviewer.graphQLId)throw Error('GitHub requires reviewer "graphQLId" for this function.');return e.reviewer.graphQLId}),h=a.map(e=>{if(!e.graphQLId)throw Error('GitHub requires reviewer "graphQLId" for this function.');return e.graphQLId}).filter(e=>-1===l.indexOf(e)),c=`mutation SetPullRequestReviewers($pullRequestGraphQLId: ID!, $reviewerGraphQLIds: [ID!]!) {
  requestReviews(input: { pullRequestId: $pullRequestGraphQLId, userIds: $reviewerGraphQLIds }) {
    pullRequest {
      id
    }
  }
}`;if(!(null!=(s=null==(r=null==(i=(await e_(this.config,{query:c,variables:{pullRequestGraphQLId:o,reviewerGraphQLIds:h}},t)).body.data)?void 0:i.requestReviews)?void 0:r.pullRequest)&&s.id))throw Error("Could not set pull request reviewers")}async reRequestPullRequestReviews(e,t={}){var i,r,s;let{pullRequest:{reviews:n,graphQLId:o},reviewers:a}=e;if(!o)throw Error('GitHub requires "graphQLId" for this function.');if(!n)throw Error('GitHub requires "reviews" for this function.');let l=[];for(let e of a){if(!e.graphQLId)throw Error('GitHub requires reviwer "graphQLId" for this function.');if(!n.find(t=>t.reviewer.graphQLId===e.graphQLId))throw Error("Can only re-request review from existing reviewer.");l.push(e.graphQLId)}let h=`mutation SetPullRequestReviewers($pullRequestGraphQLId: ID!, $reviewerGraphQLIds: [ID!]!) {
  requestReviews(input: { pullRequestId: $pullRequestGraphQLId, userIds: $reviewerGraphQLIds, union: true }) {
    pullRequest {
      id
    }
  }
}`;if(!(null!=(s=null==(r=null==(i=(await e_(this.config,{query:h,variables:{pullRequestGraphQLId:o,reviewerGraphQLIds:l}},t)).body.data)?void 0:i.requestReviews)?void 0:r.pullRequest)&&s.id))throw Error("Could not re-request pull request reviews")}async setPullRequestAssignees(e,t={}){var i,r,s;let{pullRequest:n,assignees:o}=e;if(!n.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');let a=o.map(e=>{if(!e.graphQLId)throw Error('GitHub requires assignee "graphQLId" for this function.');return e.graphQLId}),l=`mutation SetPullRequestAssignees($pullRequestGraphQLId: ID!, $assigneeGraphQLIds: [ID!]!) {
  updatePullRequest(input: { pullRequestId: $pullRequestGraphQLId, assigneeIds: $assigneeGraphQLIds }) {
    pullRequest {
      id
    }
  }
}`;if(!(null!=(s=null==(r=null==(i=(await e_(this.config,{query:l,variables:{pullRequestGraphQLId:n.graphQLId,assigneeGraphQLIds:a}},t)).body.data)?void 0:i.updatePullRequest)?void 0:r.pullRequest)&&s.id))throw Error("Could not set pull request assignees")}async getReviewsForPullRequest(e,t={}){var i,r;let{repo:{namespace:s,name:n},pullRequestId:o}=e,a=`query getPullRequests(
  $namespace: String!
  $name: String!
  $pullRequestId: Int!
) {
  repository(
    owner: $namespace,
    name: $name
  ) {
    pullRequest(number: $pullRequestId) {
      reviewThreads(first: 100) {
        nodes {
          isOutdated
          isResolved
          originalLine
          originalStartLine
          startDiffSide
          comments(first: 100) {
            nodes {
              author {
                avatarUrl
                login
              }
              body
              databaseId
              diffHunk
              id
              path
              publishedAt
              pullRequestReview {
                id
              }
              url
            }
          }
        }
      }
      reviews(first: 100) {
        nodes {
          author {
            avatarUrl
            login
          }
          body
          databaseId
          id
          publishedAt
          url
        }
      }
    }
  }
}`,l=await e_(this.config,{query:a,variables:{namespace:s,name:n,pullRequestId:o}},t),h=(null==(i=l.body.data)?void 0:i.repository.pullRequest.reviewThreads.nodes.reduce((e,t)=>{let i=t.comments.nodes[0].pullRequestReview;return i&&(e[i.id]||(e[i.id]=[]),e[i.id].push(e5(t))),e},{}))??{};return{data:(null==(r=l.body.data)?void 0:r.repository.pullRequest.reviews.nodes.filter(e=>h[e.id]).map(e=>({author:e.author?{avatarUrl:e.author.avatarUrl,email:null,name:e.author.login}:null,body:e.body,createdAt:e.publishedAt?new Date(e.publishedAt):null,id:e.databaseId,graphQLId:e.id,reviewComments:h[e.id],url:e.url})))??[]}}async getIssuesAssociatedWithUser(e,t={}){var i;let[r,s]=(null==(i=e.cursor)?void 0:i.split(";"))||[void 0,void 0],[n,o]=await Promise.all(["null"===r?null:this.searchIssues({query:`author:${e.username}`,cursor:r},t),"null"===s?null:this.searchIssues({query:`assignee:${e.username}`,cursor:s},t)]),a={},l=[],h=e=>{a[e.id]||(a[e.id]=!0,l.push(e))};return null==n||n.data.forEach(h),null==o||o.data.forEach(h),{pageInfo:{hasNextPage:(null==n?void 0:n.pageInfo.hasNextPage)||(null==o?void 0:o.pageInfo.hasNextPage)||!1,endCursor:`${(null==n?void 0:n.pageInfo.hasNextPage)&&(null==n?void 0:n.pageInfo.endCursor)||"null"};${(null==o?void 0:o.pageInfo.hasNextPage)&&(null==o?void 0:o.pageInfo.endCursor)||"null"}`},data:l}}async setPullRequestLabels(e,t={}){var i,r,s;let{pullRequest:n,labels:o}=e;if(!n.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');let a=`mutation SetPullRequestLabels($pullRequestGraphQLId: ID!, $labelGraphQLIds: [ID!]) {
  updatePullRequest(input: { pullRequestId: $pullRequestGraphQLId, labelIds: $labelGraphQLIds }) {
    pullRequest {
      id
    }
  }
}`;if(!(null!=(s=null==(r=null==(i=(await e_(this.config,{query:a,variables:{pullRequestGraphQLId:n.graphQLId,labelGraphQLIds:o.map(e=>{if(!e.graphQLId)throw Error('GitHub requires label "graphQLId" for this function.');return e.graphQLId})}},t)).body.data)?void 0:i.updatePullRequest)?void 0:r.pullRequest)&&s.id))throw Error("Could not set pull request labels")}async getIssuesForRepos(e,t={}){let i=eW(e.startQuery||""),{cursor:r,assigneeLogins:s,updatedBefore:n,authorLogin:o,mentionLogin:a}=e;return e.repos.forEach(e=>{i.push(`repo:${e.namespace}/${e.name}`)}),s&&s.forEach(e=>{i.push(`assignee:${e}`)}),n&&i.push(`updated:<${n}`),o&&i.push(`author:${o}`),a&&i.push(`mentions:${a}`),this.searchIssues({query:`sort:updated ${i.join(" ")}`,cursor:r},t)}async closeIssueWithReason(e,t={}){var i,r,s;let{issue:n,reason:o}=e;if(!n.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');let a=`mutation CloseIssueWithReason($issueGraphQLId: ID!, $reason: IssueClosedStateReason!) {
  closeIssue(input: { issueId: $issueGraphQLId, stateReason: $reason }) {
    issue {
      id
    }
  }
}`;if(!(null!=(s=null==(r=null==(i=(await e_(this.config,{query:a,variables:{issueGraphQLId:n.graphQLId,reason:o}},t)).body.data)?void 0:i.closeIssue)?void 0:r.issue)&&s.id))throw Error("Could not close issue with reason")}async closeIssue(e,t={}){var i,r,s;let{issue:n}=e;if(!n.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');let o=`mutation SetIssueState($issueGraphQLId: ID!) {
  updateIssue(input: { id: $issueGraphQLId, state: CLOSED }) {
    issue {
      id
    }
  }
}`;if(!(null!=(s=null==(r=null==(i=(await e_(this.config,{query:o,variables:{issueGraphQLId:n.graphQLId}},t)).body.data)?void 0:i.updateIssue)?void 0:r.issue)&&s.id))throw Error("Could not close issue")}async reOpenIssue(e,t={}){var i,r,s;let{issue:n}=e;if(!n.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');let o=`mutation ReOpenIssue($issueGraphQLId: ID!) {
  reopenIssue(input: { issueId: $issueGraphQLId }) {
    issue {
      id
    }
  }
}`;if(!(null!=(s=null==(r=null==(i=(await e_(this.config,{query:o,variables:{issueGraphQLId:n.graphQLId}},t)).body.data)?void 0:i.reopenIssue)?void 0:r.issue)&&s.id))throw Error("Could not reopen issue")}async setIssueLabels(e,t={}){var i,r,s;let{issue:n,labels:o}=e;if(!n.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');let a=o.map(e=>e.graphQLId),l=`mutation SetIssueLabels($issueGraphQLId: ID!, $labelGraphQLIds: [ID!]) {
  updateIssue(input: { id: $issueGraphQLId, labelIds: $labelGraphQLIds }) {
    issue {
      id
    }
  }
}`;if(!(null!=(s=null==(r=null==(i=(await e_(this.config,{query:l,variables:{issueGraphQLId:n.graphQLId,labelGraphQLIds:a}},t)).body.data)?void 0:i.updateIssue)?void 0:r.issue)&&s.id))throw Error("Could not set issue labels")}async setIssueMilestone(e,t={}){var i,r,s;let{issue:n,milestone:o}=e;if(!n.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');if(o&&!o.graphQLId)throw Error('GitHub requires milestone "graphQLId" for this function.');let a=`mutation SetIssueMilestone($issueGraphQLId: ID!, $milestoneGraphQLId: ID) {
  updateIssue(input: { id: $issueGraphQLId, milestoneId: $milestoneGraphQLId }) {
    issue {
      id
    }
  }
}`;if(!(null!=(s=null==(r=null==(i=(await e_(this.config,{query:`${a}`,variables:{issueGraphQLId:n.graphQLId,milestoneGraphQLId:(null==o?void 0:o.graphQLId)??null}},t)).body.data)?void 0:i.updateIssue)?void 0:r.issue)&&s.id))throw Error("Could not set milestone of issue")}async setIssueAssignees(e,t={}){var i,r,s;let{issue:n,assignees:o}=e;if(!n.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');let a=o.map(e=>{if(!e.graphQLId)throw Error('GitHub requires assignee "graphQLId" for this function.');return e.graphQLId}),l=`mutation SetIssueAssignees($issueGraphQLId: ID!, $assigneeGraphQLIds: [ID!]!) {
  updateIssue(input: { id: $issueGraphQLId, assigneeIds: $assigneeGraphQLIds }) {
    issue {
      id
    }
  }
}`;if(!(null!=(s=null==(r=null==(i=(await e_(this.config,{query:l,variables:{issueGraphQLId:n.graphQLId,assigneeGraphQLIds:a}},t)).body.data)?void 0:i.updateIssue)?void 0:r.issue)&&s.id))throw Error("Could not set issue assignees")}async getMilestonesForRepo(e,t={}){var i,r,s,n;let{repo:{namespace:o,name:a},cursor:l}=e,h=await e_(this.config,{query:`
query getLabelsForRepo($owner: String!, $name: String! $cursor: String, $first: Int!) {
  repository(owner: $owner, name: $name) {
    milestones(first: $first, after: $cursor) {
      nodes {
        ${eR}
      }
      pageInfo {
        endCursor
        hasNextPage
      }
    }
  }
}
`,variables:{owner:o,name:a,cursor:l,first:100}},t);if(!h.body.data)throw Error((null==(i=h.body.errors)?void 0:i[0].message)||h.statusText||"Unknown error");return{pageInfo:(null==(r=h.body.data.repository.milestones)?void 0:r.pageInfo)??{endCursor:null,hasNextPage:!1},data:(null==(n=null==(s=h.body.data.repository.milestones)?void 0:s.nodes)?void 0:n.map(e6))??[]}}async getLabelsForRepo(e,t={}){var i,r,s,n;let{repo:{namespace:o,name:a},cursor:l}=e,h=await e_(this.config,{query:`
query getLabelsForRepo($owner: String!, $name: String! $cursor: String, $first: Int!) {
  repository(owner: $owner, name: $name) {
    labels(first: $first, after: $cursor) {
      nodes {
        ${eA}
      }
      pageInfo {
        endCursor
        hasNextPage
      }
    }
  }
}
`,variables:{owner:o,name:a,cursor:l,first:100}},t);if(!h.body.data)throw Error((null==(i=h.body.errors)?void 0:i[0].message)||h.statusText||"Unknown error");return{pageInfo:(null==(r=h.body.data.repository.labels)?void 0:r.pageInfo)??{endCursor:null,hasNextPage:!1},data:(null==(n=null==(s=h.body.data.repository.labels)?void 0:s.nodes)?void 0:n.map(eZ))??[]}}},tt=/\/api\/v\d+$/,ti=e=>{if(e.endsWith("/api/graphql"))throw Error("The graphql endpoint is being used as the baseUrl. This package uses both GraphQL and REST APIs, and the REST version cannot be assumed. Use the REST endpoint as the baseUrl instead.")},tr=(e,t)=>{let i=t.baseUrl||e.baseUrl;return i?(ti(i=i.replace(/\/$/,"")),i):"https://gitlab.com/api/v4"},ts=(e,t)=>{let i=t.baseUrl||e.baseUrl;return i?(ti(i=i.replace(/\/$/,"")),tt.test(i)&&(i=i.replace(tt,"")),`${i}/api/graphql`):"https://gitlab.com/api/graphql"},tn=(e,t,i)=>{let r=G(i.token||e.token);return e.request({url:ts(e,i),method:"POST",headers:{...r,"Content-Type":"application/json"},body:JSON.stringify(t)})},to=e=>e.split("/").slice(0,-1).join("/"),ta=e=>e.split("/").at(-1)??"",tl=e=>({id:e.id.replace(td,""),graphQLId:e.id,namespace:to(e.fullPath),name:ta(e.fullPath),webUrl:e.webUrl}),th=e=>({id:e.id.replace(td,""),graphQLId:e.id,httpsUrl:e.httpUrlToRepo,namespace:to(e.fullPath),name:ta(e.fullPath),sshUrl:e.sshUrlToRepo,webUrl:e.webUrl}),tc={assigned:"assignedMergeRequests",authored:"authoredMergeRequests",reviewRequested:"reviewRequestedMergeRequests"},tu={CAN_BE_MERGED:"MERGEABLE",CANNOT_BE_MERGED:"CONFLICTS",CANNOT_BE_MERGED_RECHECK:"UNKNOWN",UNCHECKED:"UNKNOWN",CHECKING:"UNKNOWN"},td="gid://gitlab/Project/",tp=`
description
dueDate
id
iid
startDate
state
title
webPath
`,tg=`
id
fullPath
webUrl
httpUrlToRepo
sshUrlToRepo
repository {
  rootRef
}
`,tm=`
id
name
username
publicEmail
avatarUrl
webUrl
`,tf=`
color
description
id
title
`,tw=`
author {
  ${tm}
}
assignees {
  nodes {
    ${tm}
  }
}
closedAt
createdAt
description
dueDate
id
iid
labels {
  nodes {
    ${tf}
  }
}
state
title
type
updatedAt
upvotes
userNotesCount
webUrl
milestone {
  ${tp}
}
`,tv=`
stages {
  nodes {
    jobs {
      nodes {
        allowFailure
        createdAt
        finishedAt
        id
        name
        status
      }
    }
    name
  }
}
`,ty=(e,t,i)=>`
id
state
approved
author {
  ${tm}
}
diffRefs {
  baseSha
  headSha
}
diffStatsSummary {
  additions
  deletions
  fileCount
}
commitCount
draft
userNotesCount
upvotes
title
webUrl
createdAt
updatedAt
mergedAt
iid
targetBranch
sourceBranch
assignees {
  nodes {
    ${tm}
  }
}
reviewers {
  nodes {
    ${tm}
    mergeRequestInteraction {
      approved
      reviewState
    }
  }
}
mergeStatusEnum
labels {
  nodes {
    ${tf}
  }
}
${e?"project { id httpUrlToRepo fullPath sshUrlToRepo webUrl } sourceProject { id httpUrlToRepo fullPath sshUrlToRepo webUrl }":""}
${t?`milestone { ${tp} }`:""}
${i?`headPipeline { ${tv} }`:""}
`,tb=e=>`${e.namespace}/${e.name}`,tC=e=>`${e.namespace}/${e.name}`,tR=e=>{var t;return{id:e.id.replace(td,""),graphQLId:e.id,namespace:to(e.fullPath),name:ta(e.fullPath),webUrl:e.webUrl,httpsUrl:e.httpUrlToRepo,sshUrl:e.sshUrlToRepo,defaultBranch:null!=(t=e.repository)&&t.rootRef?{name:e.repository.rootRef}:null,permission:null}},tS={opened:"OPEN",merged:"MERGED",closed:"CLOSED"},tP=(e,t)=>{let i=e.avatarUrl;return!t&&null!=i&&i.startsWith("/")&&(i=`https://gitlab.com${i}`),{id:e.id.replace("gid://gitlab/User/",""),graphQLId:e.id,name:e.name,username:e.username,email:e.publicEmail??null,avatarUrl:i,url:e.webUrl}},tA=e=>({color:e.color,description:e.description,id:e.id.replace("gid://gitlab/ProjectLabel/",""),graphQLId:e.id,name:e.title}),tk=(e,t)=>e?"FAILED"===e&&t?"WARNING":({CANCELED:"CANCELLED",CREATED:"PENDING",FAILED:"FAILED",MANUAL:"OPTIONAL_ACTION_REQUIRED",PENDING:"PENDING",PREPARING:"RUNNING",RUNNING:"RUNNING",SCHEDULED:"PENDING",SKIPPED:"SKIPPED",SUCCESS:"SUCCESS",WAITING_FOR_CALLBACK:"PENDING",WAITING_FOR_RESOURCE:"PENDING"})[e]:null,tD=(e,t,i,r)=>{var s,n,o,a,l,h,c,u,d,p,g,m;let f=null!=(s=e.reviewers)&&s.nodes?e.reviewers.nodes.map(e=>{var t,i;return{reviewer:tP(e,r),state:null!=(t=e.mergeRequestInteraction)&&t.approved?"APPROVED":(null==(i=e.mergeRequestInteraction)||i.reviewState,"CHANGES_REQUESTED")}}):null;return{id:e.id.replace("gid://gitlab/MergeRequest/",""),graphQLId:e.id,title:e.title,number:parseInt(e.iid,10),state:tS[e.state],commentCount:e.userNotesCount||0,upvoteCount:e.upvotes,author:e.author?tP(e.author,r):null,createdDate:new Date(e.createdAt),isDraft:e.draft,repository:{id:t.id,graphQLId:t.graphQLId,name:t.name,owner:{login:t.namespace},remoteInfo:t.httpsUrl&&t.sshUrl?{cloneUrlHTTPS:t.httpsUrl,cloneUrlSSH:t.sshUrl}:null},headRepository:i?{id:i.id,graphQLId:i.graphQLId,name:i.name,owner:{login:i.namespace},remoteInfo:{cloneUrlHTTPS:i.httpsUrl,cloneUrlSSH:i.sshUrl}}:null,headCommit:{buildStatuses:(null==(a=null==(o=null==(n=e.headPipeline)?void 0:n.stages)?void 0:o.nodes)?void 0:a.flatMap(e=>{var i,r;return(null==(r=null==(i=e.jobs)?void 0:i.nodes)?void 0:r.map(i=>({completedAt:i.finishedAt?new Date(i.finishedAt):null,description:null,name:i.name??null,state:tk(i.status,i.allowFailure),stage:e.name??null,startedAt:new Date(i.createdAt),url:`${t.webUrl}/-/jobs/${i.id.replace("gid://gitlab/Ci::Build/","")}`})))??[]}))??[]},baseRef:{name:e.targetBranch,oid:(null==(l=e.diffRefs)?void 0:l.baseSha)??null},headRef:{name:e.sourceBranch,oid:(null==(h=e.diffRefs)?void 0:h.headSha)??null},url:e.webUrl,updatedDate:new Date(e.updatedAt),closedDate:e.mergedAt?new Date(e.mergedAt):null,mergedDate:e.mergedAt?new Date(e.mergedAt):null,assignees:null!=(c=e.assignees)&&c.nodes?e.assignees.nodes.map(e=>tP(e,r)):null,reviews:f,reviewDecision:e.approved?"APPROVED":B(f),additions:(null==(u=e.diffStatsSummary)?void 0:u.additions)||0,deletions:(null==(d=e.diffStatsSummary)?void 0:d.deletions)||0,fileCount:(null==(p=e.diffStatsSummary)?void 0:p.fileCount)||0,commitCount:e.commitCount||0,mergeableState:tu[e.mergeStatusEnum],milestone:e.milestone?t_(e.milestone,t.webUrl):null,labels:(null==(m=null==(g=e.labels)?void 0:g.nodes)?void 0:m.map(tA))??[],permissions:null}},tT=(e,t,i)=>{var r,s;return{author:tP(e.author,i),assignees:e.assignees.nodes.map(e=>tP(e,i)),commentCount:e.userNotesCount,closedDate:e.closedAt?new Date(e.closedAt):null,createdDate:new Date(e.createdAt),description:e.description,graphQLId:e.id,id:e.id.replace("gid://gitlab/Issue/",""),labels:(null==(s=null==(r=e.labels)?void 0:r.nodes)?void 0:s.map(tA))??[],number:e.iid,repository:{id:t.id.replace(td,""),graphQLId:t.id,name:t.name,owner:{login:t.namespace}},updatedDate:new Date(e.updatedAt),upvoteCount:e.upvotes,state:{name:e.state,color:null},type:e.type,title:e.title,url:e.webUrl,milestone:e.milestone?t_(e.milestone,t.webUrl):null}},t_=(e,t)=>({id:e.id.replace("gid://gitlab/Milestone/",""),graphQLId:e.id,number:parseInt(e.iid,10),title:e.title,description:e.description,isOpen:"active"===e.state,url:`${t}/-/${e.webPath.replace(/.+?\/-\//,"")}`,startDate:e.startDate?new Date(e.startDate):null,dueDate:e.dueDate?new Date(e.dueDate):null}),tI=class extends H{getIsSelfHosted(e){return!!e.baseUrl||!!this.config.baseUrl}async getCurrentUser(e={},t={}){var i;let r=null==(i=(await tn(this.config,{query:`
query getCurrentUser {
  currentUser {
    ${tm}
  }
}
`},t)).body.data)?void 0:i.currentUser;if(!r)throw Error("Current user not found.");return{data:tP(r,this.getIsSelfHosted(t))}}async getUserForCommit(e,t={}){var i,r,s,n;let o=tb(e.repo),a=null==(n=null==(s=null==(r=null==(i=(await tn(this.config,{query:`
query getUserForCommit($fullPath: ID!, $oid: String!) {
  project(fullPath: $fullPath) {
    repository {
      tree(ref: $oid) {
        lastCommit {
          authorName
          authorEmail
          authorGravatar
        }
      }
    }
  }
}
`,variables:{fullPath:o,oid:e.oid}},t)).body.data)?void 0:i.project)?void 0:r.repository)?void 0:s.tree)?void 0:n.lastCommit;if(!a)throw Error("Commit not found.");return{data:{name:a.authorName,email:a.authorEmail,avatarUrl:a.authorGravatar}}}async getAccountForEmail(e,t={}){var i,r,s;let n=null==(s=null==(r=null==(i=(await tn(this.config,{query:`
query getAccountForEmail($email: String!) {
  users(search: $email) {
    nodes {
      ${tm}
    }
  }
}
`,variables:{email:e.email}},t)).body.data)?void 0:i.users)?void 0:r.nodes)?void 0:s[0];if(!n)throw Error("User not found.");return{data:tP(n,this.getIsSelfHosted(t))}}async getAccountForUsername(e,t={}){var i;let r=null==(i=(await tn(this.config,{query:`
query getAccountForUsername($username: String!) {
  user(username: $username) {
    ${tm}
  }
}
`,variables:{username:e.username}},t)).body.data)?void 0:i.user;if(!r)throw Error("User not found.");return{data:tP(r,this.getIsSelfHosted(t))}}async getAccountsForRepo(e,t={}){var i,r,s,n,o,a,l;let{repo:{namespace:h,name:c},cursor:u}=e,d=await tn(this.config,{query:`
query getAccountsForRepo(
  $fullPath: ID!
  $after: String
) {
  project(
    fullPath: $fullPath
  ) {
    projectMembers(after: $after) {
      nodes {
        user {
          ${tm}
        }
      }
      pageInfo {
        endCursor
        hasNextPage
      }
    }
  }
}
`,variables:{fullPath:`${h}/${c}`,after:u}},t),p=null==(n=null==(s=null==(r=null==(i=d.body.data)?void 0:i.project)?void 0:r.projectMembers)?void 0:s.nodes)?void 0:n.map(e=>e.user).filter(e=>null!==e);return{pageInfo:(null==(l=null==(a=null==(o=d.body.data)?void 0:o.project)?void 0:a.projectMembers)?void 0:l.pageInfo)??{endCursor:null,hasNextPage:!1},data:(null==p?void 0:p.map(e=>tP(e,this.getIsSelfHosted(t))))??[]}}async getRepo(e,t={}){var i;let r=tb(e),s=await tn(this.config,{query:`
query getRepo($fullPath: ID!) {
  project(fullPath: $fullPath) {
    ${tg}
  }
}
`,variables:{fullPath:r}},t);if(!(null!=(i=s.body.data)&&i.project))throw Error(`Repository ${r} not found`);return{data:tR(s.body.data.project)}}async getRepos(e,t={}){let i=e.map(tb).map((e,t)=>`
      getRepo_${t}: project(fullPath: "${e}") {
        ${tg}
      }
    `).join(`
`),r=await tn(this.config,{query:`
query batchGetRepos {
  ${i}
}
`},t);if(!r.body.data)throw Error(r.statusText||"Unknown error");let s=[],n=[];return e.forEach((e,t)=>{let i=r.body.data[`getRepo_${t}`];i?s.push(tR(i)):n.push({input:e})}),{data:s,errors:n}}async getReposForCurrentUser(e,t={}){var i,r,s,n,o,a;let l=await tn(this.config,{query:`
query getReposForCurrentUser($after: String) {
  projects(membership: true first: 100 after: $after) {
    pageInfo {
      endCursor
      hasNextPage
    }
    nodes {
      ${tg}
    }
  }
}
`,variables:{after:e.cursor}},t);if(!(null!=(i=l.body.data)&&i.projects))throw Error((null==(r=l.body.errors)?void 0:r[0].message)||l.statusText||"Unknown error");let h=(null==(n=null==(s=l.body.data)?void 0:s.projects)?void 0:n.nodes)||[];return{pageInfo:null==(a=null==(o=l.body.data)?void 0:o.projects)?void 0:a.pageInfo,data:h.map(tR)}}async getRefs(e,t,i={}){var r;let s=tb(t.repo),n=new URL(`${tr(this.config,i)}/projects/${encodeURIComponent(s)}/repository/${e}`);n.searchParams.set("page",(null==(r=t.page)?void 0:r.toString())||"1"),n.searchParams.set("per_page","100");let o=await this.config.request({url:n.toString(),headers:G(i.token||this.config.token)}),a=o.headers["x-next-page"];return{pageInfo:{hasNextPage:!!a,nextPage:a?parseInt(a,10):null},data:o.body.map(e=>({name:e.name,commit:{oid:e.commit.id,authoredDate:new Date(e.commit.authored_date),committedDate:new Date(e.commit.committed_date)}}))}}async getBranches(e,t={}){return this.getRefs("branches",e,t)}async getTags(e,t={}){return this.getRefs("tags",e,t)}async getBlame(e,t={}){let i=tb(e.repo),r=new URL(`${tr(this.config,t)}/projects/${encodeURIComponent(i)}/repository/files/${encodeURIComponent(e.path)}/blame`);r.searchParams.set("ref",e.ref);let s=await this.config.request({url:r.toString(),headers:G(t.token||this.config.token)}),n=0;return{data:{ranges:s.body.map(e=>({startingLine:n+1,endingLine:n+=e.lines.length,commit:{oid:e.commit.id,parentOids:e.commit.parent_ids,authoredDate:new Date(e.commit.authored_date),author:{name:e.commit.author_name,email:e.commit.author_email,avatarUrl:null},committedDate:new Date(e.commit.committed_date),committer:{name:e.commit.committer_name,email:e.commit.committer_email,avatarUrl:null},message:e.commit.message,fileCount:null,additions:null,deletions:null}}))}}}async getPullRequestsForUser(e,t={}){var i,r;let s=tc[e.association],n=await tn(this.config,{query:`
query getPullRequestsForUser($username: String! $cursor: String) {
  user(username: $username) {
    ${s}(state:opened first:100 after:$cursor) {
      pageInfo {
        endCursor
        hasNextPage
      }
      nodes {
        ${ty(!0,!0,!0)}
      }
    }
  }
}
`,variables:{username:e.username,cursor:e.cursor}},t);if(!n.body.data)throw Error((null==(i=n.body.errors)?void 0:i[0].message)||n.statusText||"Unknown error");if(!n.body.data.user)throw Error("User not found");let o=n.body.data.user[s];if(!o)throw Error("Unexpected response");return{pageInfo:o.pageInfo,data:(null==(r=o.nodes)?void 0:r.map(e=>tD(e,th(e.project),th(e.sourceProject),this.getIsSelfHosted(t))))||[]}}async getPullRequestsAssociatedWithUser(e,t={}){var i;let[r,s,n]=(null==(i=e.cursor)?void 0:i.split(";"))||[void 0,void 0,void 0],[o,a,l]=await Promise.all(["null"===r?null:this.getPullRequestsForUser({username:e.username,association:"authored",cursor:r},t),"null"===s?null:this.getPullRequestsForUser({username:e.username,association:"assigned",cursor:s},t),"null"===n?null:this.getPullRequestsForUser({username:e.username,association:"reviewRequested",cursor:n},t)]),h={},c=[],u=e=>{h[e.id]||(h[e.id]=!0,c.push(e))};return null==o||o.data.forEach(u),null==a||a.data.forEach(u),null==l||l.data.forEach(u),{pageInfo:{hasNextPage:(null==o?void 0:o.pageInfo.hasNextPage)||(null==a?void 0:a.pageInfo.hasNextPage)||(null==l?void 0:l.pageInfo.hasNextPage)||!1,endCursor:`${(null==o?void 0:o.pageInfo.hasNextPage)&&(null==o?void 0:o.pageInfo.endCursor)||"null"};${(null==a?void 0:a.pageInfo.hasNextPage)&&(null==a?void 0:a.pageInfo.endCursor)||"null"};${(null==l?void 0:l.pageInfo.hasNextPage)&&(null==l?void 0:l.pageInfo.endCursor)||"null"}`},data:c}}getVariablesForPullRequests(e){let{updatedBefore:t,isDraft:i,authorLogin:r,assigneeLogins:s,reviewRequestedLogin:n}=e||{},o={},a=[],l=[],h=(e,t,i)=>{a.push(`$${e}: ${i}`),l.push(`${e}: $${e}`),o[e]=t};return t&&h("updatedBefore",t,"Time"),r&&h("authorUsername",r,"String"),s&&h("assigneeUsername",s[0],"String"),null!=i&&h("draft",i,"Boolean"),n&&h("reviewerUsername",n,"String"),{variables:o,variableTypes:a,mergeRequestArguments:l}}async getPullRequestsForRepo(e,t={}){var i,r,s;let{cursor:n,repo:o}=e||{},a=tb(o),{variables:l,variableTypes:h,mergeRequestArguments:c}=this.getVariablesForPullRequests(e),u={fullPath:a,...l},d=await tn(this.config,{query:`
query getPullRequestsForRepo(
  $fullPath: ID!
  $after: String
  ${h.length?h.join(" "):""}
) {
  project(
    fullPath: $fullPath
  ) {
    id
    fullPath
    webUrl
    mergeRequests(
      first: 100
      state: opened
      sort: UPDATED_DESC
      after: $after
      ${c.length?c.join(" "):""}
    ) {
      pageInfo {
        endCursor
        hasNextPage
      }
      nodes {
        ${ty(!1,!0,!0)}
      }
    }
  }
}
`,variables:{...u,after:n}},t),p=[],g=null==(i=d.body.data)?void 0:i.project,m=tl(g||{id:"",fullPath:"",webUrl:""});return((null==(r=null==g?void 0:g.mergeRequests)?void 0:r.nodes)||[]).forEach(e=>{p.push(tD(e,m,null,this.getIsSelfHosted(t)))}),{pageInfo:null==(s=null==g?void 0:g.mergeRequests)?void 0:s.pageInfo,data:p}}async getPullRequestsForRepos(e,t={}){let{repos:i,assigneeLogins:r,updatedBefore:s,authorLogin:n,isDraft:o,reviewRequestedLogin:a}=e;return{data:(await Promise.all(i.map(e=>this.getPullRequestsForRepo({repo:e,assigneeLogins:r,updatedBefore:s,authorLogin:n,isDraft:o,reviewRequestedLogin:a},t)))).flatMap(e=>e.data)}}async closePullRequest(e,t={}){var i,r,s;let{pullRequest:n}=e,o=`mutation ClosePullRequest($fullPath: ID!, $pullRequestId: String!) {
  mergeRequestUpdate(input: { projectPath: $fullPath, iid: $pullRequestId, state: CLOSED }) {
    errors,
    mergeRequest {
      id
    }
  }
}`,a=null==(i=(await tn(this.config,{query:o,variables:{fullPath:`${n.repository.owner.login}/${n.repository.name}`,pullRequestId:n.number.toString()}},t)).body.data)?void 0:i.mergeRequestUpdate;if(!(null!=(r=null==a?void 0:a.mergeRequest)&&r.id)||(null==(s=null==a?void 0:a.errors)?void 0:s.length)!==0)throw Error("Could not close pull request")}async mergePullRequest(e,t={}){var i,r,s,n;let{pullRequest:o,mergeStrategy:a}=e;if(!(null!=(i=o.headRef)&&i.oid))throw Error('GitLab requires "headRef.oid" for this function.');let l=`mutation MergePullRequest(
  $fullPath: ID!,
  $pullRequestId: String!,
  $expectedSourceSha: String!,
  $squash: Boolean!,
) {
  mergeRequestAccept(input: {
    projectPath: $fullPath,
    iid: $pullRequestId,
    sha: $expectedSourceSha,
    squash: $squash,
}) {
    errors,
    mergeRequest {
      id
    }
  }
}`,h=null==(r=(await tn(this.config,{query:l,variables:{fullPath:`${o.repository.owner.login}/${o.repository.name}`,pullRequestId:o.number.toString(),expectedSourceSha:o.headRef.oid,squash:"SQUASH"===a}},t)).body.data)?void 0:r.mergeRequestAccept;if(!(null!=(s=null==h?void 0:h.mergeRequest)&&s.id)||(null==(n=null==h?void 0:h.errors)?void 0:n.length)!==0)throw Error("Could not merge pull request")}async setPullRequestMilestone(e,t={}){var i,r,s;let{pullRequest:n,milestone:o}=e;if(!n.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');let a=`mutation SetPullRequestMilestone($fullPath: ID!, $pullRequestId: String!, $milestoneGraphQLId: MilestoneID) {
  mergeRequestSetMilestone(input: { projectPath: $fullPath, iid: $pullRequestId, milestoneId: $milestoneGraphQLId }) {
    errors,
    mergeRequest {
      id
    }
  }
}`,l=await tn(this.config,{query:a,variables:{fullPath:`${n.repository.owner.login}/${n.repository.name}`,pullRequestId:n.number.toString(),milestoneGraphQLId:null==o?void 0:o.graphQLId}},t),h=null==(i=l.body.data)?void 0:i.mergeRequestSetMilestone;if(!(null!=(r=null==h?void 0:h.mergeRequest)&&r.id)||l.body.errors||(null==(s=null==h?void 0:h.errors)?void 0:s.length)!==0)throw Error("Could not set milestone of pull request")}async setPullRequestAsDraft(e,t={}){var i,r,s;let{pullRequest:n,isDraft:o}=e,a=`mutation MergeRequestSetDraft($fullPath: ID!, $pullRequestId: String!, $isDraft: Boolean!) {
  mergeRequestSetDraft(input: { projectPath: $fullPath, iid: $pullRequestId, draft: $isDraft }) {
      errors,
      mergeRequest {
        id
      }
    }
  }`,l=null==(i=(await tn(this.config,{query:a,variables:{fullPath:`${n.repository.owner.login}/${n.repository.name}`,pullRequestId:n.number.toString(),isDraft:o}},t)).body.data)?void 0:i.mergeRequestSetDraft;if(!(null!=(r=null==l?void 0:l.mergeRequest)&&r.id)||(null==(s=null==l?void 0:l.errors)?void 0:s.length)!==0)throw Error("Could not set pull request as draft")}async setPullRequestReviewers(e,t={}){var i,r,s;let{pullRequest:n,reviewers:o}=e,a=o.map(e=>{if(!e.username)throw Error('GitLab requires reviewer "username" for this function.');return e.username}),l=`mutation MergeRequestSetReviewers($fullPath: ID!, $pullRequestId: String!, $reviewerUsernames: [String!]!) {
  mergeRequestSetReviewers(input: { projectPath: $fullPath, iid: $pullRequestId, reviewerUsernames: $reviewerUsernames }) {
      errors,
      mergeRequest {
        id
      }
    }
  }`,h=null==(i=(await tn(this.config,{query:l,variables:{fullPath:`${n.repository.owner.login}/${n.repository.name}`,pullRequestId:n.number.toString(),reviewerUsernames:a}},t)).body.data)?void 0:i.mergeRequestSetReviewers;if(!(null!=(r=null==h?void 0:h.mergeRequest)&&r.id)||(null==(s=null==h?void 0:h.errors)?void 0:s.length)!==0)throw Error("Could not set pull request reviewers")}async reRequestPullRequestReview(e,t={}){var i,r,s;let{pullRequest:n,reviewer:o}=e;if(!o.graphQLId)throw Error('GitLab requires reviwer "graphQLId" for this function.');let a=`mutation MergeRequestReviewerRereview($fullPath: ID!, $pullRequestId: String!, $reviewerUserId: UserID!) {
  mergeRequestReviewerRereview(input: { projectPath: $fullPath, iid: $pullRequestId, userId: $reviewerUserId }) {
      errors,
      mergeRequest {
        id
      }
    }
  }`,l=null==(i=(await tn(this.config,{query:a,variables:{fullPath:`${n.repository.owner.login}/${n.repository.name}`,pullRequestId:n.number.toString(),reviewerUserId:o.graphQLId}},t)).body.data)?void 0:i.mergeRequestReviewerRereview;if(!(null!=(r=null==l?void 0:l.mergeRequest)&&r.id)||(null==(s=null==l?void 0:l.errors)?void 0:s.length)!==0)throw Error("Could not set pull request reviewers")}async reRequestPullRequestReviews(e,t={}){let{pullRequest:i,reviewers:r}=e,s=i.reviews;if(!s)throw Error('GitLab requires "reviews" for this function.');let n=r.filter(e=>s.find(t=>t.reviewer.graphQLId===e.graphQLId));await Promise.all(n.map(e=>this.reRequestPullRequestReview({pullRequest:i,reviewer:e},t)))}async setPullRequestAssignees(e,t={}){var i,r,s;let{pullRequest:n,assignees:o}=e,a=o.map(e=>{if(!e.username)throw Error('GitLab requires assignee "username" for this function.');return e.username}),l=`mutation MergeRequestSetAssignees($fullPath: ID!, $pullRequestId: String!, $assigneeUsernames: [String!]!) {
  mergeRequestSetAssignees(input: { projectPath: $fullPath, iid: $pullRequestId, assigneeUsernames: $assigneeUsernames }) {
    errors,
    mergeRequest {
      id
    }
  }
}`,h=null==(i=(await tn(this.config,{query:l,variables:{fullPath:`${n.repository.owner.login}/${n.repository.name}`,pullRequestId:n.number.toString(),assigneeUsernames:a}},t)).body.data)?void 0:i.mergeRequestSetAssignees;if(!(null!=(r=null==h?void 0:h.mergeRequest)&&r.id)||(null==(s=null==h?void 0:h.errors)?void 0:s.length)!==0)throw Error("Could not set pull request assignees")}async setPullRequestLabels(e,t={}){var i,r,s;let{pullRequest:n,labels:o}=e,a=o.map(e=>{if(!e.graphQLId)throw Error('GitLab requires "graphQLId" for labels in this function.');return e.graphQLId}),l=`mutation SetPullRequestLabels($fullPath: ID!, $pullRequestId: String!, $labelGraphQLIds: [LabelID!]!) {
  mergeRequestSetLabels(input: { projectPath: $fullPath, iid: $pullRequestId, labelIds: $labelGraphQLIds }) {
    mergeRequest {
      id
    }
  }
}`;if(!(null!=(s=null==(r=null==(i=(await tn(this.config,{query:l,variables:{fullPath:`${n.repository.owner.login}/${n.repository.name}`,pullRequestId:n.number.toString(),labelGraphQLIds:a}},t)).body.data)?void 0:i.mergeRequestSetLabels)?void 0:r.mergeRequest)&&s.id))throw Error("Could not set pull request labels")}async getIssue(e,t={}){var i,r,s;let n=tC(e),o=await tn(this.config,{query:`
query GetSingleIssue($projectId: ID!, $issueNumber: String!) {
  project(fullPath: $projectId) {
    id
    fullPath
    webUrl
    issue(iid: $issueNumber) {
      ${tw}
    }
  }
}
`,variables:{issueNumber:e.number,projectId:n}},t);if(!(null!=(i=o.body.data)&&i.project))throw Error(`Repository ${n} not found`);if(!(null!=(s=null==(r=o.body.data)?void 0:r.project)&&s.issue))throw Error(`Issue ${e.number} not found`);return{data:tT(o.body.data.project.issue,tl(o.body.data.project),this.getIsSelfHosted(t))}}getVariablesForIssues(e){let{updatedBefore:t,authorLogin:i,assigneeLogins:r}=e||{},s={},n=[],o=[],a=(e,t,i)=>{n.push(`$${e}: ${i}`),o.push(`${e}: $${e}`),s[e]=t};return t&&a("updatedBefore",t,"Time"),i&&a("authorUsername",i,"String"),r&&a("assigneeUsername",r[0],"String"),{variables:s,variableTypes:n,issueArguments:o}}async getIssuesForRepo(e,t={}){var i,r,s;let{cursor:n,repo:o}=e||{},a=tb(o),{variables:l,variableTypes:h,issueArguments:c}=this.getVariablesForIssues(e),u={fullPath:a,...l},d=`
      query GetIssuesFromProject(
        $fullPath: ID!
        $after: String
        ${h.length?h.join(" "):""}
      ) {
        project(
          fullPath: $fullPath
        ) {
          id
          fullPath
          webUrl
          issues(
            first: 100
            state: opened
            sort: UPDATED_DESC
            after: $after
            ${c.length?c.join(" "):""}
          ) {
            nodes {
              ${tw}
            }
            pageInfo {
              endCursor
              hasNextPage
            }
          }
        }
      }`,p=await tn(this.config,{query:d,variables:{...u,after:n}},t),g=[],m=null==(i=p.body.data)?void 0:i.project,f=tl(m||{id:"",fullPath:"",webUrl:""});return((null==(r=null==m?void 0:m.issues)?void 0:r.nodes)||[]).forEach(e=>{g.push(tT(e,f,this.getIsSelfHosted(t)))}),{pageInfo:(null==(s=null==m?void 0:m.issues)?void 0:s.pageInfo)??{endCursor:null,hasNextPage:!1},data:g.sort((e,t)=>(e.updatedDate||e.createdDate).getTime()-(t.updatedDate||t.createdDate).getTime())}}async getIssuesForRepos(e,t={}){var i,r,s,n,o;let{cursor:a}=e||{},l=e.repoIds.map(e=>e.toString().startsWith(td)?e:`${td}${e}`),{variables:h,variableTypes:c,mergeRequestArguments:u}=this.getVariablesForPullRequests(e),d={projectIds:l,...h},p=`
      query GetIssuesFromProject(
        $projectIds: [ID!]
        $after: String
        ${c.length?c.join(" "):""}
        ) {
        projects(
          ids: $projectIds
          after: $after
        ) {
          pageInfo {
            endCursor
            hasNextPage
          }
          nodes {
            id
            fullPath
            webUrl
            issues(
              first: 100
              state: opened
              sort: UPDATED_DESC
              ${u.length?u.join(" "):""}
            ) {
              nodes {
                ${tw}
              }
            }
          }
        }
      }`,g=await tn(this.config,{query:p,variables:{...d,after:a}},t),m=[];return((null==(r=null==(i=g.body.data)?void 0:i.projects)?void 0:r.nodes)||[]).forEach(e=>{var i;let r=tl(e);((null==(i=e.issues)?void 0:i.nodes)||[]).forEach(e=>m.push(tT(e,r,this.getIsSelfHosted(t))))}),{pageInfo:(null==(o=null==(n=null==(s=g.body)?void 0:s.data)?void 0:n.projects)?void 0:o.pageInfo)??{endCursor:null,hasNextPage:!1},data:m.sort((e,t)=>(e.updatedDate||e.createdDate).getTime()-(t.updatedDate||t.createdDate).getTime())}}async setIssueState(e,t={}){var i,r,s;let{issue:n,state:o}=e;if(!n.repository)throw Error('GitLab requires "repository" for this function.');let a=`mutation SetIssueState($fullPath: ID!, $issueId: String!, $status: IssueStateEvent!) {
	updateIssue(input: { projectPath: $fullPath, iid: $issueId, stateEvent: $status }) {
    issue {
      id
    }
	}
}`;if(!(null!=(s=null==(r=null==(i=(await tn(this.config,{query:a,variables:{fullPath:`${n.repository.owner.login}/${n.repository.name}`,issueId:n.number,status:"OPEN"===o?"REOPEN":"CLOSE"}},t)).body.data)?void 0:i.updateIssue)?void 0:r.issue)&&s.id))throw Error("Could not set issue status")}async closeIssue(e,t={}){await this.setIssueState({...e,state:"CLOSED"},t)}async reOpenIssue(e,t={}){await this.setIssueState({...e,state:"OPEN"},t)}async setIssueLabels(e,t={}){var i,r,s;let{issue:n,labels:o}=e;if(!n.repository)throw Error('GitLab requires a "repository" for this function.');let a=o.map(e=>{if(!e.graphQLId)throw Error('GitLab requires label "graphQLId" for this function.');return e.graphQLId}),l=`mutation SetIssueLabels($fullPath: ID!, $issueId: String!, $labelGraphQLIds: [ID!]) {
  updateIssue(input: { projectPath: $fullPath, iid: $issueId, labelIds: $labelGraphQLIds }) {
    issue {
      id
    }
  }
}`;if(!(null!=(s=null==(r=null==(i=(await tn(this.config,{query:l,variables:{fullPath:`${n.repository.owner.login}/${n.repository.name}`,issueId:n.number,labelGraphQLIds:a}},t)).body.data)?void 0:i.updateIssue)?void 0:r.issue)&&s.id))throw Error("Could not set issue labels")}async setIssueMilestone(e,t={}){var i,r,s;let{issue:n,milestone:o}=e;if(!n.repository)throw Error('GitLab requires "repository" for this function.');let a=`mutation SetIssueMilestone($fullPath: ID!, $issueId: String!, $milestoneId: ID) {
  updateIssue(input: { projectPath: $fullPath, iid: $issueId, milestoneId: $milestoneId }) {
    errors
    issue {
      id
      milestone {
        id
      }
    }
  }
}`,l=await tn(this.config,{query:a,variables:{fullPath:`${n.repository.owner.login}/${n.repository.name}`,issueId:n.number,milestoneId:(null==o?void 0:o.id)??null}},t),h=null==(i=l.body.data)?void 0:i.updateIssue;if(!(null!=(r=null==h?void 0:h.issue)&&r.id)||l.body.errors||(null==(s=null==h?void 0:h.errors)?void 0:s.length)!==0)throw Error("Could not set milestone of issue")}async setIssueAssignees(e,t={}){var i,r,s;let{issue:n,assignees:o}=e;if(!n.repository)throw Error('GitLab requires "repository" for this function.');let a=o.map(e=>e.username),l=`mutation SetIssueAssignees($fullPath: ID!, $issueId: String!, $assigneeUsernames: [String!]!) {
  issueSetAssignees(input: { projectPath: $fullPath, iid: $issueId, assigneeUsernames: $assigneeUsernames }) {
    errors,
    issue {
      id
    }
  }
}`,h=null==(i=(await tn(this.config,{query:l,variables:{fullPath:`${n.repository.owner.login}/${n.repository.name}`,issueId:n.number,assigneeUsernames:a}},t)).body.data)?void 0:i.issueSetAssignees;if(!(null!=(r=null==h?void 0:h.issue)&&r.id)||(null==(s=null==h?void 0:h.errors)?void 0:s.length)!==0)throw Error("Could not set issue assignees")}async getMilestonesForRepo(e,t={}){var i,r,s,n,o,a,l;let{repo:{namespace:h,name:c},cursor:u}=e,d=await tn(this.config,{query:`
query getLabelsForRepo(
  $fullPath: ID!
  $after: String
) {
  project(
    fullPath: $fullPath
  ) {
    webUrl
    milestones(after: $after) {
      nodes {
        ${tp}
      }
      pageInfo {
        endCursor
        hasNextPage
      }
    }
  }
}
`,variables:{fullPath:`${h}/${c}`,after:u}},t);return{pageInfo:(null==(s=null==(r=null==(i=d.body.data)?void 0:i.project)?void 0:r.milestones)?void 0:s.pageInfo)??{endCursor:null,hasNextPage:!1},data:(null==(l=null==(a=null==(o=null==(n=d.body.data)?void 0:n.project)?void 0:o.milestones)?void 0:a.nodes)?void 0:l.map(e=>{var t,i;return t_(e,(null==(i=null==(t=d.body.data)?void 0:t.project)?void 0:i.webUrl)||"")}))??[]}}async getLabelsForRepo(e,t={}){var i,r,s,n,o,a,l;let{repo:{namespace:h,name:c},cursor:u}=e,d=await tn(this.config,{query:`
query getLabelsForRepo(
  $fullPath: ID!
  $after: String
) {
  project(
    fullPath: $fullPath
  ) {
    labels(after: $after) {
      nodes {
        ${tf}
      }
      pageInfo {
        endCursor
        hasNextPage
      }
    }
  }
}
`,variables:{fullPath:`${h}/${c}`,after:u}},t);return{pageInfo:(null==(s=null==(r=null==(i=d.body.data)?void 0:i.project)?void 0:r.labels)?void 0:s.pageInfo)??{endCursor:null,hasNextPage:!1},data:(null==(l=null==(a=null==(o=null==(n=d.body.data)?void 0:n.project)?void 0:o.labels)?void 0:a.nodes)?void 0:l.map(tA))??[]}}},t$=["assignee","comment","summary","created","creator","updated","votes","issuetype","status","labels","components","project"],tE=(e,t,i)=>{var r,s,n,o;let a=e.fields.assignee,l=!i;return{id:e.id,commentCount:e.fields.comment.comments.length,number:e.key,title:e.fields.summary,url:t?`${t}/browse/${e.key}`:null,closedDate:null,createdDate:new Date(e.fields.created),author:tB(e.fields.creator,t,l),updatedDate:new Date(e.fields.updated),assignees:a?[tB(a,t,l)]:[],description:null,repository:null,project:{name:e.fields.project.name,resourceId:i??null,namespace:null},state:tL(e.fields.status),statusTransitions:(null==(r=e.transitions)?void 0:r.map(tO))??[],components:(null==(s=e.fields.components)?void 0:s.map(tx))??[],type:e.fields.issuetype.name,upvoteCount:(null==(n=e.fields.votes)?void 0:n.votes)||0,labels:(null==(o=e.fields.labels)?void 0:o.map(e=>({color:null,description:null,id:null,name:e})))??[]}},tO=e=>{let t;switch(e.to.statusCategory.name){case"To Do":t="TO_DO";break;case"In Progress":t="IN_PROGRESS";break;default:t="DONE"}return{name:e.name,id:e.id,to:{id:e.to.id,name:e.to.name,color:e.to.statusCategory.colorName,category:t}}},tx=e=>({description:e.description??null,id:e.id,name:e.name}),tF=(e,t,i)=>i&&e.name?`${t}/secure/ViewProfile.jspa?name=${encodeURIComponent(e.name)}`:`${t}/jira/people/${e.accountId}`,tB=(e,t,i)=>({id:(i?e.key:e.accountId)??"",name:e.displayName,email:e.emailAddress,avatarUrl:e.avatarUrls["48x48"],username:e.displayName,url:tF(e,t,i)}),tL=e=>{let t;switch(e.statusCategory.name){case"To Do":t="TO_DO";break;case"In Progress":t="IN_PROGRESS";break;default:t="DONE"}return{id:e.id,name:e.name,color:e.statusCategory.colorName,category:t}},tU=(e,t,i)=>i?`${t.baseUrl||"https://api.atlassian.com/ex/jira"}/${i}`:`${(null==t?void 0:t.baseUrl)||e.baseUrl}`,tW=async(e,t,i,r={})=>{let{number:s,resourceId:n}=t||{};return{data:tE((await e.request({url:`${tU(e,r,n)}/rest/api/2/issue/${s}?fields=${t$.join(",")}&expand=transitions`,headers:G(r.token||e.token)})).body,i,n)}},tq=async(e,t,i,r={})=>{let{page:s,resourceId:n}=t||{},o=s??0,a=`statusCategory != Done AND (creator = currentUser() OR assignee = currentUser()
OR comment ~ currentUser() OR summary ~ currentUser() OR description ~ currentUser())`,l=(await e.request({url:`${tU(e,r,n)}/rest/api/2/search?jql=${a}&startAt=${o}&maxResults=10&fields=${t$.join(",")}&expand=transitions`,headers:G(r.token||e.token)})).body.issues.map(e=>tE(e,i,n)),h=10==l.length;return{data:l,pageInfo:{hasNextPage:h,nextPage:h?o+l.length:null}}},tM=async(e,t,i,r={})=>{let{assigneeLogins:s,authorLogin:n,mentionLogin:o,page:a,project:l,resourceId:h}=t||{},c=a??0,u=[`project = "${l}"`,"statusCategory != Done"];n&&u.push(`creator in ("${n}")`),s&&0!==s.length&&u.push(`assignee in ("${s.join('", "')}")`),o&&u.push(`comment ~ "${o}"`);let d=(await e.request({url:`${tU(e,r,h)}/rest/api/2/search?jql=${u.join(" AND ")}&startAt=${c}&maxResults=10&fields=${t$.join(",")}&expand=transitions`,headers:G(r.token||e.token)})).body.issues.map(e=>tE(e,i,h)),p=10==d.length;return{data:d,pageInfo:{hasNextPage:p,nextPage:p?c+d.length:null}}},tN=async(e,t,i={})=>{let{issue:r,labels:s}=t;if(!r.project)throw Error('Jira requires a "project" for this function.');let n={fields:{labels:s.map(e=>e.name)}};await e.request({method:"PUT",url:`${tU(e,i,r.project.resourceId??void 0)}/rest/api/2/issue/${r.id}`,body:JSON.stringify(n),headers:{...G(i.token||e.token),"Content-Type":"application/json"}})},tH=async(e,t,i={})=>{let{issue:r,components:s}=t;if(!r.project)throw Error('Jira requires a "project" for this function.');let n={fields:{components:s.map(e=>({id:e.id}))}};await e.request({method:"PUT",url:`${tU(e,i,r.project.resourceId??void 0)}/rest/api/2/issue/${r.id}`,body:JSON.stringify(n),headers:{...G(i.token||e.token),"Content-Type":"application/json"}})},tG=async(e,t,i={})=>{let{issue:r,status:s}=t;if(!r.project)throw Error('Jira requires a "project" for this function.');if(!s.id)throw Error('Jira requires a status "id" for this function.');let n={transition:{id:s.id}};await e.request({method:"POST",url:`${tU(e,i,r.project.resourceId??void 0)}/rest/api/2/issue/${r.id}/transitions`,body:JSON.stringify(n),headers:{...G(i.token||e.token),"Content-Type":"application/json"}})},tV=async(e,t,i={})=>{let{resourceId:r,projectIdOrKey:s}=t,n=new URL(`${tU(e,i,r)}/rest/api/2/project/${s}/components`);return{data:(await e.request({url:n.toString(),headers:G(i.token||e.token)})).body}},tQ="https://api.atlassian.com/ex/jira",tj=class extends N{constructor(){super(...arguments),this._resourceUrlCache={}}async getResourceUrl(e,t={}){var i;let r=t.token||this.config.token;if(!r)return null;let s=this._resourceUrlCache[r];return s?s[e.resourceId]??null:(await this.getJiraResourcesForCurrentUser(t),(null==(i=this._resourceUrlCache[r])?void 0:i[e.resourceId])??null)}async getCurrentUserForResource(e,t={}){let i=await this.getResourceUrl({resourceId:e.resourceId},t),r=await this.config.request({url:`${t.baseUrl||tQ}/${e.resourceId}/rest/api/2/myself`,headers:G(t.token||this.config.token)});return{data:{name:r.body.displayName,email:r.body.emailAddress,avatarUrl:r.body.avatarUrls["48x48"],id:r.body.accountId,username:r.body.displayName,url:i?`${i}/jira/people/${r.body.accountId}`:null}}}async getJiraResourcesForCurrentUser(e={}){let t=await this.config.request({url:`${e.baseUrl||"https://api.atlassian.com/"}/oauth/token/accessible-resources`,headers:G(e.token||this.config.token)}),i=e.token||this.config.token,r=i?this._resourceUrlCache[i]||{}:void 0,s=t.body.map(e=>(r&&(r[e.id]=e.url),{avatarUrl:e.avatarUrl,id:e.id,name:e.name,url:e.url}));return i&&(this._resourceUrlCache[i]=r),{data:s}}async getJiraProjectsForResource(e,t={}){let i=new URL(`${t.baseUrl||tQ}/${e.resourceId}/rest/api/2/project/search`);i.searchParams.set("maxResults","100"),e.cursor&&i.searchParams.set("startAt",e.cursor);let r=await this.config.request({url:i.toString(),headers:G(t.token||this.config.token)});return{pageInfo:{hasNextPage:0!==r.body.values.length,endCursor:(r.body.startAt+r.body.values.length).toString()},data:r.body.values.map(t=>({id:t.id,key:t.key,name:t.name,resourceId:e.resourceId}))}}async getJiraProjectsForResources(e,t={}){let i=[];return await Promise.all(e.resourceIds.map(async e=>{let r=await this.getJiraProjectsForResource({resourceId:e},t);i.push(...r.data)})),{data:i}}async getAccountsForJiraProject(e,t={}){let{resourceId:i,projectKey:r,cursor:s}=e,n=await this.getResourceUrl({resourceId:i},t),o=new URL(`${t.baseUrl||tQ}/${i}/rest/api/2/user/assignable/search`);o.searchParams.set("maxResults","100"),s&&o.searchParams.set("startAt",s),o.searchParams.set("project",r);let a=await this.config.request({url:o.toString(),headers:G(t.token||this.config.token)});return{pageInfo:{hasNextPage:0!==a.body.length,endCursor:((s?parseInt(s):0)+a.body.length).toString()},data:a.body.filter(e=>"app"!==e.accountType&&e.active).map(e=>tB(e,n,!1))}}async getComponentsForJiraProject(e,t={}){return await tV(this.config,e,t)}async getIssue(e,t={}){let i=await this.getResourceUrl({resourceId:e.resourceId},t);return await tW(this.config,e,i,t)}async getIssuesForProject(e,t={}){let i=await this.getResourceUrl({resourceId:e.resourceId},t);return await tM(this.config,e,i,t)}async getIssuesForResourceForCurrentUser(e,t={}){let i=await this.getResourceUrl({resourceId:e.resourceId},t);return await tq(this.config,e,i,t)}async setIssueStatus(e,t={}){await tG(this.config,e,t)}async setIssueAssignee(e,t={}){let{issue:i,assignee:r}=e;if(!i.project)throw Error('Jira Cloud requires a "project" for this function.');if(!i.project.resourceId)throw Error('Jira Cloud requires a project "resourceId" for this function.');let s={accountId:null==r?void 0:r.id};await this.config.request({method:"PUT",url:`${t.baseUrl||tQ}/${i.project.resourceId}/rest/api/2/issue/${i.id}/assignee`,body:JSON.stringify(s),headers:{...G(t.token||this.config.token),"Content-Type":"application/json"}})}async setIssueComponents(e,t={}){await tH(this.config,e,t)}async setIssueLabels(e,t={}){await tN(this.config,e,t)}async getLabelsForResource(e,t={}){let{resourceId:i,cursor:r}=e,s=new URL(`${t.baseUrl||tQ}/${i}/rest/api/2/label`);s.searchParams.set("maxResults","100"),r&&s.searchParams.set("startAt",r);let n=await this.config.request({url:s.toString(),headers:G(t.token||this.config.token)});return{pageInfo:{hasNextPage:!n.body.isLast,endCursor:(n.body.startAt+n.body.values.length).toString()},data:n.body.values.map(e=>({color:null,description:null,id:null,name:e}))}}},tz=class extends H{async getCurrentUser(e={}){let t=await this.config.request({url:`${(null==e?void 0:e.baseUrl)||this.config.baseUrl}/rest/api/2/myself`,headers:G((null==e?void 0:e.token)||this.config.token)});return{data:{name:t.body.displayName,email:t.body.emailAddress,avatarUrl:t.body.avatarUrls["48x48"],id:t.body.key,username:t.body.displayName,url:null}}}async getJiraProjects(e={}){return{data:(await this.config.request({url:`${(null==e?void 0:e.baseUrl)||this.config.baseUrl}/rest/api/2/project`,headers:G((null==e?void 0:e.token)||this.config.token)})).body.map(e=>({id:e.id,name:e.name}))}}async getIssue(e,t={}){if(!t.baseUrl)throw Error('Jira Server requires a "baseUrl" for this function.');return await tW(this.config,e,t.baseUrl,t)}async getIssuesForProject(e,t={}){if(!t.baseUrl)throw Error('Jira Server requires a "baseUrl" for this function.');return await tM(this.config,e,t.baseUrl,t)}async getIssuesForResourceForCurrentUser(e,t={}){if(!t.baseUrl)throw Error('Jira Server requires a "baseUrl" for this function.');return await tq(this.config,e,t.baseUrl,t)}async setIssueStatus(e,t={}){await tG(this.config,e,t)}async setIssueLabels(e,t={}){await tN(this.config,e,t)}async setIssueComponents(e,t={}){await tH(this.config,e,t)}async getLabels(e={}){return{data:(await this.config.request({url:`${(null==e?void 0:e.baseUrl)||this.config.baseUrl}/rest/api/2/jql/autocompletedata/suggestions?fieldName=labels`,headers:G(e.token||this.config.token)})).body.results.map(({displayName:e})=>({color:null,description:null,id:null,name:e}))}}async getComponentsForJiraProject(e,t={}){return await tV(this.config,e,t)}},tY="https://api.trello.com",tK=(e,t)=>{let i=new Date(1e3*parseInt(e.id.substring(0,8),16));return{id:e.id,commentCount:e.badges.comments,number:e.idShort.toString(),title:e.name,url:e.url,closedDate:null,createdDate:new Date(i.toISOString()),author:null,updatedDate:new Date(e.dateLastActivity),assignees:e.idMembers.map(e=>({id:e,username:null,name:null,email:null,avatarUrl:null,url:null})),description:null,state:t[e.idList??""]?{id:e.idList,name:t[e.idList].name,color:null}:null,type:null,repository:null,upvoteCount:e.badges.votes,labels:e.labels.map(e=>({color:e.color,description:null,id:e.id,name:e.name}))}},tJ=class extends N{async getCurrentUser(e,t={}){let i=await this.config.request({url:`${t.baseUrl||tY}/1/members/me?key=${e.appKey}&token=${t.token||this.config.token}`,headers:G(t.token||this.config.token)});return{data:{name:i.body.fullName,email:i.body.email,avatarUrl:i.body.avatarHash?`https://trello-members.s3.amazonaws.com/${i.body.id}/${i.body.avatarHash}/50.png`:null,id:i.body.id,username:i.body.username,url:i.body.url}}}async getBoardsForCurrentUser(e,t={}){return{data:(await this.config.request({url:`${t.baseUrl||tY}/1/members/me/boards?fields=name&key=${e.appKey}&token=${t.token||this.config.token}&filter=open`,headers:G(t.token||this.config.token)})).body.map(e=>({id:e.id,name:e.name}))}}async getListsForTrelloBoard(e,t={}){let{appKey:i,boardId:r}=e;return{data:(await this.config.request({url:`${t.baseUrl||tY}/1/boards/${r}/lists?key=${i}&token=${t.token||this.config.token}`,headers:G(t.token||this.config.token)})).body}}async getAccountsForTrelloBoard(e,t={}){let{appKey:i,boardId:r}=e;return{data:(await this.config.request({url:`${t.baseUrl||tY}/1/boards/${r}/members?key=${i}&token=${t.token||this.config.token}`,headers:G(t.token||this.config.token)})).body.map(e=>({id:e.id,name:e.fullName,username:e.username,email:null,avatarUrl:null,url:null}))}}async getIssuesForBoard(e,t={}){let i=["-is:archived","sort:edited"],{appKey:r,boardId:s,filterText:n,assigneeLogins:o,trelloBoardListsById:a}=e||{};o&&i.push("@me");let l=`${n?`${n}`:""}${i.join(" ")} board:${s}`;return{data:(await this.config.request({url:`${t.baseUrl||tY}/1/search?key=${r}&query=${l}&cards_limit=1000&token=${t.token||this.config.token}`,headers:G(t.token||this.config.token)})).body.cards.map(e=>tK(e,a||{}))}}async updateIssue(e,t,i,r){return await this.config.request({method:"PUT",url:`${r.baseUrl||tY}/1/cards/${t.id}?key=${e}&token=${r.token||this.config.token}&${i}`,headers:G(r.token||this.config.token)})}async setIssueStatus(e,t={}){let{appKey:i,issue:r,status:s}=e;if(!s.id)throw Error('Trello requires a status "id" for this function.');let n=`idList=${s.id}`;if(!(await this.updateIssue(i,r,n,t)).body.id)throw Error("Could not set issue status")}async setIssueAssignees(e,t={}){let{appKey:i,issue:r,assignees:s}=e,n=s.map(e=>e.id),o=`idMembers=${encodeURIComponent(n.join(","))}`;if(!(await this.updateIssue(i,r,o,t)).body.id)throw Error("Could not set issue status")}async setIssueLabels(e,t={}){let{appKey:i,issue:r,labels:s}=e,n=s.map(e=>e.id).join(",");if(!(await this.config.request({method:"PUT",url:`${t.baseUrl||tY}/1/cards/${r.id}?key=${i}&token=${t.token||this.config.token}&idLabels=${encodeURIComponent(n)}`,headers:G(t.token||this.config.token)})).body.id)throw Error("Could not set issue status")}async setIssueArchived(e,t={}){let{appKey:i,issue:r,archived:s}=e;if(!(await this.config.request({method:"PUT",url:`${t.baseUrl||tY}/1/cards/${r.id}?key=${i}&token=${t.token||this.config.token}&closed=${s}`,headers:G(t.token||this.config.token)})).body.id)throw Error("Could not update issue archived status")}async archiveIssue(e,t={}){await this.setIssueArchived({...e,archived:!0},t)}async unArchiveIssue(e,t={}){await this.setIssueArchived({...e,archived:!1},t)}async getLabelsForBoard(e,t={}){let{appKey:i,boardId:r}=e;return{data:(await this.config.request({url:`${t.baseUrl||tY}/1/boards/${r}/labels?key=${i}&token=${t.token||this.config.token}`,headers:G(t.token||this.config.token)})).body.map(e=>({color:e.color,description:null,id:e.id,name:e.name}))}}},tZ={};A(tZ,{default:()=>tX});var tX={},t0={};A(t0,{default:()=>t1});var t1={},t2={};A(t2,{default:()=>t3});var t3={},t4={};A(t4,{decode:()=>ip,decodeV0:()=>ig,encode:()=>id,validate:()=>iu});var t8=((g=t8||{}).Zero="0",g.One="1",g),t5=((m=t5||{}).PullRequest="pr",m.Issue="issue",m),t7=((f=t7||{}).Azure="azure",f.Github="github",f.GithubEnterprise="githubEnterprise",f.Gitlab="gitlab",f.GitlabSelfHosted="gitlabSelfHosted",f.Bitbucket="bitbucket",f.BitbucketServer="bitbucketServer",f.Jira="jira",f.JiraServer="jiraServer",f.Trello="trello",f),t9=class{constructor(){}validate(e){if(!e.organizationName)throw Error("organizationName is required");if(!e.projectId)throw Error("projectId is required");if(!e.entityId)throw Error("issueId is required")}encode(e){if(this.validate(e),!e.organizationName||!e.projectId||!e.entityId)throw Error("Missing required fields for Azure DevOps issue uniqueId");let t=[];return t.push("azure"),t.push("issue"),t.push("1"),t.push(e.domain||""),t.push(e.organizationName),t.push(e.projectId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<7)throw Error("Invalid Azure DevOps issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:e[4],projectId:e[5],repoId:null,entityId:e[6]}}},t6=class{constructor(){}validate(e){if(!e.organizationName)throw Error("organizationName is required");if(!e.projectId)throw Error("projectId is required");if(!e.repoId)throw Error("repoId is required");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.organizationName||!e.projectId||!e.repoId||!e.entityId)throw Error("Missing required fields for Azure DevOps pull request uniqueId");let t=[];return t.push("azure"),t.push("pr"),t.push("1"),t.push(e.domain||""),t.push(e.organizationName),t.push(e.projectId),t.push(e.repoId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<8)throw Error("Invalid Azure DevOps pull request uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:e[4],projectId:e[5],repoId:e[6],entityId:e[7]}}},ie=class{constructor(){}validate(e){if(e.domain&&"bitbucket"==e.provider)throw Error("domain is only supported for BitbucketServer");if(!e.repoId)throw Error("repoId is required");if(!e.entityId)throw Error("issueId is required")}encode(e){if(this.validate(e),!e.repoId||!e.entityId)throw Error("Missing required fields for Bitbucket DevOps issue uniqueId");let t=[];return t.push(e.domain?"bitbucketServer":"bitbucket"),t.push("issue"),t.push("1"),t.push(e.domain||""),t.push(e.repoId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<6)throw Error("Invalid Bitbucket DevOps issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:e[4],entityId:e[5]}}},it=class{constructor(){}validate(e){if(e.domain&&"bitbucket"==e.provider)throw Error("domain is only supported for BitbucketServer");if(!e.repoId)throw Error("repoId is required");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.repoId||!e.entityId)throw Error("Missing required fields for Bitbucket DevOps pull request uniqueId");let t=[];return t.push(e.domain?"bitbucketServer":"bitbucket"),t.push("pr"),t.push("1"),t.push(e.domain||""),t.push(e.repoId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<6)throw Error("Invalid Bitbucket DevOps pull request uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:e[4],entityId:e[5]}}},ii=class{constructor(){}validate(e){if(e.domain&&"github"==e.provider)throw Error("domain is only supported for GithubEnterprise");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.entityId)throw Error("Missing required fields for Github issue uniqueId");let t=[];return t.push(e.domain?"githubEnterprise":"github"),t.push("issue"),t.push("1"),t.push(e.domain||""),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<5)throw Error("Invalid Github issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:e[4]}}},ir=class{constructor(){}validate(e){if(e.domain&&"github"==e.provider)throw Error("domain is only supported for GithubEnterprise");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.entityId)throw Error("Missing required fields for Github pull request uniqueId");let t=[];return t.push(e.domain?"githubEnterprise":"github"),t.push("pr"),t.push("1"),t.push(e.domain||""),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<5)throw Error("Invalid Github pull request uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:e[4]}}},is=class{constructor(){}validate(e){if(e.domain&&"gitlab"==e.provider)throw Error("domain is only supported for GitlabSelfHosted");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.entityId)throw Error("Missing required fields for Gitlab issue uniqueId");let t=[];return t.push(e.domain?"gitlabSelfHosted":"gitlab"),t.push("issue"),t.push("1"),t.push(e.domain||""),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<5)throw Error("Invalid Gitlab issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:e[4]}}},io=class{constructor(){}validate(e){if(e.domain&&"gitlab"==e.provider)throw Error("domain is only supported for GitlabSelfHosted");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.entityId)throw Error("Missing required fields for Gitlab pull request uniqueId");let t=[];return t.push(e.domain?"gitlabSelfHosted":"gitlab"),t.push("pr"),t.push("1"),t.push(e.domain||""),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<5)throw Error("Invalid Gitlab pull request uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:e[4]}}},ia=class{constructor(){}validate(e){if(e.domain&&"jira"==e.provider)throw Error("domain is only supported for JiraServer");if(!e.resourceId)throw Error("resourceId is required");if(!e.projectId)throw Error("projectId is required");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.resourceId||!e.projectId||!e.entityId)throw Error("Missing required fields for Jira issue uniqueId");let t=[];return t.push(e.domain?"jiraServer":"jira"),t.push("issue"),t.push("1"),t.push(e.domain||""),t.push(e.resourceId),t.push(e.projectId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<7)throw Error("Invalid Jira issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:e[4],accountOrOrgId:null,organizationName:null,projectId:e[5],repoId:null,entityId:e[6]}}},il=class{constructor(){}validate(e){if(!e.accountOrOrgId)throw Error("accountOrOrgId is required");if(!e.projectId)throw Error("projectId is required");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.accountOrOrgId||!e.projectId||!e.entityId)throw Error("Missing required fields for Trello issue uniqueId");let t=[];return t.push("trello"),t.push("issue"),t.push("1"),t.push(""),t.push(e.accountOrOrgId),t.push(e.projectId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<7)throw Error("Invalid Trello issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:e[4],organizationName:null,projectId:e[5],repoId:null,entityId:e[6]}}},ih=(e,t)=>{if(!t)throw Error("entityType is required");if(!e)throw Error("provider is required");switch(e){case"azure":return"pr"===t?new t6:new t9;case"bitbucket":case"bitbucketServer":return"pr"===t?new it:new ie;case"github":case"githubEnterprise":return"pr"===t?new ir:new ii;case"gitlab":case"gitlabSelfHosted":return"pr"===t?new io:new is;case"jira":case"jiraServer":if("pr"===t)throw Error("EntityType PullRequest is not valid for Jira");return new ia;case"trello":if("pr"===t)throw Error("EntityType PullRequest is not valid for Jira");return new il;default:throw Error("unknown provider")}},ic=e=>{if(!e.entityType)throw Error("entityType is required");if(!e.provider)throw Error("provider is required");if(!e.entityId)throw Error("entityID is required")},iu=e=>{if("0"===e.version){ic(e);return}ih(e.provider,e.entityType).validate(e)},id=e=>ih(e.provider,e.entityType).encode(e),ip=e=>{let t=JSON.parse(e);if(!t||!t.length)throw Error("invalid issue unique id");return ih(t[0],t[1]).decode(t)},ig=(e,t,i)=>{if(!i)throw Error("entityID is required");try{let r=JSON.parse(i);if(!r||!r.length)throw Error("Invalid pull request uniqueId");let s=[e,t,"0",...r];return ih(e,t).decode(s)}catch{return{provider:e,entityType:t,version:"0",domain:"",resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:i}}},im={};A(im,{CHANGES_REQUESTED_ACTION_CATEGORY:()=>iF,CHANGES_REQUESTED_BUCKET_ID:()=>iP,CONFLICTS_ACTION_CATEGORY:()=>iO,CONFLICTS_BUCKET_ID:()=>iR,DRAFT_ACTION_CATEGORY:()=>iU,DRAFT_BUCKET_ID:()=>iD,FAILING_CI_ACTION_CATEGORY:()=>iE,FAILING_CI_BUCKET_ID:()=>iC,NEEDS_MY_REVIEW_ACTION_CATEGORY:()=>ix,NEEDS_MY_REVIEW_BUCKET_ID:()=>iS,OTHER_ACTION_CATEGORY:()=>iW,OTHER_BUCKET_ID:()=>iT,PINNED_BUCKET_ID:()=>iv,READY_TO_MERGE_ACTION_CATEGORY:()=>iI,READY_TO_MERGE_BUCKET_ID:()=>iy,REVIEWER_COMMENTED_ACTION_CATEGORY:()=>iB,REVIEWER_COMMENTED_BUCKET_ID:()=>iA,SNOOZED_BUCKET_ID:()=>i_,UNASSIGNED_REVIEWERS_ACTION_CATEGORY:()=>i$,UNASSIGNED_REVIEWERS_BUCKET_ID:()=>ib,WAITING_FOR_REVIEW_ACTION_CATEGORY:()=>iL,WAITING_FOR_REVIEW_BUCKET_ID:()=>ik,getActionablePullRequests:()=>iq,groupPullRequestsIntoBuckets:()=>iM});var iw=(e,t,i,r)=>({id:e,faIconName:i,name:t,priority:r,pullRequests:[]}),iv="pinned",iy="readyToMerge",ib="unassignedReviewers",iC="failingCI",iR="conflicts",iS="needsMyReview",iP="changesRequested",iA="reviewerCommented",ik="waitingForReview",iD="draft",iT="other",i_="snoozed",iI="readyToMerge",i$="unassignedReviewers",iE="failingCI",iO="conflicts",ix="needsMyReview",iF="changesRequested",iB="reviewerCommented",iL="waitingForReview",iU="draft",iW="other",iq=(e,t,i)=>e.map(e=>{var r,s,n,o,a,l,h,c,u,d,p,g;let m={...e,suggestedActionCategory:iW,priority:1e3,viewer:{canMerge:!1,isAuthor:!1,isAssignee:!1,isReviewer:!1,shouldMerge:!1,shouldAssignReviewer:!1,waitingOnReviews:!1,shouldReview:!1},failingCI:!1,hasConflicts:!1,changeRequestReviewCount:0,commentReviewCount:0,approvalReviewCount:0};m.viewer.isAuthor=(null==(r=e.author)?void 0:r.id)===t.id,m.viewer.isAssignee=(null==(s=e.assignees)?void 0:s.some(e=>e.id===t.id))??!1,m.viewer.isReviewer=(null==(n=e.reviews)?void 0:n.some(e=>e.reviewer.id===t.id))??!1,m.viewer.canMerge=(null==(o=e.permissions)?void 0:o.canMerge)??!0,m.hasConflicts="CONFLICTS"===e.mergeableState,m.failingCI=(null==(l=null==(a=e.headCommit)?void 0:a.buildStatuses)?void 0:l.some(e=>"ERROR"===e.state||"FAILED"===e.state))??!1,m.commentReviewCount=(null==(h=e.reviews)?void 0:h.filter(e=>"COMMENTED"===e.state).length)??0,m.approvalReviewCount=(null==(c=e.reviews)?void 0:c.filter(e=>"APPROVED"===e.state).length)??0,m.changeRequestReviewCount=(null==(u=e.reviews)?void 0:u.filter(e=>"CHANGES_REQUESTED"===e.state).length)??0;let f=null==(d=null==i?void 0:i.enrichedItemsByUniqueId)?void 0:d[e.uuid];return null!=f&&(m.viewer.enrichedItems=f,f.some(e=>"pin"===e.type)&&(m.viewer.pinned=!0,m.priority-=800),f.some(e=>"snooze"===e.type)&&(m.viewer.snoozed=!0)),(m.viewer.isAuthor||m.viewer.isAssignee&&!m.viewer.isReviewer)&&m.viewer.canMerge&&!m.failingCI&&"MERGEABLE"===e.mergeableState&&(!e.reviewDecision||"APPROVED"===e.reviewDecision)&&(m.viewer.shouldMerge=!0,m.suggestedActionCategory=iI),m.viewer.isAuthor&&e.isDraft&&(m.suggestedActionCategory=iU),m.viewer.isAuthor&&"REVIEW_REQUESTED"===e.reviewDecision&&(m.suggestedActionCategory=iL,m.viewer.waitingOnReviews=!0),m.viewer.isAuthor&&"COMMENTED"===e.reviewDecision&&(m.suggestedActionCategory=iB),m.viewer.isAuthor&&m.failingCI&&(m.suggestedActionCategory=iE),m.viewer.isAuthor&&m.hasConflicts&&(m.suggestedActionCategory=iO),m.viewer.isAuthor&&"CHANGES_REQUESTED"===e.reviewDecision&&(m.suggestedActionCategory=iF),m.viewer.isAuthor&&!(null!=(p=e.reviews)&&p.length)&&(m.suggestedActionCategory=i$,m.viewer.shouldAssignReviewer=!0),null!=(g=e.reviews)&&g.some(e=>e.reviewer.id===t.id&&"REVIEW_REQUESTED"===e.state)&&(m.suggestedActionCategory=ix,m.viewer.shouldReview=!0),m}),iM=(e,t,i)=>{let r={pinned:iw(iv,"Pinned","thumbtack",-1),readyToMerge:iw(iy,"Ready to Merge","code-merge",0),unassignedReviewers:iw(ib,"Unassigned Reviewers","user-plus",1),failingCI:iw(iC,"Failing CI","circle-x",2),conflicts:iw(iR,"Resolve Conflicts","triangle-exclamation",3),needsMyReview:iw(iS,"Needs My Review","eye",4),changesRequested:iw(iP,"Suggested Changes","file-plus",5),reviewerCommented:iw(iA,"Reviewer Commented","comment",6),waitingForReview:iw(ik,"Waiting for Review","circle-pause",7),draft:iw(iD,"Draft","compass-drafting",8),other:iw(iT,"Other","ellipsis",9),snoozed:iw(i_,"Snoozed","snooze",10)},s=iq(e,t,i).reduce((e,t)=>(e[t.uuid]=t,e),{});return e.forEach(e=>{let t=s[e.uuid],i=!0;if(t.viewer.snoozed){r[i_].pullRequests.push(e);return}t.viewer.pinned&&r[iv].pullRequests.push(e),(t.viewer.isAuthor||t.viewer.isAssignee&&!t.viewer.isReviewer)&&t.viewer.canMerge&&"MERGEABLE"===t.mergeableState&&(!e.reviewDecision||"APPROVED"===e.reviewDecision)&&(r[iy].pullRequests.push(e),i=!1),t.viewer.shouldAssignReviewer&&(r[ib].pullRequests.push(e),i=!1),t.viewer.isAuthor&&t.failingCI&&(r[iC].pullRequests.push(e),i=!1),t.viewer.isAuthor&&t.hasConflicts&&(r[iR].pullRequests.push(e),i=!1),t.viewer.shouldReview&&(r[iS].pullRequests.push(e),i=!1),t.viewer.isAuthor&&"CHANGES_REQUESTED"===t.reviewDecision&&(r[iP].pullRequests.push(e),i=!1),t.viewer.isAuthor&&"COMMENTED"===t.reviewDecision&&(r[iA].pullRequests.push(e),i=!1),t.viewer.isAuthor&&"REVIEW_REQUESTED"===t.reviewDecision&&(r[ik].pullRequests.push(e),i=!1),t.isDraft&&(r[iD].pullRequests.push(e),i=!1),i&&r[iT].pullRequests.push(e)}),Object.values(r).forEach(e=>{e.pullRequests.sort((e,t)=>s[e.uuid].priority-s[t.uuid].priority)}),r},iN={};A(iN,{getPullRequestRank:()=>iH});var iH=(e,t,i)=>{var r,s,n;let o=0,a,l;return null==(r=e.reviews)||r.forEach(e=>{e.reviewer.id===t&&(a=e.state),"CHANGES_REQUESTED"===e.state?l="CHANGES_REQUESTED":"APPROVED"===e.state&&"CHANGES_REQUESTED"!==l&&(l="APPROVED")}),l||(l="REVIEW_REQUESTED"),(null==(s=e.author)?void 0:s.id)===t?o+=1e3:null!=(n=e.assignees)&&n.find(e=>e.id===t)?o+=900:"REVIEW_REQUESTED"===a?o+=800:i&&(o+=700),"APPROVED"===l?"MERGEABLE"===e.mergeableState?o+=100:"CONFLICTS"===e.mergeableState?o+=90:o+=80:"CHANGES_REQUESTED"==l&&(o+=70),o},iG={};A(iG,{default:()=>iV});var iV={},iQ={};A(iQ,{default:()=>ij});var ij={},iz={};A(iz,{default:()=>iY});var iY={},iK=((w=iK||{}).Conflicts="conflicts",w.Failure="failure",w.NotSet="notSet",w.Queued="queued",w.RejectedByPolicy="rejectedByPolicy",w.Succeeded="succeeded",w),iJ=((v=iJ||{}).Completed="COMPLETED",v.NotPlanned="NOT_PLANNED",v),iZ=e=>{let t={request:null==e?void 0:e.request};return{azureDevOps:new es({...t,...null==e?void 0:e.azureDevOps}),bitbucket:new eu({...t,...null==e?void 0:e.bitbucket}),bitbucketServer:new em({...t,...null==e?void 0:e.bitbucketServer}),github:new te({...t,...null==e?void 0:e.github}),gitlab:new tI({...t,...null==e?void 0:e.gitlab}),jira:new tj({...t,...null==e?void 0:e.jira}),jiraServer:new tz({...t,...null==e?void 0:e.jiraServer}),trello:new tJ({...t,...null==e?void 0:e.trello})}},iX={azureDevOps:tZ,bitbucket:t0,bitbucketServer:t2,github:iN,gitlab:iG,gitProvider:im,jira:iQ,trello:iz,entityIdentifier:t4}},1488:(e,t,i)=>{i.d(t,{o:()=>s});var r=i(3807);function s(e){if(e.scheme===r.xB.Git)try{return JSON.parse(e.query)}catch{}}},915:(e,t,i)=>{i.r(t),i.d(t,{AIProviderService:()=>AIProviderService,getApiKey:()=>k,getMaxCharacters:()=>A});var r=i(1398),s=i(5287),n=i(5313),o=i(9634),a=i(4832);async function l(e,t){let i,s;let n=await (await e.ai)?.getModels()??[];null!=t?i=t:t=a.H.get("ai.experimental.provider")??"openai";let o=a.H.get(`ai.experimental.${t}.model`),l=[];for(let e of n){if(e.hidden||null!=i&&e.provider.id===i)continue;s!==e.provider.id&&(s=e.provider.id,l.push({label:e.provider.name,kind:r.QuickPickItemKind.Separator}));let n=e.provider.id===t&&(e.id===o||null==o&&e.default);l.push({label:e.provider.name,description:n?`${e.name}  \u2713`:e.name,provider:e.provider.id,model:e.id,picked:n})}return await r.window.showQuickPick(l,{title:"Switch AI Model",placeHolder:"select an AI model to use for experimental AI features",matchOnDescription:!0})}var h=i(3131),c=i(2471),u=i(7609),d=i(8803);let p={id:"anthropic",name:"Anthropic"};function g(e){return"claude-instant-1"===e.id||"claude-2"===e.id}let m=[{id:"claude-3-opus-20240229",name:"Claude 3 Opus",maxTokens:2e5,provider:p},{id:"claude-3-sonnet-20240229",name:"Claude 3 Sonnet",maxTokens:2e5,provider:p},{id:"claude-3-haiku-20240307",name:"Claude 3 Haiku",maxTokens:2e5,provider:p,default:!0},{id:"claude-2.1",name:"Claude 2.1",maxTokens:2e5,provider:p},{id:"claude-2",name:"Claude 2.0",maxTokens:1e5,provider:p},{id:"claude-instant-1",name:"Claude Instant",maxTokens:1e5,provider:p}];let AnthropicProvider=class AnthropicProvider{constructor(e){this.container=e}id=p.id;name=p.name;dispose(){}getModels(){return Promise.resolve(m)}get model(){return a.H.get("ai.experimental.anthropic.model")||null}async getOrChooseModel(){let e=this.model;if(null==e){let t=await l(this.container,this.id);if(null==t)return;await a.H.updateEffective(`ai.experimental.${t.provider}.model`,t.model),e=t.model}return m.find(t=>t.id===e)}async generateCommitMessage(e,t){let i=await f(this.container.storage);if(null==i)return;let s=await this.getOrChooseModel();if(null==s)return;let n=a.H.get("experimental.generateCommitMessagePrompt");n.endsWith(".")||(n+=".");let o=`You are an advanced AI programming assistant tasked with summarizing code changes into a concise and meaningful commit message. Compose a commit message that:
- Strictly synthesizes meaningful information from the provided code diff
- Utilizes any additional user-provided context to comprehend the rationale behind the code changes
- Is clear and brief, with an informal yet professional tone, and without superfluous descriptions
- Avoids unnecessary phrases such as "this commit", "this change", and the like
- Avoids direct mention of specific code identifiers, names, or file names, unless they are crucial for understanding the purpose of the changes
- Most importantly emphasizes the 'why' of the change, its benefits, or the problem it addresses rather than only the 'what' that changed

Follow the user's instructions carefully, don't repeat yourself, don't include the code in the output, or make anything up!`;try{let a,l;return g(s)?[a,l]=await this.makeLegacyRequest(s,i,i=>{let r=e.substring(0,i),s=`

Human: ${o}

Human: Here is the code diff to use to generate the commit message:

${r}
`;return t?.context&&(s+=`
Human: Here is additional context which should be taken into account when generating the commit message:

${t.context}
`),n&&(s+=`
Human: ${n}
`),s+="\nAssistant:"},4096,t?.cancellation):[a,l]=await this.makeRequest(s,i,o,i=>{let r=e.substring(0,i),s={role:"user",content:[{type:"text",text:"Here is the code diff to use to generate the commit message:"},{type:"text",text:r}]};return t?.context&&s.content.push({type:"text",text:"Here is additional context which should be taken into account when generating the commit message:"},{type:"text",text:t.context}),n&&s.content.push({type:"text",text:n}),[s]},4096,t?.cancellation),e.length>l&&r.window.showWarningMessage(`The diff of the changes had to be truncated to ${l} characters to fit within the Anthropic's limits.`),a}catch(e){throw Error(`Unable to generate commit message: ${e.message}`)}}async explainChanges(e,t,i){let s=await f(this.container.storage);if(null==s)return;let n=await this.getOrChooseModel();if(null==n)return;let o=`You are an advanced AI programming assistant tasked with summarizing code changes into an explanation that is both easy to understand and meaningful. Construct an explanation that:
- Concisely synthesizes meaningful information from the provided code diff
- Incorporates any additional context provided by the user to understand the rationale behind the code changes
- Places the emphasis on the 'why' of the change, clarifying its benefits or addressing the problem that necessitated the change, beyond just detailing the 'what' has changed

Do not make any assumptions or invent details that are not supported by the code diff or the user-provided context.`;try{let a,l;return g(n)?[a,l]=await this.makeLegacyRequest(n,s,i=>{let r=t.substring(0,i);return`

Human: ${o}

Human: Here is additional context provided by the author of the changes, which should provide some explanation to why these changes where made. Please strongly consider this information when generating your explanation:

${e}

Human: Now, kindly explain the following code diff in a way that would be clear to someone reviewing or trying to understand these changes:

${r}

Human: Remember to frame your explanation in a way that is suitable for a reviewer to quickly grasp the essence of the changes, the issues they resolve, and their implications on the codebase. And please don't explain how you arrived at the explanation, just provide the explanation.
Assistant:`},4096,i?.cancellation):[a,l]=await this.makeRequest(n,s,o,i=>{let r=t.substring(0,i);return[{role:"user",content:[{type:"text",text:"Here is additional context provided by the author of the changes, which should provide some explanation to why these changes where made. Please strongly consider this information when generating your explanation:"},{type:"text",text:e},{type:"text",text:"Now, kindly explain the following code diff in a way that would be clear to someone reviewing or trying to understand these changes:"},{type:"text",text:r},{type:"text",text:"Remember to frame your explanation in a way that is suitable for a reviewer to quickly grasp the essence of the changes, the issues they resolve, and their implications on the codebase. And please don't explain how you arrived at the explanation, just provide the explanation"}]}]},4096,i?.cancellation),t.length>l&&r.window.showWarningMessage(`The diff of the changes had to be truncated to ${l} characters to fit within the Anthropic's limits.`),a}catch(e){throw Error(`Unable to explain changes: ${e.message}`)}}async fetch(e,t,i,r){let s;null!=r&&(s=new AbortController,r.onCancellationRequested(()=>s?.abort()));try{return await (0,u.hd)(g(e)?"https://api.anthropic.com/v1/complete":"https://api.anthropic.com/v1/messages",{headers:{Accept:"application/json",Authorization:`Bearer ${t}`,"Content-Type":"application/json","X-API-Key":t,"anthropic-version":"2023-06-01"},method:"POST",body:JSON.stringify(i)})}catch(e){if("AbortError"===e.name)throw new d.AL(e);throw e}}async makeRequest(e,t,i,r,s,n){let o=0,a=A(e,2600);for(;;){let l={model:e.id,messages:r(a),system:i,stream:!1,max_tokens:s},h=await this.fetch(e,t,l,n);if(!h.ok){let e;try{e=await h.json()}catch{}if(o++<2&&e?.error?.type==="invalid_request_error"&&e?.error?.message?.includes("prompt is too long")){a-=500*o;continue}throw Error(`(${this.name}:${h.status}) ${e?.error?.message||h.statusText})`)}return[(await h.json()).content.map(e=>e.text).join("\n").trim(),a]}}async makeLegacyRequest(e,t,i,r,s){let n=0,o=A(e,2600);for(;;){let a={model:e.id,prompt:i(o),stream:!1,max_tokens_to_sample:r},l=await this.fetch(e,t,a,s);if(!l.ok){let e;try{e=await l.json()}catch{}if(n++<2&&e?.error?.type==="invalid_request_error"&&e?.error?.message?.includes("prompt is too long")){o-=500*n;continue}throw Error(`(${this.name}:${l.status}) ${e?.error?.message||l.statusText})`)}return[(await l.json()).completion.trim(),o]}}};async function f(e){return k(e,{id:p.id,name:p.name,validator:e=>/(?:sk-)?[a-zA-Z0-9-_]{32,}/.test(e),url:"https://console.anthropic.com/account/keys"})}let w={id:"gemini",name:"Google"},v=[{id:"gemini-1.5-pro-latest",name:"Gemini 1.5 Pro",maxTokens:1048576,provider:w,default:!0},{id:"gemini-1.5-flash-latest",name:"Gemini 1.5 Flash",maxTokens:1048576,provider:w},{id:"gemini-1.0-pro",name:"Gemini 1.0 Pro",maxTokens:30720,provider:w}];let GeminiProvider=class GeminiProvider{constructor(e){this.container=e}id=w.id;name=w.name;dispose(){}getModels(){return Promise.resolve(v)}get model(){return a.H.get("ai.experimental.gemini.model")||null}async getOrChooseModel(){let e=this.model;if(null==e){let t=await l(this.container,this.id);if(null==t)return;await a.H.updateEffective(`ai.experimental.${t.provider}.model`,t.model),e=t.model}return v.find(t=>t.id===e)}async generateCommitMessage(e,t){let i=await y(this.container.storage);if(null==i)return;let s=await this.getOrChooseModel();if(null==s)return;let n=A(s,2600);for(;;){let o=e.substring(0,n),l=a.H.get("experimental.generateCommitMessagePrompt");l.endsWith(".")||(l+=".");let h={systemInstruction:{parts:[{text:`You are an advanced AI programming assistant tasked with summarizing code changes into a concise and meaningful commit message. Compose a commit message that:
- Strictly synthesizes meaningful information from the provided code diff
- Utilizes any additional user-provided context to comprehend the rationale behind the code changes
- Is clear and brief, with an informal yet professional tone, and without superfluous descriptions
- Avoids unnecessary phrases such as "this commit", "this change", and the like
- Avoids direct mention of specific code identifiers, names, or file names, unless they are crucial for understanding the purpose of the changes
- Most importantly emphasizes the 'why' of the change, its benefits, or the problem it addresses rather than only the 'what' that changed

Follow the user's instructions carefully, don't repeat yourself, don't include the code in the output, or make anything up!`}]},contents:[{role:"user",parts:[{text:`Here is the code diff to use to generate the commit message:

${o}`},...t?.context?[{text:`Here is additional context which should be taken into account when generating the commit message:

${t.context}`}]:[],{text:l}]}]},c=await this.fetch(s.id,i,h,t?.cancellation);if(!c.ok){let e;try{e=await c.json()}catch{}throw Error(`Unable to generate commit message: (${this.name}:${c.status}) ${e?.error?.message||c.statusText}`)}return e.length>n&&r.window.showWarningMessage(`The diff of the changes had to be truncated to ${n} characters to fit within the Gemini's limits.`),(await c.json()).candidates[0].content.parts[0].text.trim()}}async explainChanges(e,t,i){let s=await y(this.container.storage);if(null==s)return;let n=await this.getOrChooseModel();if(null==n)return;let o=A(n,3e3);for(;;){let a=t.substring(0,o),l={systemInstruction:{parts:[{text:`You are an advanced AI programming assistant tasked with summarizing code changes into an explanation that is both easy to understand and meaningful. Construct an explanation that:
- Concisely synthesizes meaningful information from the provided code diff
- Incorporates any additional context provided by the user to understand the rationale behind the code changes
- Places the emphasis on the 'why' of the change, clarifying its benefits or addressing the problem that necessitated the change, beyond just detailing the 'what' has changed

Do not make any assumptions or invent details that are not supported by the code diff or the user-provided context.`}]},contents:[{role:"user",parts:[{text:`Here is additional context provided by the author of the changes, which should provide some explanation to why these changes where made. Please strongly consider this information when generating your explanation:

${e}`},{text:`Now, kindly explain the following code diff in a way that would be clear to someone reviewing or trying to understand these changes:

${a}`},{text:"Remember to frame your explanation in a way that is suitable for a reviewer to quickly grasp the essence of the changes, the issues they resolve, and their implications on the codebase."}]}]},h=await this.fetch(n.id,s,l,i?.cancellation);if(!h.ok){let e;try{e=await h.json()}catch{}throw Error(`Unable to explain commit: (${this.name}:${h.status}) ${e?.error?.message||h.statusText}`)}return t.length>o&&r.window.showWarningMessage(`The diff of the changes had to be truncated to ${o} characters to fit within the Gemini's limits.`),(await h.json()).candidates[0].content.parts[0].text.trim()}}async fetch(e,t,i,r){let s;null!=r&&(s=new AbortController,r.onCancellationRequested(()=>s?.abort()));try{return await (0,u.hd)(`https://generativelanguage.googleapis.com/v1beta/models/${e}:generateContent`,{headers:{Accept:"application/json","Content-Type":"application/json","x-goog-api-key":t},method:"POST",body:JSON.stringify(i),signal:s?.signal})}catch(e){if("AbortError"===e.name)throw new d.AL(e);throw e}}};async function y(e){return k(e,{id:w.id,name:w.name,validator:()=>!0,url:"https://aistudio.google.com/app/apikey"})}let b={id:"openai",name:"OpenAI"},C=[{id:"gpt-4o",name:"GPT-4 Omni",maxTokens:128e3,provider:b,default:!0},{id:"gpt-4-turbo",name:"GPT-4 Turbo with Vision",maxTokens:128e3,provider:b},{id:"gpt-4-turbo-2024-04-09",name:"GPT-4 Turbo Preview (2024-04-09)",maxTokens:128e3,provider:b,hidden:!0},{id:"gpt-4-turbo-preview",name:"GPT-4 Turbo Preview",maxTokens:128e3,provider:b},{id:"gpt-4-0125-preview",name:"GPT-4 0125 Preview",maxTokens:128e3,provider:b,hidden:!0},{id:"gpt-4-1106-preview",name:"GPT-4 1106 Preview",maxTokens:128e3,provider:b,hidden:!0},{id:"gpt-4",name:"GPT-4",maxTokens:8192,provider:b},{id:"gpt-4-0613",name:"GPT-4 0613",maxTokens:8192,provider:b,hidden:!0},{id:"gpt-4-32k",name:"GPT-4 32k",maxTokens:32768,provider:b},{id:"gpt-4-32k-0613",name:"GPT-4 32k 0613",maxTokens:32768,provider:b,hidden:!0},{id:"gpt-3.5-turbo",name:"GPT-3.5 Turbo",maxTokens:16385,provider:b},{id:"gpt-3.5-turbo-0125",name:"GPT-3.5 Turbo 0125",maxTokens:16385,provider:b,hidden:!0},{id:"gpt-3.5-turbo-1106",name:"GPT-3.5 Turbo 1106",maxTokens:16385,provider:b,hidden:!0},{id:"gpt-3.5-turbo-16k",name:"GPT-3.5 Turbo 16k",maxTokens:16385,provider:b,hidden:!0}];let OpenAIProvider=class OpenAIProvider{constructor(e){this.container=e}id=b.id;name=b.name;dispose(){}getModels(){return Promise.resolve(C)}get model(){return a.H.get("ai.experimental.openai.model")||null}get url(){return a.H.get("ai.experimental.openai.url")||"https://api.openai.com/v1/chat/completions"}async getOrChooseModel(){let e=this.model;if(null==e){let t=await l(this.container,this.id);if(null==t)return;await a.H.updateEffective(`ai.experimental.${t.provider}.model`,t.model),e=t.model}return C.find(t=>t.id===e)}async generateCommitMessage(e,t){let i=await R(this.container.storage);if(null==i)return;let s=await this.getOrChooseModel();if(null==s)return;let n=0,o=A(s,2600);for(;;){let l=e.substring(0,o),h=a.H.get("experimental.generateCommitMessagePrompt");h.endsWith(".")||(h+=".");let c={model:s.id,messages:[{role:"system",content:`You are an advanced AI programming assistant tasked with summarizing code changes into a concise and meaningful commit message. Compose a commit message that:
- Strictly synthesizes meaningful information from the provided code diff
- Utilizes any additional user-provided context to comprehend the rationale behind the code changes
- Is clear and brief, with an informal yet professional tone, and without superfluous descriptions
- Avoids unnecessary phrases such as "this commit", "this change", and the like
- Avoids direct mention of specific code identifiers, names, or file names, unless they are crucial for understanding the purpose of the changes
- Most importantly emphasizes the 'why' of the change, its benefits, or the problem it addresses rather than only the 'what' that changed

Follow the user's instructions carefully, don't repeat yourself, don't include the code in the output, or make anything up!`},{role:"user",content:`Here is the code diff to use to generate the commit message:

${l}`},...t?.context?[{role:"user",content:`Here is additional context which should be taken into account when generating the commit message:

${t.context}`}]:[],{role:"user",content:h}]},u=await this.fetch(i,c,t?.cancellation);if(!u.ok){let e;if(404===u.status)throw Error(`Unable to generate commit message: Your API key doesn't seem to have access to the selected '${s.id}' model`);if(429===u.status)throw Error(`Unable to generate commit message: (${this.name}:${u.status}) Too many requests (rate limit exceeded) or your API key is associated with an expired trial`);try{e=await u.json()}catch{}if(n++<2&&e?.error?.code==="context_length_exceeded"){o-=500*n;continue}throw Error(`Unable to generate commit message: (${this.name}:${u.status}) ${e?.error?.message||u.statusText}`)}return e.length>o&&r.window.showWarningMessage(`The diff of the changes had to be truncated to ${o} characters to fit within the OpenAI's limits.`),(await u.json()).choices[0].message.content.trim()}}async explainChanges(e,t,i){let s=await R(this.container.storage);if(null==s)return;let n=await this.getOrChooseModel();if(null==n)return;let o=0,a=A(n,3e3);for(;;){let l=t.substring(0,a),h={model:n.id,messages:[{role:"system",content:`You are an advanced AI programming assistant tasked with summarizing code changes into an explanation that is both easy to understand and meaningful. Construct an explanation that:
- Concisely synthesizes meaningful information from the provided code diff
- Incorporates any additional context provided by the user to understand the rationale behind the code changes
- Places the emphasis on the 'why' of the change, clarifying its benefits or addressing the problem that necessitated the change, beyond just detailing the 'what' has changed

Do not make any assumptions or invent details that are not supported by the code diff or the user-provided context.`},{role:"user",content:`Here is additional context provided by the author of the changes, which should provide some explanation to why these changes where made. Please strongly consider this information when generating your explanation:

${e}`},{role:"user",content:`Now, kindly explain the following code diff in a way that would be clear to someone reviewing or trying to understand these changes:

${l}`},{role:"user",content:"Remember to frame your explanation in a way that is suitable for a reviewer to quickly grasp the essence of the changes, the issues they resolve, and their implications on the codebase."}]},c=await this.fetch(s,h,i?.cancellation);if(!c.ok){let e;if(404===c.status)throw Error(`Unable to explain commit: Your API key doesn't seem to have access to the selected '${n.id}' model`);if(429===c.status)throw Error(`Unable to explain commit: (${this.name}:${c.status}) Too many requests (rate limit exceeded) or your API key is associated with an expired trial`);try{e=await c.json()}catch{}if(o++<2&&e?.error?.code==="context_length_exceeded"){a-=500*o;continue}throw Error(`Unable to explain commit: (${this.name}:${c.status}) ${e?.error?.message||c.statusText}`)}return t.length>a&&r.window.showWarningMessage(`The diff of the changes had to be truncated to ${a} characters to fit within the OpenAI's limits.`),(await c.json()).choices[0].message.content.trim()}}async fetch(e,t,i){let r;let s=this.url,n=s.includes(".azure.com");null!=i&&(r=new AbortController,i.onCancellationRequested(()=>r?.abort()));try{return(0,u.hd)(s,{headers:{Accept:"application/json","Content-Type":"application/json",...n?{"api-key":e}:{Authorization:`Bearer ${e}`}},method:"POST",body:JSON.stringify(t),signal:r?.signal})}catch(e){if("AbortError"===e.name)throw new d.AL(e);throw e}}};async function R(e){return k(e,{id:b.id,name:b.name,validator:e=>/(?:sk-)?[a-zA-Z0-9]{32,}/.test(e),url:"https://platform.openai.com/account/api-keys"})}let S=new Map([["openai",OpenAIProvider],["anthropic",AnthropicProvider],["gemini",GeminiProvider]]);let AIProviderService=class AIProviderService{constructor(e){this.container=e}_provider;dispose(){this._provider?.dispose()}get providerId(){return this._provider?.id}async getModels(){let e=[...S.values()].map(e=>new e(this.container));return(await Promise.allSettled(e.map(e=>e.getModels()))).flatMap(e=>(0,h.Ro)(e,[]))}async generateCommitMessage(e,t){let i;if(Array.isArray(e))i=e.join("\n");else{let r=(0,o.Z6)(e)?e:this.container.git.getRepository(e);if(null==r)throw Error("Unable to find repository");let s=await this.container.git.getDiff(r.uri,n.id);if(!s?.contents&&(s=await this.container.git.getDiff(r.uri,n.SU),!s?.contents))throw Error("No changes to generate a commit message from.");if(t?.cancellation?.isCancellationRequested)return;i=s.contents}let s=await this.getOrChooseProvider();if(null!=s&&await P(s,this.container.storage)&&!t?.cancellation?.isCancellationRequested)return t?.progress!=null?r.window.withProgress(t.progress,async()=>s.generateCommitMessage(i,{cancellation:t?.cancellation,context:t?.context})):s.generateCommitMessage(i,{cancellation:t?.cancellation,context:t?.context})}async explainCommit(e,t,i){let n;if("string"==typeof e||e instanceof r.Uri){if("string"!=typeof t||!t)throw Error("Invalid arguments provided");n=await this.container.git.getCommit(e,t)}else{if("string"==typeof t)throw Error("Invalid arguments provided");n=(0,s.WM)(e)?e:await this.container.git.getCommit(e.repoPath,e.ref),i=t}if(null==n)throw Error("Unable to find commit");let o=await this.container.git.getDiff(n.repoPath,n.sha);if(!o?.contents)throw Error("No changes found to explain.");let a=await this.getOrChooseProvider();if(null!=a&&await P(a,this.container.storage))return(n.hasFullDetails()||(await n.ensureFullDetails(),(0,s.aQ)(n)),i?.progress!=null)?r.window.withProgress(i.progress,async()=>a.explainChanges(n.message,o.contents,{cancellation:i?.cancellation})):a.explainChanges(n.message,o.contents,{cancellation:i?.cancellation})}reset(){let{providerId:e}=this;null!=e&&(this.container.storage.deleteSecret(`gitlens.${e}.key`),this.container.storage.delete(`confirm:ai:tos:${e}`),this.container.storage.deleteWorkspace(`confirm:ai:tos:${e}`))}supports(e){return S.has(e)}async switchProvider(){await this.getOrChooseProvider(!0)}async getOrChooseProvider(e){let t=e?void 0:a.H.get("ai.experimental.provider")||void 0;if(null==t||!this.supports(t)){let e=await l(this.container);if(null==e)return;t=e.provider,await a.H.updateEffective("ai.experimental.provider",t),await a.H.updateEffective(`ai.experimental.${t}.model`,e.model)}if(t!==this._provider?.id){this._provider?.dispose();let e=S.get(t);null==e&&"openai"!==t&&(e=S.get("openai"),await a.H.updateEffective("ai.experimental.provider","openai")),null!=e&&(this._provider=new e(this.container))}return this._provider}};async function P(e,t){if(t.get(`confirm:ai:tos:${e.id}`,!1)||t.getWorkspace(`confirm:ai:tos:${e.id}`,!1))return!0;let i={title:"Continue"},s={title:"Always for this Workspace"},n={title:"Always"},o=await r.window.showInformationMessage(`GitLens experimental AI features require sending a diff of the code changes to ${e.name} for analysis. This may contain sensitive information.

Do you want to continue?`,{modal:!0},i,s,n,{title:"Cancel",isCloseAffordance:!0});return o===i||(o===s?(t.storeWorkspace(`confirm:ai:tos:${e.id}`,!0),!0):o===n&&(t.store(`confirm:ai:tos:${e.id}`,!0),!0))}function A(e,t){let i=3.1*e.maxTokens-t/3.1;return Math.floor(i-.1*i)}async function k(e,t){let i=await e.getSecret(`gitlens.${t.id}.key`);if(!i){let s=r.window.createInputBox();s.ignoreFocusOut=!0;let n=[];try{let e={iconPath:new r.ThemeIcon("link-external"),tooltip:`Open the ${t.name} API Key Page`};i=await new Promise(i=>{n.push(s.onDidHide(()=>i(void 0)),s.onDidChangeValue(e=>{if(e&&!t.validator(e)){s.validationMessage=`Please enter a valid ${t.name} API key`;return}s.validationMessage=void 0}),s.onDidAccept(()=>{let e=s.value.trim();if(!e||!t.validator(e)){s.validationMessage=`Please enter a valid ${t.name} API key`;return}i(e)}),s.onDidTriggerButton(i=>{i===e&&r.env.openExternal(r.Uri.parse(t.url))})),s.password=!0,s.title=`Connect to ${t.name}`,s.placeholder=`Please enter your ${t.name} API key to use this feature`,s.prompt=(0,c.Av)("input-prompt-links")?`Enter your [${t.name} API Key](${t.url} "Get your ${t.name} API key")`:`Enter your ${t.name} API Key`,s.buttons=[e],s.show()})}finally{s.dispose(),n.forEach(e=>void e.dispose())}if(!i)return;e.storeSecret(`gitlens.${t.id}.key`,i)}return i}},4983:(e,t,i)=>{i.d(t,{B:()=>o,w:()=>AnnotationProviderBase});var r=i(1398),s=i(8973),n=i(3916);function o(e){return`${e?.document.uri.toString()}|${e?.viewColumn}`}let AnnotationProviderBase=class AnnotationProviderBase{constructor(e,t,i,s){this.container=e,this.annotationType=t,this.trackedDocument=s,this.editor=i,this.disposable=r.Disposable.from(r.window.onDidChangeTextEditorSelection(this.onTextEditorSelectionChanged,this))}decorations;disposable;dispose(){this.clear(),this.disposable.dispose()}_annotationContext;get annotationContext(){return this._annotationContext}set annotationContext(e){this._annotationContext=e}_correlationKey;get correlationKey(){return this._correlationKey}_editor;get editor(){return this._editor}set editor(e){this._editor=e,this._correlationKey=o(e)}_status;get status(){return this._status}get statusContextValue(){return null!=this.status?`${this.status}+${this.annotationType}`:void 0}async setStatus(e,t){this.status!==e&&(this._status=e,null!=t&&t===r.window.activeTextEditor&&await (0,s.o)("gitlens:annotationStatus",this.statusContextValue))}onTextEditorSelectionChanged(e){this.editor.document===e.textEditor.document&&this.selection?.({line:e.selections[0].active.line})}canReuse(e){return!0}clear(){let e=this.decorations;if(this.decorations=void 0,this.annotationContext=void 0,this.setStatus(void 0,this.editor),null!=this.editor&&e?.length)for(let t of e)try{this.editor.setDecorations(t.decorationType,[]),t.dispose&&t.decorationType.dispose()}catch{}}async provideAnnotation(e,t){this.setStatus("computing",this.editor);try{if(this.annotationContext=e,await this.onProvideAnnotation(e,t))return this.setStatus("computed",this.editor),await this.selection?.(t?.restoring?{line:this.editor.selection.active.line}:e?.selection),!0}catch(e){n.Vy.error(e)}return this.setStatus(void 0,this.editor),!1}refresh(e){if(null==this.editor||!this.decorations?.length)return;let t=[];for(let i of this.decorations){let r=e.get(i.decorationType);null!==r&&(null!=r&&(i.decorationType=r),t.push(i))}this.setDecorations(this.decorations)}restore(e,t){if(!1!==this.editor._disposed){if(this.editor=e,t||null==this.decorations){this.provideAnnotation(this.annotationContext,{recompute:!0,restoring:!0});return}if(this.setStatus("computing",this.editor),this.decorations?.length)for(let e of this.decorations)this.editor.setDecorations(e.decorationType,e.rangesOrOptions);this.setStatus("computed",this.editor)}}setDecorations(e){if(this.decorations?.length){if(!e?.length){this.clear();return}for(let t of this.decorations.filter(t=>!e.some(e=>e.decorationType.key===t.decorationType.key)))try{this.editor.setDecorations(t.decorationType,[]),t.dispose&&t.decorationType.dispose()}catch{}}if(this.decorations=e,e?.length)for(let t of e)this.editor.setDecorations(t.decorationType,t.rangesOrOptions)}}},7253:(e,t,i)=>{let r;i.d(t,{n0:()=>v,nx:()=>w,w:()=>y,kM:()=>b,v7:()=>f,iS:()=>C});var s=i(1398),n=i(3807),o=i(236);function a(e,t){let i=Math.pow(10,t);return Math.round(e*i)/i}let RGBA=class RGBA{_rgbaBrand=void 0;r;g;b;a;constructor(e,t,i,r=1){this.r=0|Math.min(255,Math.max(0,e)),this.g=0|Math.min(255,Math.max(0,t)),this.b=0|Math.min(255,Math.max(0,i)),this.a=a(Math.max(Math.min(1,r),0),3)}static equals(e,t){return e.r===t.r&&e.g===t.g&&e.b===t.b&&e.a===t.a}};let HSLA=class HSLA{_hslaBrand=void 0;h;s;l;a;constructor(e,t,i,r){this.h=0|Math.max(Math.min(360,e),0),this.s=a(Math.max(Math.min(1,t),0),3),this.l=a(Math.max(Math.min(1,i),0),3),this.a=a(Math.max(Math.min(1,r),0),3)}static equals(e,t){return e.h===t.h&&e.s===t.s&&e.l===t.l&&e.a===t.a}static fromRGBA(e){let t=e.r/255,i=e.g/255,r=e.b/255,s=e.a,n=Math.max(t,i,r),o=Math.min(t,i,r),a=0,l=0,h=(o+n)/2,c=n-o;if(c>0){switch(l=Math.min(h<=.5?c/(2*h):c/(2-2*h),1),n){case t:a=(i-r)/c+(i<r?6:0);break;case i:a=(r-t)/c+2;break;case r:a=(t-i)/c+4}a*=60,a=Math.round(a)}return new HSLA(a,l,h,s)}static _hue2rgb(e,t,i){return(i<0&&(i+=1),i>1&&(i-=1),i<1/6)?e+(t-e)*6*i:i<.5?t:i<2/3?e+(t-e)*(2/3-i)*6:e}static toRGBA(e){let t,i,r;let s=e.h/360,{s:n,l:o,a}=e;if(0===n)t=i=r=o;else{let e=o<.5?o*(1+n):o+n-o*n,a=2*o-e;t=HSLA._hue2rgb(a,e,s+1/3),i=HSLA._hue2rgb(a,e,s),r=HSLA._hue2rgb(a,e,s-1/3)}return new RGBA(Math.round(255*t),Math.round(255*i),Math.round(255*r),a)}};let HSVA=class HSVA{_hsvaBrand=void 0;h;s;v;a;constructor(e,t,i,r){this.h=0|Math.max(Math.min(360,e),0),this.s=a(Math.max(Math.min(1,t),0),3),this.v=a(Math.max(Math.min(1,i),0),3),this.a=a(Math.max(Math.min(1,r),0),3)}static equals(e,t){return e.h===t.h&&e.s===t.s&&e.v===t.v&&e.a===t.a}static fromRGBA(e){let t=e.r/255,i=e.g/255,r=e.b/255,s=Math.max(t,i,r),n=s-Math.min(t,i,r);return new HSVA(Math.round(60*(0===n?0:s===t?((i-r)/n%6+6)%6:s===i?(r-t)/n+2:(t-i)/n+4)),0===s?0:n/s,s,e.a)}static toRGBA(e){let{h:t,s:i,v:r,a:s}=e,n=r*i,o=n*(1-Math.abs(t/60%2-1)),a=r-n,[l,h,c]=[0,0,0];return t<60?(l=n,h=o):t<120?(l=o,h=n):t<180?(h=n,c=o):t<240?(h=o,c=n):t<300?(l=o,c=n):t<=360&&(l=n,c=o),new RGBA(l=Math.round((l+a)*255),h=Math.round((h+a)*255),c=Math.round((c+a)*255),s)}};let Color=class Color{static from(e){return e instanceof Color?e:c(e)||Color.red}static fromCssVariable(e,t){return c(t.getPropertyValue(e).trim())||Color.red}static fromHex(e){return u(e)||Color.red}static equals(e,t){return!e&&!t||!!e&&!!t&&e.equals(t)}rgba;_hsla;get hsla(){return this._hsla?this._hsla:HSLA.fromRGBA(this.rgba)}_hsva;get hsva(){return this._hsva?this._hsva:HSVA.fromRGBA(this.rgba)}constructor(e){if(e){if(e instanceof RGBA)this.rgba=e;else if(e instanceof HSLA)this._hsla=e,this.rgba=HSLA.toRGBA(e);else if(e instanceof HSVA)this._hsva=e,this.rgba=HSVA.toRGBA(e);else throw Error("Invalid color ctor argument")}else throw Error("Color needs a value")}equals(e){return null!=e&&!!e&&RGBA.equals(this.rgba,e.rgba)&&HSLA.equals(this.hsla,e.hsla)&&HSVA.equals(this.hsva,e.hsva)}getRelativeLuminance(){let e=Color._relativeLuminanceForComponent(this.rgba.r);return a(.2126*e+.7152*Color._relativeLuminanceForComponent(this.rgba.g)+.0722*Color._relativeLuminanceForComponent(this.rgba.b),4)}static _relativeLuminanceForComponent(e){let t=e/255;return t<=.03928?t/12.92:Math.pow((t+.055)/1.055,2.4)}luminance(e){return function(e,t){if(0===t)return new Color(new RGBA(0,0,0,e.rgba.a));if(1===t)return new Color(new RGBA(255,255,255,e.rgba.a));let i=e.getRelativeLuminance(),r=20,s=(e,i)=>{let n=e.mix(i,.5),o=n.getRelativeLuminance();return!(1e-7>Math.abs(t-o))&&r--?o>t?s(e,n):s(n,i):n},n=(i>t?s(Color.black,e):s(e,Color.white)).rgba;return new Color(new RGBA(n.r,n.g,n.b,e.rgba.a))}(this,e)}getContrastRatio(e){let t=this.getRelativeLuminance(),i=e.getRelativeLuminance();return t>i?(t+.05)/(i+.05):(i+.05)/(t+.05)}isDarker(){return(299*this.rgba.r+587*this.rgba.g+114*this.rgba.b)/1e3<128}isLighter(){return(299*this.rgba.r+587*this.rgba.g+114*this.rgba.b)/1e3>=128}isLighterThan(e){return this.getRelativeLuminance()>e.getRelativeLuminance()}isDarkerThan(e){return this.getRelativeLuminance()<e.getRelativeLuminance()}lighten(e){return new Color(new HSLA(this.hsla.h,this.hsla.s,this.hsla.l+this.hsla.l*e,this.hsla.a))}darken(e){return new Color(new HSLA(this.hsla.h,this.hsla.s,this.hsla.l-this.hsla.l*e,this.hsla.a))}transparent(e){let{r:t,g:i,b:r,a:s}=this.rgba;return new Color(new RGBA(t,i,r,s*e))}isTransparent(){return 0===this.rgba.a}isOpaque(){return 1===this.rgba.a}opposite(){return new Color(new RGBA(255-this.rgba.r,255-this.rgba.g,255-this.rgba.b,this.rgba.a))}blend(e){let t=e.rgba,i=this.rgba.a,r=t.a,s=i+r*(1-i);return s<1e-6?Color.transparent:new Color(new RGBA(this.rgba.r*i/s+t.r*r*(1-i)/s,this.rgba.g*i/s+t.g*r*(1-i)/s,this.rgba.b*i/s+t.b*r*(1-i)/s,s))}mix(e,t){return function(e,t,i){let r=e.rgba,s=t.rgba;return new Color(new RGBA(r.r+i*(s.r-r.r),r.g+i*(s.g-r.g),r.b+i*(s.b-r.b),r.a+i*(s.a-r.a)))}(this,e,t)}makeOpaque(e){if(this.isOpaque()||1!==e.rgba.a)return this;let{r:t,g:i,b:r,a:s}=this.rgba;return new Color(new RGBA(e.rgba.r-s*(e.rgba.r-t),e.rgba.g-s*(e.rgba.g-i),e.rgba.b-s*(e.rgba.b-r),1))}flatten(...e){let t=e.reduceRight((e,t)=>Color._flatten(t,e));return Color._flatten(this,t)}static _flatten(e,t){let i=1-e.rgba.a;return new Color(new RGBA(i*t.rgba.r+e.rgba.a*e.rgba.r,i*t.rgba.g+e.rgba.a*e.rgba.g,i*t.rgba.b+e.rgba.a*e.rgba.b))}_toString;toString(){var e;return this._toString||(this._toString=(e=this,e.isOpaque()?`#${l(e.rgba.r)}${l(e.rgba.g)}${l(e.rgba.b)}`:`rgba(${e.rgba.r}, ${e.rgba.g}, ${e.rgba.b}, ${Number(e.rgba.a.toFixed(2))})`)),this._toString}static getLighterColor(e,t,i){if(e.isLighterThan(t))return e;i=i||.5;let r=e.getRelativeLuminance(),s=t.getRelativeLuminance();return i=i*(s-r)/s,e.lighten(i)}static getDarkerColor(e,t,i){if(e.isDarkerThan(t))return e;i=i||.5;let r=e.getRelativeLuminance(),s=t.getRelativeLuminance();return i=i*(r-s)/r,e.darken(i)}static white=new Color(new RGBA(255,255,255,1));static black=new Color(new RGBA(0,0,0,1));static red=new Color(new RGBA(255,0,0,1));static blue=new Color(new RGBA(0,0,255,1));static green=new Color(new RGBA(0,255,0,1));static cyan=new Color(new RGBA(0,255,255,1));static lightgrey=new Color(new RGBA(211,211,211,1));static transparent=new Color(new RGBA(0,0,0,0))};function l(e){let t=e.toString(16);return 2!==t.length?`0${t}`:t}let h=/^((?:rgb|hsl)a?)\((-?\d+%?)[,\s]+(-?\d+%?)[,\s]+(-?\d+%?)[,\s]*(-?[\d.]+%?)?\)$/i;function c(e){let t;if(0===(e=e.trim()).length)return null;if(e.charCodeAt(0)===n.s7.Hash)return u(e);let i=h.exec(e);if(null==i)return null;let r=i[1];switch(r){case"rgb":case"hsl":t=[parseInt(i[2],10),parseInt(i[3],10),parseInt(i[4],10),1];break;case"rgba":case"hsla":t=[parseInt(i[2],10),parseInt(i[3],10),parseInt(i[4],10),parseFloat(i[5])];break;default:return null}switch(r){case"rgb":case"rgba":return new Color(new RGBA(t[0],t[1],t[2],t[3]));case"hsl":case"hsla":return new Color(new HSLA(t[0],t[1],t[2],t[3]))}return Color.red}function u(e){let t=(e=e.trim()).length;if(0===t||e.charCodeAt(0)!==n.s7.Hash)return null;switch(t){case 7:return new Color(new RGBA(16*d(e.charCodeAt(1))+d(e.charCodeAt(2)),16*d(e.charCodeAt(3))+d(e.charCodeAt(4)),16*d(e.charCodeAt(5))+d(e.charCodeAt(6)),1));case 9:{let t=16*d(e.charCodeAt(1))+d(e.charCodeAt(2));return new Color(new RGBA(t,16*d(e.charCodeAt(3))+d(e.charCodeAt(4)),16*d(e.charCodeAt(5))+d(e.charCodeAt(6)),(16*d(e.charCodeAt(7))+d(e.charCodeAt(8)))/255))}case 4:{let t=d(e.charCodeAt(1)),i=d(e.charCodeAt(2)),r=d(e.charCodeAt(3));return new Color(new RGBA(16*t+t,16*i+i,16*r+r))}case 5:{let t=d(e.charCodeAt(1)),i=d(e.charCodeAt(2)),r=d(e.charCodeAt(3)),s=d(e.charCodeAt(4));return new Color(new RGBA(16*t+t,16*i+i,16*r+r,(16*s+s)/255))}default:return null}}function d(e){switch(e){case n.s7.Digit0:break;case n.s7.Digit1:return 1;case n.s7.Digit2:return 2;case n.s7.Digit3:return 3;case n.s7.Digit4:return 4;case n.s7.Digit5:return 5;case n.s7.Digit6:return 6;case n.s7.Digit7:return 7;case n.s7.Digit8:return 8;case n.s7.Digit9:return 9;case n.s7.a:case n.s7.A:return 10;case n.s7.b:case n.s7.B:return 11;case n.s7.c:case n.s7.C:return 12;case n.s7.d:case n.s7.D:return 13;case n.s7.e:case n.s7.E:return 14;case n.s7.f:case n.s7.F:return 15}return 0}var p=i(4832),g=i(7279);let m=["#f66a0a","#ef6939","#e96950","#e26862","#db6871","#d3677e","#cc678a","#c46696","#bb66a0","#b365a9","#a965b3","#a064bb","#9664c4","#8a63cc","#7e63d3","#7162db","#6262e2","#5061e9","#3961ef","#0a60f6"];function f(){if(null==r){let e;let{coldColor:t,hotColor:i}=p.H.get("heatmap");r={hot:(e="#0a60f6"===t&&"#f66a0a"===i?m:function(e,t,i){let r=[],s=Color.from(e),n=Color.from(t);r.push(s.toString());for(let e=1;e<19;e++){let t=s.mix(n,e/19);r.push(t.toString())}return r.push(n.toString()),r}(i,t,0)).slice(0,10),cold:e.slice(10,20)};let s=p.H.onDidChange(e=>{p.H.changed(e,["heatmap.ageThreshold","heatmap.hotColor","heatmap.coldColor"])&&(s.dispose(),r=void 0)})}return r}function w(e,t,i){let[r,s,n,o]=R(t,i);e.renderOptions.before.borderColor=`rgba(${r},${s},${n},${o})`}function v(e,t,i,r){let[n,o,a,l]=R(e,t),{fadeLines:h,locations:c}=p.H.get("heatmap"),u=c.includes("gutter"),d=c.includes("line"),g=c.includes("overview"),m=`${n},${o},${a},${l}`,f=r.get(m);return null==f?(f={decorationType:s.window.createTextEditorDecorationType({backgroundColor:d?`rgba(${n},${o},${a},${.15*l})`:void 0,opacity:h?`${t.computeOpacity(e).toFixed(2)} !important`:void 0,isWholeLine:!!d||!!h||void 0,gutterIconPath:u?s.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><rect fill='rgb(${n},${o},${a})' fill-opacity='${l}' x='8' y='0' width='3' height='18'/></svg>`)}`):void 0,gutterIconSize:u?"contain":void 0,overviewRulerLane:g?s.OverviewRulerLane.Center:void 0,overviewRulerColor:g?`rgba(${n},${o},${a},${.7*l})`:void 0}),rangesOrOptions:[i],dispose:!0},r.set(m,f)):f.rangesOrOptions.push(i),f.decorationType}function y(e,t,i,r){let s={renderOptions:{before:{...r}}};e.isUncommitted&&(s.renderOptions.before.color=r.uncommittedColor);let a=o.c.fromTemplate(t,e,i);return s.renderOptions.before.contentText=(0,g.eV)(a.replace(/ /g,n.EO.Space),1,1),s}function b(e,t,i,r,n,o){let a,l,h,c=0;for(let e of Object.values(n.tokenOptions))if(void 0!==e){if(null==e.truncateTo){c=-1;break}c+=e.truncateTo}if(c>=0&&(c+=(0,g.RG)((0,g.GW)(r,void 0)))>0&&(c+=3),t.enabled&&(a="solid",l="left"===t.location?"0 0 0 2px":"0 2px 0 0"),c>=0){let e=p.H.getCore("editor.letterSpacing");h=null!=e&&0!==e?`calc(${c}ch + ${Math.round(c*e)+(i?13:-6)}px)`:`calc(${c}ch ${i?"+ 13px":"- 6px"})`}return{backgroundColor:new s.ThemeColor("gitlens.gutterBackgroundColor"),borderStyle:a,borderWidth:l,color:new s.ThemeColor("gitlens.gutterForegroundColor"),fontWeight:o.weight??"normal",fontStyle:o.style??"normal",height:"100%",margin:"0 26px -1px 0",textDecoration:`${e?"overline solid rgba(0, 0, 0, .2)":"none"};box-sizing: border-box${i?";padding: 0 0 0 18px":""}${o.family?`;font-family: ${o.family}`:""}${o.size?`;font-size: ${o.size}px`:""};`,width:h,uncommittedColor:new s.ThemeColor("gitlens.gutterUncommittedForegroundColor")}}function C(e,t,i,r,a=!0){let l=o.c.fromTemplate(t,e,{...i,messageTruncateAtNewLine:!0});return{renderOptions:{after:{backgroundColor:new s.ThemeColor("gitlens.trailingLineBackgroundColor"),color:new s.ThemeColor("gitlens.trailingLineForegroundColor"),contentText:(0,g.eV)(l.replace(/ /g,n.EO.Space),1,1),fontWeight:r?.weight??"normal",fontStyle:r?.style??"normal",textDecoration:`none${a?"":";position: absolute"}${r?.family?`;font-family: ${r.family}`:""}${r?.size?`;font-size: ${r.size}px`:""};`}}}}function R(e,t){let i=t.computeRelativeAge(e),r=function(e){let t=c(e);return null==t?null:[t.rgba.r,t.rgba.g,t.rgba.b,t.rgba.a]}((e.getTime()<t.coldThresholdTimestamp?t.colors.cold:t.colors.hot)[i]);return[...r??[0,0,0],null==r?0:0===i?1:i<=5?.8:.6]}},9659:(e,t,i)=>{i.d(t,{R$:()=>Autolinks,U8:()=>y});var r=i(1398),s=i(3807),n=i(8559),o=i(1298),a=i(4832),l=i(1856),h=i(8180),c=i(1345),u=i(4026),d=i(3916),p=i(7279),g=Object.defineProperty,m=Object.getOwnPropertyDescriptor,f=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?m(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&g(t,i,n),n};let w=Object.freeze(new Map),v=/<num>/g;function y(e){return{provider:e.provider?{id:e.provider.id,name:e.provider.name,domain:e.provider.domain,icon:e.provider.icon}:void 0,id:e.id,prefix:e.prefix,title:e.title,url:e.url,type:e.type,description:e.description,descriptor:e.descriptor}}let b=[o.tp.Jira];function C(e){return!("prefix"in e)&&!("url"in e)}let Autolinks=class Autolinks{constructor(e){this.container=e,this._disposable=r.Disposable.from(a.H.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged()}_disposable;_references=[];dispose(){this._disposable?.dispose()}onConfigurationChanged(e){if(a.H.changed(e,"autolinks")){let e=a.H.get("autolinks");this._references=e?.filter(e=>e.prefix&&e.url)?.map(e=>({prefix:e.prefix,url:e.url,title:e.title,alphanumeric:e.alphanumeric,ignoreCase:e.ignoreCase,type:e.type,description:e.description,descriptor:e.descriptor}))??[]}}async getAutolinks(e,t,i){let r,s;let n=[];if(await Promise.allSettled(b.map(async e=>{let t=await this.container.integrations.get(e),i=await t.autolinks();i.length&&n.push([t,i])})),t?.provider!=null){let e=[],i=await (await t.getIntegration())?.autolinks();i?.length&&e.push(...i),t?.provider?.autolinks.length&&e.push(...t.provider.autolinks),e.length&&n.push([t.provider,e])}if(this._references.length&&(t?.provider==null||!i?.excludeCustom)&&n.push([void 0,this._references]),0===n.length)return w;let o=new Map;for(let[t,i]of n)for(let n of i){if(!("prefix"in n&&null!=n.prefix&&"url"in n&&null!=n.url)){C(n)&&n.parse(e,o);continue}for(R(n,"plaintext");null!=(r=n.messageRegex.exec(e));)[,,,s]=r,o.set(s,{provider:t,id:s,prefix:n.prefix,url:n.url?.replace(v,s),title:n.title?.replace(v,s),type:n.type,description:n.description?.replace(v,s),descriptor:n.descriptor})}return o}getAutolinkEnrichableId(e){return e.provider?.id===o.tp.Jira?`${e.prefix}${e.id}`:e.id}async getEnrichedAutolinks(e,t){if("string"==typeof e&&(e=await this.getAutolinks(e,t)),0===e.size)return;let i=await t?.getIntegration();null==i||(i.maybeConnected??await i.isConnected())||(i=void 0);let r=new Map;for(let[s,n]of e){let e=n.provider?await this.container.integrations.get(n.provider.id):void 0;null==e||(e.maybeConnected??await e.isConnected())||(e=void 0);let o=t?.provider!=null&&null!=i&&n.provider?.id===i.id&&n.provider?.domain===i.domain?i.getIssueOrPullRequest(n.descriptor??t.provider.repoDesc,s):null!=n.descriptor?e?.getIssueOrPullRequest(n.descriptor,this.getAutolinkEnrichableId(n)):void 0;r.set(s,[o,n])}return r}linkify(e,t,i,r,n,o){let a="plaintext"===t&&null==o;a&&(o=new Map);let l=new Map;if(r?.size)for(let[,[,i]]of r)this.ensureAutolinkCached(i)&&null!=i.tokenize&&(e=i.tokenize(e,t,l,r,n,o));else{for(let i of this._references)this.ensureAutolinkCached(i)&&null!=i.tokenize&&(e=i.tokenize(e,t,l,r,n,o));if(null!=i&&0!==i.length){for(let s of i=[...i].sort((e,t)=>{let i=e.maybeIntegrationConnected,r=t.maybeIntegrationConnected;return i!==r?i?-1:r?1:0:0}))if(null!=s.provider)for(let i of s.provider.autolinks)this.ensureAutolinkCached(i)&&null!=i.tokenize&&(e=i.tokenize(e,t,l,r,n,o))}}return 0!==l.size&&(e=e.replace(/(\x00\d+\x00)/g,(e,t)=>l.get(t)??t)),a&&o?.size&&(e+=`
${s.EO.Dash.repeat(2)}
${(0,u.fj)((0,u.Tj)(o,([e,t])=>`${(0,p.VU)(e)} ${t}`),"\n")}`),e}ensureAutolinkCached(e){if(C(e))return!0;if(!e.prefix||!e.url)return!1;if(void 0!==e.tokenize||null===e.tokenize)return!0;try{e.tokenize=(t,i,r,o,a,h)=>{let u;switch(i){case"markdown":return R(e,i),t.replace(e.messageMarkdownRegex,(t,i,d,g)=>{let m=(0,c.W)(e.url.replace(v,g)),f="";if(e.title){f=` "${e.title.replace(v,g)}`;let t=o?.get(g)?.[0];if(t?.value!=null){if(t.paused){if(null!=h&&!a?.has(g)){let t=e.description?.replace(v,g);null==t&&(t=`Custom Autolink ${e.prefix}${g}`),u=h.size+1,h.set(u,`[${(0,n.xu)()} ${t} $(loading~spin)](${m}${f}")`)}f+=`
${s.EO.Dash.repeat(2)}
Loading...`}else{let e=t.value,i=(0,p.FV)(e.title.trim()),r=i.replace(/"/g,'\\"');null==h||a?.has(g)||(u=h.size+1,h.set(u,`[${(0,n.xu)(e)} **${i}**](${m}${f}")\\
${s.EO.Space.repeat(5)}${d} ${e.state} ${(0,l.PI)(e.closedDate??e.createdDate)}`)),f+=`
${s.EO.Dash.repeat(2)}
${r}
${(0,p.ZH)(e.state)}, ${(0,l.PI)(e.closedDate??e.createdDate)}`}}else if(null!=h&&!a?.has(g)){let t=e.description?.replace(v,g);null==t&&(t=`Custom Autolink ${e.prefix}${g}`),u=h.size+1,h.set(u,`[${(0,n.xu)()} ${t}](${m}${f}")`)}f+='"'}let w=`\0${r.size}\0`;return r.set(w,`[${d}](${m}${f})`),`${i}${w}`});case"html":return R(e,i),t.replace(e.messageHtmlRegex,(t,i,d,g)=>{let m=(0,c.W)(e.url.replace(v,g)),f="";if(e.title){f=`"${(0,p.yz)(e.title.replace(v,g))}`;let t=o?.get(g)?.[0];if(t?.value!=null){if(t.paused){if(null!=h&&!a?.has(g)){let t=e.description?.replace(v,g);null==t&&(t=`Custom Autolink ${e.prefix}${g}`),u=h.size+1,h.set(u,`<a href="${m}" title=${f}>${(0,n.nL)()} ${t}</a>`)}f+=`
${s.EO.Dash.repeat(2)}
Loading...`}else{let e=t.value,i=(0,p.yz)(e.title.trim()),r=i.replace(/"/g,"&quot;");null==h||a?.has(g)||(u=h.size+1,h.set(u,`<a href="${m}" title=${f}>${(0,n.nL)(e)} <b>${i}</b></a><br /><span>${s.EO.Space.repeat(5)}${d} ${e.state} ${(0,l.PI)(e.closedDate??e.createdDate)}</span>`)),f+=`
${s.EO.Dash.repeat(2)}
${r}
${(0,p.ZH)(e.state)}, ${(0,l.PI)(e.closedDate??e.createdDate)}`}}else if(null!=h&&!a?.has(g)){let t=e.description?.replace(v,g);null==t&&(t=`Custom Autolink ${e.prefix}${g}`),u=h.size+1,h.set(u,`<a href="${m}" title=${f}>${(0,n.nL)()} ${t}</a>`)}f+='"'}let w=`\0${r.size}\0`;return r.set(w,`<a href="${m}" title=${f}>${d}</a>`),`${i}${w}`});default:return R(e,i),t.replace(e.messageRegex,(e,t,i,n)=>{let c=o?.get(n)?.[0];if(c?.value==null)return i;null==h||a?.has(n)||(u=h.size+1,h.set(u,`${i}: ${c.paused?"Loading...":`${c.value.title}  ${s.EO.Dot}  ${(0,p.ZH)(c.value.state)}, ${(0,l.PI)(c.value.closedDate??c.value.createdDate)}`}`));let d=`\0${r.size}\0`;return r.set(d,`${i}${(0,p.VU)(u)}`),`${t}${d}`})}}}catch(t){d.Vy.error(t,`Failed to create autolink generator: prefix=${e.prefix}, url=${e.url}, title=${e.title}`),e.tokenize=null}return!0}};function R(e,t){return"markdown"===t&&null==e.messageMarkdownRegex?e.messageMarkdownRegex=RegExp(`(^|\\s|\\(|\\[|\\{)(${(0,p.$f)((0,p.yz)((0,p.FV)(e.prefix)))}(${e.alphanumeric?"\\w":"\\d"}+))\\b`,e.ignoreCase?"gi":"g"):"html"===t&&null==e.messageHtmlRegex?e.messageHtmlRegex=RegExp(`(^|\\s|\\(|\\[|\\{)(${(0,p.$f)((0,p.yz)(e.prefix))}(${e.alphanumeric?"\\w":"\\d"}+))\\b`,e.ignoreCase?"gi":"g"):null==e.messageRegex&&(e.messageRegex=RegExp(`(^|\\s|\\(|\\[|\\{)(${(0,p.$f)(e.prefix)}(${e.alphanumeric?"\\w":"\\d"}+))\\b`,e.ignoreCase?"gi":"g")),!0}f([(0,h.Yz)({args:{0:"<message>",1:!1}})],Autolinks.prototype,"getAutolinks",1),f([(0,h.Yz)({args:{0:e=>"string"==typeof e?"<message>":`autolinks=${e.size}`,1:e=>e?.remoteKey}})],Autolinks.prototype,"getEnrichedAutolinks",1),f([(0,h.Yz)({args:{0:"<text>",2:e=>e?.length,3:e=>e?.size,4:e=>e?.size}})],Autolinks.prototype,"linkify",1)},5884:(e,t,i)=>{i.d(t,{z:()=>BlameAnnotationProviderBase});var r=i(1398),s=i(7931),n=i(153),o=i(4832),a=i(8180),l=i(4983),h=i(7253),c=Object.defineProperty,u=Object.getOwnPropertyDescriptor;let d=1073741824-1;let BlameAnnotationProviderBase=class BlameAnnotationProviderBase extends l.w{blame;hoverProviderDisposable;constructor(e,t,i,r){super(e,t,i,r),this.blame=e.git.getBlame(this.trackedDocument.uri,i.document),i.document.isDirty&&r.setForceDirtyStateChangeOnNextDocumentChange()}clear(){null!=this.hoverProviderDisposable&&(this.hoverProviderDisposable.dispose(),this.hoverProviderDisposable=void 0),super.clear()}async validate(){let e=await this.blame;return!!e?.lines.length}async getBlame(e){e&&(this.blame=this.container.git.getBlame(this.trackedDocument.uri,this.editor.document));let t=await this.blame;if(t?.lines.length)return t}getComputedHeatmap(e){let t,i,r;let s=[];for(let r of e.lines)i!==r.sha&&(i=r.sha,null!=(t=e.commits.get(r.sha))&&s.push(t.date));s.sort((e,t)=>e.getTime()-t.getTime());let n=new Date;n.setDate(n.getDate()-(o.H.get("heatmap.ageThreshold")||90));let a=n.getTime(),l=[],c=[];for(let e of s)e.getTime()<a?c.push(e):l.push(e);r=l.length&&c.length?{hot:p(l),cold:p(c)}:p(s);let u=(e,t)=>Array.isArray(r)?r:t?r.hot.concat(r.cold):e.getTime()<a?r.cold:r.hot,d=(e,t)=>{let i=e.getTime(),r=0;for(let e=0;e<t.length&&(r=e,!(i>=t[e]));e++);return r};return{coldThresholdTimestamp:a,colors:(0,h.v7)(),computeRelativeAge:e=>d(e,u(e)),computeOpacity:e=>{let t=u(e,!0);return Math.max(.2,Math.round((1-d(e,t)/t.length)*100)/100)}}}registerHoverProviders(e){let t=o.H.get("hovers");t.enabled&&t.annotations.enabled&&(e.details||e.changes)&&(this.hoverProviderDisposable?.dispose(),this.hoverProviderDisposable=r.languages.registerHoverProvider({pattern:this.editor.document.uri.fsPath},{provideHover:(t,i,r)=>this.provideHover(e,t,i,r)}))}async provideHover(e,t,i,a){if("line"!==o.H.get("hovers.annotations.over")&&0!==i.character||this.editor.document.uri.toString()!==t.uri.toString())return;let l=await this.getBlame();if(null==l)return;let h=l.lines[i.line],c=l.commits.get(h.sha);if(null==c)return;let u=(await Promise.all([e.details?this.getDetailsHoverMessage(c,t):void 0,e.changes?(0,n.PV)(this.container,c,await s.nk.fromUri(t.uri),i.line,t):void 0])).filter(e=>!!e);return new r.Hover(u,t.validateRange(new r.Range(i.line,0,i.line,d)))}async getDetailsHoverMessage(e,t){let i=this.editor.selection.active.line,r=i+1;i=(e.lines.find(e=>e.line===r)??e.lines[0]).originalLine-1;let a=o.H.get("hovers");return(0,n.MX)(this.container,e,await s.nk.fromUri(t.uri),i,{autolinks:a.autolinks.enabled,dateFormat:o.H.get("defaultDateFormat"),format:a.detailsMarkdownFormat,pullRequests:a.pullRequests.enabled,timeout:250})}};function p(e){let t=[],i=Math.floor(e.length/2),r=e.length%2?e[i].getTime():(e[i-1].getTime()+e[i].getTime())/2,s=(e[e.length-1].getTime()-r)/5;for(let e=5;e>0;e--)t.push(r+s*e);t.push(r),s=(r-e[0].getTime())/4;for(let e=1;e<=4;e++)t.push(r-s*e);return t}((e,t,i,r)=>{for(var s,n=r>1?void 0:r?u(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&c(t,i,n)})([(0,a.Rm)({args:!1})],BlameAnnotationProviderBase.prototype,"getComputedHeatmap",1)},5488:(e,t,i)=>{i.d(t,{I:()=>w,o:()=>FileAnnotationController});var r=i(1398),s=i(7899),n=i(4832),o=i(8973),a=i(8180),l=i(4022),h=i(560),c=i(4026),u=i(4911),d=i(2471),p=i(4983),g=Object.defineProperty,m=Object.getOwnPropertyDescriptor,f=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?m(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&g(t,i,n),n};let w={gutterBlameAnnotation:r.window.createTextEditorDecorationType({rangeBehavior:r.DecorationRangeBehavior.OpenOpen,textDecoration:"none"}),gutterBlameHighlight:void 0,changesLineChangedAnnotation:void 0,changesLineAddedAnnotation:void 0,changesLineDeletedAnnotation:void 0};let FileAnnotationController=class FileAnnotationController{constructor(e){this.container=e,this._disposable=r.Disposable.from((0,l.Oo)(e.onReady)(this.onReady,this),n.H.onDidChange(this.onConfigurationChanged,this),r.window.onDidChangeActiveColorTheme(this.onThemeChanged,this)),this._toggleModes=new Map}_onDidToggleAnnotations=new r.EventEmitter;get onDidToggleAnnotations(){return this._onDidToggleAnnotations.event}_annotationsDisposable;_annotationProviders=new Map;_disposable;_editor;_keyboardScope=void 0;_toggleModes;_windowAnnotationType=void 0;dispose(){this.clearAll(),w.gutterBlameAnnotation?.dispose(),w.gutterBlameHighlight?.dispose(),w.changesLineChangedAnnotation?.dispose(),w.changesLineAddedAnnotation?.dispose(),w.changesLineDeletedAnnotation?.dispose(),this._disposable?.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){let t;let i=null==e;if(n.H.changed(e,["blame.highlight","changes.locations"])&&this.updateDecorations(!1),n.H.changed(e,"fileAnnotations.dismissOnEscape")&&(n.H.get("fileAnnotations.dismissOnEscape")?r.window.visibleTextEditors.some(e=>this.getProvider(e))&&this.attachKeyboardHook():this.detachKeyboardHook()),n.H.changed(e,"blame.toggleMode")&&(t=n.H.get("blame.toggleMode"),this._toggleModes.set("blame",t),i||"file"!==t||this.clearAll()),n.H.changed(e,"changes.toggleMode")&&(t=n.H.get("changes.toggleMode"),this._toggleModes.set("changes",t),i||"file"!==t||this.clearAll()),n.H.changed(e,"heatmap.toggleMode")&&(t=n.H.get("heatmap.toggleMode"),this._toggleModes.set("heatmap",t),i||"file"!==t||this.clearAll()),!i&&n.H.changed(e,["blame","changes","heatmap","hovers","defaultDateFormat","defaultDateSource","defaultDateStyle","defaultGravatarsStyle"]))for(let e of this._annotationProviders.values())null!=e&&this.show(e.editor,e.annotationType??"blame")}onThemeChanged(e){this.updateDecorations(!0)}async onActiveTextEditorChanged(e){if(null!=e&&!(0,d.ld)(e))return;if(this._editor=e,this.isInWindowToggle()){await this.show(e,this._windowAnnotationType);return}let t=this.getProvider(e);null==t?((0,o.o)("gitlens:annotationStatus",void 0),this.detachKeyboardHook()):((0,o.o)("gitlens:annotationStatus",t.statusContextValue),this.attachKeyboardHook())}onBlameStateChanged(e){let t=r.window.activeTextEditor;if(null!=t){if(e.blameable){n.H.get("fileAnnotations.preserveWhileEditing")&&this.restore(t);return}this.clearCore((0,p.B)(t))}}onDirtyIdleTriggered(e){if(!e.document.isBlameable||!n.H.get("fileAnnotations.preserveWhileEditing"))return;let t=r.window.activeTextEditor;null!=t&&this.restore(t)}onDirtyStateChanged(e){for(let[t,i]of this._annotationProviders)e.document.is(i.editor.document)&&(n.H.get("fileAnnotations.preserveWhileEditing")?e.dirty||this.restore(e.editor):e.dirty&&this.clearCore(t))}onTextDocumentClosed(e){if(this.container.git.isTrackable(e.uri))for(let[t,i]of this._annotationProviders)i.editor.document===e&&this.clearCore(t)}onTextEditorViewColumnChanged(e){let t=this.getProvider(e.textEditor);if(null==t){let t=(0,c.I6)(this._annotationProviders.values(),t=>t.editor.document===e.textEditor.document);if(null==t)return;this.clearCore(t.correlationKey);return}t.restore(e.textEditor)}onVisibleTextEditorsChanged(e){for(let t of e)this.getProvider(t)?.restore(t,!1)}isInWindowToggle(){return"window"===this.getToggleMode(this._windowAnnotationType)}getToggleMode(e){return null==e?"file":this._toggleModes.get(e)??"file"}clear(e){return this.isInWindowToggle()?this.clearAll():this.clearCore((0,p.B)(e),!0)}async clearAll(){for(let[e]of(this._windowAnnotationType=void 0,this._annotationProviders))await this.clearCore(e,!0);this.unsubscribe()}async getAnnotationType(e){let t=this.getProvider(e);if(null==t)return;let i=await this.container.documentTracker.get(e.document);if(i?.isBlameable)return t.annotationType}getProvider(e){if(e?.document!=null)return this._annotationProviders.get((0,p.B)(e))}debouncedRestores=new WeakMap;restore(e,t){let i=this.getProvider(e);if(null==i)return;let r=this.debouncedRestores.get(e);null==r&&(r=(0,h.sg)(e=>{this.debouncedRestores.delete(e),i.restore(e,t??!0)},500),this.debouncedRestores.set(e,r)),r(e)}async show(e,t,i){if("window"===this.getToggleMode(t)){let i=null==this._windowAnnotationType,s=!i&&this._windowAnnotationType!==t;if(this._windowAnnotationType=t,s&&(await this.clearAll(),i=!0),i)for(let i of r.window.visibleTextEditors)i!==e&&this.show(i,t);if(null==e)return this.subscribe(),!1}if(null==e||(this._editor=e,!(await this.container.documentTracker.getOrAdd(e.document)).isBlameable))return!1;let s=this.getProvider(e);return s?.annotationType===t?(await s.provideAnnotation(i),!0):null!=await r.window.withProgress({location:r.ProgressLocation.Window},async r=>{await (0,o.o)("gitlens:annotationStatus","computing");let n=this.showAnnotationsCore(s,e,t,i,r),a=await n;return e===this._editor&&await (0,o.o)("gitlens:annotationStatus",a?.statusContextValue),n})}async toggle(e,t,i,r){if(null!=e&&"file"===this._toggleModes.get(t)){let i=await this.container.documentTracker.getOrAdd(e.document);if("changes"===t&&!i.isTracked||!i.isBlameable)return!1}let s=this.getProvider(e);if(null==s)return null==e&&this.isInWindowToggle()?(await this.clearAll(),!1):this.show(e,t,i);let n=s.annotationType!==t||!s.canReuse(i);return!0===r&&!n||(this.isInWindowToggle()?await this.clearAll():await this.clearCore(s.correlationKey,!0),!!n&&this.show(e,t,i))}nextChange(){let e=this.getProvider(r.window.activeTextEditor);e?.nextChange?.()}previousChange(){let e=this.getProvider(r.window.activeTextEditor);e?.previousChange?.()}async attachKeyboardHook(){n.H.get("fileAnnotations.dismissOnEscape")&&null==this._keyboardScope&&(this._keyboardScope=await this.container.keyboard.beginScope({escape:{onDidPressKey:async()=>{let e=this._editor;null!=e&&await this.clear(e)}}}))}async clearCore(e,t){let i=this._annotationProviders.get(e);null!=i&&(this._annotationProviders.delete(e),i.dispose(),this._annotationProviders.size&&e!==(0,p.B)(this._editor)||(await (0,o.o)("gitlens:annotationStatus",void 0),await this.detachKeyboardHook()),this._annotationProviders.size||!t&&this.isInWindowToggle()||(this._windowAnnotationType=void 0,this.unsubscribe()),this._onDidToggleAnnotations.fire())}async detachKeyboardHook(){null!=this._keyboardScope&&(await this._keyboardScope.dispose(),this._keyboardScope=void 0)}async showAnnotationsCore(e,t,r,s,n){let o;if(null!=n){let e="annotations";switch(r){case"blame":e="blame annotations";break;case"changes":e="changes annotations";break;case"heatmap":e="heatmap annotations"}n.report({message:`Computing ${e} for ${(0,u.P8)(t.document.fileName)}`})}await this.attachKeyboardHook();let a=await this.container.documentTracker.getOrAdd(t.document);switch(r){case"blame":{let{GutterBlameAnnotationProvider:e}=await Promise.resolve().then(i.bind(i,641));o=new e(this.container,t,a);break}case"changes":{let{GutterChangesAnnotationProvider:e}=await Promise.resolve().then(i.bind(i,7971));o=new e(this.container,t,a);break}case"heatmap":{let{GutterHeatmapBlameAnnotationProvider:e}=await Promise.resolve().then(i.bind(i,5747));o=new e(this.container,t,a)}}if(null!=o&&await o.validate?.()!==!1){if(null!=e&&await this.clearCore(e.correlationKey,!0),0===this._annotationProviders.size&&this.subscribe(),this._annotationProviders.set(o.correlationKey,o),await o.provideAnnotation(s))return this._onDidToggleAnnotations.fire(),o;await this.clearCore(o.correlationKey,!0)}}subscribe(){this._annotationsDisposable??=r.Disposable.from(r.window.onDidChangeActiveTextEditor((0,h.sg)(this.onActiveTextEditorChanged,50),this),r.window.onDidChangeTextEditorViewColumn(this.onTextEditorViewColumnChanged,this),r.window.onDidChangeVisibleTextEditors((0,h.sg)(this.onVisibleTextEditorsChanged,50),this),r.workspace.onDidCloseTextDocument(this.onTextDocumentClosed,this),this.container.documentTracker.onDidChangeBlameState(this.onBlameStateChanged,this),this.container.documentTracker.onDidChangeDirtyState(this.onDirtyStateChanged,this),this.container.documentTracker.onDidTriggerDirtyIdle(this.onDirtyIdleTriggered,this),(0,s.Lb)("gitlens.annotations.nextChange",()=>this.nextChange()),(0,s.Lb)("gitlens.annotations.previousChange",()=>this.previousChange()))}unsubscribe(){this._annotationsDisposable?.dispose(),this._annotationsDisposable=void 0}updateDecorations(e){let t=e?Object.entries(w):void 0;if(this.updateHighlightDecoration(),this.updateChangedDecorations(),!e)return;let i=new Map;for(let[e,r]of t)null!=r&&r!==(w[e]??null)&&i.set(r,w[e]??null);if(0!==i.size)for(let e of r.window.visibleTextEditors)this.getProvider(e)?.refresh(i)}updateChangedDecorations(){let e,t,i;w.changesLineAddedAnnotation?.dispose(),w.changesLineChangedAnnotation?.dispose(),w.changesLineDeletedAnnotation?.dispose();let s=n.H.get("changes.locations");switch(r.window.activeColorTheme.kind){case r.ColorThemeKind.Light:e=[72,152,93],t=[32,144,211],i=[229,20,0];break;case r.ColorThemeKind.HighContrast:default:e=[72,126,2],t=[27,129,168],i=[241,76,76]}w.changesLineAddedAnnotation=r.window.createTextEditorDecorationType({backgroundColor:s.includes("line")?`rgba(${e.join(",")},0.4)`:void 0,isWholeLine:!!s.includes("line")||void 0,gutterIconPath:s.includes("gutter")?r.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><rect fill='rgb(${e.join(",")})' x='13' y='0' width='3' height='18'/></svg>`)}`):void 0,gutterIconSize:"contain",overviewRulerLane:r.OverviewRulerLane.Left,overviewRulerColor:s.includes("overview")?new r.ThemeColor("editorOverviewRuler.addedForeground"):void 0}),w.changesLineChangedAnnotation=r.window.createTextEditorDecorationType({backgroundColor:s.includes("line")?`rgba(${t.join(",")},0.4)`:void 0,isWholeLine:!!s.includes("line")||void 0,gutterIconPath:s.includes("gutter")?r.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><rect fill='rgb(${t.join(",")})' x='13' y='0' width='3' height='18'/></svg>`)}`):void 0,gutterIconSize:"contain",overviewRulerLane:r.OverviewRulerLane.Left,overviewRulerColor:s.includes("overview")?new r.ThemeColor("editorOverviewRuler.modifiedForeground"):void 0}),w.changesLineDeletedAnnotation=r.window.createTextEditorDecorationType({gutterIconPath:s.includes("gutter")?r.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><polygon fill='rgb(${i.join(",")})' points='13,10 13,18 17,14'/></svg>`)}`):void 0,gutterIconSize:"contain",overviewRulerLane:r.OverviewRulerLane.Left,overviewRulerColor:s.includes("overview")?new r.ThemeColor("editorOverviewRuler.deletedForeground"):void 0})}updateHighlightDecoration(){w.gutterBlameHighlight?.dispose(),w.gutterBlameHighlight=void 0;let e=n.H.get("blame.highlight");if(e.enabled){let{locations:t}=e,i=t.includes("gutter")?r.Uri.parse(`data:image/svg+xml,${encodeURIComponent("<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><rect fill='#00bcf2' fill-opacity='0.6' x='7' y='0' width='3' height='18'/></svg>")}`):void 0;w.gutterBlameHighlight=r.window.createTextEditorDecorationType({gutterIconPath:i,gutterIconSize:"contain",isWholeLine:!0,overviewRulerLane:r.OverviewRulerLane.Right,backgroundColor:t.includes("line")?new r.ThemeColor("gitlens.lineHighlightBackgroundColor"):void 0,overviewRulerColor:t.includes("overview")?new r.ThemeColor("gitlens.lineHighlightOverviewRulerColor"):void 0})}}};f([(0,a.Rm)({args:{0:e=>e?.document.uri.toString(!0)}})],FileAnnotationController.prototype,"clear",1),f([(0,a.Rm)()],FileAnnotationController.prototype,"clearAll",1),f([(0,a.Rm)({args:{0:e=>e?.document.uri.toString(!0),2:!1}})],FileAnnotationController.prototype,"show",1),f([(0,a.Rm)({args:{0:e=>e?.document.uri.toString(!0),2:!1}})],FileAnnotationController.prototype,"toggle",1),f([(0,a.Rm)()],FileAnnotationController.prototype,"nextChange",1),f([(0,a.Rm)()],FileAnnotationController.prototype,"previousChange",1),f([(0,a.Rm)()],FileAnnotationController.prototype,"clearCore",1),f([(0,a.Yz)({singleLine:!0,if:function(){return null==this._annotationsDisposable}})],FileAnnotationController.prototype,"subscribe",1),f([(0,a.Yz)({singleLine:!0,if:function(){return null!=this._annotationsDisposable}})],FileAnnotationController.prototype,"unsubscribe",1)},641:(e,t,i)=>{i.d(t,{GutterBlameAnnotationProvider:()=>GutterBlameAnnotationProvider});var r=i(1398),s=i(3807),n=i(236),o=i(2927),a=i(4832),l=i(8180),h=i(4026),c=i(3446),u=i(937),d=i(7279),p=i(7253),g=i(5884),m=i(5488),f=Object.defineProperty,w=Object.getOwnPropertyDescriptor,v=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),y=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?w(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&f(t,i,n),n},b=(e,t,i)=>{if(null!=t){var r;if("object"!=typeof t&&"function"!=typeof t)throw TypeError("Object expected");if(i&&(r=t[v("asyncDispose")]),void 0===r&&(r=t[v("dispose")]),"function"!=typeof r)throw TypeError("Object not disposable");e.push([i,r,t])}else i&&e.push([i]);return t},C=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),n=r=>{for(;r=e.pop();)try{var o=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(o).then(n,e=>(s(e),n()))}catch(e){s(e)}if(i)throw t};return n()};let R=1073741824-1;let GutterBlameAnnotationProvider=class GutterBlameAnnotationProvider extends g.z{constructor(e,t,i){super(e,"blame",t,i)}clear(){if(super.clear(),null!=m.I.gutterBlameHighlight)try{this.editor.setDecorations(m.I.gutterBlameHighlight,[])}catch{}}async onProvideAnnotation(e,t){var i=[];try{let e,o,l,h,g,f;let w=(0,c.dQ)(),v=await this.getBlame(t?.recompute);if(null==v)return!1;let y=b(i,(0,u.u)(w)),C=a.H.get("blame"),R=(0,d.Vx)(C.format).reduce((e,t)=>(e[t.key]=t.options,e),Object.create(null));n.c.has(C.format,"tips")&&(e=await this.container.git.getBranchesAndTagsTipsFn(v.repoPath));let S={dateFormat:null===C.dateFormat?a.H.get("defaultDateFormat"):C.dateFormat,getBranchAndTagTips:e,tokenOptions:R},P={family:a.H.get("blame.fontFamily"),size:a.H.get("blame.fontSize"),style:a.H.get("blame.fontStyle"),weight:a.H.get("blame.fontWeight")},A=C.avatars,k=a.H.get("defaultGravatarsStyle"),D=C.separateLines,T=(0,p.kM)(D,C.heatmap,C.avatars,C.format,S,P),_=[],I=new Map,$=A?new Map:void 0,E=!1;for(let e of(C.heatmap.enabled&&(g=this.getComputedHeatmap(v)),v.lines)){let t=e.line-1;if(h===e.sha){if(null==l)continue;l={...l},C.compact&&!E&&(null==f&&(f=s.EO.Space.repeat((0,d.RG)(l.renderOptions.before.contentText))),l.renderOptions={before:{...l.renderOptions.before,contentText:f}},D&&(l.renderOptions.before.textDecoration=`none;box-sizing: border-box${A?";padding: 0 0 0 18px":""}${P.family?`;font-family: ${P.family}`:""}${P.size?`;font-size: ${P.size}px`:""}`),E=!0),l.range=new r.Range(t,0,t,0),_.push(l);continue}if(E=!1,h=e.sha,o=v.commits.get(e.sha),null!=o){if(l=I.get(e.sha),null!=l){l={...l,range:new r.Range(t,0,t,0)},_.push(l);continue}l=(0,p.w)(o,C.format,S,T),null!=g&&(0,p.nx)(l,o.date,g),l.range=new r.Range(t,0,t,0),_.push(l),A&&null!=o.author.email&&await this.applyAvatarDecoration(o,l,k,$),I.set(e.sha,l)}}return y?.restart({suffix:" to compute gutter blame annotations"}),_.length&&(this.setDecorations([{decorationType:m.I.gutterBlameAnnotation,rangesOrOptions:_}]),y?.stop({suffix:" to apply all gutter blame annotations"})),this.registerHoverProviders(a.H.get("hovers.annotations")),!0}catch(e){var o=e,l=!0}finally{C(i,o,l)}}async selection(e){let t;if(!1===e||null==m.I.gutterBlameHighlight)return;let i=await this.blame;if(!i?.lines.length)return;if(e?.sha!=null)t=e.sha;else if(e?.line!=null){if(e.line>=0){let r=i.lines[e.line];t=r?.sha}}else t=h.$1(i.commits.values())?.sha;if(!t){this.editor.setDecorations(m.I.gutterBlameHighlight,[]);return}let s=(0,o.x1)(i.lines,e=>e.sha===t?this.editor.document.validateRange(new r.Range(e.line-1,0,e.line-1,R)):void 0);this.editor.setDecorations(m.I.gutterBlameHighlight,s)}async applyAvatarDecoration(e,t,i,r){let s=r.get(e.author.email??"");if(null==s){let t=(await e.getAvatarUri({defaultStyle:i,size:16})).toString(!0);s={contentText:"",height:"16px",width:"16px",textDecoration:`none;position:absolute;top:1px;left:5px;background:url(${encodeURI(t)});background-size:16px 16px;margin-left: 0 !important`},r.set(e.author.email??"",s)}t.renderOptions.after=s}};y([(0,l.Rm)()],GutterBlameAnnotationProvider.prototype,"onProvideAnnotation",1),y([(0,l.Rm)({args:!1})],GutterBlameAnnotationProvider.prototype,"selection",1)},7971:(e,t,i)=>{i.d(t,{GutterChangesAnnotationProvider:()=>GutterChangesAnnotationProvider});var r=i(1398),s=i(153),n=i(4832),o=i(8180),a=i(3446),l=i(3131),h=i(937),c=i(4983),u=i(5488),d=Object.defineProperty,p=Object.getOwnPropertyDescriptor,g=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),m=(e,t,i)=>{if(null!=t){var r;if("object"!=typeof t&&"function"!=typeof t)throw TypeError("Object expected");if(i&&(r=t[g("asyncDispose")]),void 0===r&&(r=t[g("dispose")]),"function"!=typeof r)throw TypeError("Object not disposable");e.push([i,r,t])}else i&&e.push([i]);return t},f=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),n=r=>{for(;r=e.pop();)try{var o=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(o).then(n,e=>(s(e),n()))}catch(e){s(e)}if(i)throw t};return n()};let w=1073741824-1;let GutterChangesAnnotationProvider=class GutterChangesAnnotationProvider extends c.w{hoverProviderDisposable;sortedHunkStarts;state;constructor(e,t,i){super(e,"changes",t,i)}canReuse(e){return!(this.annotationContext?.sha!==e?.sha||this.annotationContext?.only!==e?.only)}clear(){this.state=void 0,null!=this.hoverProviderDisposable&&(this.hoverProviderDisposable.dispose(),this.hoverProviderDisposable=void 0),super.clear()}nextChange(){if(null==this.sortedHunkStarts)return;let e=-1,t=this.editor.selection.active.line;for(let i of this.sortedHunkStarts)if(i>t){e=i;break}-1===e&&(e=this.sortedHunkStarts[0]),e>0&&(this.editor.selection=new r.Selection(e,0,e,0),this.editor.revealRange(new r.Range(e,0,e,0),r.TextEditorRevealType.InCenterIfOutsideViewport))}previousChange(){if(null==this.sortedHunkStarts)return;let e=-1,t=this.editor.selection.active.line;for(let i of this.sortedHunkStarts){if(i>=t)break;e=i}-1===e&&(e=this.sortedHunkStarts[this.sortedHunkStarts.length-1]),e>0&&(this.editor.selection=new r.Selection(e,0,e,0),this.editor.revealRange(new r.Range(e,0,e,0),r.TextEditorRevealType.InCenterIfOutsideViewport))}async onProvideAnnotation(e,t){var i=[];try{let s,n;let o=(0,a.dQ)(),c=this.trackedDocument.uri.sha,d=e?.sha!=null&&e.sha!==c?`${e.sha}^`:void 0,p=null==c&&null==d;if(p){let e=await this.container.git.getOldestUnpushedRefForFile(this.trackedDocument.uri.repoPath,this.trackedDocument.uri);if(null!=e)e=`${e}^`,s=await this.container.git.getCommitForFile(this.trackedDocument.uri.repoPath,this.trackedDocument.uri,{ref:e}),null!=s?null!=d?d=e:(c=e,d=""):p=!1;else{let e=await this.container.git.getStatusForFile(this.trackedDocument.uri.repoPath,this.trackedDocument.uri),t=e?.getPseudoCommits(this.container,await this.container.git.getCurrentUser(this.trackedDocument.uri.repoPath));t?.length?(s=await this.container.git.getCommitForFile(this.trackedDocument.uri.repoPath,this.trackedDocument.uri),c="HEAD"):this.trackedDocument.dirty?c="HEAD":p=!1}}p||(s=await this.container.git.getCommitForFile(this.trackedDocument.uri.repoPath,this.trackedDocument.uri,{ref:d??c}),null==s||(null!=d||(c=`${s.ref}^`),d=s.ref));let g=(await Promise.allSettled(null==d&&this.editor.document.isDirty?[this.container.git.getDiffForFileContents(this.trackedDocument.uri,c,this.editor.document.getText()),this.container.git.getDiffForFile(this.trackedDocument.uri,c,d)]:[this.container.git.getDiffForFile(this.trackedDocument.uri,c,d)])).map(e=>(0,l.Ro)(e)).filter(e=>!!e);if(!g?.length)return!1;let f=m(i,(0,h.u)(o)),v=new Map,y=e?.sha!=null&&e?.only?await this.container.git.getBlame(this.trackedDocument.uri,this.editor?.document):void 0;for(let t of(this.sortedHunkStarts=[],g))for(let i of t.hunks){if(null!=y){let t=!0,r=e.sha;for(let e=i.current.position.start-1;e<i.current.position.end;e++)y.lines[e]?.sha===r&&(t=!1);if(t)continue}for(let[e,t]of i.lines){if("unchanged"===t.state)continue;let i=this.editor.document.validateRange(new r.Range(new r.Position(e-1,0),new r.Position(e-1,w)));this.sortedHunkStarts.push(i.start.line),null==n&&(n=new r.Selection(i.start,i.end));let s=v.get(t.state);null==s?(s={decorationType:"added"===t.state?u.I.changesLineAddedAnnotation:"removed"===t.state?u.I.changesLineDeletedAnnotation:u.I.changesLineChangedAnnotation,rangesOrOptions:[{range:i}]},v.set(t.state,s)):s.rangesOrOptions.push({range:i})}}return this.sortedHunkStarts.sort((e,t)=>e-t),f?.restart({suffix:" to compute recent changes annotations"}),v.size&&(this.setDecorations([...v.values()]),f?.stop({suffix:" to apply all recent changes annotations"}),null==n||e?.selection===!1||t?.restoring||(this.editor.selection=n,this.editor.revealRange(n,r.TextEditorRevealType.InCenterIfOutsideViewport))),this.state={commit:s,diffs:g},this.registerHoverProvider(),!0}catch(e){var s=e,n=!0}finally{f(i,s,n)}}registerHoverProvider(){let e=n.H.get("hovers");e.enabled&&e.annotations.enabled&&(this.hoverProviderDisposable?.dispose(),this.hoverProviderDisposable=r.languages.registerHoverProvider({pattern:this.editor.document.uri.fsPath},{provideHover:(e,t,i)=>this.provideHover(e,t,i)}))}async provideHover(e,t,i){if(null==this.state||"line"!==n.H.get("hovers.annotations.over")&&0!==t.character)return;let{commit:o,diffs:a}=this.state;for(let i of a)for(let n of i.hunks){let i=n.previous.count>n.current.count;if(t.line>=n.current.position.start-1&&t.line<=n.current.position.end-(i?0:1)){let a=await (0,s.ec)(o,this.trackedDocument.uri,t.line,n);if(null==a)return;return new r.Hover(a,e.validateRange(new r.Range(n.current.position.start-1,0,n.current.position.end-(i?0:1),w)))}}}};((e,t,i,r)=>{for(var s,n=r>1?void 0:r?p(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&d(t,i,n)})([(0,o.Rm)()],GutterChangesAnnotationProvider.prototype,"onProvideAnnotation",1)},5747:(e,t,i)=>{i.d(t,{GutterHeatmapBlameAnnotationProvider:()=>GutterHeatmapBlameAnnotationProvider});var r=i(1398),s=i(8180),n=i(3446),o=i(937),a=i(7253),l=i(5884),h=Object.defineProperty,c=Object.getOwnPropertyDescriptor,u=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),d=(e,t,i)=>{if(null!=t){var r;if("object"!=typeof t&&"function"!=typeof t)throw TypeError("Object expected");if(i&&(r=t[u("asyncDispose")]),void 0===r&&(r=t[u("dispose")]),"function"!=typeof r)throw TypeError("Object not disposable");e.push([i,r,t])}else i&&e.push([i]);return t},p=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),n=r=>{for(;r=e.pop();)try{var o=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(o).then(n,e=>(s(e),n()))}catch(e){s(e)}if(i)throw t};return n()};let GutterHeatmapBlameAnnotationProvider=class GutterHeatmapBlameAnnotationProvider extends l.z{constructor(e,t,i){super(e,"heatmap",t,i)}async onProvideAnnotation(e,t){var i=[];try{let e;let s=(0,n.dQ)(),l=await this.getBlame(t?.recompute);if(null==l)return!1;let h=d(i,(0,o.u)(s)),c=new Map,u=this.getComputedHeatmap(l);for(let t of l.lines){let i=t.line-1;e=l.commits.get(t.sha),null!=e&&(0,a.n0)(e.date,u,new r.Range(i,0,i,0),c)}return h?.restart({suffix:" to compute heatmap annotations"}),c.size&&(this.setDecorations([...c.values()]),h?.stop({suffix:" to apply all heatmap annotations"})),!0}catch(e){var s=e,l=!0}finally{p(i,s,l)}}};((e,t,i,r)=>{for(var s,n=r>1?void 0:r?c(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&h(t,i,n)})([(0,s.Rm)()],GutterHeatmapBlameAnnotationProvider.prototype,"onProvideAnnotation",1)},1760:(e,t,i)=>{i.d(t,{qr:()=>ActionRunners,zM:()=>g});var r,s=i(1398),n=i(3807),o=i(7899),a=i(4832),l=i(8973),h=i(6330),c=i(7279),u=i(2471);let d=["createPullRequest","openPullRequest","hover.commands"];var p=((r=p||{})[r.BuiltIn=0]="BuiltIn",r[r.BuiltInPartner=1]="BuiltInPartner",r[r.Partner=2]="Partner",r[r.BuiltInPartnerInstaller=3]="BuiltInPartnerInstaller",r);let g="Built In";let ActionRunnerQuickPickItem=class ActionRunnerQuickPickItem{constructor(e,t){this.runner=e,this._label="string"==typeof e.label?e.label:e.label(t)}_label;get label(){return this._label}get detail(){return this.runner.name}};let NoActionRunnersQuickPickItem=class NoActionRunnersQuickPickItem{runner;get label(){return"No actions were found"}get detail(){}};let m=(0,h.N)();let RegisteredActionRunner=class RegisteredActionRunner{constructor(e,t,i){this.type=e,this.runner=t,this.unregister=i,this.id=m.next()}id;dispose(){this.unregister()}get name(){return this.runner.name}get label(){return this.runner.label}get order(){switch(this.type){case 0:return 0;case 1:return 1;case 2:return this.partnerId?1:2;case 3:return 3;default:return 100}}get partnerId(){return this.runner.partnerId}run(e){return this.runner.run(e)}};let ActionRunners=class ActionRunners{constructor(e){this.container=e;let t=[a.H.onDidChange(e=>{a.H.changed(e,"partners")&&this._updateAllContextKeys()})];for(let e of d)t.push((0,o.Lb)(`${n.Ts.ActionPrefix}${e}`,(e,t)=>this.run(e,t)));this._disposable=s.Disposable.from(...t)}_onDidChange=new s.EventEmitter;get onDidChange(){return this._onDidChange.event}_actionRunners=new Map;_disposable;dispose(){for(let e of(this._disposable.dispose(),this._actionRunners.values()))for(let t of e)t.dispose();this._actionRunners.clear()}count(e){return this.get(e)?.length??0}get(e){return function(e,t){if(null!=t&&0!==t.length)return null==e?t:t.filter(t=>null==t.partnerId||null!=t.partnerId&&e[t.partnerId]?.enabled!==!1)}(a.H.get("partners"),this._actionRunners.get(e))}has(e){return this.count(e)>0}register(e,t,i=2){let r=this._actionRunners.get(e);null==r&&(r=[],this._actionRunners.set(e,r));let s=e=>{this._updateContextKeys(e),this._onDidChange.fire(e)},n=this._actionRunners,o=new RegisteredActionRunner(i,t,function(){if(1===r.length)n.delete(e),s(e);else{let e=r.indexOf(this);-1!==e&&r.splice(e,1)}});return r.push(o),s(e),{dispose:()=>o.dispose()}}registerBuiltIn(e,t){return this.register(e,{...t,partnerId:void 0,name:g},0)}registerBuiltInPartner(e,t,i){return this.register(t,{...i,partnerId:e},1)}registerBuiltInPartnerInstaller(e,t,i){return this.register(t,{...i,partnerId:e,name:`${i.name} (Not Installed)`},3)}async run(e,t){let i,r=this.get(e.type);if(null!=r&&0!==r.length&&(null!=t&&(r=r.filter(e=>e.id===t)),0!==r.length)){if(r.length>1||r.every(e=>0!==e.type)){let t=r.sort((e,t)=>e.order-t.order||(0,c.wN)(e.name,t.name)).map(t=>new ActionRunnerQuickPickItem(t,e));0===t.length&&t.push(new NoActionRunnersQuickPickItem);let n=s.window.createQuickPick();n.ignoreFocusOut=(0,u.dW)();let o=[];try{let r=await new Promise(i=>{let r,s;switch(o.push(n.onDidHide(()=>i(void 0)),n.onDidAccept(()=>{0!==n.activeItems.length&&i(n.activeItems[0])})),e.type){case"createPullRequest":r="Create Pull Request",s="Choose how to create a pull request";break;case"openPullRequest":r="Open Pull Request",s="Choose how to open the pull request";break;case"hover.commands":r="Need Help or Want to Collaborate?",s="Choose what you would like to do"}n.title=r,n.placeholder=s,n.matchOnDetail=!0,n.items=t,n.show()});if(null==r)return;i=r.runner}finally{n.dispose(),o.forEach(e=>void e.dispose())}}else[i]=r;await i?.run(e)}}async _updateContextKeys(e){await (0,l.o)(`gitlens:action:${e}`,this.count(e))}async _updateAllContextKeys(){for(let e of d)await this._updateContextKeys(e)}}},5176:(e,t,i)=>{let r,s;i.d(t,{A0:()=>w,H3:()=>$,ML:()=>D,Qw:()=>E,Sk:()=>I,m_:()=>C,qJ:()=>R});var n=i(1398),o=i(9032),a=i(2972),l=i(4862),h=i(4832),c=i(8973),u=i(560),d=i(4026),p=i(7279);let g=1073741824-1,m=new Map,f=new n.EventEmitter;f.event((0,u.sg)(()=>{let e=null!=r?[...(0,d.x1)(r,([e,t])=>null!=t.uri?[e,{uri:t.uri.toString(),timestamp:t.timestamp}]:void 0)]:void 0;a.m.instance.storage.store("avatars",e)},1e3));let w=f.event,v="00000000000000000000000000000000",y=new Map,b=[6048e5,6e4,3e5,6e5,36e5,864e5,6048e5];function C(e,t,i){return S(e,t,i)}function R(e,t){return S(e,void 0,{...t,cached:!0})}function S(e,t,i){A(r);let s=(i?.size??16)*2;if(!e){let e=P(`${v}:${s}`,void 0,s,v,i?.defaultStyle);return e.uri??e.fallback}let n=(0,o.Fx)(e.trim().toLowerCase()),a=`${n}:${s}`,l=P(a,e,s,n,i?.defaultStyle);if(null!=l.uri)return l.uri;if(!i?.cached&&null!=t&&(0,c.SD)("gitlens:hasConnectedRemotes")){let i=m.get(a);return null==i&&Date.now()>=l.timestamp+b[Math.min(l.retries,b.length-1)]&&(i=T(l,a,e,t,{size:s}).then(e=>e??l.uri??l.fallback),m.set(a,i.finally(()=>m.delete(a)))),i??l.fallback}return i?.cached?l.uri:l.uri??l.fallback}function P(e,t,i,s,o){let a=r.get(e);return null==a?(a={uri:null!=t&&0!==t.length?function(e,t=16){let i=(0,l.P)(e);if(null!=i&&(0,p.Q_)(i.authority,"github.com"))return n.Uri.parse(`https://avatars.githubusercontent.com/${i.userId?`u/${i.userId}`:i.login}?size=${t}`)}(t,i):void 0,fallback:k(s,i,o),timestamp:0,retries:0},r.set(e,a)):null==a.fallback&&(a.fallback=k(s,i,o)),a}function A(e){null==e&&(r=new Map(a.m.instance.storage.get("avatars")?.map(([e,t])=>[e,{uri:n.Uri.parse(t.uri),timestamp:t.timestamp,retries:0}])))}function k(e,t,i){return n.Uri.parse(`https://www.gravatar.com/avatar/${e}?s=${t}&d=${i??(null==s&&(s=h.H.get("defaultGravatarsStyle",void 0,"robohash")),s)}`)}function D(e,t,i){return k((0,o.Fx)(e.trim().toLowerCase()),t,i)}async function T(e,t,i,s,{size:l=16}={}){A(r);try{let t;if("string"!=typeof s){let e=await a.m.instance.git.getBestRemoteWithIntegration(s.repoPath);e?.hasIntegration()&&(t=await (await e.getIntegration())?.getAccountForCommit(e.provider.repoDesc,s.ref,{avatarSize:l}))}if(t?.avatarUrl==null){e.uri=void 0,e.timestamp=g,e.retries=0;return}return e.uri=n.Uri.parse(t.avatarUrl),e.timestamp=Date.now(),e.retries=0,null!=t.email&&(0,p.Q_)(i,t.email)&&r.set(`${(0,o.Fx)(t.email.trim().toLowerCase())}:${l}`,{...e}),f.fire({email:i}),e.uri}catch{e.uri=void 0,e.timestamp=Date.now(),e.retries++;return}}let _=new Map([["online","#28ca42"],["away","#cecece"],["busy","#ca5628"],["dnd","#ca5628"],["offline","#cecece"]]);function I(e){let t=y.get(e);if(null==t){let i=(0,p.K3)(`<?xml version="1.0" encoding="utf-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="4" height="16" viewBox="0 0 4 16">
	<circle cx="2" cy="14" r="2" fill="${_.get(e)}"/>
</svg>`);t=encodeURI(`data:image/svg+xml;base64,${i}`),y.set(e,t)}return t}function $(e){switch(e){case"all":a.m.instance.storage.delete("avatars"),r?.clear(),m.clear();break;case"failed":for(let e of r?.values()??[])null==e.uri&&(e.timestamp=0,e.retries=0);break;case"fallback":for(let e of r?.values()??[])e.fallback=void 0}}function E(e){s=e,$("fallback")}},4416:(e,t,i)=>{i.d(t,{GitCodeLensProvider:()=>GitCodeLensProvider});var r=i(1398),s=i(2434),n=i(3807),o=i(2124),a=i(7899),l=i(4832),h=i(560),c=i(4026),u=i(3916),d=i(7279),p=i(2471);let GitRecentChangeCodeLens=class GitRecentChangeCodeLens extends r.CodeLens{constructor(e,t,i,r,s,n,o,a,l,h){super(a,h),this.languageId=e,this.symbol=t,this.uri=i,this.dateFormat=r,this.blame=s,this.blameRange=n,this.isFullRange=o,this.desiredCommand=l}getBlame(){return this.blame?.()}};let GitAuthorsCodeLens=class GitAuthorsCodeLens extends r.CodeLens{constructor(e,t,i,r,s,n,o,a){super(o),this.languageId=e,this.symbol=t,this.uri=i,this.blame=r,this.blameRange=s,this.isFullRange=n,this.desiredCommand=a}getBlame(){return this.blame()}};let GitCodeLensProvider=class GitCodeLensProvider{constructor(e){this.container=e}static selector=[{scheme:n.xB.File},{scheme:n.xB.Git},{scheme:n.xB.GitLens},{scheme:n.xB.PRs},{scheme:n.xB.Vsls},{scheme:n.xB.VslsScc},{scheme:n.xB.Virtual},{scheme:n.xB.GitHub}];_onDidChangeCodeLenses=new r.EventEmitter;get onDidChangeCodeLenses(){return this._onDidChangeCodeLenses.event}reset(){this._onDidChangeCodeLenses.fire()}async provideCodeLenses(e,t){let i,s;if(e.isDirty&&(0,p.QK)(e.uri))return[];let n=await this.container.documentTracker.getOrAdd(e);if(!n.isBlameable)return[];let o=!1;e.isDirty&&!n.isDirtyIdle&&(o=!0);let c=l.H.get("codeLens",e),d={...c.scopesByLanguage?.find(t=>t.language?.toLowerCase()===e.languageId)};null==d&&(d={language:e.languageId}),null==d.scopes&&(d.scopes=c.scopes),null==d.symbolScopes&&(d.symbolScopes=c.symbolScopes),d.symbolScopes=null!=d.symbolScopes?d.symbolScopes=d.symbolScopes.map(e=>e.toLowerCase()):[];let g=[],m=n.uri;if(o){if(1!==d.scopes.length||!d.scopes.includes("document")){let t;if([t,s]=await Promise.all([this.container.git.isTracked(m),(0,a.S4)("vscode.executeDocumentSymbolProvider",e.uri)]),!t)return g}}else if(t.isCancellationRequested||(1===d.scopes.length&&d.scopes.includes("document")?i=await this.container.git.getBlame(m,e):[i,s]=await Promise.all([this.container.git.getBlame(m,e),(0,a.S4)("vscode.executeDocumentSymbolProvider",e.uri)]),null==i||i?.lines.length===0))return g;if(t.isCancellationRequested)return g;let f=(0,h.Oo)(()=>e.validateRange(new r.Range(0,0,1e6,1e6))),w=o?{command:void 0,title:this.getDirtyTitle(c)}:void 0;if(void 0!==s)for(let t of(u.Vy.log("GitCodeLensProvider.provideCodeLenses:",`${s.length} symbol(s) found`),s))this.provideCodeLens(g,e,t,d,f,i,m,c,o,w);if((d.scopes.includes("document")||d.symbolScopes.includes("file"))&&!d.symbolScopes.includes("!file")&&null==g.find(e=>0===e.range.start.line&&0===e.range.end.line)){let t;let s=f();if(o||c.recentChange.enabled){o||(t=(0,h.Oo)(()=>this.container.git.getBlameRange(i,m,s)));let n=new r.SymbolInformation(m.fileName,r.SymbolKind.File,"",new r.Location(m.documentUri(),new r.Range(0,0,0,s.start.character)));g.push(new GitRecentChangeCodeLens(e.languageId,n,m,c.dateFormat,t,s,!0,D(n),c.recentChange.command,w))}if(!o&&c.authors.enabled){void 0===t&&(t=(0,h.Oo)(()=>this.container.git.getBlameRange(i,m,s)));let n=new r.SymbolInformation(m.fileName,r.SymbolKind.File,"",new r.Location(m.documentUri(),new r.Range(0,1,0,s.start.character)));g.push(new GitAuthorsCodeLens(e.languageId,n,m,t,s,!0,D(n),c.authors.command))}}return g}getValidateSymbolRange(e,t,i,s){let n,o=!1,a=r.SymbolKind[e.kind].toLowerCase();switch(e.kind){case r.SymbolKind.File:(t.scopes.includes("containers")||t.symbolScopes.includes(a))&&(o=!t.symbolScopes.includes(`!${a}`)),o&&(n=i());break;case r.SymbolKind.Package:(t.scopes.includes("containers")||t.symbolScopes.includes(a))&&(o=!t.symbolScopes.includes(`!${a}`)),o&&0===(n=D(e)).start.line&&0===n.end.line&&(n=i());break;case r.SymbolKind.Class:case r.SymbolKind.Interface:case r.SymbolKind.Module:case r.SymbolKind.Namespace:case r.SymbolKind.Struct:(t.scopes.includes("containers")||t.symbolScopes.includes(a))&&(n=D(e),o=!t.symbolScopes.includes(`!${a}`)&&(s||!n.isSingleLine));break;case r.SymbolKind.Constructor:case r.SymbolKind.Enum:case r.SymbolKind.Function:case r.SymbolKind.Method:case r.SymbolKind.Property:(t.scopes.includes("blocks")||t.symbolScopes.includes(a))&&(n=D(e),o=!t.symbolScopes.includes(`!${a}`)&&(s||!n.isSingleLine));break;case r.SymbolKind.String:(t.symbolScopes.includes(a)||"markdown"===t.language&&t.scopes.includes("containers"))&&(n=D(e),o=!t.symbolScopes.includes(`!${a}`)&&(s||!n.isSingleLine));break;default:t.symbolScopes.includes(a)&&(n=D(e),o=!t.symbolScopes.includes(`!${a}`)&&(s||!n.isSingleLine))}return o?n??D(e):void 0}provideCodeLens(e,t,i,s,n,o,a,l,c,u){try{let d;let p=this.getValidateSymbolRange(i,s,n,l.includeSingleLineSymbols);if(void 0===p)return;let g=t.lineAt(D(i).start);if(e.length&&e[e.length-1].range.start.line===g.lineNumber)return;let m=0;if((c||l.recentChange.enabled)&&(c||(d=(0,h.Oo)(()=>this.container.git.getBlameRange(o,a,p))),e.push(new GitRecentChangeCodeLens(t.languageId,i,a,l.dateFormat,d,p,!1,g.range.with(new r.Position(g.range.start.line,m)),l.recentChange.command,u)),m++),l.authors.enabled){let s=!p.isSingleLine;if(!s&&"csharp"===t.languageId)switch(i.kind){case r.SymbolKind.File:break;case r.SymbolKind.Package:case r.SymbolKind.Module:case r.SymbolKind.Namespace:case r.SymbolKind.Class:case r.SymbolKind.Interface:case r.SymbolKind.Constructor:case r.SymbolKind.Method:case r.SymbolKind.Function:case r.SymbolKind.Enum:s=!0}s&&!c&&(void 0===d&&(d=(0,h.Oo)(()=>this.container.git.getBlameRange(o,a,p))),e.push(new GitAuthorsCodeLens(t.languageId,i,a,d,p,!1,g.range.with(new r.Position(g.range.start.line,m)),l.authors.command)))}}finally{if(T(i))for(let r of i.children)this.provideCodeLens(e,t,r,s,n,o,a,l,c,u)}}resolveCodeLens(e,t){return e instanceof GitRecentChangeCodeLens?this.resolveGitRecentChangeCodeLens(e,t):e instanceof GitAuthorsCodeLens?this.resolveGitAuthorsCodeLens(e,t):Promise.reject(void 0)}resolveGitRecentChangeCodeLens(e,t){let i=e.getBlame();if(null==i)return k("Unknown, (Blame failed)",e);let n=(0,c.$1)(i.commits.values());if(null==n)return k("Unknown, (Blame failed)",e);let o=`${n.author.name}, ${null==e.dateFormat?n.formattedDate:n.formatDate(e.dateFormat)}`;if(l.H.get("debug")&&(o+=` [${e.languageId}: ${r.SymbolKind[e.symbol.kind]}(${e.range.start.character}-${e.range.end.character}${e.symbol.containerName?`|${e.symbol.containerName}`:""}), Lines (${e.blameRange.start.line+1}-${e.blameRange.end.line+1}), Commit (${n.shortSha})]`),!1===e.desiredCommand)return k(o,e);switch(e.desiredCommand){case s.Vg.CopyRemoteCommitUrl:return m(o,e,n,!0);case s.Vg.CopyRemoteFileUrl:return f(o,e,n,!0);case s.Vg.DiffWithPrevious:return g(o,e,n);case s.Vg.OpenCommitOnRemote:return m(o,e,n);case s.Vg.OpenFileOnRemote:return f(o,e,n);case s.Vg.RevealCommitInView:return w(o,e,n);case s.Vg.ShowCommitsInView:return v(o,e,i,n);case s.Vg.ShowQuickCommitDetails:return y(o,e,n);case s.Vg.ShowQuickCommitFileDetails:return b(o,e,n);case s.Vg.ShowQuickCurrentBranchHistory:return C(o,e);case s.Vg.ShowQuickFileHistory:return R(o,e);case s.Vg.ToggleFileBlame:return S(o,e);case s.Vg.ToggleFileChanges:return P(o,e,n);case s.Vg.ToggleFileChangesOnly:return P(o,e,n,!0);case s.Vg.ToggleFileHeatmap:return A(o,e);default:return e}}resolveGitAuthorsCodeLens(e,t){let i=e.getBlame();if(null==i)return k("? authors (Blame failed)",e);let n=i.authors.size,o=c.$1(i.authors.values())?.name??"Unknown",a=`${(0,d.td)("author",n,{zero:"?"})} (${o}${n>1?" and others":""})`;if(l.H.get("debug")&&(a+=` [${e.languageId}: ${r.SymbolKind[e.symbol.kind]}(${e.range.start.character}-${e.range.end.character}${e.symbol.containerName?`|${e.symbol.containerName}`:""}), Lines (${e.blameRange.start.line+1}-${e.blameRange.end.line+1}), Authors (${(0,c.fj)((0,c.Tj)(i.authors.values(),e=>e.name),", ")})]`),!1===e.desiredCommand)return k(a,e);let h=(0,c.I6)(i.commits.values(),e=>e.author.name===o)??(0,c.$1)(i.commits.values());if(null==h)return k(a,e);switch(e.desiredCommand){case s.Vg.CopyRemoteCommitUrl:return m(a,e,h,!0);case s.Vg.CopyRemoteFileUrl:return f(a,e,h,!0);case s.Vg.DiffWithPrevious:return g(a,e,h);case s.Vg.OpenCommitOnRemote:return m(a,e,h);case s.Vg.OpenFileOnRemote:return f(a,e,h);case s.Vg.RevealCommitInView:return w(a,e,h);case s.Vg.ShowCommitsInView:return v(a,e,i);case s.Vg.ShowQuickCommitDetails:return y(a,e,h);case s.Vg.ShowQuickCommitFileDetails:return b(a,e,h);case s.Vg.ShowQuickCurrentBranchHistory:return C(a,e);case s.Vg.ShowQuickFileHistory:return R(a,e);case s.Vg.ToggleFileBlame:return S(a,e);case s.Vg.ToggleFileChanges:return P(a,e,h);case s.Vg.ToggleFileChangesOnly:return P(a,e,h,!0);case s.Vg.ToggleFileHeatmap:return A(a,e);default:return e}}getDirtyTitle(e){return e.recentChange.enabled&&e.authors.enabled?l.H.get("strings.codeLens.unsavedChanges.recentChangeAndAuthors"):e.recentChange.enabled?l.H.get("strings.codeLens.unsavedChanges.recentChangeOnly"):l.H.get("strings.codeLens.unsavedChanges.authorsOnly")}};function g(e,t,i){return t.command=(0,a.AU)({title:e,command:n.Ts.DiffWithPrevious,arguments:[void 0,{commit:i,uri:t.uri.toFileUri()}]}),t}function m(e,t,i,r=!1){return t.command=(0,a.AU)({title:e,command:n.Ts.OpenOnRemote,arguments:[{resource:{type:o.J.Commit,sha:i.sha},repoPath:i.repoPath,clipboard:r}]}),t}function f(e,t,i,r=!1){return t.command=(0,a.AU)({title:e,command:n.Ts.OpenOnRemote,arguments:[{resource:{type:o.J.Revision,fileName:i.file?.path??"",sha:i.sha},repoPath:i.repoPath,clipboard:r}]}),t}function w(e,t,i){return t.command=(0,a.AU)({title:e,command:i?.isUncommitted?"":s.Vg.RevealCommitInView,arguments:[t.uri.toFileUri(),{commit:i,sha:void 0===i?void 0:i.sha}]}),t}function v(e,t,i,r){let s;return s=void 0===r?[...(0,c.x1)(i.commits.values(),e=>e.isUncommitted?void 0:e.ref)]:[r.ref],t.command=(0,a.AU)({title:e,command:0===s.length?"":n.Ts.ShowCommitsInView,arguments:[{repoPath:i.repoPath,refs:s}]}),t}function y(e,t,i){return t.command=(0,a.AU)({title:e,command:i?.isUncommitted?"":s.Vg.ShowQuickCommitDetails,arguments:[t.uri.toFileUri(),{commit:i,sha:void 0===i?void 0:i.sha}]}),t}function b(e,t,i){return t.command=(0,a.AU)({title:e,command:i?.isUncommitted?"":s.Vg.ShowQuickCommitFileDetails,arguments:[t.uri.toFileUri(),{commit:i,sha:void 0===i?void 0:i.sha}]}),t}function C(e,t){return t.command=(0,a.AU)({title:e,command:s.Vg.ShowQuickCurrentBranchHistory,arguments:[t.uri.toFileUri()]}),t}function R(e,t){return t.command=(0,a.AU)({title:e,command:s.Vg.ShowQuickFileHistory,arguments:[t.uri.toFileUri(),{range:t.isFullRange?void 0:t.blameRange}]}),t}function S(e,t){return t.command=(0,a.AU)({title:e,command:n.Ts.ToggleFileBlame,arguments:[t.uri.toFileUri()]}),t}function P(e,t,i,r){return t.command=(0,a.AU)({title:e,command:n.Ts.ToggleFileChanges,arguments:[t.uri.toFileUri(),{type:"changes",context:{sha:i.sha,only:r,selection:!1}}]}),t}function A(e,t){return t.command=(0,a.AU)({title:e,command:n.Ts.ToggleFileHeatmap,arguments:[t.uri.toFileUri()]}),t}function k(e,t){return t.command={title:e,command:""},t}function D(e){return T(e)?e.range:e.location.range}function T(e){return(0,h.is)(e,"children")}},3900:(e,t,i)=>{let r;i.d(t,{BA:()=>C,Bp:()=>v,DX:()=>EditorCommand,EL:()=>B,Ey:()=>R,K0:()=>y,Or:()=>w,Y6:()=>E,Zr:()=>ActiveEditorCommand,cD:()=>P,d2:()=>A,dY:()=>ActiveEditorCachedCommand,j7:()=>b,nX:()=>k,oD:()=>I,q:()=>T,qU:()=>F,qv:()=>D,qx:()=>f,uB:()=>Command,vH:()=>$,xT:()=>S,z2:()=>_});var s=i(1398),n=i(9102),o=i(5287),a=i(4693),l=i(7788),h=i(9634),c=i(468),u=i(410),d=i(7899),p=i(560),g=i(5911),m=i(4178);function f(e,t){return t?.document?.uri??e}function w(e){return"editorLine"===e.type}function v(e){return"timeline-item:git"===e.type}function y(e){return"viewItem"===e.type&&(0,n.PX)(e.node.branch)}function b(e){return"viewItem"===e.type&&(0,o.WM)(e.node.commit)}function C(e){return"viewItem"===e.type&&(0,a.cQ)(e.node.contributor)}function R(e){if("viewItem"!==e.type)return!1;let t=e.node;return null!=t.file&&(null!=t.file.repoPath||null!=t.repoPath)}function S(e){if("viewItem"!==e.type)return!1;let t=e.node;return null!=t.file&&(0,o.WM)(t.commit)&&(null!=t.file.repoPath||null!=t.repoPath)}function P(e){if("viewItem"!==e.type)return!1;let t=e.node;return null!=t.file&&null!=t.ref1&&null!=t.ref2&&(null!=t.file.repoPath||null!=t.repoPath)}function A(e){return"viewItem"===e.type&&"string"==typeof e.node.compareRef?.ref&&"string"==typeof e.node.compareWithRef?.ref}function k(e){return"viewItem"===e.type&&e.node instanceof m.t&&e.node instanceof m.p}function D(e){return"viewItem"===e.type&&(0,l.Vx)(e.node.remote)}function T(e){return"viewItem"===e.type&&e.node.repo instanceof h.LN}function _(e){return"viewItem"===e.type&&"string"==typeof e.node.repoPath}function I(e){return"viewItem"===e.type&&(0,c.dz)(e.node.tag)}function $(e){if("viewItem"!==e.type)return!1;let t=e.node.workspace;return t instanceof u.j2||t instanceof u.hu}function E(e){return null!=e&&null!=e.id&&null!=e.rootUri&&null!=e.inputBox&&null!=e.statusBarCommands}function O(e){return null!=e&&null!=e.id&&null!=e.label&&null!=e.resourceStates&&Array.isArray(e.resourceStates)}function x(e){return null!=e&&null!=e.resourceUri}let Command=class Command{static getMarkdownCommandArgsCore(e,t){return`command:${e}?${encodeURIComponent(JSON.stringify(t)).replace(/([()])/g,"\\$1")}`}contextParsingOptions={expectsEditor:!1};_disposable;constructor(e){if("string"==typeof e){this._disposable=(0,d.Lb)(e,(...t)=>this._execute(e,...t),this);return}let t=e.map(e=>(0,d.Lb)(e,(...t)=>this._execute(e,...t),this));this._disposable=s.Disposable.from(...t)}dispose(){this._disposable.dispose()}preExecute(e,...t){return this.execute(...t)}_execute(e,...t){let[i,r]=F(e,{...this.contextParsingOptions},...t);return Array.isArray(i)?(0,p.An)(this.preExecute,i.map(e=>[e,...r]),this):this.preExecute(i,...r)}};function F(e,t,...i){var r;let n;let o=i[0];if(t?.expectsEditor){if((null==o||null!=o.id&&o.document?.uri!=null)&&(n=o,o=(i=i.slice(1))[0]),i.length>0&&(null==o||o instanceof s.Uri)){let[t,...r]=i;if(null!=t){null==n&&(t.toString()===s.window.activeTextEditor?.document.uri.toString()||e.endsWith("InDiffLeft"))&&(n=s.window.activeTextEditor);let i=r[0];return null!=i&&Array.isArray(i)&&0!==i.length&&i[0]instanceof s.Uri?[{command:e,type:"uris",editor:n,uri:t,uris:i},r.slice(1)]:[{command:e,type:"uri",editor:n,uri:t},r]}i=i.slice(1)}else if(null==n){if(null!=o&&"object"==typeof o&&"lineNumber"in o&&"uri"in o){let[,...t]=i;return[{command:e,type:"editorLine",editor:void 0,line:o.lineNumber-1,uri:o.uri},t]}n=s.window.activeTextEditor}}if(o instanceof g.eu){let[t,...r]=i;if(Array.isArray(o=r[0])&&o[0]instanceof g.eu){let i;[i,...r]=r;let s=[];for(let r of i)r?.constructor===t.constructor&&s.push({command:e,type:"viewItem",node:r,uri:r.uri});return[s,r]}return[{command:e,type:"viewItem",node:t,uri:t.uri},r]}if(x(o)){let t=[],r=0;for(let e of i){if(!x(e))break;r++,t.push(e)}return[{command:e,type:"scm-states",scmResourceStates:t,uri:t[0].resourceUri},i.slice(r)]}if(O(o)){let t=[],r=0;for(let e of i){if(!O(e))break;r++,t.push(e)}return[{command:e,type:"scm-groups",scmResourceGroups:t},i.slice(r)]}if(null!=(r=o)&&null!=r&&null!=r.timestamp&&null!=r.label&&null!=r.ref&&null!=r.previousRef&&null!=r.message){let[t,r,...s]=i;return[{command:e,type:"timeline-item:git",item:t,uri:r},s]}if(E(o)){let[t,...r]=i;return[{command:e,type:"scm",scm:t},r]}return[{command:e,type:"unknown",editor:n,uri:n?.document.uri},i]}let ActiveEditorCommand=class ActiveEditorCommand extends Command{contextParsingOptions={expectsEditor:!0};preExecute(e,...t){return this.execute(e.editor,e.uri,...t)}_execute(e,...t){return super._execute(e,void 0,...t)}};function B(){return r}let ActiveEditorCachedCommand=class ActiveEditorCachedCommand extends ActiveEditorCommand{_execute(e,...t){return r={command:e,args:t},super._execute(e,...t)}};let EditorCommand=class EditorCommand{_disposable;constructor(e){Array.isArray(e)||(e=[e]);let t=[];for(let i of e)t.push(s.commands.registerTextEditorCommand(i,(e,t,...r)=>this.executeCore(i,e,t,...r),this));this._disposable=s.Disposable.from(...t)}dispose(){this._disposable.dispose()}executeCore(e,t,i,...r){return this.execute(t,i,...r)}}},7622:(e,t,i)=>{i.d(t,{T:()=>f});var r=i(1398),s=i(3807),n=i(5287),o=i(5313),a=i(6645),l=i(3536),h=i(7899),c=i(3916),u=i(4911),d=i(2471),p=i(3900),g=Object.defineProperty,m=Object.getOwnPropertyDescriptor;let f=class extends p.uB{constructor(e){super(s.Ts.DiffWith),this.container=e}static getMarkdownCommandArgs(e,t){let i;if((0,n.WM)(e)){if(null==e.file||null==e.unresolvedPreviousSha)throw Error("Commit has no file");i=e.isUncommitted?{repoPath:e.repoPath,lhs:{sha:"HEAD",uri:e.file.uri},rhs:{sha:"",uri:e.file.uri},line:t}:{repoPath:e.repoPath,lhs:{sha:e.unresolvedPreviousSha,uri:e.file.originalUri??e.file.uri},rhs:{sha:e.sha,uri:e.file.uri},line:t}}else i=e;return super.getMarkdownCommandArgsCore(s.Ts.DiffWith,i)}async execute(e){if(e?.lhs!=null&&e?.rhs!=null&&null!=(e={...e,lhs:{...e.lhs},rhs:{...e.rhs},showOptions:null==e.showOptions?void 0:{...e.showOptions}}).repoPath)try{let t=e.lhs.sha,i=e.rhs.sha;if([e.lhs.sha,e.rhs.sha]=await Promise.all([await this.container.git.resolveReference(e.repoPath,e.lhs.sha,e.lhs.uri,{timeout:(0,a.a$)(e.lhs.sha)?100:void 0}),await this.container.git.resolveReference(e.repoPath,e.rhs.sha,e.rhs.uri,{timeout:(0,a.a$)(e.rhs.sha)?100:void 0})]),e.lhs.sha!==o.nB&&(t=e.lhs.sha),e.rhs.sha&&e.rhs.sha!==o.nB){let t=await this.container.git.getFileStatusForCommit(e.repoPath,e.rhs.uri,e.rhs.sha);t?.status==="D"?e.rhs.sha=o.nB:i=e.rhs.sha,t?.status==="A"&&e.lhs.sha.endsWith("^")&&(e.lhs.sha=o.nB)}let[n,l]=await Promise.all([this.container.git.getBestRevisionUri(e.repoPath,e.lhs.uri.fsPath,e.lhs.sha),this.container.git.getBestRevisionUri(e.repoPath,e.rhs.uri.fsPath,e.rhs.sha)]),h=(0,a.pV)(i,{strings:{uncommitted:"Working Tree"}});null==l?h=(0,a._k)(e.rhs.sha)?"deleted":0===h.length&&e.rhs.sha===o.nB?"not in Working Tree":`deleted${0===h.length?"":` in ${h}`}`:null==n&&(h=`added${0===h.length?"":` in ${h}`}`);let c=e.lhs.sha!==o.nB?(0,a.pV)(t):"";null==n&&0===e.rhs.sha.length&&(null!=l?(c=0===c.length?"":`not in ${c}`,h=""):c=`deleted${0===c.length?"":` in ${c}`}`),null==e.lhs.title&&(null!=n||0!==c.length)&&(e.lhs.title=`${(0,u.P8)(e.lhs.uri.fsPath)}${c?` (${c})`:""}`),null==e.rhs.title&&(e.rhs.title=`${(0,u.P8)(e.rhs.uri.fsPath)}${h?` (${h})`:""}`);let p=null!=e.lhs.title&&null!=e.rhs.title?`${e.lhs.title} ${s.EO.ArrowLeftRightLong} ${e.rhs.title}`:e.lhs.title??e.rhs.title;null==e.showOptions&&(e.showOptions={}),null==e.showOptions.viewColumn&&(e.showOptions.viewColumn=r.ViewColumn.Active),null!=e.line&&0!==e.line&&(e.showOptions.selection=new r.Range(e.line,0,e.line,0)),await (0,d.pr)(n??this.container.git.getRevisionUri(o.nB,e.lhs.uri.fsPath,e.repoPath),l??this.container.git.getRevisionUri(o.nB,e.rhs.uri.fsPath,e.repoPath),p,e.showOptions)}catch(e){c.Vy.error(e,"DiffWithCommand","getVersionedFile"),(0,l.qQ)("Unable to open compare")}}};f=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?m(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&g(t,i,n),n})([(0,h.G5)()],f)},7165:(e,t,i)=>{i.d(t,{N:()=>PickCommandStep,g:()=>em});var r=i(1398),s=i(5176),n=i(6741),o=i(5854),a=i(3807),l=i(1270),h=i(2362),c=i(7899),u=i(6330),d=i(1856),p=i(7279),g=i(2471),m=i(1298),f=i(5029),w=Object.defineProperty,v=Object.getOwnPropertyDescriptor;let y=new Map([["mergeable",["Ready to Merge","Ready to merge"]],["unassigned-reviewers",["Unassigned Reviewers","You need to assign reviewers"]],["failed-checks",["Failed Checks","You need to resolve the failing checks"]],["conflicts",["Resolve Conflicts","You need to resolve merge conflicts"]],["needs-my-review",["Needs Your Review","${author} requested your review"]],["code-suggestions",["Code Suggestions","Code suggestions have been made on this pull request"]],["changes-requested",["Changes Requested","Reviewers requested changes before this can be merged"]],["reviewer-commented",["Reviewers Commented","Reviewers have commented on this pull request"]],["waiting-for-review",["Waiting for Review","Waiting for reviewers to approve this pull request"]],["draft",["Draft","Continue working on your draft"]],["other",["Other","Opened by ${author} ${createdDateRelative}"]]]),b=new Map([["current-branch",["Current Branch","git-branch"]],["pinned",["Pinned","pinned"]],["mergeable",["Ready to Merge","rocket"]],["blocked",["Blocked","error"]],["follow-up",["Requires Follow-up","report"]],["needs-review",["Needs Your Review","comment-unresolved"]],["waiting-for-review",["Waiting for Review","gitlens-clock"]],["draft",["Draft","git-pull-request-draft"]],["other",["Other","ellipsis"]],["snoozed",["Snoozed","bell-slash"]]]),C=(0,u.N)(),R=class extends n.d6{source;telemetryContext;constructor(e,t,i=!1){super(e,"focus","focus",`GitLens Launchpad\xa0\xA0${a.WZ}`,{description:"focus on a pull request or issue"}),t?.source==="launchpad-indicator"&&null==e.storage.get("launchpad:indicator:hasInteracted")&&e.storage.store("launchpad:indicator:hasInteracted",new Date().toISOString()),this.source={source:t?.source??"commandPalette"},this.container.telemetry.enabled&&!i&&(this.telemetryContext={instance:C.next(),"initialState.group":t?.state?.initialGroup??null,"initialState.selectTopItem":t?.state?.selectTopItem??!1},this.container.telemetry.sendEvent("launchpad/open",{...this.telemetryContext},this.source)),this.initialState={counter:0,confirm:t?.confirm,...t?.state}}async ensureIntegrationConnected(e){let t=await this.container.integrations.get(e),i=t.maybeConnected??await t.isConnected();return i||(i=await t.connect()),i}async *steps(e){this.container.git.isDiscoveringRepositories&&await this.container.git.isDiscoveringRepositories;let t=new Map([["draft",!0],["other",!0],["snoozed",!0]]);if(null!=e.initialGroup)for(let[i]of b)t.set(i,i!==e.initialGroup);let i={items:[],title:this.title,collapsed:t,telemetryContext:this.telemetryContext},r=!1;for(;this.canStepsContinue(e);){if(i.title=this.title,e.counter<1&&!await this.container.focus.hasConnectedIntegration()){this.container.telemetry.enabled&&this.container.telemetry.sendEvent(r?"launchpad/steps/connect":"launchpad/opened",{...i.telemetryContext,connected:!1},this.source),r=!0;let t=yield*this.confirmIntegrationConnectStep(e,i);if(t!==n.Lt&&!await this.ensureIntegrationConnected(t)){let e;throw e=t===m.Q7.GitHub?"GitHub":`integration (${t})`,Error(`Unable to connect to ${e}`)}}if(await S(this.container,i),e.counter<2||null==e.item){this.container.telemetry.enabled&&this.container.telemetry.sendEvent(r?"launchpad/steps/main":"launchpad/opened",{...i.telemetryContext,connected:!0},this.source),r=!0;let t=yield*this.pickFocusItemStep(e,i,{picked:e.item?.id,selectTopItem:e.selectTopItem});if(t===n.Lt)continue;e.item=t}if(!function(e){if(null==e.item)throw Error("Missing item")}(e),this.confirm(e.confirm)){await this.container.focus.ensureFocusItemCodeSuggestions(e.item),this.sendItemActionTelemetry("select",e.item,e.item.group,i);let t=yield*this.confirmStep(e,i);if(t===n.Lt)continue;e.action=t}if(e.action&&this.sendItemActionTelemetry(e.action,e.item,e.item.group,i),"string"==typeof e.action)switch(e.action){case"merge":this.container.focus.merge(e.item);break;case"open":this.container.focus.open(e.item);break;case"soft-open":this.container.focus.open(e.item),e.counter=2;continue;case"switch":case"show-overview":this.container.focus.switchTo(e.item);break;case"switch-and-code-suggest":case"code-suggest":this.container.focus.switchTo(e.item,!0);break;case"open-changes":this.container.focus.openChanges(e.item);break;case"open-in-graph":this.container.focus.openInGraph(e.item)}else e.action?.action==="open-suggestion"&&this.container.focus.openCodeSuggestion(e.item,e.action.target);(0,n.nH)(e)}return e.counter<0?n.Lt:void 0}*pickFocusItemStep(e,t,{picked:i,selectTopItem:s}){let u=e=>{let n=[];if(e?.length){let a=(0,f.zt)(e),c=s&&null==i?a.get("mergeable")?.[0]||a.get("blocked")?.[0]||a.get("follow-up")?.[0]||a.get("needs-review")?.[0]:void 0;for(let[e,s]of a)s.length&&(n.push((0,l.uK)(s.length?s.length.toString():void 0),(0,h.Du)(h.WL.Reload,!1,{label:`$(${t.collapsed.get(e)?"chevron-down":"chevron-up"})\xa0\xA0$(${b.get(e)[1]})\xa0\xA0${b.get(e)[0]?.toUpperCase()}`,onDidSelect:()=>{let i=!t.collapsed.get(e);t.collapsed.set(e,i),this.container.telemetry.enabled&&(P(t),this.container.telemetry.sendEvent("launchpad/groupToggled",{...t.telemetryContext,group:e,collapsed:i},this.source))}})),t.collapsed.get(e)||n.push(...s.map(t=>{let s=[];return"mergeable"===t.actionableCategory&&s.push(o.M_),s.push(t.viewer.pinned?o.wt:o.Zo,t.viewer.snoozed?o.NA:o.KD,o.II),{label:t.title,description:`\xa0 ${t.repository.owner.login}/${t.repository.name}#${t.id} \xa0 ${t.codeSuggestionsCount>0?` $(gitlens-code-suggestion) ${t.codeSuggestionsCount}`:""} \xa0 ${t.isNew?"(New since last view)":""}`,detail:`      ${"other"===t.actionableCategory?"":`${y.get(t.actionableCategory)[0]} \u2022  `}${(0,d.PI)(t.updatedDate)} by @${t.author.username}`,buttons:s,iconPath:t.author?.avatarUrl!=null?r.Uri.parse(t.author.avatarUrl):void 0,item:t,picked:t.id===i||t.id===c?.id,group:e}})))}return n},p=u(t.items),m=(0,n.Ac)({title:t.title,placeholder:p.length?"Choose an item to focus on":"All done! Take a vacation",matchOnDetail:!0,items:p.length?p:[(0,h.Du)(h.WL.Cancel,void 0,{label:"OK"})],buttons:[o.FF,o.g0,o.F7,o.lA],onDidClickButton:async(e,i)=>{switch(i){case o.F7:r.commands.executeCommand("workbench.action.openSettings","gitlens.launchpad");break;case o.FF:(0,g.CZ)("https://github.com/gitkraken/vscode-gitlens/discussions/3286");break;case o.g0:(0,c.RS)(a.Ts.ShowFocusPage);break;case o.lA:e.busy=!0;try{await S(this.container,t,{force:!0});let i=u(t.items);e.placeholder=i.length?"Choose an item to focus on":"All done! Take a vacation",e.items=i}finally{e.busy=!1}}},onDidClickItemButton:async(e,i,{group:r,item:s})=>{switch(i){case o.II:this.container.focus.open(s);break;case o.KD:await this.container.focus.snooze(s);break;case o.NA:await this.container.focus.unsnooze(s);break;case o.Zo:await this.container.focus.pin(s);break;case o.wt:await this.container.focus.unpin(s);break;case o.M_:await this.container.focus.merge(s)}this.sendItemActionTelemetry(i,s,r,t),e.busy=!0;try{await S(this.container,t);let i=u(t.items);e.placeholder=i.length?"Choose an item to focus on":"All done! Take a vacation",e.items=i}finally{e.busy=!1}}}),w=yield m;return(0,n.fg)(m,e,w)?{...w[0].item,group:w[0].group}:n.Lt}*confirmStep(e,t){let i=[(0,l.uK)((0,d.PI)(e.item.updatedDate)),(0,l.Xt)({label:e.item.title,description:`${e.item.repository.owner.login}/${e.item.repository.name}#${e.item.id}`,detail:(0,p.GW)(y.get(e.item.actionableCategory)[1],{author:e.item.author.username,createdDateRelative:(0,d.PI)(e.item.createdDate)}),iconPath:e.item.author?.avatarUrl!=null?r.Uri.parse(e.item.author.avatarUrl):void 0,buttons:[o.II]},"soft-open"),(0,h.Du)(h.WL.Noop,!1,{label:""}),...this.getFocusItemInformationRows(e.item),(0,l.uK)("Actions")];for(let t of e.item.suggestedActions)switch(t){case"merge":{let r,s;e.item.headRepository?.owner!=null&&e.item.headRepository.owner!==e.item.repository.owner?(r=null!=e.item.headRef?`${e.item.headRepository.owner.login}:${e.item.headRef.name}`:"these changes",s=null!=e.item.baseRef?` into ${e.item.repository.owner.login}:${e.item.baseRef.name}`:""):(r=e.item.headRef?.name??"these changes",s=e.item.baseRef?.name?` into ${e.item.baseRef.name}`:""),i.push((0,l.Xt)({label:"Merge...",detail:`Will merge ${r}${s}`},t));break}case"open":i.push((0,l.Xt)({label:`${this.getOpenActionLabel(e.item.actionableCategory)} on GitHub`},t));break;case"switch":i.push((0,l.Xt)({label:"Switch to Branch or Worktree",detail:"Will checkout the branch, create or open a worktree"},t));break;case"switch-and-code-suggest":i.push((0,l.Xt)({label:`Switch & Suggest ${e.item.viewer.isAuthor?"Additional ":""}Code Changes`,detail:"Will checkout and start suggesting code changes"},t));break;case"code-suggest":i.push((0,l.Xt)({label:`Suggest ${e.item.viewer.isAuthor?"Additional ":""}Code Changes`,detail:"Will start suggesting code changes"},t));break;case"show-overview":i.push((0,l.Xt)({label:"Open Details",detail:"Will open the pull request details in the Side Bar"},t));break;case"open-changes":i.push((0,l.Xt)({label:"Open Changes",detail:"Will open the pull request changes for review"},t));break;case"open-in-graph":i.push((0,l.Xt)({label:"Open in Commit Graph"},t))}let s=this.createConfirmStep(`Launchpad \xa0\u2022\xa0 Pull Request ${e.item.repository.owner.login}/${e.item.repository.name}#${e.item.id}`,i,void 0,{placeholder:"Choose an action to perform",onDidClickItemButton:(i,r,s)=>{switch(r){case o.II:this.container.focus.open(e.item);break;case o.re:s?.item?.action!=null&&s?.item?.target!=null&&this.container.focus.openCodeSuggestionInBrowser(s.item.target)}this.sendItemActionTelemetry(r,e.item,e.item.group,t)}}),a=yield s;return(0,n.fg)(s,e,a)?a[0].item:n.Lt}*confirmIntegrationConnectStep(e,t){let i=[];for(let e of f._W)e===m.Q7.GitHub&&i.push((0,l.Xt)({label:"Connect to GitHub...",detail:"Will connect to GitHub to provide access your pull requests and issues"},e));let r=this.createConfirmStep(`${this.title} \xa0\u2022\xa0 Connect an Integration`,i,(0,h.Du)(h.WL.Cancel,!1,{label:"Cancel"}),{placeholder:"Launchpad requires a connected integration",ignoreFocusOut:!1}),s=yield r;return(0,n.fg)(r,e,s)?s[0].item:n.Lt}getFocusItemInformationRows(e){let t=[];switch(e.actionableCategory){case"mergeable":t.push((0,l.uK)("Status"),this.getFocusItemStatusInformation(e),...this.getFocusItemReviewInformation(e));break;case"failed-checks":case"conflicts":t.push((0,l.uK)("Status"),this.getFocusItemStatusInformation(e));break;case"unassigned-reviewers":case"needs-my-review":case"changes-requested":case"reviewer-commented":case"waiting-for-review":t.push((0,l.uK)("Reviewers"),...this.getFocusItemReviewInformation(e))}return null!=e.codeSuggestions&&e.codeSuggestions.length>0&&(t.length>0&&t.push((0,h.Du)(h.WL.Noop,!1,{label:""})),t.push((0,l.uK)("Suggestions"),...this.getFocusItemCodeSuggestionInformation(e))),t.length>0&&t.push((0,h.Du)(h.WL.Noop,!1,{label:""})),t}getFocusItemStatusInformation(e){let t;let i=e.baseRef?.name!=null?`$(git-branch) ${e.baseRef.name}`:"",r=e.headCommit?.buildStatuses?.[0].state;return t=r===m.n2.Success?e.hasConflicts?`$(error) Conflicts with ${i}, but passed CI checks`:"$(pass) No conflicts, and passed CI checks":r===m.n2.Failed?e.hasConflicts?`$(error) Conflicts with ${i}, and failed CI checks`:"$(error) No conflicts, but failed CI checks":e.hasConflicts?`$(error) Conflicts with ${i}`:"$(pass) No conflicts",(0,l.Xt)({label:t},"soft-open")}getFocusItemReviewInformation(e){if(null==e.reviews||0===e.reviews.length)return[(0,l.Xt)({label:"$(info) No reviewers have been assigned"},"soft-open")];let t=[];for(let i of e.reviews){let s;let n=i.reviewer.username===e.currentViewer.username,o=null!=i.reviewer.avatarUrl?r.Uri.parse(i.reviewer.avatarUrl):void 0;switch(i.state){case m.lE.Approved:s=`${n?"You":i.reviewer.username} approved these changes`;break;case m.lE.ChangesRequested:s=`${n?"You":i.reviewer.username} requested changes`;break;case m.lE.Commented:s=`${n?"You":i.reviewer.username} left a comment review`;break;case m.lE.ReviewRequested:s=`${n?"You haven't":`${i.reviewer.username} hasn't`} reviewed these changes yet`}null!=s&&t.push((0,l.Xt)({label:s,iconPath:o},"soft-open"))}return t}getFocusItemCodeSuggestionInformation(e){if(null==e.codeSuggestions||0===e.codeSuggestions.length)return[];let t=[(0,h.Du)(h.WL.Noop,!1,{label:`$(gitlens-code-suggestion) ${(0,p.td)("code suggestion",e.codeSuggestions.length)}`})];for(let i of e.codeSuggestions)t.push((0,l.Xt)({label:`    ${i.author.name} suggested a code change ${(0,d.PI)(i.createdAt)}: "${i.title}"`,iconPath:i.author.avatarUri??(0,s.m_)(i.author.email),buttons:[o.re]},{action:"open-suggestion",target:i.id}));return t}getOpenActionLabel(e){switch(e){case"unassigned-reviewers":return"Assign Reviewers";case"failed-checks":return"Resolve Failing Checks";case"conflicts":return"Resolve Conflicts";case"needs-my-review":return"Start Reviewing";case"changes-requested":case"reviewer-commented":return"Respond to Reviewers";case"waiting-for-review":return"Check In with Reviewers";case"draft":return"View draft";default:return"Open"}}sendItemActionTelemetry(e,t,i,r){let s;if(this.container.telemetry.enabled){if("string"!=typeof e&&"action"in e)s=e.action;else if("string"==typeof e)s=e;else switch(e){case o.M_:s="merge";break;case o.II:s="soft-open";break;case o.Zo:s="pin";break;case o.wt:s="unpin";break;case o.KD:s="snooze";break;case o.NA:s="unsnooze";break;case o.re:s="open-suggestion-browser"}null!=s&&this.container.telemetry.sendEvent("select"===s?"launchpad/steps/details":"launchpad/action",{...r.telemetryContext,action:s,"item.id":(0,f.TW)(t),"item.type":t.type,"item.provider":t.provider.id,"item.actionableCategory":t.actionableCategory,"item.group":i,"item.assignees.count":t.assignees?.length??void 0,"item.createdDate":t.createdDate.getTime(),"item.updatedDate":t.updatedDate.getTime(),"item.isNew":t.isNew,"item.comments.count":t.commentCount,"item.upvotes.count":t.upvoteCount,"item.pr.codeSuggestionCount":t.codeSuggestionsCount,"item.pr.isDraft":t.isDraft,"item.pr.mergeableState":t.mergeableState,"item.pr.state":t.state,"item.pr.changes.additions":t.additions??void 0,"item.pr.changes.deletions":t.deletions??void 0,"item.pr.changes.commits":t.commitCount??void 0,"item.pr.changes.files":t.fileCount??void 0,"item.pr.failingCI":t.failingCI,"item.pr.hasConflicts":t.hasConflicts,"item.pr.reviews.count":t.reviews?.length??void 0,"item.pr.reviews.decision":t.reviewDecision,"item.pr.reviews.changeRequestCount":t.changeRequestReviewCount??void 0,"item.viewer.isAuthor":t.viewer.isAuthor,"item.viewer.isAssignee":t.viewer.isAssignee,"item.viewer.pinned":t.viewer.pinned,"item.viewer.snoozed":t.viewer.snoozed,"item.viewer.pr.canMerge":t.viewer.canMerge,"item.viewer.pr.isReviewer":t.viewer.isReviewer,"item.viewer.pr.shouldAssignReviewer":t.viewer.shouldAssignReviewer,"item.viewer.pr.shouldMerge":t.viewer.shouldMerge,"item.viewer.pr.shouldReview":t.viewer.shouldReview,"item.viewer.pr.waitingOnReviews":t.viewer.waitingOnReviews},this.source)}}};async function S(e,t,i){t.items=await e.focus.getCategorizedItems(i),e.telemetry.enabled&&P(t)}function P(e){let t=(0,f.dL)(e.items);for(let[i,r]of(e.telemetryContext={...e.telemetryContext,"items.count":e.items.length,"groups.count":t.size},t))e.telemetryContext[`groups.${i}.count`]=r,e.telemetryContext[`groups.${i}.collapsed`]=e.collapsed.get(i)}R=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?v(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&w(t,i,n),n})([(0,c.G5)()],R);var A=i(4832),k=i(8973),D=i(6645),T=i(9634);function _(e,t,i,r){return{...i,item:t,picked:i.picked??(void 0===t?0===e.length:Array.isArray(t)?0===t.length?0===e.length:t.every(t=>e.includes(t)):e.includes(t)),context:r}}var I=i(500);let $=new Map([["create","Create"],["delete","Delete"],["prune","Prune"],["rename","Rename"]]);function E(e,t){return null==t?e:`${$.get(t)} ${e}`}let BranchGitCommand=class BranchGitCommand extends n.d6{subcommand;constructor(e,t){super(e,"branch","branch","Branch",{description:"create, prune, rename, or delete branches"});let i=0;if(t?.state?.subcommand!=null)switch(i++,t?.state.subcommand){case"create":null!=t.state.reference&&i++,!t.state.suggestNameOnly&&null!=t.state.name&&i++;break;case"delete":case"prune":null!=t.state.references&&(!Array.isArray(t.state.references)||0!==t.state.references.length)&&i++;break;case"rename":null!=t.state.reference&&i++,null!=t.state.name&&i++}t?.state?.repo!=null&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand}get canSkipConfirm(){return"delete"!==this.subcommand&&"prune"!==this.subcommand&&"rename"!==this.subcommand&&super.canSkipConfirm}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async *steps(e){let t={associatedView:this.container.branchesView,repos:this.container.git.openRepositories,showTags:!1,title:this.title},i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.subcommand){this.subcommand=void 0;let t=yield*this.pickSubcommandStep(e);if(t===n.Lt)break;e.subcommand=t}if(this.subcommand=e.subcommand,t.title=E("delete"===e.subcommand||"prune"===e.subcommand?"Branches":this.title,e.subcommand),e.counter<2||null==e.repo||"string"==typeof e.repo){if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,I.UA)(e,t);if(i===n.Lt)continue;e.repo=i}}switch(e.subcommand){case"create":!function(e){if(!(e.repo instanceof T.LN)||"create"!==e.subcommand)throw Error("Missing repository")}(e),yield*this.createCommandSteps(e,t),e.name=void 0;break;case"delete":!function(e){if(!(e.repo instanceof T.LN)||"delete"!==e.subcommand)throw Error("Missing repository")}(e),yield*this.deleteCommandSteps(e,t);break;case"prune":!function(e){if(!(e.repo instanceof T.LN)||"prune"!==e.subcommand)throw Error("Missing repository")}(e),yield*this.deleteCommandSteps(e,t);break;case"rename":!function(e){if(!(e.repo instanceof T.LN)||"rename"!==e.subcommand)throw Error("Missing repository")}(e),yield*this.renameCommandSteps(e,t),e.name=void 0;break;default:(0,n.nH)(e)}i&&e.counter--}return e.counter<0?n.Lt:void 0}*pickSubcommandStep(e){let t=(0,n.Ac)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"create",description:"creates a new branch",picked:"create"===e.subcommand,item:"create"},{label:"delete",description:"deletes the specified branches",picked:"delete"===e.subcommand,item:"delete"},{label:"prune",description:"deletes local branches with missing upstreams",picked:"prune"===e.subcommand,item:"prune"},{label:"rename",description:"renames the specified branch",picked:"rename"===e.subcommand,item:"rename"}],buttons:[r.QuickInputButtons.Back]}),i=yield t;return(0,n.fg)(t,e,i)?i[0].item:n.Lt}async *createCommandSteps(e,t){for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.reference){let i=yield*(0,I.Re)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to create the new branch from`,picked:e.reference?.ref??(await e.repo.getBranch())?.ref,titleContext:" from",value:(0,D.bv)(e.reference)?e.reference.ref:void 0});if(i===n.Lt)break;e.reference=i}if(e.counter<4||null==e.name){let i=yield*(0,I.wS)(e,t,{titleContext:` from ${(0,D.M4)(e.reference,{capitalize:!0,icon:!1,label:"branch"!==e.reference.refType})}`,value:e.name??(0,D.aJ)(e.reference)});if(i===n.Lt)continue;e.name=i}if(this.confirm(e.confirm)){let i=yield*this.createCommandConfirmStep(e,t);if(i===n.Lt)continue;e.flags=i}if(e.flags.includes("--worktree")){if((yield*em(this.container,{command:"worktree",state:{subcommand:"create",reference:e.reference,createBranch:e.name}},this.pickedVia))===n.Lt)continue;(0,n.nH)(e);return}(0,n.nH)(e),e.flags.includes("--switch")?await e.repo.switch(e.reference.ref,{createBranch:e.name}):e.repo.branch(...e.flags,e.name,e.reference.ref)}}*createCommandConfirmStep(e,t){let i=(0,n.VW)((0,I.Zr)(`Confirm ${t.title}`,e,t),[_(e.flags,[],{label:t.title,detail:`Will create a new branch named ${e.name} from ${(0,D.M4)(e.reference)}`}),_(e.flags,["--switch"],{label:"Create & Switch to Branch",detail:`Will create and switch to a new branch named ${e.name} from ${(0,D.M4)(e.reference)}`}),_(e.flags,["--worktree"],{label:`${t.title} in New Worktree`,description:"avoids modifying your working tree",detail:`Will create a new worktree for a new branch named ${e.name} from ${(0,D.M4)(e.reference)}`})],t),r=yield i;return(0,n.fg)(i,e,r)?r[0].item:n.Lt}*deleteCommandSteps(e,t){let i="prune"===e.subcommand;for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(null==e.references||Array.isArray(e.references)||(e.references=[e.references]),e.counter<3||null==e.references||Array.isArray(e.references)&&0===e.references.length){t.title=E("Branches",e.subcommand);let r=yield*(0,I.gw)(e,t,{filter:i?e=>!e.current&&!!e.upstream?.missing:e=>!e.current,picked:e.references?.map(e=>e.ref),placeholder:i?"Choose branches with missing upstreams to delete":"Choose branches to delete",emptyPlaceholder:i?`No branches with missing upstreams in ${e.repo.formattedName}`:void 0,sort:{current:!1,missingUpstream:!0}});if(r===n.Lt)break;e.references=r}t.title=E((0,p.td)("Branch",e.references.length,{only:!0,plural:"Branches"}),"prune"===e.subcommand?"delete":e.subcommand),function(e){if(!Array.isArray(e.references))throw Error("Missing branches")}(e);let r=yield*this.deleteCommandConfirmStep(e,t);r!==n.Lt&&(e.flags=r,(0,n.nH)(e),e.repo.branchDelete(e.references,{force:e.flags.includes("--force"),remote:e.flags.includes("--remotes")}))}}*deleteCommandConfirmStep(e,t){let i=[_(e.flags,[],{label:t.title,detail:`Will delete ${(0,D.M4)(e.references)}`})];!e.references.every(e=>e.remote)&&(i.push(_(e.flags,["--force"],{label:`Force ${t.title}`,description:"--force",detail:`Will forcibly delete ${(0,D.M4)(e.references)}`})),"prune"!==e.subcommand&&e.references.some(e=>null!=e.upstream)&&i.push(_(e.flags,["--remotes"],{label:`${t.title} & Remote${e.references.filter(e=>!e.remote).length>1?"s":""}`,description:"--remotes",detail:`Will delete ${(0,D.M4)(e.references)} and any remote tracking branches`}),_(e.flags,["--force","--remotes"],{label:`Force ${t.title} & Remote${e.references.filter(e=>!e.remote).length>1?"s":""}`,description:"--force --remotes",detail:`Will forcibly delete ${(0,D.M4)(e.references)} and any remote tracking branches`})));let r=(0,n.VW)((0,I.Zr)(`Confirm ${t.title}`,e,t),i,t),s=yield r;return(0,n.fg)(r,e,s)?s[0].item:n.Lt}async *renameCommandSteps(e,t){for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.reference){let i=yield*(0,I.aL)(e,t,{filter:e=>!e.remote,picked:e.reference?.ref,placeholder:"Choose a branch to rename"});if(i===n.Lt)break;e.reference=i}if(e.counter<4||null==e.name){let i=yield*(0,I.wS)(e,t,{titleContext:` ${(0,D.M4)(e.reference,!1)}`,value:e.name??e.reference.name});if(i===n.Lt)continue;e.name=i}let i=yield*this.renameCommandConfirmStep(e,t);i!==n.Lt&&(e.flags=i,(0,n.nH)(e),e.repo.branch(...e.flags,e.reference.ref,e.name))}}*renameCommandConfirmStep(e,t){let i=(0,n.VW)((0,I.Zr)(`Confirm ${t.title}`,e,t),[_(e.flags,["-m"],{label:t.title,detail:`Will rename ${(0,D.M4)(e.reference)} to ${e.name}`})],t),r=yield i;return(0,n.fg)(i,e,r)?r[0].item:n.Lt}};let CherryPickGitCommand=class CherryPickGitCommand extends n.d6{constructor(e,t){super(e,"cherry-pick","cherry-pick","Cherry Pick",{description:"integrates changes from specified commits into the current branch"});let i=0;t?.state?.repo!=null&&i++,t?.state?.references!=null&&(Array.isArray(t.state.references)?t.state.references.length>0&&((0,D.bv)(t.state.references[0])?i+=2:i++):i++),this.initialState={counter:i,confirm:!0,...t?.state}}get canSkipConfirm(){return!1}execute(e){e.repo.cherryPick(...e.flags,...e.references.map(e=>e.ref).reverse())}isFuzzyMatch(e){return super.isFuzzyMatch(e)||"cherry"===e}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,destination:void 0,selectedBranchOrTag:void 0,showTags:!0,title:this.title};null==e.flags&&(e.flags=[]),null==e.references||Array.isArray(e.references)||(e.references=[e.references]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo){if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,I.UA)(e,t);if(i===n.Lt)break;e.repo=i}}if(null==t.destination){let i=await e.repo.getBranch();if(null==i)break;t.destination=i}if(t.title=`${this.title} into ${(0,D.M4)(t.destination,{icon:!1})}`,e.counter<2||null==e.references||0===e.references.length){let r=yield*(0,I.Re)(e,t,{filter:{branches:e=>e.id!==t.destination.id},placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to cherry-pick from`,picked:t.selectedBranchOrTag?.ref,value:null==t.selectedBranchOrTag?e.references?.[0]?.ref:void 0});if(r===n.Lt){i&&e.counter--;continue}(0,D.bv)(r)?(e.references=[r],t.selectedBranchOrTag=void 0):t.selectedBranchOrTag=r}if(null==t.selectedBranchOrTag&&e.references?.length){let i=await this.container.git.getCommitBranches(e.repo.path,e.references.map(e=>e.ref),void 0,{mode:"contains"});if(i.length){let r=await e.repo.getBranch(i[0]);null!=r&&(t.selectedBranchOrTag=r)}}if(e.counter<3&&null!=t.selectedBranchOrTag){let i=(0,D.Xn)(t.destination.ref,t.selectedBranchOrTag.ref),r=t.cache.get(i);null==r&&(r=this.container.git.getLog(e.repo.path,{ref:i,merges:"first-parent"}),t.cache.set(i,r));let s=yield*(0,I.GW)(e,t,{log:await r,onDidLoadMore:e=>t.cache.set(i,Promise.resolve(e)),picked:e.references?.map(e=>e.ref),placeholder:(e,t)=>null==t?`No pickable commits found on ${(0,D.M4)(e.selectedBranchOrTag,{icon:!1})}`:`Choose commits to cherry-pick into ${(0,D.M4)(e.destination,{icon:!1})}`});if(s===n.Lt)continue;e.references=s}if(this.confirm(e.confirm)){let i=yield*this.confirmStep(e,t);if(i===n.Lt)continue;e.flags=i}(0,n.nH)(e),this.execute(e)}return e.counter<0?n.Lt:void 0}*confirmStep(e,t){let i=(0,n.VW)((0,I.Zr)(`Confirm ${t.title}`,e,t),[_(e.flags,[],{label:this.title,detail:`Will apply ${(0,D.M4)(e.references)} to ${(0,D.M4)(t.destination)}`}),_(e.flags,["--edit"],{label:`${this.title} & Edit`,description:"--edit",detail:`Will edit and apply ${(0,D.M4)(e.references)} to ${(0,D.M4)(t.destination)}`}),_(e.flags,["--no-commit"],{label:`${this.title} without Committing`,description:"--no-commit",detail:`Will apply ${(0,D.M4)(e.references)} to ${(0,D.M4)(t.destination)} without Committing`})],t),r=yield i;return(0,n.fg)(i,e,r)?r[0].item:n.Lt}};var O=i(4911);let CoAuthorsGitCommand=class CoAuthorsGitCommand extends n.d6{constructor(e,t){super(e,"co-authors","co-authors","Add Co-Authors",{description:"adds co-authors to a commit message"});let i=0;t?.state?.repo!=null&&i++,t?.state?.contributors!=null&&(!Array.isArray(t.state.contributors)||0!==t.state.contributors.length)&&i++,this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}async execute(e){let t=await this.container.git.getOrOpenScmRepository(e.repo.path);if(null==t)return;let i=t.inputBox.value,r=i.indexOf("Co-authored-by: ");for(let t of(-1!==r&&(i=i.substring(0,r-1).trimRight()),null==e.contributors||Array.isArray(e.contributors)||(e.contributors=[e.contributors]),e.contributors)){let e;e=i.includes("Co-authored-by: ")?"\n":0!==i.length&&i.endsWith("\n")?"\n\n":"\n\n\n",i+=`${e}Co-authored-by: ${t.getCoauthor()}`}t.inputBox.value=i,await (0,c.S4)("workbench.view.scm")}async *steps(e){let t={repos:this.container.git.openRepositories,activeRepo:void 0,associatedView:this.container.contributorsView,title:this.title},i=await this.container.git.getOpenScmRepositories();i.length&&(t.repos=t.repos.filter(e=>i.find(t=>(0,O.Fd)(t.rootUri.fsPath)===e.path)),t.activeRepo=await this.container.git.getOrOpenRepositoryForEditor(),null==t.activeRepo||i.some(e=>e.rootUri.fsPath===t.activeRepo.path)||(t.activeRepo=void 0));let r=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo){if(r=!1,1===t.repos.length)r=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,I.UA)(e,t);if(i===n.Lt)break;e.repo=i}}if(e.counter<2||null==e.contributors){let i=yield*(0,I.iM)(e,t,"Choose contributors to add as co-authors");if(i===n.Lt){r&&e.counter--;continue}e.contributors=i}(0,n.nH)(e),this.execute(e)}return e.counter<0?n.Lt:void 0}};var x=i(2927);let FetchGitCommand=class FetchGitCommand extends n.d6{constructor(e,t){super(e,"fetch","fetch","Fetch",{description:"fetches changes from one or more remotes"});let i=0;t?.state?.repos!=null&&(!Array.isArray(t.state.repos)||0!==t.state.repos.length)&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}execute(e){return(0,D.gC)(e.reference)?e.repos[0].fetch({branch:e.reference}):this.container.git.fetchAll(e.repos,{all:e.flags.includes("--all"),prune:e.flags.includes("--prune")})}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,title:this.title};null==e.flags&&(e.flags=[]),null==e.repos||Array.isArray(e.repos)||(e.repos=[e.repos]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repos||0===e.repos.length||(0,x.Bo)(e.repos)){if(i=!1,1===t.repos.length)i=!0,null==e.repos&&e.counter++,e.repos=[t.repos[0]];else{let i=yield*(0,I.g0)(e,t,{skipIfPossible:e.counter>=1});if(i===n.Lt)break;e.repos=i}}if(this.confirm(e.confirm)){let r=yield*this.confirmStep(e,t);if(r===n.Lt){i&&e.counter--;continue}e.flags=r}(0,n.nH)(e),this.execute(e)}return e.counter<0?n.Lt:void 0}async *confirmStep(e,t){let i,r="";if(1===e.repos.length){let t=await e.repos[0].getLastFetched();0!==t&&(r=`${(0,p.eV)(a.EO.Dot,2,2)}Last fetched ${(0,d.PI)(new Date(t))}`)}if(1===e.repos.length&&(0,D.gC)(e.reference))i=this.createConfirmStep((0,I.Zr)(`Confirm ${t.title}`,e,t,r),[_(e.flags,[],{label:this.title,detail:`Will fetch ${(0,D.M4)(e.reference)}`})]);else{let s=1===e.repos.length?`$(repo) ${e.repos[0].formattedName}`:`${e.repos.length} repos`;i=(0,n.VW)((0,I.Zr)(`Confirm ${this.title}`,e,t,r),[_(e.flags,[],{label:this.title,detail:`Will fetch ${s}`}),_(e.flags,["--prune"],{label:`${this.title} & Prune`,description:"--prune",detail:`Will fetch and prune ${s}`}),_(e.flags,["--all"],{label:`${this.title} All`,description:"--all",detail:`Will fetch all remotes of ${s}`}),_(e.flags,["--all","--prune"],{label:`${this.title} All & Prune`,description:"--all --prune",detail:`Will fetch and prune all remotes of ${s}`})],t)}let s=yield i;return(0,n.fg)(i,e,s)?s[0].item:n.Lt}};var F=i(9432),B=i(5287),L=i(520);let LogGitCommand=class LogGitCommand extends n.d6{constructor(e,t){super(e,"log","history","Commits",{description:"aka log, shows commit history"});let i=0;t?.state?.repo!=null&&i++,t?.state?.reference!=null&&(i++,"HEAD"!==t.state.reference&&(0,D.bv)(t.state.reference)&&!(0,D.SN)(t.state.reference)&&i++),this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}isFuzzyMatch(e){return super.isFuzzyMatch(e)||"log"===e}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,selectedBranchOrTag:void 0,title:this.title},i=!1;for(;this.canStepsContinue(e);){let r;if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo){if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,I.UA)(e,t);if(i===n.Lt)break;e.repo=i}}if(!function(e){if(!(e.repo instanceof T.LN))throw Error("Missing repository")}(e),"HEAD"===e.reference){let t=await e.repo.getBranch();e.reference=t}if(e.counter<2||null==e.reference){let r=yield*(0,I.Re)(e,t,{placeholder:"Choose a branch or tag to show its commit history",picked:t.selectedBranchOrTag?.ref,value:null==t.selectedBranchOrTag?e.reference?.ref:void 0,ranges:!0});if(r===n.Lt){i&&e.counter--;continue}e.reference=r,t.selectedBranchOrTag=void 0}if((!(0,D.bv)(e.reference)||(0,D.SN)(e.reference))&&(t.selectedBranchOrTag=e.reference),t.title=`${this.title}${(0,p.eV)(a.EO.Dot,2,2)}${(0,D.M4)(t.selectedBranchOrTag,{icon:!1})}`,e.fileName&&(t.title+=`${(0,p.eV)(a.EO.Dot,2,2)}${(0,L.j)(e.fileName,{fileOnly:!0,truncateTo:a.uR-t.title.length-3})}`),e.counter<3&&null!=t.selectedBranchOrTag){let i=t.selectedBranchOrTag.ref,r=t.cache.get(i);null==r&&(r=null!=e.fileName?this.container.git.getLogForFile(e.repo.path,e.fileName,{ref:i}):this.container.git.getLog(e.repo.path,{ref:i}),t.cache.set(i,r));let s=yield*(0,I.t$)(e,t,{ignoreFocusOut:!0,log:await r,onDidLoadMore:e=>t.cache.set(i,Promise.resolve(e)),placeholder:(e,t)=>null==t?`No commits found in ${(0,D.M4)(e.selectedBranchOrTag,{icon:!1})}`:"Choose a commit",picked:e.reference?.ref});if(s===n.Lt)continue;e.reference=s}e.reference instanceof B.Yg&&null==e.reference.file||(e.reference=await this.container.git.getCommit(e.repo.path,e.reference.ref)),e.openPickInView?((0,F.JX)(e.reference,{pin:!1,preserveFocus:!1}),r=n.Lt):r=yield*em(this.container,{command:"show",state:{repo:e.repo,reference:e.reference,fileName:e.fileName}},this.pickedVia),e.counter--,r===n.Lt&&(0,n.nH)(e)}return e.counter<0?n.Lt:void 0}};let MergeGitCommand=class MergeGitCommand extends n.d6{constructor(e,t){super(e,"merge","merge","Merge",{description:"integrates changes from a specified branch into the current branch"});let i=0;t?.state?.repo!=null&&i++,t?.state?.reference!=null&&i++,this.initialState={counter:i,confirm:!0,...t?.state}}get canSkipConfirm(){return!1}execute(e){e.repo.merge(...e.flags,e.reference.ref)}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,destination:void 0,pickCommit:!1,pickCommitForItem:!1,selectedBranchOrTag:void 0,showTags:!0,title:this.title};null==e.flags&&(e.flags=[]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo){if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,I.UA)(e,t);if(i===n.Lt)break;e.repo=i}}if(null==t.destination){let i=await e.repo.getBranch();if(null==i)break;t.destination=i}if(t.title=`${this.title} into ${(0,D.M4)(t.destination,{icon:!1})}`,t.pickCommitForItem=!1,e.counter<2||null==e.reference){let r=new o.m(t.pickCommit,t,()=>{t.pickCommit=!t.pickCommit,r.on=t.pickCommit}),s=yield*(0,I.Re)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to merge`,picked:t.selectedBranchOrTag?.ref,value:null==t.selectedBranchOrTag?e.reference?.ref:void 0,additionalButtons:[r]});if(s===n.Lt){i&&e.counter--;continue}e.reference=s,t.selectedBranchOrTag=void 0}if((0,D.bv)(e.reference)||(t.selectedBranchOrTag=e.reference),e.counter<3&&null!=t.selectedBranchOrTag&&(t.pickCommit||t.pickCommitForItem||e.reference.ref===t.destination.ref)){let i=t.selectedBranchOrTag.ref,r=t.cache.get(i);null==r&&(r=this.container.git.getLog(e.repo.path,{ref:i,merges:"first-parent"}),t.cache.set(i,r));let s=yield*(0,I.t$)(e,t,{ignoreFocusOut:!0,log:await r,onDidLoadMore:e=>t.cache.set(i,Promise.resolve(e)),placeholder:(e,t)=>null==t?`No commits found on ${(0,D.M4)(e.selectedBranchOrTag,{icon:!1})}`:`Choose a commit to merge into ${(0,D.M4)(e.destination,{icon:!1})}`,picked:e.reference?.ref});if(s===n.Lt)continue;e.reference=s}let r=yield*this.confirmStep(e,t);r!==n.Lt&&(e.flags=r,(0,n.nH)(e),this.execute(e))}return e.counter<0?n.Lt:void 0}async *confirmStep(e,t){let i=await this.container.git.getAheadBehindCommitCount(e.repo.path,[(0,D.Xn)(t.destination.name,e.reference.name)]),r=null!=i?i.ahead+i.behind:0;if(0===r){let i=this.createConfirmStep((0,I.Zr)(t.title,e,t),[],(0,h.Du)(h.WL.Cancel,!0,{label:"OK",detail:`${(0,D.M4)(t.destination,{capitalize:!0})} is already up to date with ${(0,D.M4)(e.reference)}`}),{placeholder:`Nothing to merge; ${(0,D.M4)(t.destination,{label:!1,icon:!1})} is already up to date`}),r=yield i;return(0,n.fg)(i,e,r),n.Lt}let s=this.createConfirmStep((0,I.Zr)(`Confirm ${t.title}`,e,t),[_(e.flags,[],{label:this.title,detail:`Will merge ${(0,p.td)("commit",r)} from ${(0,D.M4)(e.reference)} into ${(0,D.M4)(t.destination)}`}),_(e.flags,["--ff-only"],{label:`Fast-forward ${this.title}`,description:"--ff-only",detail:`Will fast-forward merge ${(0,p.td)("commit",r)} from ${(0,D.M4)(e.reference)} into ${(0,D.M4)(t.destination)}`}),_(e.flags,["--squash"],{label:`Squash ${this.title}`,description:"--squash",detail:`Will squash ${(0,p.td)("commit",r)} from ${(0,D.M4)(e.reference)} into one when merging into ${(0,D.M4)(t.destination)}`}),_(e.flags,["--no-ff"],{label:`${this.title} without Fast-Forwarding`,description:"--no-ff",detail:`Will create a merge commit when merging ${(0,p.td)("commit",r)} from ${(0,D.M4)(e.reference)} into ${(0,D.M4)(t.destination)}`}),_(e.flags,["--no-ff","--no-commit"],{label:`${this.title} without Fast-Forwarding or Committing`,description:"--no-ff --no-commit",detail:`Will merge ${(0,p.td)("commit",r)} from ${(0,D.M4)(e.reference)} into ${(0,D.M4)(t.destination)} without Committing`})]),o=yield s;return(0,n.fg)(s,e,o)?o[0].item:n.Lt}};var U=i(9102);let PullGitCommand=class PullGitCommand extends n.d6{constructor(e,t){super(e,"pull","pull","Pull",{description:"fetches and integrates changes from a remote into the current branch"});let i=0;t?.state?.repos!=null&&(!Array.isArray(t.state.repos)||0!==t.state.repos.length)&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}async execute(e){if((0,D.gC)(e.reference)&&(!(0,U.PX)(e.reference)||!e.reference.current)){let t=await e.repos[0].getBranch();if(t?.name!==e.reference.name)return e.repos[0].fetch({branch:e.reference,pull:!0})}return this.container.git.pullAll(e.repos,{rebase:e.flags.includes("--rebase")})}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,title:this.title};null==e.flags&&(e.flags=[]),null==e.repos||Array.isArray(e.repos)||(e.repos=[e.repos]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repos||0===e.repos.length||(0,x.Bo)(e.repos)){if(i=!1,1===t.repos.length)i=!0,null==e.repos&&e.counter++,e.repos=[t.repos[0]];else{let i=yield*(0,I.g0)(e,t,{skipIfPossible:e.counter>=1});if(i===n.Lt)break;e.repos=i}}if(this.confirm(e.confirm)){let r=yield*this.confirmStep(e,t);if(r===n.Lt){i&&e.counter--;continue}e.flags=r}(0,n.nH)(e),this.execute(e)}return e.counter<0?n.Lt:void 0}async *confirmStep(e,t){let i;if(e.repos.length>1)i=this.createConfirmStep((0,I.Zr)(`Confirm ${t.title}`,e,t),[_(e.flags,[],{label:this.title,detail:`Will pull ${e.repos.length} repos`}),_(e.flags,["--rebase"],{label:`${this.title} with Rebase`,description:"--rebase",detail:`Will pull ${e.repos.length} repos by rebasing`})]);else if((0,D.gC)(e.reference)){if(e.reference.remote)i=this.createConfirmStep((0,I.Zr)(`Confirm ${t.title}`,e,t),[],(0,h.Du)(h.WL.Cancel,!0,{label:`Cancel ${this.title}`,detail:"Cannot pull a remote branch"}));else{let[r]=e.repos,s=await r.getBranch(e.reference.name);i=s?.upstream==null?this.createConfirmStep((0,I.Zr)(`Confirm ${t.title}`,e,t),[],(0,h.Du)(h.WL.Cancel,!0,{label:`Cancel ${this.title}`,detail:"Cannot pull a branch until it has been published"})):this.createConfirmStep((0,I.Zr)(`Confirm ${t.title}`,e,t),[_(e.flags,[],{label:this.title,detail:`Will pull${s.state.behind?` ${(0,p.td)("commit",s.state.behind)} into ${(0,D.M4)(s)}`:` into ${(0,D.M4)(s)}`}`})])}}else{let[r]=e.repos,[s,n]=await Promise.all([r.getStatus(),r.getLastFetched()]),l="";0!==n&&(l=`${(0,p.eV)(a.EO.Dot,2,2)}Last fetched ${(0,d.PI)(new Date(n))}`);let h=s?.state.behind!=null?` ${(0,p.td)("commit",s.state.behind)} into $(repo) ${r.formattedName}`:` into $(repo) ${r.formattedName}`;i=this.createConfirmStep((0,I.Zr)(`Confirm ${t.title}`,e,t,l),[_(e.flags,[],{label:this.title,detail:`Will pull${h}`}),_(e.flags,["--rebase"],{label:`${this.title} with Rebase`,description:"--rebase",detail:`Will pull and rebase${h}`})],void 0,{additionalButtons:[o.yn],onDidClickButton:async(e,i)=>{if(i!==o.yn||e.busy)return!1;e.title=`Confirm ${t.title}${(0,p.eV)(a.EO.Dot,2,2)}Fetching${a.EO.Ellipsis}`,e.busy=!0;try{return await r.fetch({progress:!0}),!0}finally{e.busy=!1}}})}let r=yield i;return(0,n.fg)(i,e,r)?r[0].item:n.Lt}};var W=i(4703);let PushGitCommand=class PushGitCommand extends n.d6{constructor(e,t){super(e,"push","push","Push",{description:"pushes changes from the current branch to a remote"});let i=0;t?.state?.repos!=null&&(!Array.isArray(t.state.repos)||0!==t.state.repos.length)&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}execute(e){let t=e.flags.indexOf("--set-upstream");return -1!==t?this.container.git.pushAll(e.repos,{force:!1,publish:{remote:e.flags[t+1]},reference:e.reference}):this.container.git.pushAll(e.repos,{force:e.flags.includes("--force"),reference:e.reference})}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,title:this.title};null==e.flags&&(e.flags=[]),null==e.repos||Array.isArray(e.repos)||(e.repos=[e.repos]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repos||0===e.repos.length||(0,x.Bo)(e.repos)){if(i=!1,1===t.repos.length)i=!0,null==e.repos&&e.counter++,e.repos=[t.repos[0]];else if(null!=e.reference){let i=yield*(0,I.UA)({...e,repos:void 0,repo:e.reference.repoPath},t);if(i===n.Lt)break;e.repos=[i]}else{let i=yield*(0,I.g0)(e,t,{skipIfPossible:e.counter>=1});if(i===n.Lt)break;e.repos=i}}if(this.confirm(e.confirm)){let r=yield*this.confirmStep(e,t);if(r===n.Lt){i&&e.counter--;continue}e.flags=r}(0,n.nH)(e),this.execute(e)}return e.counter<0?n.Lt:void 0}async *confirmStep(e,t){let i;let r=A.H.getCore("git.useForcePushWithLease")??!0,s=r&&(A.H.getCore("git.useForcePushIfIncludes")??!0)&&await this.container.git.supports(e.repos[0].uri,W.O.ForceIfIncludes);if(e.repos.length>1)i=this.createConfirmStep((0,I.Zr)(`Confirm ${t.title}`,e,t),[_(e.flags,[],{label:this.title,detail:`Will push ${e.repos.length} repos`}),_(e.flags,["--force"],{label:`Force ${this.title}${s?" (with lease and if includes)":r?" (with lease)":""}`,description:`--force${r?`-with-lease${s?" --force-if-includes":""}`:""}`,detail:`Will force push${s?" (with lease and if includes)":r?" (with lease)":""} ${e.repos.length} repos`})]);else{let[n]=e.repos,l=[];if((0,D.gC)(e.reference)){if(e.reference.remote)i=this.createConfirmStep((0,I.Zr)(t.title,e,t),[],(0,h.Du)(h.WL.Cancel,!0,{label:"OK",detail:"Cannot push a remote branch"}),{placeholder:"Cannot push a remote branch"});else{let o=await n.getBranch(e.reference.name);if(null!=o&&o?.upstream==null){for(let t of(await n.getRemotes()))l.push(_(e.flags,["--set-upstream",t.name,o.name],{label:`Publish ${o.name} to ${t.name}`,detail:`Will publish ${(0,D.M4)(o)} to ${t.name}`}));i=l.length?this.createConfirmStep((0,I.Zr)("Confirm Publish",e,t),l,void 0,{placeholder:"Confirm Publish"}):this.createConfirmStep((0,I.Zr)("Publish",e,t),[],(0,h.Du)(h.WL.Cancel,!0,{label:"OK",detail:"No remotes found"}),{placeholder:"Cannot publish; No remotes found"})}else i=null!=o&&o?.state.behind>0?this.createConfirmStep((0,I.Zr)(`Confirm ${t.title}`,e,t),[_(e.flags,["--force"],{label:`Force ${this.title}${s?" (with lease and if includes)":r?" (with lease)":""}`,description:`--force${r?`-with-lease${s?" --force-if-includes":""}`:""}`,detail:`Will force push${s?" (with lease and if includes)":r?" (with lease)":""} ${o?.state.ahead?` ${(0,p.td)("commit",o.state.ahead)}`:""}${o.getRemoteName()?` to ${o.getRemoteName()}`:""}${null!=o&&o.state.behind>0?`, overwriting ${(0,p.td)("commit",o.state.behind)}${o?.getRemoteName()?` on ${o.getRemoteName()}`:""}`:""}`})],(0,h.Du)(h.WL.Cancel,!0,{label:`Cancel ${this.title}`,detail:`Cannot push; ${(0,D.M4)(o)} is behind ${o.getRemoteName()} by ${(0,p.td)("commit",o.state.behind)}`})):null!=o&&o?.state.ahead>0?this.createConfirmStep((0,I.Zr)(`Confirm ${t.title}`,e,t),[_(e.flags,[o.getRemoteName()],{label:this.title,detail:`Will push ${(0,p.td)("commit",o.state.ahead)} from ${(0,D.M4)(o)} to ${o.getRemoteName()}`})]):this.createConfirmStep((0,I.Zr)(t.title,e,t),[],(0,h.Du)(h.WL.Cancel,!0,{label:"OK",detail:"No commits found to push"}),{placeholder:"Nothing to push; No commits found to push"})}}else{let c=await n.getStatus(),u={refType:"branch",name:c?.branch??"HEAD",ref:c?.branch??"HEAD",remote:!1,repoPath:n.path};if(c?.state.ahead===0){if(!(0,D.gC)(e.reference)&&null==c.upstream){let t;for(let i of(null!=e.reference?t=` up to and including ${(0,D.M4)(e.reference,{label:!1})}`:(e.reference=u,t=""),await n.getRemotes()))l.push(_(e.flags,["--set-upstream",i.name,c.branch],{label:`Publish ${u.name} to ${i.name}`,detail:`Will publish ${(0,D.M4)(u)}${t} to ${i.name}`}))}i=l.length?this.createConfirmStep((0,I.Zr)("Confirm Publish",e,t),l,void 0,{placeholder:"Confirm Publish"}):null==c.upstream?this.createConfirmStep((0,I.Zr)("Publish",e,t),[],(0,h.Du)(h.WL.Cancel,!0,{label:"OK",detail:"No remotes found"}),{placeholder:"Cannot publish; No remotes found"}):this.createConfirmStep((0,I.Zr)(t.title,e,t),[],(0,h.Du)(h.WL.Cancel,!0,{label:"OK",detail:`No commits ahead of ${(0,U.Zq)(c.upstream?.name)}`}),{placeholder:`Nothing to push; No commits ahead of ${(0,U.Zq)(c.upstream?.name)}`})}else{let l,g="",m=await n.getLastFetched();0!==m&&(g=`${(0,p.eV)(a.EO.Dot,2,2)}Last fetched ${(0,d.PI)(new Date(m))}`),l=null!=e.reference?`${c?.state.ahead?` commits up to and including ${(0,D.M4)(e.reference,{label:!1})}`:""}${c?.upstream?` to ${(0,U.Zq)(c.upstream?.name)}`:""}`:`${c?.state.ahead?` ${(0,p.td)("commit",c.state.ahead)}`:""}${c?.upstream?` to ${(0,U.Zq)(c.upstream?.name)}`:""}`,(i=this.createConfirmStep((0,I.Zr)(`Confirm ${t.title}`,e,t,g),[...c?.state.behind?[]:[_(e.flags,[],{label:this.title,detail:`Will push${l}`})],_(e.flags,["--force"],{label:`Force ${this.title}${s?" (with lease and if includes)":r?" (with lease)":""}`,description:`--force${r?`-with-lease${s?" --force-if-includes":""}`:""}`,detail:`Will force push${s?" (with lease and if includes)":r?" (with lease)":""} ${l}${null!=c&&c.state.behind>0?`, overwriting ${(0,p.td)("commit",c.state.behind)}${c?.upstream?` on ${(0,U.Zq)(c.upstream?.name)}`:""}`:""}`})],c?.state.behind?(0,h.Du)(h.WL.Cancel,!0,{label:`Cancel ${this.title}`,detail:`Cannot push; ${(0,D.M4)(u)} is behind${c?.upstream?` ${(0,U.Zq)(c.upstream?.name)}`:""} by ${(0,p.td)("commit",c.state.behind)}`}):void 0)).additionalButtons=[o.yn],i.onDidClickButton=async(e,i)=>{if(i!==o.yn||e.busy)return!1;e.title=`Confirm ${t.title}${(0,p.eV)(a.EO.Dot,2,2)}Fetching${a.EO.Ellipsis}`,e.busy=!0;try{return await n.fetch({progress:!0}),!0}finally{e.busy=!1}}}}}let l=yield i;return(0,n.fg)(i,e,l)?l[0].item:n.Lt}};let RebaseGitCommand=class RebaseGitCommand extends n.d6{constructor(e,t){super(e,"rebase","rebase","Rebase",{description:"integrates changes from a specified branch into the current branch, by changing the base of the branch and reapplying the commits on top"});let i=0;t?.state?.repo!=null&&i++,t?.state?.reference!=null&&i++,this.initialState={counter:i,confirm:!0,...t?.state}}get canSkipConfirm(){return!1}async execute(e){let t;if(e.flags.includes("--interactive")){await this.container.rebaseEditor.enableForNextUse();let e=(0,g.XG)();t=["-c",`"sequence.editor=${e}"`]}e.repo.rebase(t,...e.flags,e.reference.ref)}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,destination:void 0,pickCommit:!1,pickCommitForItem:!1,selectedBranchOrTag:void 0,showTags:!0,title:this.title};null==e.flags&&(e.flags=[]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo){if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,I.UA)(e,t);if(i===n.Lt)break;e.repo=i}}if(null==t.destination){let i=await e.repo.getBranch();if(null==i)break;t.destination=i}if(t.title=`${this.title} ${(0,D.M4)(t.destination,{icon:!1})}`,t.pickCommitForItem=!1,e.counter<2||null==e.reference){let r=new o.m(t.pickCommit,t,()=>{t.pickCommit=!t.pickCommit,r.on=t.pickCommit}),s=yield*(0,I.Re)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to rebase`,picked:t.selectedBranchOrTag?.ref,value:null==t.selectedBranchOrTag?e.reference?.ref:void 0,additionalButtons:[r]});if(s===n.Lt){i&&e.counter--;continue}e.reference=s,t.selectedBranchOrTag=void 0}if((0,D.bv)(e.reference)||(t.selectedBranchOrTag=e.reference),e.counter<3&&null!=t.selectedBranchOrTag&&(t.pickCommit||t.pickCommitForItem||e.reference.ref===t.destination.ref)){let i=t.selectedBranchOrTag.ref,r=t.cache.get(i);null==r&&(r=this.container.git.getLog(e.repo.path,{ref:i,merges:"first-parent"}),t.cache.set(i,r));let s=yield*(0,I.t$)(e,t,{ignoreFocusOut:!0,log:await r,onDidLoadMore:e=>t.cache.set(i,Promise.resolve(e)),placeholder:(e,t)=>null==t?`No commits found on ${(0,D.M4)(e.selectedBranchOrTag,{icon:!1})}`:`Choose a commit to rebase ${(0,D.M4)(e.destination,{icon:!1})} onto`,picked:e.reference?.ref});if(s===n.Lt)continue;e.reference=s}let r=yield*this.confirmStep(e,t);r!==n.Lt&&(e.flags=r,(0,n.nH)(e),this.execute(e))}return e.counter<0?n.Lt:void 0}async *confirmStep(e,t){let i=await this.container.git.getAheadBehindCommitCount(e.repo.path,["revision"===e.reference.refType?(0,D.Xn)(e.reference.ref,t.destination.ref):(0,D.Xn)(t.destination.name,e.reference.name)]),r=null!=i?i.ahead+i.behind:0;if(0===r){let i=this.createConfirmStep((0,I.Zr)(t.title,e,t),[],(0,h.Du)(h.WL.Cancel,!0,{label:"OK",detail:`${(0,D.M4)(t.destination,{capitalize:!0})} is already up to date with ${(0,D.M4)(e.reference)}`}),{placeholder:`Nothing to rebase; ${(0,D.M4)(t.destination,{label:!1,icon:!1})} is already up to date`}),r=yield i;return(0,n.fg)(i,e,r),n.Lt}let s=this.createConfirmStep((0,I.Zr)(`Confirm ${t.title}`,e,t),[_(e.flags,[],{label:this.title,detail:`Will update ${(0,D.M4)(t.destination)} by applying ${(0,p.td)("commit",r)} on top of ${(0,D.M4)(e.reference)}`}),_(e.flags,["--interactive"],{label:`Interactive ${this.title}`,description:"--interactive",detail:`Will interactively update ${(0,D.M4)(t.destination)} by applying ${(0,p.td)("commit",r)} on top of ${(0,D.M4)(e.reference)}`})]),o=yield s;return(0,n.fg)(s,e,o)?o[0].item:n.Lt}};var q=i(7531),M=i(3536),N=i(3916);let H=new Map([["add","Add"],["prune","Prune"],["remove","Remove"]]);let RemoteGitCommand=class RemoteGitCommand extends n.d6{subcommand;constructor(e,t){super(e,"remote","remote","Remote",{description:"add, prune, or remove remotes"});let i=0;if(t?.state?.subcommand!=null)switch(i++,t?.state.subcommand){case"add":null!=t.state.name&&i++,null!=t.state.url&&i++;break;case"prune":case"remove":null!=t.state.remote&&i++}t?.state?.repo!=null&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand}get canSkipConfirm(){return"remove"!==this.subcommand&&"prune"!==this.subcommand&&super.canSkipConfirm}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.remotesView,title:this.title},i=!1;for(;this.canStepsContinue(e);){var r,s;if(t.title=this.title,e.counter<1||null==e.subcommand){this.subcommand=void 0;let t=yield*this.pickSubcommandStep(e);if(t===n.Lt)break;e.subcommand=t}if(this.subcommand=e.subcommand,t.title=(r=this.title,null==(s=e.subcommand)?r:`${H.get(s)} ${r}`),e.counter<2||null==e.repo||"string"==typeof e.repo){if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,I.UA)(e,t);if(i===n.Lt)continue;e.repo=i}}switch(e.subcommand){case"add":!function(e){if(!(e.repo instanceof T.LN)||"add"!==e.subcommand)throw Error("Missing repository")}(e),yield*this.addCommandSteps(e,t),e.name=void 0,e.url=void 0;break;case"prune":!function(e){if(!(e.repo instanceof T.LN)||"prune"!==e.subcommand)throw Error("Missing repository")}(e),yield*this.pruneCommandSteps(e,t);break;case"remove":!function(e){if(!(e.repo instanceof T.LN)||"remove"!==e.subcommand)throw Error("Missing repository")}(e),yield*this.removeCommandSteps(e,t);break;default:(0,n.nH)(e)}i&&e.counter--}return e.counter<0?n.Lt:void 0}*pickSubcommandStep(e){let t=(0,n.Ac)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"add",description:"adds a new remote",picked:"add"===e.subcommand,item:"add"},{label:"prune",description:"prunes remote branches on the specified remote",picked:"prune"===e.subcommand,item:"prune"},{label:"remove",description:"removes the specified remote",picked:"remove"===e.subcommand,item:"remove"}],buttons:[r.QuickInputButtons.Back]}),i=yield t;return(0,n.fg)(t,e,i)?i[0].item:n.Lt}async *addCommandSteps(e,t){null==e.flags&&(e.flags=["-f"]);let i=0!==(await e.repo.getRemotes({filter:t=>t.name===e.name})).length;for(;this.canStepsContinue(e);){if(e.counter<3||null==e.name||i){let r=yield*(0,I.C6)(e,t,{placeholder:"Please provide a name for the remote",value:e.name});if(r===n.Lt)continue;if(i=0!==(await e.repo.getRemotes({filter:e=>e.name===r})).length){e.counter--;continue}e.name=r}if(e.counter<4||null==e.url){let i=yield*(0,I.aG)(e,t,{placeholder:"Please provide a URL for the remote",value:e.url});if(i===n.Lt)continue;e.url=i}if(this.confirm(e.confirm)){let i=yield*this.addCommandConfirmStep(e,t);if(i===n.Lt)continue;e.flags=i}(0,n.nH)(e),await e.repo.addRemote(e.name,e.url,e.flags.includes("-f")?{fetch:!0}:void 0),!1!==e.reveal&&(0,q._c)(void 0,{focus:!0,select:!0})}}*addCommandConfirmStep(e,t){let i=(0,n.VW)((0,I.Zr)(`Confirm ${t.title}`,e,t),[_(e.flags,[],{label:t.title,detail:`Will add remote '${e.name}' for ${e.url}`}),_(e.flags,["-f"],{label:`${t.title} and Fetch`,description:"-f",detail:`Will add and fetch remote '${e.name}' for ${e.url}`})],t),r=yield i;return(0,n.fg)(i,e,r)?r[0].item:n.Lt}async *removeCommandSteps(e,t){for(;this.canStepsContinue(e);){if(null!=e.remote&&"string"==typeof e.remote){let[t]=await e.repo.getRemotes({filter:t=>t.name===e.remote});null!=t?e.remote=t:e.remote=void 0}if(e.counter<3||null==e.remote){let i=yield*(0,I.YR)(e,t,{picked:e.remote?.name,placeholder:"Choose remote to remove"});if(i===n.Lt)break;e.remote=i}if(!function(e){if("string"==typeof e.remote)throw Error("Missing remote")}(e),(yield*this.removeCommandConfirmStep(e,t))!==n.Lt){(0,n.nH)(e);try{await e.repo.removeRemote(e.remote.name)}catch(e){N.Vy.error(e),(0,M.qQ)("Unable to remove remote")}}}}*removeCommandConfirmStep(e,t){let i=(0,n.VW)((0,I.Zr)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will remove remote '${e.remote.name}'`}],t),r=yield i;return(0,n.fg)(i,e,r)?void 0:n.Lt}async *pruneCommandSteps(e,t){for(;this.canStepsContinue(e);){if(null!=e.remote&&"string"==typeof e.remote){let[t]=await e.repo.getRemotes({filter:t=>t.name===e.remote});null!=t?e.remote=t:e.remote=void 0}if(e.counter<3||null==e.remote){let i=yield*(0,I.YR)(e,t,{picked:e.remote?.name,placeholder:"Choose a remote to prune"});if(i===n.Lt)break;e.remote=i}!function(e){if("string"==typeof e.remote)throw Error("Missing remote")}(e),(yield*this.pruneCommandConfirmStep(e,t))!==n.Lt&&((0,n.nH)(e),e.repo.pruneRemote(e.remote.name))}}*pruneCommandConfirmStep(e,t){let i=(0,n.VW)((0,I.Zr)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will prune remote '${e.remote.name}'`}],t),r=yield i;return(0,n.fg)(i,e,r)?void 0:n.Lt}};let ResetGitCommand=class ResetGitCommand extends n.d6{constructor(e,t){super(e,"reset","reset","Reset",{description:"resets the current branch to a specified commit"});let i=0;t?.state?.repo!=null&&i++,t?.state?.reference!=null&&i++,this.initialState={counter:i,confirm:t?.confirm??!0,...t?.state},this._canSkipConfirm=!this.initialState.confirm}_canSkipConfirm=!1;get canSkipConfirm(){return this._canSkipConfirm}execute(e){e.repo.reset(...e.flags,e.reference.ref)}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,destination:void 0,title:this.title};null==e.flags&&(e.flags=[]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo){if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,I.UA)(e,t);if(i===n.Lt)break;e.repo=i}}if(null==t.destination){let i=await e.repo.getBranch();if(null==i)break;t.destination=i}if(t.title=`${this.title} ${(0,D.M4)(t.destination,{icon:!1})}`,e.counter<2||null==e.reference){let r=t.destination.ref,s=t.cache.get(r);null==s&&(s=this.container.git.getLog(e.repo.path,{ref:r,merges:"first-parent"}),t.cache.set(r,s));let o=yield*(0,I.t$)(e,t,{log:await s,onDidLoadMore:e=>t.cache.set(r,Promise.resolve(e)),placeholder:(e,t)=>null==t?`${e.destination.name} has no commits`:`Choose a commit to reset ${e.destination.name} to`,picked:e.reference?.ref});if(o===n.Lt){i&&e.counter--;continue}e.reference=o}if(this.confirm(e.confirm)){let i=yield*this.confirmStep(e,t);if(i===n.Lt)continue;e.flags=i}(0,n.nH)(e),this.execute(e)}return e.counter<0?n.Lt:void 0}*confirmStep(e,t){let i=this.createConfirmStep((0,I.Zr)(`Confirm ${t.title}`,e,t),[_(e.flags,[],{label:this.title,detail:`Will reset (leaves changes in the working tree) ${(0,D.M4)(t.destination)} to ${(0,D.M4)(e.reference)}`}),_(e.flags,["--soft"],{label:`Soft ${this.title}`,description:"--soft",detail:`Will soft reset (leaves changes in the index and working tree) ${(0,D.M4)(t.destination)} to ${(0,D.M4)(e.reference)}`}),_(e.flags,["--hard"],{label:`Hard ${this.title}`,description:"--hard",detail:`Will hard reset (discards all changes) ${(0,D.M4)(t.destination)} to ${(0,D.M4)(e.reference)}`})]),r=yield i;return(0,n.fg)(i,e,r)?r[0].item:n.Lt}};let RevertGitCommand=class RevertGitCommand extends n.d6{constructor(e,t){super(e,"revert","revert","Revert",{description:"undoes the changes of specified commits, by creating new commits with inverted changes"});let i=0;t?.state?.repo!=null&&i++,t?.state?.references!=null&&(!Array.isArray(t.state.references)||0!==t.state.references.length)&&i++,this.initialState={counter:i,confirm:!0,...t?.state}}get canSkipConfirm(){return!1}execute(e){e.repo.revert(...e.flags,...e.references.map(e=>e.ref).reverse())}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,destination:void 0,title:this.title};null==e.flags&&(e.flags=[]),null==e.references||Array.isArray(e.references)||(e.references=[e.references]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo){if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,I.UA)(e,t);if(i===n.Lt)break;e.repo=i}}if(null==t.destination){let i=await e.repo.getBranch();if(null==i)break;t.destination=i}if(e.counter<2||null==e.references||0===e.references.length){let r=t.destination.ref,s=t.cache.get(r);null==s&&(s=this.container.git.getLog(e.repo.path,{ref:r,merges:"first-parent"}),t.cache.set(r,s));let o=yield*(0,I.GW)(e,t,{log:await s,onDidLoadMore:e=>t.cache.set(r,Promise.resolve(e)),placeholder:(e,t)=>null==t?`${e.destination.name} has no commits`:"Choose commits to revert",picked:e.references?.map(e=>e.ref)});if(o===n.Lt){i&&e.counter--;continue}e.references=o}let r=yield*this.confirmStep(e,t);r!==n.Lt&&(e.flags=r,(0,n.nH)(e),this.execute(e))}return e.counter<0?n.Lt:void 0}*confirmStep(e,t){let i=this.createConfirmStep((0,I.Zr)(`Confirm ${t.title}`,e,t),[_(e.flags,["--no-edit"],{label:this.title,description:"--no-edit",detail:`Will revert ${(0,D.M4)(e.references)}`}),_(e.flags,["--edit"],{label:`${this.title} & Edit`,description:"--edit",detail:`Will revert and edit ${(0,D.M4)(e.references)}`})]),r=yield i;return(0,n.fg)(i,e,r)?r[0].item:n.Lt}};var G=i(3269),V=i(8890),Q=i(4026),j=i(8547),z=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),Y=(e,t,i)=>{if(null!=t){var r;if("object"!=typeof t&&"function"!=typeof t)throw TypeError("Object expected");if(i&&(r=t[z("asyncDispose")]),void 0===r&&(r=t[z("dispose")]),"function"!=typeof r)throw TypeError("Object not disposable");e.push([i,r,t])}else i&&e.push([i]);return t},K=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),n=r=>{for(;r=e.pop();)try{var o=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(o).then(n,e=>(s(e),n()))}catch(e){s(e)}if(i)throw t};return n()};let J={iconPath:new r.ThemeIcon("person-add"),tooltip:"Pick Authors"},Z={iconPath:new r.ThemeIcon("new-file"),tooltip:"Pick Files"},X={iconPath:new r.ThemeIcon("new-folder"),tooltip:"Pick Folder"},ee=new Map([["","Search by Message"],["=:","Search by Message"],["message:","Search by Message"],["@:","Search by Author"],["author:","Search by Author"],["#:","Search by Commit SHA"],["commit:","Search by Commit SHA"],["?:","Search by File"],["file:","Search by File"],["~:","Search by Changes"],["change:","Search by Changes"]]);let SearchGitCommand=class SearchGitCommand extends n.d6{constructor(e,t){super(e,"search","search","Commit Search",{description:"aka grep, searches for commits"});let i=0;t?.state?.repo!=null&&i++,t?.state?.query!=null&&!t.prefillOnly&&i++,this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}isMatch(e){return super.isMatch(e)||"grep"===e}isFuzzyMatch(e){return super.isFuzzyMatch(e)||"grep"===e}async *steps(e){let t={container:this.container,repos:this.container.git.openRepositories,associatedView:this.container.searchAndCompareView,commit:void 0,hasVirtualFolders:(0,k.SD)("gitlens:hasVirtualFolders",!1),resultsKey:void 0,resultsPromise:void 0,title:this.title},i=A.H.get("gitCommands.search");null==e.matchAll&&(e.matchAll=i.matchAll),null==e.matchCase&&(e.matchCase=i.matchCase),null==e.matchRegex&&(e.matchRegex=i.matchRegex),null==e.showResultsInSideBar&&(e.showResultsInSideBar=i.showResultsInSideBar??void 0);let r=!1;for(;this.canStepsContinue(e);){let i;if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo){if(r=!1,1===t.repos.length)r=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,I.UA)(e,t);if(i===n.Lt)break;e.repo=i}}if(e.counter<2||null==e.query){let i=yield*this.pickSearchOperatorStep(e,t);if(i===n.Lt){r&&e.counter--,e.query=void 0;continue}e.query=i}let s={query:e.query,matchAll:e.matchAll,matchCase:e.matchCase,matchRegex:e.matchRegex},a=(0,G.b4)(s);if((null==t.resultsPromise||t.resultsKey!==a)&&(t.resultsPromise=e.repo.richSearchCommits(s),t.resultsKey=a),e.showResultsInSideBar){this.container.searchAndCompareView.search(e.repo.path,s,{label:{label:`for ${e.query}`}},t.resultsPromise,e.showResultsInSideBar instanceof j.X?e.showResultsInSideBar:void 0);break}if(e.counter<3||null==t.commit){let i=e.repo.path,r=yield*(0,I.t$)(e,t,{ignoreFocusOut:!0,log:await t.resultsPromise,onDidLoadMore:e=>t.resultsPromise=Promise.resolve(e),placeholder:(t,i)=>null==i?`No results for ${e.query}`:`${(0,p.td)("result",i.count,{format:e=>i.hasMore?`${e}+`:void 0})} for ${e.query}`,picked:t.commit?.ref,showInSideBarCommand:new l.g5("$(link-external)  Show Results in Side Bar",()=>void this.container.searchAndCompareView.search(i,s,{label:{label:`for ${e.query}`},reveal:{select:!0,focus:!1,expand:!0}},t.resultsPromise)),showInSideBarButton:{button:o.UM,onDidClick:()=>void this.container.searchAndCompareView.search(i,s,{label:{label:`for ${e.query}`},reveal:{select:!0,focus:!1,expand:!0}},t.resultsPromise)}});if(r===n.Lt){e.counter--;continue}t.commit=r}e.openPickInView?((0,F.JX)(t.commit,{pin:!1,preserveFocus:!1}),i=n.Lt):i=yield*em(this.container,{command:"show",state:{repo:e.repo,reference:t.commit}},this.pickedVia),e.counter--,i===n.Lt&&(0,n.nH)(e)}return e.counter<0?n.Lt:void 0}*pickSearchOperatorStep(e,t){let i=[{label:ee.get(""),description:`pattern or message: pattern or =: pattern ${a.EO.Dash} use quotes to search for phrases`,alwaysShow:!0,item:"message:"},{label:ee.get("author:"),description:"author: pattern or @: pattern",buttons:[J],alwaysShow:!0,item:"author:"},{label:ee.get("commit:"),description:"commit: sha or #: sha",alwaysShow:!0,item:"commit:"},t.hasVirtualFolders?void 0:{label:ee.get("file:"),description:"file: glob or ?: glob",buttons:[Z,X],alwaysShow:!0,item:"file:"},t.hasVirtualFolders?void 0:{label:ee.get("change:"),description:"change: pattern or ~: pattern",alwaysShow:!0,item:"change:"}].filter(e=>null!=e),r=new o.XS(e.matchCase),s=new o.S(e.matchAll),l=new o.w7(e.matchRegex),c=(0,n.Ac)({title:(0,I.Zr)(t.title,e,t),placeholder:'e.g. "Updates dependencies" author:eamodio',ignoreFocusOut:!0,matchOnDescription:!0,matchOnDetail:!0,additionalButtons:[r,s,l],items:i,value:e.query,selectValueWhenShown:!1,onDidAccept:async i=>{let r=i.selectedItems[0];return!(0,h.hr)(r)&&(!G.GZ.has(r.item)||(await et(r,{},i,c,e,t),!1))},onDidClickButton:(t,i)=>{i===r?(e.matchCase=!e.matchCase,r.on=e.matchCase):i===s?(e.matchAll=!e.matchAll,s.on=e.matchAll):i===l&&(e.matchRegex=!e.matchRegex,l.on=e.matchRegex)},onDidClickItemButton:async function(i,r,s){return r===J?await et(s,{author:!0},i,c,e,t):r===Z?await et(s,{file:{type:"file"}},i,c,e,t):r===X&&await et(s,{file:{type:"folder"}},i,c,e,t),!1},onDidChangeValue:r=>{let s=r.value.trim();e.counter=s?3:2;let n=(0,G.OM)({query:s,matchCase:e.matchCase,matchAll:e.matchAll,matchRegex:e.matchRegex});return r.title=(0,I.Zr)(0===n.size||n.size>1?t.title:`Commit ${ee.get(n.keys().next().value)}`,e,t),0===r.value.length?r.items=i:(r.ignoreFocusOut=!0,c.ignoreFocusOut=!0,r.items=[{label:"Search for",description:r.value,item:r.value,picked:!0},...i],r.activeItems=[r.items[0]]),!0}}),u=yield c;return(0,n.fg)(c,e,u)?(e.counter--,u[0].item.trim()):(e.counter--,n.Lt)}};async function et(e,t,i,s,o,a){let l=(0,G.OM)({query:i.value,matchCase:o.matchCase,matchAll:o.matchAll}),h=!1;if(t?.author&&"author:"===e.item){var c=[];try{let e=Y(c,(0,n.Wq)(s,i)),t=l.get("author:"),r=await (0,V.W)(a.container,o.repo,"Search by Author","Choose contributors to include commits from",{appendReposToTitle:!0,clearButton:!0,ignoreFocusOut:!0,multiselect:!0,picked:e=>null!=t&&(null!=e.email&&t.has(e.email)||null!=e.name&&t.has(e.name)||null!=e.username&&t.has(e.username))});if(e[Symbol.dispose](),null!=r){let e=r.map(e=>e.email??e.name??e.username).filter(e=>null!=e);e.length?l.set("author:",new Set(e)):l.delete("author:")}else h=!0}catch(e){var u=e,d=!0}finally{K(c,u,d)}}else if(t?.file&&"file:"===e.item){var p=[];try{let e=Y(p,(0,n.Wq)(s,i)),c=l.get("file:"),u=await r.window.showOpenDialog({canSelectFiles:"file"===t.file.type,canSelectFolders:"folder"===t.file.type,canSelectMany:"file"===t.file.type,title:"Search by File",openLabel:"Add to Search",defaultUri:o.repo.folder?.uri});if(e[Symbol.dispose](),u?.length)for(let e of(null==c&&(c=new Set,l.set("file:",c)),u))c.add(a.container.git.getRelativePath(e,o.repo.uri));else h=!0;(null==c||0===c.size)&&l.delete("file:")}catch(e){var g=e,m=!0}finally{K(p,g,m)}}else{let t=l.get(e.item);h=!t?.has("")}i.value=`${(0,Q.fj)((0,Q.Tj)(l.entries(),([e,t])=>`${e}${(0,Q.fj)(t,` ${e}`)}`)," ")}${h?` ${e.item}`:""}`,s.onDidChangeValue(i)}var ei=i(8825),er=i(6541);let ShowGitCommand=class ShowGitCommand extends n.d6{constructor(e,t){super(e,"show","show","Show",{description:"shows information about a git reference"});let i=0;t?.state?.repo!=null&&i++,t?.state?.reference!=null&&i++,t?.state?.fileName!=null&&(i+=2),this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}getStepState(e){let t=super.getStepState(e);return{...t,startingStep:e?Math.min(t.startingStep??0,1):0}}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,title:this.title},i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo){if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,I.UA)(e,t);if(i===n.Lt)break;e.repo=i}}if(!function(e){if(!(e.repo instanceof T.LN))throw Error("Missing repository")}(e),(e.counter<2||null==e.reference||!(0,B.WM)(e.reference)||null!=e.reference.file)&&(null==e.reference||(0,B.WM)(e.reference)||(e.reference=await this.container.git.getCommit(e.reference.repoPath,e.reference.ref)),e.counter<2||null==e.reference)){let r=yield*(0,I.t$)(e,t,{log:{repoPath:e.repo.path,commits:new Map,sha:void 0,range:void 0,count:0,limit:void 0,hasMore:!1},placeholder:"Enter a reference or commit SHA",picked:e.reference?.ref});if(r===n.Lt){i&&e.counter--;continue}e.reference=r}if(!function(e){if(!(0,B.WM)(e.reference))throw Error("Missing reference")}(e),e.counter<3){null==e.reference.files&&await e.reference.ensureFullDetails();let i=yield*(0,I.x$)(e,t);if(i===n.Lt)continue;if(i instanceof er.DT){let t=yield*i.executeSteps(this.pickedVia);e.counter--,t===n.Lt&&(0,n.nH)(e);continue}if(i instanceof l.Fj&&!(i instanceof ei.o3)){(0,n.nH)(e),i.execute();break}}if(e.counter<4||null==e.fileName){let i=yield*(0,I.UI)(e,t,{picked:e.fileName});if(i===n.Lt)continue;if(i instanceof ei.o3){e.counter-=2;continue}e.fileName=i.file.path}!function(e){if(!e.fileName)throw Error("Missing filename")}(e);let r=yield*(0,I.tY)(e,t);if(r!==n.Lt){if(r instanceof ei.o3){e.counter-=2;continue}if(r instanceof er.DT){yield*r.executeSteps(this.pickedVia),e.counter--;continue}if(r instanceof l.Fj){(0,n.nH)(e),r.execute();break}}}return e.counter<0?n.Lt:void 0}};var es=i(300),en=i(1310);let eo=new Map([["apply","Apply"],["drop","Drop"],["list","List"],["pop","Pop"],["push","Push"],["rename","Rename"]]);function ea(e,t){return"drop"===t&&(e="Stashes"),null==t?e:`${eo.get(t)} ${e}`}let StashGitCommand=class StashGitCommand extends n.d6{subcommand;constructor(e,t){super(e,"stash","stash","Stash",{description:"shelves (stashes) local changes to be reapplied later"});let i=0;if(t?.state?.subcommand!=null)switch(i++,t.state.subcommand){case"apply":case"pop":null!=t.state.reference&&i++;break;case"drop":null!=t.state.references&&i++;break;case"push":null!=t.state.message&&i++;break;case"rename":null!=t.state.reference&&i++,null!=t.state.message&&i++}t?.state?.repo!=null&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand&&"list"!==this.subcommand}get canSkipConfirm(){return"drop"!==this.subcommand&&super.canSkipConfirm}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.stashesView,readonly:(0,k.SD)("gitlens:readonly",!1)||(0,k.SD)("gitlens:untrusted",!1)||(0,k.SD)("gitlens:hasVirtualFolders",!1),title:this.title},i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,t.readonly&&(e.subcommand="list"),e.counter<1||null==e.subcommand){this.subcommand=void 0;let t=yield*this.pickSubcommandStep(e);if(t===n.Lt)break;e.subcommand=t}if(this.subcommand=e.subcommand,t.title=ea(this.title,e.subcommand),e.counter<2||null==e.repo||"string"==typeof e.repo){if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,I.UA)(e,t);if(i===n.Lt)continue;e.repo=i}}switch(e.subcommand){case"apply":case"pop":yield*this.applyOrPopCommandSteps(e,t);break;case"drop":yield*this.dropCommandSteps(e,t);break;case"list":yield*this.listCommandSteps(e,t);break;case"push":yield*this.pushCommandSteps(e,t);break;case"rename":yield*this.renameCommandSteps(e,t),e.message=void 0;break;default:(0,n.nH)(e)}i&&e.counter--}return e.counter<0?n.Lt:void 0}*pickSubcommandStep(e){let t=(0,n.Ac)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"apply",description:"integrates changes from the specified stash into the current branch",picked:"apply"===e.subcommand,item:"apply"},{label:"drop",description:"deletes the specified stashes",picked:"drop"===e.subcommand,item:"drop"},{label:"list",description:"lists the saved stashes",picked:"list"===e.subcommand,item:"list"},{label:"pop",description:"integrates changes from the specified stash into the current branch and deletes the stash",picked:"pop"===e.subcommand,item:"pop"},{label:"push",description:"saves your local changes to a new stash and discards them from the working tree and index",picked:"push"===e.subcommand,item:"push"},{label:"rename",description:"renames the specified stash",picked:"rename"===e.subcommand,item:"rename"}],buttons:[r.QuickInputButtons.Back]}),i=yield t;return(0,n.fg)(t,e,i)?i[0].item:n.Lt}async *applyOrPopCommandSteps(e,t){for(;this.canStepsContinue(e);){if(e.counter<3||null==e.reference){let i=yield*(0,I.FF)(e,t,{stash:await this.container.git.getStash(e.repo.path),placeholder:(t,i)=>null==i?`No stashes found in ${e.repo.formattedName}`:"Choose a stash to apply to your working tree",picked:e.reference?.ref});if(i===n.Lt)break;e.reference=i}if(this.confirm(e.confirm)){let i=yield*this.applyOrPopCommandConfirmStep(e,t);if(i===n.Lt)continue;e.subcommand=i}(0,n.nH)(e);try{if(await e.repo.stashApply("pop"===e.subcommand?`stash@{${e.reference.number}}`:e.reference.ref,{deleteAfter:"pop"===e.subcommand}),e.reference.message){let t=await this.container.git.getScmRepository(e.repo.path);null==t||t.inputBox.value||(t.inputBox.value=e.reference.message)}}catch(e){N.Vy.error(e,t.title),en.Uz.is(e,en.W.WorkingChanges)?r.window.showWarningMessage("Unable to apply stash. Your working tree changes would be overwritten. Please commit or stash your changes before trying again"):(0,M.qQ)(e.message)}}}*applyOrPopCommandConfirmStep(e,t){let i=this.createConfirmStep((0,I.Zr)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:"pop"===e.subcommand?`Will delete ${(0,D.M4)(e.reference)} and apply the changes to the working tree`:`Will apply the changes from ${(0,D.M4)(e.reference)} to the working tree`,item:e.subcommand},{label:ea(this.title,"pop"===e.subcommand?"apply":"pop"),detail:"pop"===e.subcommand?`Will apply the changes from ${(0,D.M4)(e.reference)} to the working tree`:`Will delete ${(0,D.M4)(e.reference)} and apply the changes to the working tree`,item:"pop"===e.subcommand?"apply":"pop"}],void 0,{placeholder:`Confirm ${t.title}`,additionalButtons:[o.kk,o.yi],onDidClickButton:(t,i)=>{i===o.kk?(0,es.JX)(e.reference,{pin:!1,preserveFocus:!0}):i===o.yi&&(0,es._c)(e.reference,{select:!0,expand:!0})}}),r=yield i;return(0,n.fg)(i,e,r)?r[0].item:n.Lt}async *dropCommandSteps(e,t){for(;this.canStepsContinue(e);){if(e.counter<3||!e.references?.length){let i=yield*(0,I.Tq)(e,t,{stash:await this.container.git.getStash(e.repo.path),placeholder:(t,i)=>null==i?`No stashes found in ${e.repo.formattedName}`:"Choose stashes to delete",picked:e.references?.map(e=>e.ref)});if(i===n.Lt)break;e.references=i}if((yield*this.dropCommandConfirmStep(e,t))!==n.Lt)for(let i of((0,n.nH)(e),e.references.sort((e,t)=>parseInt(t.number,10)-parseInt(e.number,10)),e.references))try{await e.repo.stashDelete(`stash@{${i.number}}`,i.ref)}catch(e){N.Vy.error(e,t.title),(0,M.qQ)(`Unable to delete stash@{${i.number}}${i.message?`: ${i.message}`:""}`)}}}*dropCommandConfirmStep(e,t){let i=this.createConfirmStep((0,I.Zr)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will delete ${(0,D.M4)(e.references)}`}],void 0,{placeholder:`Confirm ${t.title}`}),r=yield i;return(0,n.fg)(i,e,r)?void 0:n.Lt}async *listCommandSteps(e,t){for(t.title="Stashes";this.canStepsContinue(e);){if(e.counter<3||null==e.reference){let i=yield*(0,I.FF)(e,t,{stash:await this.container.git.getStash(e.repo.path),placeholder:(t,i)=>null==i?`No stashes found in ${e.repo.formattedName}`:"Choose a stash",picked:e.reference?.ref});if(i===n.Lt)break;e.reference=i}let i=yield*em(this.container,{command:"show",state:{repo:e.repo,reference:e.reference}},this.pickedVia);e.counter--,i===n.Lt&&(0,n.nH)(e)}}async *pushCommandSteps(e,t){for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.message){if(null==e.message){let t=await this.container.git.getScmRepository(e.repo.path);e.message=t?.inputBox.value}let i=yield*this.pushCommandInputMessageStep(e,t);if(i===n.Lt)break;e.message=i}if(this.confirm(e.confirm)){let i=yield*this.pushCommandConfirmStep(e,t);if(i===n.Lt)continue;e.flags=i}try{e.flags.includes("--snapshot")?await e.repo.stashSaveSnapshot(e.message):await e.repo.stashSave(e.message,e.uris,{includeUntracked:e.flags.includes("--include-untracked"),keepIndex:e.flags.includes("--keep-index"),onlyStaged:e.flags.includes("--staged")}),(0,n.nH)(e)}catch(s){if(N.Vy.error(s,t.title),s instanceof en.Oo){if(s.reason===en.C6.NothingToSave){if(!e.flags.includes("--include-untracked")){r.window.showWarningMessage('No changes to stash. Choose the "Push & Include Untracked" option, if you have untracked files.');continue}r.window.showInformationMessage("No changes to stash.");return}if(s.reason===en.C6.ConflictingStagedAndUnstagedLines&&e.flags.includes("--staged")){let t={title:"Stash Everything"},i={title:"Cancel",isCloseAffordance:!0};if(await r.window.showErrorMessage(`Changes were stashed, but the working tree cannot be updated because at least one file has staged and unstaged changes on the same line(s)

Do you want to try again by stashing both your staged and unstaged changes?`,{modal:!0},t,i)===t){null==e.uris&&(e.uris=e.onlyStagedUris),e.flags.splice(e.flags.indexOf("--staged"),1);continue}return}}let i=s?.message??s?.toString()??"";if(i.includes("newer version of Git")){r.window.showErrorMessage(`Unable to stash changes. ${i}`);return}(0,M.qQ)("Unable to stash changes");return}}}async *pushCommandInputMessageStep(e,t){let i=(0,n.TX)({title:(0,I.Zr)(t.title,e,t,null!=e.uris?`${(0,p.eV)(a.EO.Dot,2,2)}${1===e.uris.length?(0,L.j)(e.uris[0],{fileOnly:!0}):`${e.uris.length} files`}`:void 0),placeholder:"Please provide a stash message",value:e.message,prompt:"Enter stash message"}),r=yield i;return(0,n.wc)(i,e,r)&&await (0,n.Ss)(i,e,r)?r:n.Lt}*pushCommandConfirmStep(e,t){let i=e.flags.includes("--staged"),r=[];i&&r.push("--staged");let s=[];e.uris?.length?(e.flags.includes("--include-untracked")&&r.push("--include-untracked"),s.push(_(e.flags,[...r],{label:t.title,detail:`Will stash changes from ${1===e.uris.length?(0,L.j)(e.uris[0],{fileOnly:!0}):`${e.uris.length} files`}`})),e.flags.includes("--include-untracked")||s.push(_(e.flags,[...r,"--keep-index"],{label:`${t.title} & Keep Staged`,detail:`Will stash changes from ${1===e.uris.length?(0,L.j)(e.uris[0],{fileOnly:!0}):`${e.uris.length} files`}, but will keep staged files intact`}))):(s.push(_(e.flags,[...r],{label:t.title,detail:`Will stash ${i?"staged":"uncommitted"} changes`}),_(e.flags,[...r,"--snapshot"],{label:`${t.title} Snapshot`,detail:"Will stash uncommitted changes without changing the working tree"})),i||(s.push(_(e.flags,[...r,"--include-untracked"],{label:`${t.title} & Include Untracked`,description:"--include-untracked",detail:"Will stash uncommitted changes, including untracked files"})),s.push(_(e.flags,[...r,"--keep-index"],{label:`${t.title} & Keep Staged`,description:"--keep-index",detail:`Will stash ${i?"staged":"uncommitted"} changes, but will keep staged files intact`}))));let o=this.createConfirmStep((0,I.Zr)(`Confirm ${t.title}`,e,t),s,void 0,{placeholder:`Confirm ${t.title}`}),a=yield o;return(0,n.fg)(o,e,a)?a[0].item:n.Lt}async *renameCommandSteps(e,t){for(;this.canStepsContinue(e);){if(e.counter<3||null==e.reference){let i=yield*(0,I.FF)(e,t,{stash:await this.container.git.getStash(e.repo.path),placeholder:(t,i)=>null==i?`No stashes found in ${e.repo.formattedName}`:"Choose a stash to rename",picked:e.reference?.ref});if(i===n.Lt)break;e.reference=i}if(e.counter<4||null==e.message){let i=yield*this.renameCommandInputMessageStep(e,t);if(i===n.Lt)continue;e.message=i}if(!this.confirm(e.confirm)||(yield*this.renameCommandConfirmStep(e,t))!==n.Lt){(0,n.nH)(e);try{await e.repo.stashRename(e.reference.name,e.reference.ref,e.message,e.reference.stashOnRef)}catch(e){N.Vy.error(e,t.title),(0,M.qQ)(e.message)}}}}async *renameCommandInputMessageStep(e,t){let i=(0,n.TX)({title:(0,I.Zr)(t.title,e,t),placeholder:`Please provide a new message for ${(0,D.M4)(e.reference,{icon:!1})}`,value:e.message??e.reference?.message,prompt:"Enter new stash message"}),r=yield i;return(0,n.wc)(i,e,r)&&await (0,n.Ss)(i,e,r)?r:n.Lt}*renameCommandConfirmStep(e,t){let i=this.createConfirmStep((0,I.Zr)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will rename ${(0,D.M4)(e.reference)}`,item:e.subcommand}],void 0,{placeholder:`Confirm ${t.title}`,additionalButtons:[o.kk,o.yi],onDidClickButton:(t,i)=>{i===o.kk?(0,es.JX)(e.reference,{pin:!1,preserveFocus:!0}):i===o.yi&&(0,es._c)(e.reference,{select:!0,expand:!0})}}),r=yield i;return(0,n.fg)(i,e,r)?r[0].item:n.Lt}};let StatusGitCommand=class StatusGitCommand extends n.d6{constructor(e,t){super(e,"status","status","Status",{description:"shows status information about a repository"});let i=0;t?.state?.repo!=null&&i++,this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,status:void 0,title:this.title},i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo){if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,I.UA)(e,t);if(i===n.Lt)break;e.repo=i}}if(t.status=await e.repo.getStatus(),null==t.status)return;t.title=`${this.title}${(0,p.eV)(a.EO.Dot,2,2)}${(0,D.M4)((0,D.kA)(t.status.branch,e.repo.path,{refType:"branch",name:t.status.branch,remote:!1,upstream:t.status.upstream}),{icon:!1})}`;let r=yield*(0,I.cf)(e,t);if(r===n.Lt){i&&e.counter--;continue}if(r instanceof er.DT){let t=yield*r.executeSteps(this.pickedVia);e.counter--,t===n.Lt&&(0,n.nH)(e);continue}if(r instanceof l.Fj){(0,n.nH)(e),r.execute();break}}}};let SwitchGitCommand=class SwitchGitCommand extends n.d6{constructor(e,t){super(e,"switch","switch","Switch to...",{description:"aka checkout, switches to a specified branch"});let i=0;t?.state?.repos!=null&&(!Array.isArray(t.state.repos)||0!==t.state.repos.length)&&i++,t?.state?.reference!=null&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}_canConfirmOverride;get canConfirm(){return this._canConfirmOverride??!0}async execute(e){await r.window.withProgress({location:r.ProgressLocation.Notification,title:`Switching ${1===e.repos.length?e.repos[0].formattedName:`${e.repos.length} repos`} to ${e.reference.name}`},()=>Promise.all(e.repos.map(t=>t.switch(e.reference.ref,{createBranch:e.createBranch,progress:!1})))),null!=e.fastForwardTo&&e.repos[0].merge("--ff-only",e.fastForwardTo.ref)}isMatch(e){return super.isMatch(e)||"checkout"===e}isFuzzyMatch(e){return super.isFuzzyMatch(e)||"checkout"===e}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,canSwitchToLocalBranch:void 0,promptToCreateBranch:!1,showTags:!1,title:this.title};null==e.repos||Array.isArray(e.repos)||(e.repos=[e.repos]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repos||0===e.repos.length||(0,x.Bo)(e.repos)){if(i=!1,1===t.repos.length)i=!0,null==e.repos&&e.counter++,e.repos=[t.repos[0]];else{let i=yield*(0,I.g0)(e,t,{skipIfPossible:e.counter>=1});if(i===n.Lt)break;e.repos=i}}if(e.counter<2||null==e.reference){let r=yield*(0,I.uV)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to switch to`,allowCreate:1===e.repos.length});if(r===n.Lt){i&&e.counter--;continue}if("string"==typeof r){yield*em(this.container,{command:"branch",state:{subcommand:"create",repo:e.repos[0],name:r,suggestNameOnly:!0,flags:["--switch"]}},this.pickedVia),(0,n.nH)(e);return}if((0,n.h8)(r)){(0,c.RS)(r.command),(0,n.nH)(e);return}e.reference=r}if(t.canSwitchToLocalBranch=void 0,(0,D.gC)(e.reference)&&!e.reference.remote){e.createBranch=void 0;let t=await this.container.git.getWorktree(e.reference.repoPath,t=>t.branch?.name===e.reference.name);if(null!=t&&!t.main){if(null!=e.fastForwardTo&&e.repos[0].merge("--ff-only",e.fastForwardTo.ref),(yield*em(this.container,{command:"worktree",state:{subcommand:"open",worktree:t,openOnly:!0,overrides:{disallowBack:!0,confirmation:{title:`Confirm Switch to Worktree \u2022 ${(0,D.M4)(e.reference,{icon:!1,label:!1})}`,placeholder:`${(0,D.M4)(e.reference,{capitalize:!0,icon:!1})} is linked to a worktree`}},repo:e.repos[0]}},this.pickedVia))===n.Lt)continue;(0,n.nH)(e);return}}else if((0,D.gC)(e.reference)&&e.reference.remote){let{values:i}=await this.container.git.getBranches(e.reference.repoPath,{filter:t=>t.upstream?.name===e.reference.name,sort:{orderBy:"date:desc"}});i.length?(t.canSwitchToLocalBranch=i[0],e.createBranch=void 0,t.promptToCreateBranch=!1):t.promptToCreateBranch=!0}if(this.confirm(!!t.promptToCreateBranch||!!t.canSwitchToLocalBranch||e.confirm)){let i=yield*this.confirmStep(e,t);if(i===n.Lt)continue;switch(i){case"switchToLocalBranch":e.reference=t.canSwitchToLocalBranch;continue;case"switchToLocalBranchAndFastForward":e.fastForwardTo=e.reference,e.reference=t.canSwitchToLocalBranch;continue;case"switchToNewBranch":{t.title="Switch to New Branch",this._canConfirmOverride=!1;let i=yield*(0,I.wS)(e,t,{titleContext:` from ${(0,D.M4)(e.reference,{capitalize:!0,icon:!1,label:"branch"!==e.reference.refType})}`,value:e.createBranch??(0,D.aJ)(e.reference)});if(this._canConfirmOverride=void 0,i===n.Lt)continue;e.createBranch=i;break}case"switchViaWorktree":case"switchToLocalBranchViaWorktree":case"switchToNewBranchViaWorktree":if((yield*em(this.container,{command:"worktree",state:{subcommand:"create",reference:"switchToLocalBranchViaWorktree"===i?t.canSwitchToLocalBranch:e.reference,createBranch:"switchToNewBranchViaWorktree"===i?e.createBranch:void 0,repo:e.repos[0]}},this.pickedVia))===n.Lt)continue;(0,n.nH)(e);return}}(0,n.nH)(e),this.execute(e)}return e.counter<0?n.Lt:void 0}*confirmStep(e,t){let i=(0,D.gC)(e.reference)&&!e.reference.remote,r=[];!e.createBranch&&(null!=t.canSwitchToLocalBranch?(r.push((0,l.uK)("Local")),r.push({label:"Switch to Local Branch",description:"",detail:`Will switch to local ${(0,D.M4)(t.canSwitchToLocalBranch)} for ${(0,D.M4)(e.reference)}`,item:"switchToLocalBranch"}),1===e.repos.length&&r.push({label:"Switch to Local Branch & Fast-Forward",description:"",detail:`Will switch to and fast-forward local ${(0,D.M4)(t.canSwitchToLocalBranch)}`,item:"switchToLocalBranchAndFastForward"})):i&&r.push({label:"Switch to Branch",description:"",detail:`Will switch to ${(0,D.M4)(e.reference)}${e.repos.length>1?` in ${e.repos.length} repos`:""}`,item:"switch"})),(!i||e.createBranch||t.promptToCreateBranch)&&(r.length&&r.push((0,l.uK)("Remote")),r.push({label:"Switch to New Local Branch",description:"",detail:`Will create and switch to a new local branch${e.createBranch?` named ${e.createBranch}`:""} from ${(0,D.M4)(e.reference)}${e.repos.length>1?` in ${e.repos.length} repos`:""}`,item:"switchToNewBranch"})),1===e.repos.length&&(r.length&&r.push((0,l.uK)("Worktree")),i?r.push({label:"Create Worktree for Branch...",description:"avoids modifying your working tree",detail:`Will create a new worktree for ${(0,D.M4)(e.reference)}`,item:"switchViaWorktree"}):e.createBranch||null==t.canSwitchToLocalBranch?r.push({label:"Create Worktree for New Local Branch...",description:"avoids modifying your working tree",detail:`Will create a new worktree for a new local branch${e.createBranch?` named ${e.createBranch}`:""} from ${(0,D.M4)(e.reference)}${e.repos.length>1?` in ${e.repos.length} repos`:""}`,item:"switchToNewBranchViaWorktree"}):r.push({label:"Create Worktree for Local Branch...",description:"avoids modifying your working tree",detail:`Will create a new worktree for local ${(0,D.M4)(t.canSwitchToLocalBranch)}`,item:"switchToLocalBranchViaWorktree"})),i||(r.length&&r.push((0,l.uK)()),(0,D.gC)(e.reference)?e.createBranch||r.push({label:"Checkout to Remote Branch",description:"(detached)",detail:`Will checkout to ${(0,D.M4)(e.reference)}`,item:"switch"}):r.push({label:`Checkout to ${(0,D.eN)(e.reference)}`,description:"(detached)",detail:`Will checkout to ${(0,D.M4)(e.reference)}${e.repos.length>1?` in ${e.repos.length} repos`:""}`,item:"switch"}));let s=this.createConfirmStep((0,I.Zr)(`Confirm Switch to ${(0,D.M4)(e.reference,{icon:!1,capitalize:!0})}`,e,t),r,void 0,{placeholder:`Confirm ${t.title}`}),o=yield s;return(0,n.fg)(s,e,o)?o[0].item:n.Lt}};let el=new Map([["create","Create"],["delete","Delete"]]);function eh(e,t){return null==t?e:`${el.get(t)} ${e}`}let TagGitCommand=class TagGitCommand extends n.d6{subcommand;constructor(e,t){super(e,"tag","tag","Tag",{description:"create, or delete tags"});let i=0;if(t?.state?.subcommand!=null)switch(i++,t.state.subcommand){case"create":null!=t.state.reference&&i++,null!=t.state.name&&i++,null!=t.state.message&&i++;break;case"delete":null!=t.state.references&&(!Array.isArray(t.state.references)||0!==t.state.references.length)&&i++}t?.state?.repo!=null&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand}get canSkipConfirm(){return"delete"!==this.subcommand&&super.canSkipConfirm}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.tagsView,showTags:!1,title:this.title},i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.subcommand){this.subcommand=void 0;let t=yield*this.pickSubcommandStep(e);if(t===n.Lt)break;e.subcommand=t}if(this.subcommand=e.subcommand,e.counter<2||null==e.repo||"string"==typeof e.repo){if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,I.UA)(e,t);if(i===n.Lt)continue;e.repo=i}}switch(t.title=eh("delete"===e.subcommand?"Tags":this.title,e.subcommand),e.subcommand){case"create":yield*this.createCommandSteps(e,t),e.name=void 0;break;case"delete":yield*this.deleteCommandSteps(e,t);break;default:(0,n.nH)(e)}i&&e.counter--}return e.counter<0?n.Lt:void 0}*pickSubcommandStep(e){let t=(0,n.Ac)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"create",description:"creates a new tag",picked:"create"===e.subcommand,item:"create"},{label:"delete",description:"deletes the specified tags",picked:"delete"===e.subcommand,item:"delete"}],buttons:[r.QuickInputButtons.Back]}),i=yield t;return(0,n.fg)(t,e,i)?i[0].item:n.Lt}async *createCommandSteps(e,t){for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.reference){let i=yield*(0,I.Re)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to create the new tag from`,picked:e.reference?.ref??(await e.repo.getBranch())?.ref,titleContext:" from",value:(0,D.bv)(e.reference)?e.reference.ref:void 0});if(i===n.Lt)break;e.reference=i}if(e.counter<4||null==e.name){let i=yield*(0,I.c1)(e,t,{placeholder:"Please provide a name for the new tag",titleContext:` at ${(0,D.M4)(e.reference,{capitalize:!0,icon:!1})}`,value:e.name??(0,D.aJ)(e.reference)});if(i===n.Lt)continue;e.name=i}if(e.counter<5||null==e.message){let i=yield*this.createCommandInputMessageStep(e,t);if(i===n.Lt)continue;e.message=i}if(0===e.message.length||e.flags.includes("-m")||e.flags.push("-m"),this.confirm(e.confirm)){let i=yield*this.createCommandConfirmStep(e,t);if(i===n.Lt)continue;e.flags=i}(0,n.nH)(e),e.repo.tag(...e.flags,...0!==e.message.length?[`"${e.message}"`]:[],e.name,e.reference.ref)}}async *createCommandInputMessageStep(e,t){let i=(0,n.TX)({title:(0,I.Zr)(`${t.title} at ${(0,D.M4)(e.reference,{capitalize:!0,icon:!1})}`,e,t),placeholder:"Please provide an optional message to annotate the tag",value:e.message,prompt:"Enter optional message"}),r=yield i;return(0,n.wc)(i,e,r)&&await (0,n.Ss)(i,e,r)?r:n.Lt}*createCommandConfirmStep(e,t){let i=(0,n.VW)((0,I.Zr)(`Confirm ${t.title}`,e,t),[_(e.flags,0!==e.message.length?["-m"]:[],{label:t.title,description:0!==e.message.length?"-m":"",detail:`Will create a new tag named ${e.name} at ${(0,D.M4)(e.reference)}`}),_(e.flags,0!==e.message.length?["--force","-m"]:["--force"],{label:`Force ${t.title}`,description:`--force${0!==e.message.length?" -m":""}`,detail:`Will forcibly create a new tag named ${e.name} at ${(0,D.M4)(e.reference)}`})],t),r=yield i;return(0,n.fg)(i,e,r)?r[0].item:n.Lt}*deleteCommandSteps(e,t){for(;this.canStepsContinue(e);){if(null==e.references||Array.isArray(e.references)||(e.references=[e.references]),e.counter<3||null==e.references||0===e.references.length){t.title=eh("Tags",e.subcommand);let i=yield*(0,I.RX)(e,t,{picked:e.references?.map(e=>e.ref),placeholder:"Choose tags to delete"});if(i===n.Lt)break;e.references=i}t.title=eh((0,p.td)("Tag",e.references.length,{only:!0}),e.subcommand),(yield*this.deleteCommandConfirmStep(e,t))!==n.Lt&&((0,n.nH)(e),e.repo.tagDelete(e.references))}}*deleteCommandConfirmStep(e,t){let i=(0,n.VW)((0,I.Zr)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will delete ${(0,D.M4)(e.references)}`}],t),r=yield i;return(0,n.fg)(i,e,r)?void 0:n.Lt}};var ec=i(8803),eu=i(8880),ed=i(5313);let ep=new Map([[void 0,`Worktrees ${a.tM}`],["create","Create Worktree"],["delete","Delete Worktrees"],["open","Open Worktree"],["copy-changes","Copy Changes to"]]);function eg(e,t){return`${ep.get(e)}${t??""}`}let WorktreeGitCommand=class WorktreeGitCommand extends n.d6{subcommand;constructor(e,t){super(e,"worktree","worktree",`Worktrees ${a.tM}`,{description:`${a.lD}\xa0\xA0open, create, or delete worktrees`});let i=0;if(t?.state?.subcommand!=null)switch(i++,t.state.subcommand){case"create":null!=t.state.uri&&i++,null!=t.state.reference&&i++;break;case"delete":null!=t.state.uris&&(!Array.isArray(t.state.uris)||0!==t.state.uris.length)&&i++;break;case"open":case"copy-changes":null!=t.state.worktree&&i++}t?.state?.repo!=null&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand}_canSkipConfirmOverride;get canSkipConfirm(){return this._canSkipConfirmOverride??"open"===this.subcommand}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.worktreesView,showTags:!1,title:this.title},i=!1;for(;this.canStepsContinue(e);){if(t.title=e.overrides?.title??this.title,e.counter<1||null==e.subcommand){this.subcommand=void 0;let t=yield*this.pickSubcommandStep(e);if(t===n.Lt)break;e.subcommand=t}if(this.subcommand=e.subcommand,t.title=e.overrides?.title??eg(e.subcommand),e.counter<2||null==e.repo||"string"==typeof e.repo){if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,I.UA)(e,t);if(i===n.Lt)continue;e.repo=i}}if("copy-changes"!==e.subcommand&&(e.repo=await e.repo.getCommonRepository()??e.repo),!function(e){if(null==e.repo||"string"==typeof e.repo)throw Error("Missing repository")}(e),(yield*(0,I.jg)(e,t,W.k.Worktrees))!==n.Lt){switch(e.subcommand){case"create":yield*this.createCommandSteps(e,t),e.uri=void 0;break;case"delete":null==e.uris||Array.isArray(e.uris)||(e.uris=[e.uris]),yield*this.deleteCommandSteps(e,t);break;case"open":yield*this.openCommandSteps(e,t);break;case"copy-changes":yield*this.copyChangesCommandSteps(e,t);break;default:(0,n.nH)(e)}i&&e.counter--}}return e.counter<0?n.Lt:void 0}*pickSubcommandStep(e){let t=(0,n.Ac)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"open",description:"opens the specified worktree",picked:"open"===e.subcommand,item:"open"},{label:"create",description:"creates a new worktree",picked:"create"===e.subcommand,item:"create"},{label:"delete",description:"deletes the specified worktrees",picked:"delete"===e.subcommand,item:"delete"}],buttons:[r.QuickInputButtons.Back]}),i=yield t;return(0,n.fg)(t,e,i)?i[0].item:n.Lt}async *createCommandSteps(e,t){for(null==t.defaultUri&&(t.defaultUri=await e.repo.getWorktreesDefaultUri()),null==e.flags&&(e.flags=[]),t.pickedRootFolder=void 0,t.pickedSpecificFolder=void 0,e.confirm=!0,this._canSkipConfirmOverride=void 0;this.canStepsContinue(e);){let i;if(e.counter<3||null==e.reference){let i=yield*(0,I.Re)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to create the new worktree for`,picked:e.reference?.ref??(await e.repo.getBranch())?.ref,titleContext:" for",value:(0,D.bv)(e.reference)?e.reference.ref:void 0});if(i===n.Lt)break;e.reference=i}if(null==e.uri&&(e.uri=t.defaultUri),this.confirm(e.confirm)){let i=yield*this.createCommandConfirmStep(e,t);if(i===n.Lt)continue;if("string"==typeof i[0])switch(i[0]){case"changeRoot":{let i=yield*this.createCommandChoosePathStep(e,t,{title:"Choose a Different Root Folder for this Worktree",label:"Choose Root Folder",pickedUri:t.pickedRootFolder,defaultUri:t.pickedRootFolder??t.defaultUri});if(i===n.Lt)continue;e.uri=i,t.pickedRootFolder=e.uri,t.pickedSpecificFolder=void 0;continue}case"chooseFolder":{let i=yield*this.createCommandChoosePathStep(e,t,{title:"Choose a Specific Folder for this Worktree",label:"Choose Worktree Folder",pickedUri:t.pickedRootFolder,defaultUri:t.pickedSpecificFolder??t.defaultUri});if(i===n.Lt)continue;e.uri=i,t.pickedRootFolder=void 0,t.pickedSpecificFolder=e.uri;continue}}[e.uri,e.flags]=i}if(e.confirm=!0,this._canSkipConfirmOverride=void 0,e.reference?.refType==="branch"&&e.reference?.remote&&!e.flags.includes("-b")&&(e.flags.push("-b"),e.createBranch=(0,D.aJ)(e.reference),null!=await e.repo.getBranch(e.createBranch)&&(e.createBranch=e.reference.name)),e.flags.includes("-b")){let i;if(null!=e.createBranch){let t=await this.container.git.validateBranchOrTagName(e.repo.path,e.createBranch);t&&(t=null==await e.repo.getBranch(e.createBranch)),t||(i=e.createBranch,e.createBranch=void 0)}if(null==e.createBranch){let r=yield*(0,I.wS)(e,t,{titleContext:` and New Branch from ${(0,D.M4)(e.reference,{capitalize:!0,icon:!1,label:"branch"!==e.reference.refType})}`,value:i??e.createBranch??(0,D.aJ)(e.reference)});if(r===n.Lt){e.flags=[];continue}e.createBranch=r}}let s=e.flags.includes("--direct")?e.uri:r.Uri.joinPath(e.uri,...(e.createBranch??e.reference.name).replace(/\\/g,"/").split("/"));try{null!=e.addRemote&&await e.repo.addRemote(e.addRemote.name,e.addRemote.url,{fetch:!0}),i=await e.repo.createWorktree(s,{commitish:e.reference?.name,createBranch:e.flags.includes("-b")?e.createBranch:void 0,detach:e.flags.includes("--detach"),force:e.flags.includes("--force")}),e.result?.fulfill(i)}catch(t){if(en.iX.is(t,en.O7.AlreadyCheckedOut)&&!e.flags.includes("--force")){let t={title:"Create New Branch"},i={title:"Create Anyway"},s={title:"Cancel",isCloseAffordance:!0},n=await r.window.showWarningMessage(`Unable to create the new worktree because ${(0,D.M4)(e.reference,{icon:!1,quoted:!0})} is already checked out.

Would you like to create a new branch for this worktree or forcibly create it anyway?`,{modal:!0},t,i,s);if(n===t){e.flags.push("-b"),this._canSkipConfirmOverride=!0,e.confirm=!1;continue}if(n===i){e.flags.push("--force"),this._canSkipConfirmOverride=!0,e.confirm=!1;continue}}else if(en.iX.is(t,en.O7.AlreadyExists)){let e={title:"OK"},t={title:"Open Folder"};r.window.showErrorMessage(`Unable to create a new worktree in '${(0,g.kZ)(s)}' because the folder already exists and is not empty.`,e,t).then(e=>{e===t&&(0,g.mP)(s)})}else(0,M.qQ)(`Unable to create a new worktree in '${(0,g.kZ)(s)}.`)}if((0,n.nH)(e),null==i)break;!1!==e.reveal&&setTimeout(()=>{this.container.worktreesView.visible&&(0,eu._c)(i,{select:!0,focus:!1})},100);let o=A.H.get("worktrees.openAfterCreate");if("never"!==o){let s;switch(o){case"always":s=(0,eu.F8)("currentWindow");break;case"alwaysNewWindow":s=(0,eu.F8)("newWindow");break;case"onlyWhenEmpty":s=(0,eu.F8)(r.workspace.workspaceFolders?.length?"newWindow":"currentWindow");break;default:s=[]}yield*this.openCommandSteps({subcommand:"open",repo:e.repo,worktree:i,flags:s,counter:3,confirm:"prompt"===o,openOnly:!0,overrides:{disallowBack:!0}},t)}}}*createCommandChoosePathStep(e,t,i){let s=(0,n.CO)({show:async s=>{let n=await r.window.showOpenDialog({canSelectFiles:!1,canSelectFolders:!0,canSelectMany:!1,defaultUri:i.pickedUri??e.uri??t.defaultUri,openLabel:i.label,title:i.title});return null==n||0===n.length?h.WL.Back:n[0]}}),o=yield s;return(0,n.wc)(s,e,o)?o:n.Lt}*createCommandConfirmStep(e,t){let i,s=!1;null!=t.pickedSpecificFolder&&(s=!0);let o=t.pickedSpecificFolder??t.pickedRootFolder??e.uri,a=(0,p.Es)((0,g.kZ)(o),60),h=e.repo.uri,c=`${(0,O.P8)(h.path)}.worktrees`;h.toString()!==o.toString()?i=(0,O.K9)(o,h)?r.Uri.joinPath(h,"..",c):(0,O.P8)(o.path)===c?o:r.Uri.joinPath(o,c):(i=r.Uri.joinPath(h,"..",c),s=!1);let u=null!=e.reference?(0,D.aJ)(e.reference):void 0,d=`<root>/${(0,p.Es)(`${c}/${u?.replace(/\\/g,"/")??""}`,65)}`,m=`<root>/${c}/${e.createBranch||"<new-branch-name>"}`,f=(0,D.gC)(e.reference),w=(0,D.gC)(e.reference)&&e.reference?.remote,v=[];s?(e.createBranch||v.push(_(e.flags,["--direct"],{label:w?"Create Worktree for Local Branch":f?"Create Worktree for Branch":t.title,description:"",detail:`Will create worktree directly in $(folder) ${(0,p.Es)(a,60)}`},o)),v.push(_(e.flags,["-b","--direct"],{label:w?"Create Worktree for New Local Branch":"Create Worktree for New Branch",description:"",detail:`Will create worktree directly in $(folder) ${(0,p.Es)(a,60)}`},o))):(e.createBranch||v.push(_(e.flags,[],{label:w?"Create Worktree for New Local Branch":f?"Create Worktree for Branch":t.title,description:"",detail:`Will create worktree in $(folder) ${d}`},i)),v.push(_(e.flags,["-b"],{label:w?"Create Worktree for New Local Branch Named...":"Create Worktree for New Branch Named...",description:"",detail:`Will create worktree in $(folder) ${m}`},i))),s||v.push((0,l.uK)(),_([],[],{label:"Change Root Folder...",description:`$(folder) ${(0,p.Es)(a,65)}`,picked:!1},"changeRoot")),v.push(_([],[],{label:"Choose a Specific Folder...",description:"",picked:!1},"chooseFolder"));let y=(0,n.VW)((0,I.Zr)(`Confirm ${t.title} \u2022 ${e.createBranch||(0,D.M4)(e.reference,{icon:!1,label:!1})}`,e,t),v,t),b=yield y;return(0,n.fg)(y,e,b)?[b[0].context,b[0].item]:n.Lt}async *deleteCommandSteps(e,t){for(t.worktrees=await e.repo.getWorktrees(),null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.uris||0===e.uris.length){t.title=eg(e.subcommand);let i=yield*(0,I.sL)(e,t,{filter:e=>!e.main||!e.opened,includeStatus:!0,picked:e.uris?.map(e=>e.toString()),placeholder:"Choose worktrees to delete"});if(i===n.Lt)break;e.uris=i.map(e=>e.uri)}t.title=eg(e.subcommand);let i=yield*this.deleteCommandConfirmStep(e,t);if(i!==n.Lt)for(let s of(e.flags=i,(0,n.nH)(e),e.uris)){let i=!1;do{i=!1;let n=e.flags.includes("--force");try{if(n){let e;let i=t.worktrees.find(e=>e.uri.toString()===s.toString());try{e=await i?.getStatus()}catch{}if(e?.hasChanges){let e={title:"Force Delete"},t={title:"Cancel",isCloseAffordance:!0};if(await r.window.showWarningMessage(`The worktree in '${s.fsPath}' has uncommitted changes.

Deleting it will cause those changes to be FOREVER LOST.
This is IRREVERSIBLE!

Are you sure you still want to delete it?`,{modal:!0},e,t)!==e)return}}await e.repo.deleteWorktree(s,{force:n})}catch(t){if(en.N$.is(t)){if(t.reason===en.z2.MainWorkingTree)r.window.showErrorMessage("Unable to delete the main worktree");else if(!n){let n={title:"Force Delete"},o={title:"Cancel",isCloseAffordance:!0};await r.window.showErrorMessage(t.reason===en.z2.HasChanges?`Unable to delete worktree because there are UNCOMMITTED changes in '${s.fsPath}'.

Forcibly deleting it will cause those changes to be FOREVER LOST.
This is IRREVERSIBLE!

Would you like to forcibly delete it?`:`Unable to delete worktree in '${s.fsPath}'.

Would you like to try to forcibly delete it?`,{modal:!0},n,o)===n&&(e.flags.push("--force"),i=!0)}}else(0,M.qQ)(`Unable to delete worktree in '${s.fsPath}.`)}}while(i)}}}*deleteCommandConfirmStep(e,t){let i=(0,n.VW)((0,I.Zr)(`Confirm ${t.title}`,e,t),[_(e.flags,[],{label:t.title,detail:`Will delete ${(0,p.td)("worktree",e.uris.length,{only:1===e.uris.length})}${1===e.uris.length?` in $(folder) ${(0,g.kZ)(e.uris[0])}`:""}`}),_(e.flags,["--force"],{label:`Force ${t.title}`,description:"including ANY UNCOMMITTED changes",detail:`Will forcibly delete ${(0,p.td)("worktree",e.uris.length,{only:1===e.uris.length})} ${1===e.uris.length?` in $(folder) ${(0,g.kZ)(e.uris[0])}`:""}`})],t),r=yield i;return(0,n.fg)(i,e,r)?r[0].item:n.Lt}async *openCommandSteps(e,t){for(null==e.flags&&(e.flags=[]),this._canSkipConfirmOverride=!0;this.canStepsContinue(e);){if(e.counter<3||null==e.worktree){t.title=eg(e.subcommand),t.worktrees??=await e.repo.getWorktrees();let i=yield*(0,I.l7)(e,t,{excludeOpened:!0,includeStatus:!0,picked:e.worktree?.uri?.toString(),placeholder:"Choose worktree to open"});if(i===n.Lt)break;e.worktree=i}if(t.title=eg(e.subcommand,` \u2022 ${e.worktree.name}`),this.confirm(e.confirm)){let i=yield*this.openCommandConfirmStep(e,t);if(i===n.Lt)continue;e.flags=i}if((0,n.nH)(e),e.flags.includes("--reveal-explorer"))(0,g.mP)(e.worktree.uri);else{let t;let i=await e.repo.getCommonRepository()??e.repo;t=i.name!==e.worktree.name?`${i.name}: ${e.worktree.name}`:e.worktree.name,(0,g.OH)(e.worktree.uri,{location:(0,eu.VO)(e.flags),name:t})}}}*openCommandConfirmStep(e,t){let i=[_(e.flags,[],{label:"Open Worktree",detail:"Will open the worktree in the current window"}),_(e.flags,["--new-window"],{label:"Open Worktree in a New Window",detail:"Will open the worktree in a new window"}),_(e.flags,["--add-to-workspace"],{label:"Add Worktree to Workspace",detail:"Will add the worktree into the current workspace"})];e.openOnly||i.push((0,l.uK)(),_(e.flags,["--reveal-explorer"],{label:"Reveal in File Explorer",description:`$(folder) ${(0,p.Es)((0,g.kZ)(e.worktree.uri),40)}`,detail:"Will open the worktree in the File Explorer"}));let r=(0,n.VW)((0,I.Zr)(e.overrides?.confirmation?.title??`Confirm ${t.title}`,e,t),i,t,void 0,{disallowBack:e.overrides?.disallowBack,placeholder:e.overrides?.confirmation?.placeholder??"Confirm Open Worktree"}),s=yield r;return(0,n.fg)(r,e,s)?s[0].item:n.Lt}async *copyChangesCommandSteps(e,t){for(;this.canStepsContinue(e);){if(t.title=e?.overrides?.title??eg(e.subcommand),e.counter<3||null==e.worktree){let i;switch(t.worktrees??=await e.repo.getWorktrees(),e.changes.type){case"index":i="Choose a worktree to copy your staged changes to";break;case"working-tree":i="Choose a worktree to copy your working changes to";break;default:i="Choose a worktree to copy changes to"}let r=yield*(0,I.l7)(e,t,{excludeOpened:!0,includeStatus:!0,picked:e.worktree?.uri?.toString(),placeholder:i});if(r===n.Lt)break;e.worktree=r}if(!e.changes.contents||!e.changes.baseSha){let t=await this.container.git.getDiff(e.repo.uri,"index"===e.changes.type?ed.id:ed.SU,"HEAD");if(!t?.contents){r.window.showErrorMessage("No changes to copy"),(0,n.nH)(e);break}e.changes.contents=t.contents,e.changes.baseSha=t.from}if(!(0,D.HH)(e.changes.baseSha)){let t=await this.container.git.getCommit(e.repo.uri,e.changes.baseSha);null!=t&&(e.changes.baseSha=t.sha)}if(!this.confirm(e.confirm)||(yield*this.copyChangesCommandConfirmStep(e,t))!==n.Lt){(0,n.nH)(e);try{let t=await this.container.git.createUnreachableCommitForPatch(e.worktree.uri,e.changes.contents,e.changes.baseSha,"Copied Changes");if(null==t)return;await this.container.git.applyUnreachableCommitForPatch(e.worktree.uri,t.sha,{stash:!1}),r.window.showInformationMessage("Changes copied successfully")}catch(e){if(e instanceof ec.AL)return;if(e instanceof en.ol){if(e.reason===en.a_.AppliedWithConflicts)r.window.showWarningMessage("Changes copied with conflicts");else if(e.reason===en.a_.ApplyAbortedWouldOverwrite){r.window.showErrorMessage("Unable to copy changes as some local changes would be overwritten");return}else{r.window.showErrorMessage(`Unable to copy changes: ${e.message}`);return}}else{r.window.showErrorMessage(`Unable to copy changes: ${e.message}`);return}}yield*this.openCommandSteps({subcommand:"open",repo:e.repo,worktree:e.worktree,flags:[],counter:3,confirm:!0,openOnly:!0,overrides:{disallowBack:!0}},t)}}}async *copyChangesCommandConfirmStep(e,t){let i=await this.container.git.getDiffFiles(e.repo.uri,e.changes.contents),r=i?.files.length??0,s=[];switch(e.changes.type){case"index":s.push({label:"Copy Staged Changes to Worktree",detail:`Will copy the staged changes${r>0?` (${(0,p.td)("file",r)})`:""} to worktree '${e.worktree.name}'`});break;case"working-tree":s.push({label:"Copy Working Changes to Worktree",detail:`Will copy the working changes${r>0?` (${(0,p.td)("file",r)})`:""} to worktree '${e.worktree.name}'`});break;default:s.push(_([],[],{label:"Copy Changes to Worktree",detail:`Will copy the changes${r>0?` (${(0,p.td)("file",r)})`:""} to worktree '${e.worktree.name}'`}))}let o=(0,n.VW)(`Confirm ${t.title} \u2022 ${e.worktree.name}`,s,t),a=yield o;return(0,n.fg)(o,e,a)?void 0:n.Lt}};function em(e,t,i){let r=new PickCommandStep(e,t),s=r.find(t.command);return null==s?function*(){}():(r.setCommand(s,i),s.executeSteps())}let PickCommandStep=class PickCommandStep{constructor(e,t){this.container=e;let i=(0,k.SD)("gitlens:hasVirtualFolders",!1),r=i||(0,k.SD)("gitlens:readonly",!1)||(0,k.SD)("gitlens:untrusted",!1);if(this.items=[r?void 0:new BranchGitCommand(e,t?.command==="branch"?t:void 0),r?void 0:new CherryPickGitCommand(e,t?.command==="cherry-pick"?t:void 0),i?void 0:new CoAuthorsGitCommand(e,t?.command==="co-authors"?t:void 0),r?void 0:new FetchGitCommand(e,t?.command==="fetch"?t:void 0),new LogGitCommand(e,t?.command==="log"?t:void 0),r?void 0:new MergeGitCommand(e,t?.command==="merge"?t:void 0),r?void 0:new PullGitCommand(e,t?.command==="pull"?t:void 0),r?void 0:new PushGitCommand(e,t?.command==="push"?t:void 0),r?void 0:new RebaseGitCommand(e,t?.command==="rebase"?t:void 0),r?void 0:new RemoteGitCommand(e,t?.command==="remote"?t:void 0),r?void 0:new ResetGitCommand(e,t?.command==="reset"?t:void 0),r?void 0:new RevertGitCommand(e,t?.command==="revert"?t:void 0),new SearchGitCommand(e,t?.command==="search"||t?.command==="grep"?t:void 0),new ShowGitCommand(e,t?.command==="show"?t:void 0),i?void 0:new StashGitCommand(e,t?.command==="stash"?t:void 0),i?void 0:new StatusGitCommand(e,t?.command==="status"?t:void 0),r?void 0:new SwitchGitCommand(e,t?.command==="switch"||t?.command==="checkout"?t:void 0),r?void 0:new TagGitCommand(e,t?.command==="tag"?t:void 0),i?void 0:new WorktreeGitCommand(e,t?.command==="worktree"?t:void 0)].filter(e=>null!=e),"usage"===A.H.get("gitCommands.sortBy")){let e=this.container.storage.getWorkspace("gitComandPalette:usage");null!=e&&this.items.sort((t,i)=>(e[i.key]??0)-(e[t.key]??0))}this.hiddenItems=[new R(e,t?.command==="focus"?t:void 0,!0)]}type="pick";buttons=[];hiddenItems;ignoreFocusOut=!1;items;matchOnDescription=!0;placeholder="Choose a git command";title="GitLens";_command;get command(){return this._command}find(e,t=!1){if(t){let t=e.toLowerCase();return this.items.find(e=>e.isFuzzyMatch(t))??this.hiddenItems.find(e=>e.isFuzzyMatch(t))}return this.items.find(t=>t.isMatch(e))??this.hiddenItems.find(t=>t.isMatch(e))}setCommand(e,t){null!=this._command&&(this._command.picked=!1),null!=e&&(e.picked=!0,e.pickedVia=t),this._command=e,null!=e&&this.updateCommandUsage(e.key,Date.now())}async updateCommandUsage(e,t){let i=this.container.storage.getWorkspace("gitComandPalette:usage");void 0===i&&(i=Object.create(null)),i[e]=t,await this.container.storage.storeWorkspace("gitComandPalette:usage",i)}}},8911:(e,t,i)=>{i.d(t,{y:()=>g});var r=i(3807),s=i(7931),n=i(5313),o=i(2124),a=i(3536),l=i(6964),h=i(7899),c=i(3916),u=i(3900),d=Object.defineProperty,p=Object.getOwnPropertyDescriptor;let g=class extends u.Zr{constructor(e){super([r.Ts.OpenCommitOnRemote,r.Ts.Deprecated_OpenCommitInRemote,r.Ts.CopyRemoteCommitUrl]),this.container=e}static getMarkdownCommandArgs(e){return super.getMarkdownCommandArgsCore(r.Ts.OpenCommitOnRemote,"string"==typeof e?{sha:e}:e)}preExecute(e,t){let i=e.uri;if("editorLine"===e.type&&(t={...t,line:e.line}),(0,u.j7)(e)){if(e.node.commit.isUncommitted)return Promise.resolve(void 0);t={...t,sha:e.node.commit.sha},i=e.node.uri}return(0,u.Bp)(e)&&(t={sha:e.item.ref},i=e.uri),e.command===r.Ts.CopyRemoteCommitUrl&&(t={...t,clipboard:!0}),this.execute(e.editor,i,t)}async execute(e,t,i){let d=null!=(t=(0,u.qx)(t,e))?await s.nk.fromUri(t):void 0,p=(await l.X(d,e,i?.clipboard?"Copy Remote Commit URL":"Open Commit On Remote"))?.path;if(p){null==d&&(d=s.nk.fromRepoPath(p)),i={...i};try{if(null==i.sha){let t=i.line??e?.selection.active.line;if(null==t)return;let r=await this.container.git.getBlameForLine(d,t,e?.document);if(null==r){(0,a.gD)("Unable to open commit on remote provider");return}i.sha=r.commit.isUncommitted?await r.commit.getPreviousSha()??n.nB:r.commit.sha}await (0,h.RS)(r.Ts.OpenOnRemote,{resource:{type:o.J.Commit,sha:i.sha},repoPath:p,clipboard:i.clipboard})}catch(e){c.Vy.error(e,"OpenCommitOnRemoteCommand"),(0,a.qQ)("Unable to open commit on remote provider")}}}};g=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?p(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&d(t,i,n),n})([(0,h.G5)()],g)},5283:(e,t,i)=>{i.d(t,{E:()=>y});var r=i(1398),s=i(3807),n=i(9432),o=i(7931),a=i(6645),l=i(3536),h=i(6169),c=i(1270),u=i(2362),d=i(7899),p=i(3916),g=i(4911),m=i(7279),f=i(3900),w=Object.defineProperty,v=Object.getOwnPropertyDescriptor;let y=class extends f.Zr{constructor(e){super([s.Ts.OpenFileAtRevision,s.Ts.OpenBlamePriorToChange]),this.container=e}static getMarkdownCommandArgs(e,t,i){let n;return n=e instanceof r.Uri?{revisionUri:e,line:i,annotationType:t}:e,super.getMarkdownCommandArgsCore(s.Ts.OpenFileAtRevision,n)}async preExecute(e,t){if(e.command===s.Ts.OpenBlamePriorToChange){if(null==(t={...t,annotationType:"blame"}).revisionUri&&null!=e.editor){let i=e.editor.selection.active.line;if(i>=0)try{let r=await o.nk.fromUri(e.editor.document.uri),s=await this.container.git.getBlameForLine(r,i);if(null!=s){if(s.commit.isUncommitted){let e=await s.commit.getPreviousComparisonUrisForLine(i);if(e?.previous!=null)t.revisionUri=this.container.git.getRevisionUri(e.previous);else{(0,l.pR)(s.commit);return}}else{let e=null!=s?await s?.commit.getPreviousSha():void 0;if(null!=e)t.revisionUri=this.container.git.getRevisionUri(s.commit.getGitUri(!0));else{(0,l.pR)(s.commit);return}}}}catch(e){p.Vy.error(e,"OpenBlamePriorToChangeCommand")}}if(null==t.revisionUri){(0,l.qQ)("Unable to open blame");return}}return this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null==(t=(0,f.qx)(t,e)))return;let r=await o.nk.fromUri(t);null==(i={...i}).line&&(i.line=e?.selection.active.line??0);try{if(null==i.revisionUri){let e=this.container.git.getLogForFile(r.repoPath,r.fsPath).then(e=>e??(r.sha?this.container.git.getLogForFile(r.repoPath,r.fsPath,{ref:r.sha}):void 0)),o=`Open ${"blame"===i.annotationType?"Blame":"File"} at Revision${(0,m.eV)(s.EO.Dot,2,2)}`,l=`${o}${r.getFormattedFileName({suffix:r.sha?`:${(0,a.pV)(r.sha)}`:void 0,truncateTo:s.uR-o.length})}`,d=await (0,h.X)(e,l,`Choose a commit to ${"blame"===i.annotationType?"blame":"open"} the file revision from`,{empty:r.sha?void 0:{getState:async()=>{let e,t;let i=[],n=await this.container.git.getStatusForRepo(r.repoPath);if(null!=n)for(let e of n.files){if("?"===e.workingTreeStatus||"!"===e.workingTreeStatus)continue;let[t,n]=(0,g.Uf)(e.path,void 0,!0);i.push(new c.Fj({label:t,description:n},void 0,s.Ts.OpenFileAtRevision,[this.container.git.getAbsoluteUri(e.path,r.repoPath)]))}return i.length?(e=`${r.getFormattedFileName()} is likely untracked, choose a different file?`,t=`${l} (Untracked?)`):e="No commits found",i.push((0,u.Du)(u.WL.Cancel,void 0,{label:i.length?"Cancel":"OK"})),{items:i,placeholder:e,title:t}}},picked:r.sha,keyboard:{keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{await (0,n.vM)(t.item.file,t.item,{annotationType:i.annotationType,line:i.line,preserveFocus:!0,preview:!0})}},showOtherReferences:[c.Fj.fromCommand("Choose a Branch or Tag...",s.Ts.OpenFileAtRevisionFrom,[t]),c.Fj.fromCommand("Choose a Stash...",s.Ts.OpenFileAtRevisionFrom,[t,{stash:!0}])]});if(d?.file==null)return;await (0,n.vM)(d.file,d,{annotationType:i.annotationType,line:i.line,...i.showOptions});return}await (0,n.vM)(i.revisionUri,{annotationType:i.annotationType,line:i.line,...i.showOptions})}catch(e){p.Vy.error(e,"OpenFileAtRevisionCommand"),(0,l.qQ)("Unable to open file at revision")}}};y=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?v(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&w(t,i,n),n})([(0,d.G5)()],y)},5854:(e,t,i)=>{i.d(t,{$o:()=>k,F7:()=>v,FF:()=>o,II:()=>m,K0:()=>ToggleQuickInputButton,KD:()=>C,M_:()=>g,NA:()=>S,Q8:()=>T,S:()=>c,TR:()=>l,UM:()=>_,UO:()=>E,V3:()=>$,XS:()=>h,Zo:()=>y,g0:()=>w,ig:()=>d,kk:()=>D,lA:()=>R,m:()=>p,re:()=>f,tH:()=>n,w7:()=>u,wt:()=>b,xU:()=>P,y2:()=>I,yi:()=>A,yn:()=>a});var r=i(1398),s=i(2972);let ToggleQuickInputButton=class ToggleQuickInputButton{constructor(e,t=!1){this.state=e,this._on=t}get iconPath(){let e=this.getToggledState().icon;return"string"==typeof e?{dark:r.Uri.file(s.m.instance.context.asAbsolutePath(`images/dark/${e}.svg`)),light:r.Uri.file(s.m.instance.context.asAbsolutePath(`images/light/${e}.svg`))}:e}get tooltip(){return this.getToggledState().tooltip}get on(){return this._on}set on(e){this._on=e}getState(){return"function"==typeof this.state?this.state():this.state}getToggledState(){return this.on?this.getState().on:this.getState().off}};let SelectableQuickInputButton=class SelectableQuickInputButton extends ToggleQuickInputButton{constructor(e,t,i=!1){super({off:{tooltip:e,icon:t.off},on:{tooltip:e,icon:t.on}},i)}};let n={iconPath:new r.ThemeIcon("clear-all"),tooltip:"Clear"},o={iconPath:new r.ThemeIcon("feedback"),tooltip:"Give Us Feedback"},a={iconPath:new r.ThemeIcon("gitlens-repo-fetch"),tooltip:"Fetch"},l={iconPath:new r.ThemeIcon("refresh"),tooltip:"Load More"},h=class extends SelectableQuickInputButton{constructor(e=!1){super("Match Case",{off:"icon-match-case",on:"icon-match-case-selected"},e)}},c=class extends SelectableQuickInputButton{constructor(e=!1){super("Match All",{off:"icon-match-all",on:"icon-match-all-selected"},e)}},u=class extends SelectableQuickInputButton{constructor(e=!1){super("Match using Regular Expressions",{off:"icon-match-regex",on:"icon-match-regex-selected"},e)}},d={iconPath:new r.ThemeIcon("git-commit"),tooltip:"Choose a Specific Commit"},p=class extends ToggleQuickInputButton{constructor(e=!1,t,i){super(()=>({on:{tooltip:"Choose a Specific Commit",icon:new r.ThemeIcon("git-commit")},off:{tooltip:`Choose a Branch${t.showTags?" or Tag":""}`,icon:new r.ThemeIcon("git-branch")}}),e),this.onDidClick=i}},g={iconPath:new r.ThemeIcon("merge"),tooltip:"Merge..."},m={iconPath:new r.ThemeIcon("globe"),tooltip:"Open on GitHub"},f={iconPath:new r.ThemeIcon("globe"),tooltip:"Open on gitkraken.dev"},w={iconPath:new r.ThemeIcon("link-external"),tooltip:"Open in Editor"},v={iconPath:new r.ThemeIcon("gear"),tooltip:"Launchpad Settings"},y={iconPath:new r.ThemeIcon("pinned"),tooltip:"Pin"},b={iconPath:new r.ThemeIcon("pin"),tooltip:"Unpin"},C={iconPath:new r.ThemeIcon("bell-slash"),tooltip:"Snooze"},R={iconPath:new r.ThemeIcon("refresh"),tooltip:"Refresh"},S={iconPath:new r.ThemeIcon("bell"),tooltip:"Unsnooze"},P={iconPath:new r.ThemeIcon("empty-window"),tooltip:"Open in New Window"},A={iconPath:new r.ThemeIcon("search"),tooltip:"Reveal in Side Bar"},k={iconPath:new r.ThemeIcon("settings-gear"),tooltip:"Set as Default Remote"},D={iconPath:new r.ThemeIcon("eye"),tooltip:"Open Details"},T={iconPath:new r.ThemeIcon("compare-changes"),tooltip:"Open Changes"},_={iconPath:new r.ThemeIcon("link-external"),tooltip:"Show Results in Side Bar"},I=class extends SelectableQuickInputButton{constructor(e=!1){super("Show Tags",{off:new r.ThemeIcon("tag"),on:"icon-tag-selected"},e)}},$={iconPath:new r.ThemeIcon("gitlens-confirm-checked"),tooltip:"You will be presented with a required confirmation step before the action is performed"},E=class extends ToggleQuickInputButton{constructor(e=!1,t,i){super(()=>({on:{tooltip:t?"For future actions, you will be presented with confirmation step before the action is performed\nClick to toggle":"You will be presented with confirmation step before the action is performed\nClick to toggle",icon:new r.ThemeIcon("gitlens-confirm-checked")},off:{tooltip:t?"For future actions, you won't be presented with confirmation step before the action is performed\nClick to toggle":"You won't be presented with confirmation step before the action is performed\nClick to toggle",icon:new r.ThemeIcon("gitlens-confirm-unchecked")}}),e),this.onDidClick=i}}},500:(e,t,i)=>{i.d(t,{C6:()=>Y,FF:()=>el,GW:()=>er,Qj:()=>Q,RX:()=>ec,Re:()=>ee,Tq:()=>eh,UA:()=>eo,UI:()=>em,YR:()=>en,Zr:()=>M,aG:()=>K,aL:()=>Z,c1:()=>J,cf:()=>ev,e2:()=>j,g0:()=>ea,gw:()=>X,iM:()=>es,jg:()=>ey,l7:()=>eu,p9:()=>N,sL:()=>ed,t$:()=>ei,tY:()=>ef,uV:()=>et,wS:()=>z,x$:()=>ep});var r=i(1398),s=i(3807),n=i(2972),o=i(1885),a=i(9432),l=i(3708),h=i(7531),c=i(3161),u=i(300),d=i(2013),p=i(8880),g=i(9102),m=i(5287),f=i(4693),w=i(6645),v=i(7788),y=i(2124),b=i(9634),C=i(468),R=i(3607),S=i(1225),P=i(4293),A=i(8825),k=i(1270),D=i(2362),T=i(6541),_=i(6011),I=i(2927),$=i(4832),E=i(520),O=i(560),x=i(4026),F=i(3916),B=i(3131),L=i(7279),U=i(2471),W=i(6741),q=i(5854);function M(e,t,i,r){let n;return 1===i.repos.length?r?`${e}${(0,L.xv)(r,s.uR-e.length)}`:e:(n=null!=t.repo?`${r??""}${(0,L.eV)(s.EO.Dot,2,2)}${t.repo.formattedName}`:1===t.repos.length?`${r??""}${(0,L.eV)(s.EO.Dot,2,2)}${t.repos[0].formattedName}`:`${(0,L.eV)(s.EO.Dot,2,2)}${t.repos.length} repositories`,`${e}${(0,L.xv)(n,s.uR-e.length)}`)}async function N(e,t){return Q(e,["branches"],{buttons:t?.buttons,filter:t?.filter!=null?{branches:t.filter}:void 0,picked:t?.picked,sort:t?.sort==null||{branches:t.sort}})}async function H(e,t){return null==e?[]:(await e.getRemotes(t?.filter!=null?{filter:t.filter}:void 0)).map(e=>(0,T.G0)(e,t?.picked!=null&&("string"==typeof t.picked?e.name===t.picked:t.picked.includes(e.name)),{buttons:t?.buttons,upstream:!0}))}async function G(e,t){return Q(e,["tags"],{buttons:t?.buttons,filter:t?.filter!=null?{tags:t.filter}:void 0,picked:t?.picked,sort:t?.sort==null||{tags:t.sort}})}async function V(e,{buttons:t,excludeOpened:i,filter:r,includeStatus:s,picked:n}){let o=e instanceof b.LN?await e.getWorktrees():e,a=await (0,I.hg)(o,async e=>{let o;if(i&&e.opened||r?.(e)===!1)return;let a=!1;if(s)try{o=await e.getStatus()}catch(t){F.Vy.error(t,`Worktree status failed: ${e.uri.toString(!0)}`),a=!0}return(0,R.di)(e,null!=n&&("string"==typeof n?e.uri.toString()===n:n.includes(e.uri.toString())),a,{buttons:t,includeStatus:s,path:!0,status:o})});return(0,R.xG)(a)}async function Q(e,t,{buttons:i,filter:r,picked:s,sort:n}={}){let o,a;if(null==e)return[];let l=!1;if(e instanceof b.LN||1===e.length){l=!0;let i=e instanceof b.LN?e:e[0],[s,h]=await Promise.allSettled([t.includes("branches")?i.getBranches({filter:r?.branches,sort:"boolean"==typeof n?n:n?.branches}):void 0,t.includes("tags")?i.getTags({filter:r?.tags,sort:!0}):void 0]);o=B.Ro(s)?.values??[],a=B.Ro(h)?.values??[]}else{let[i,s]=await Promise.allSettled([t.includes("branches")?Promise.allSettled(e.map(e=>e.getBranches({filter:r?.branches,sort:"boolean"==typeof n?n:n?.branches}))):void 0,t.includes("tags")?Promise.allSettled(e.map(e=>e.getTags({filter:r?.tags,sort:"boolean"==typeof n?n:n?.tags}))):void 0]),l="fulfilled"===i.status?i.value?.filter(e=>"fulfilled"===e.status)?.map(e=>e.value.values):void 0,h="fulfilled"===s.status?s.value?.filter(e=>"fulfilled"===e.status)?.map(e=>e.value.values):void 0;t.includes("branches")&&null!=l&&(o=(0,g.Xn)((0,I.E$)(l,(e,t)=>e.name===t.name))),t.includes("tags")&&null!=h&&(a=(0,C.uO)((0,I.E$)(h,(e,t)=>e.name===t.name)))}return(null==o||0===o.length)&&(null==a||0===a.length)?[]:null!=o&&0!==o.length&&(null==a||0===a.length)?[(0,k.uK)("Branches"),...await Promise.all(o.filter(e=>!e.remote).map(e=>(0,T.IC)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,current:!!l&&"checkmark",ref:l,status:l,type:"remote"}))),(0,k.uK)("Remote Branches"),...await Promise.all(o.filter(e=>e.remote).map(e=>(0,T.IC)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,current:!!l&&"checkmark",ref:l,status:l,type:"remote"})))]:null!=a&&0!==a.length&&(null==o||0===o.length)?a.map(e=>(0,T.iq)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,message:!1,ref:l})):[(0,k.uK)("Branches"),...await Promise.all(o.filter(e=>!e.remote).map(e=>(0,T.IC)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,current:!!l&&"checkmark",ref:l,status:l}))),(0,k.uK)("Tags"),...a.map(e=>(0,T.iq)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,message:!1,ref:l,type:!0})),(0,k.uK)("Remote Branches"),...await Promise.all(o.filter(e=>e.remote).map(e=>(0,T.IC)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,current:!!l&&"checkmark",ref:l,status:l,type:"remote"})))]}function j(e,t){return async(i,r)=>{let s=!1;if(r.startsWith("#")&&(s=!0,r=r.substring(1)),null==e)return!1;if(Array.isArray(e)){if(1!==e.length)return!1;e=e[0]}if(s&&t?.ranges&&(0,w.p8)(r))return i.items=[(0,T.vS)(r,e.path,!0,{alwaysShow:!0,buttons:t?.buttons,ref:!1,icon:!1})],!0;if(!await n.m.instance.git.validateReference(e.path,r))return!!s&&(i.items=[(0,D.Du)(D.WL.Back,!0,{label:"Enter a reference or commit SHA"})],!0);if(!s&&await n.m.instance.git.hasBranchOrTag(e.path,{filter:{branches:e=>e.name.includes(r),tags:e=>e.name.includes(r)}}))return!1;let o=await n.m.instance.git.getCommit(e.path,r);return i.items=[await (0,T.Rc)(o,!0,{alwaysShow:!0,buttons:t?.buttons,compact:!0,icon:"avatar"})],!0}}async function*z(e,t,i){let r=(0,W.TX)({title:M(`${t.title}${i.titleContext??""}`,e,t),placeholder:i.placeholder??"Branch name",value:i.value,prompt:i.prompt??"Please provide a new branch name",validate:async t=>{if(null==t)return[!1,void 0];if(0===(t=t.trim()).length)return[!1,"Please enter a valid branch name"];if("repo"in e)return await n.m.instance.git.validateBranchOrTagName(e.repo.path,t)?await e.repo.getBranch(t)?[!1,`A branch named '${t}' already exists`]:[!0,void 0]:[!1,`'${t}' isn't a valid branch name`];for(let i of e.repos){if(!await n.m.instance.git.validateBranchOrTagName(i.path,t))return[!1,`'${t}' isn't a valid branch name`];if(await i.getBranch(t))return[!1,`A branch named '${t}' already exists`]}return[!0,void 0]}}),s=yield r;return(0,W.wc)(r,e,s)&&await (0,W.Ss)(r,e,s)?s:W.Lt}async function*Y(e,t,i){let r=(0,W.TX)({title:M(`${t.title}${i.titleContext??""}`,e,t),placeholder:i.placeholder,value:i.value,prompt:"Enter remote name",validate:async t=>null==t?[!1,void 0]:0===(t=t.trim()).length?[!1,"Please enter a valid remote name"]:/[^a-zA-Z0-9-_.]/.test(t)?[!1,`'${t}' isn't a valid remote name`]:"repo"in e&&0!==(await e.repo.getRemotes({filter:e=>e.name===t})).length?[!1,`A remote named '${t}' already exists`]:[!0,void 0]}),s=yield r;return(0,W.wc)(r,e,s)&&await (0,W.Ss)(r,e,s)?s:W.Lt}async function*K(e,t,i){let r=(0,W.TX)({title:M(`${t.title}${i.titleContext??""}`,e,t),placeholder:i.placeholder,value:i.value,prompt:"Enter remote URL",validate:e=>{if(null==e)return[!1,void 0];if(0===(e=e.trim()).length)return[!1,"Please enter a valid remote URL"];let t=S.vw.test(e);return[t,t?void 0:`'${e}' isn't a valid remote URL`]}}),s=yield r;return(0,W.wc)(r,e,s)&&await (0,W.Ss)(r,e,s)?s:W.Lt}async function*J(e,t,i){let r=(0,W.TX)({title:M(`${t.title}${i.titleContext??""}`,e,t),placeholder:i.placeholder,value:i.value,prompt:"Enter tag name",validate:async t=>{if(null==t)return[!1,void 0];if(0===(t=t.trim()).length)return[!1,"Please enter a valid tag name"];if("repo"in e){let i=await n.m.instance.git.validateBranchOrTagName(e.repo.path,t);return[i,i?void 0:`'${t}' isn't a valid tag name`]}for(let i of e.repos)if(!await n.m.instance.git.validateBranchOrTagName(i.path,t))return[!1,`'${t}' isn't a valid branch name`];return[!0,void 0]}}),s=yield r;return(0,W.wc)(r,e,s)&&await (0,W.Ss)(r,e,s)?s:W.Lt}function*Z(e,t,{filter:i,picked:r,placeholder:s,titleContext:n}){let a=N(e.repo,{buttons:[q.yi],filter:i,picked:r}).then(e=>0===e.length?[(0,D.Du)(D.WL.Back,!0),(0,D.Du)(D.WL.Cancel)]:e),l=(0,W.Ac)({title:M(`${t.title}${n??""}`,e,t),placeholder:t=>t?s:`No branches found in ${e.repo.formattedName}`,matchOnDetail:!0,items:a,onDidClickItemButton:(e,t,{item:i})=>{t===q.yi&&o._c(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await o._c(i,{select:!0,focus:!1,expand:!0})}}),h=yield l;return(0,W.fg)(l,e,h)?h[0].item:W.Lt}function*X(e,t,{filter:i,picked:r,placeholder:s,emptyPlaceholder:n,sort:a,titleContext:l}){let h=N(e.repo,{buttons:[q.yi],filter:i,picked:r,sort:a}).then(e=>e.length?e:[(0,D.Du)(D.WL.Back,!0),(0,D.Du)(D.WL.Cancel)]),c=(0,W.Ac)({multiselect:!0,title:M(`${t.title}${l??""}`,e,t),placeholder:t=>t?s:n??`No branches found in ${e.repo.formattedName}`,matchOnDetail:!0,items:h,onDidClickItemButton:(e,t,{item:i})=>{t===q.yi&&o._c(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await o._c(i,{select:!0,focus:!1,expand:!0})}}),u=yield c;return(0,W.fg)(c,e,u)?u.map(e=>e.item):W.Lt}function*ee(e,t,{filter:i,picked:r,placeholder:s,titleContext:n,value:l,additionalButtons:h,ranges:c}){t.showTags=!0;let u=new q.y2(t.showTags),p=async()=>Q(e.repo,t.showTags?["branches","tags"]:["branches"],{buttons:"boolean"==typeof t.pickCommitForItem?[q.ig,q.yi]:[q.yi],filter:i,picked:r,sort:!0}),g=p().then(e=>0===e.length?[(0,D.Du)(D.WL.Back,!0),(0,D.Du)(D.WL.Cancel)]:e),m=(0,W.Ac)({title:M(`${t.title}${n??""}`,e,t),placeholder:i=>i?`${"string"==typeof s?s:s(t)} (or enter a revision using #)`:`No branches${t.showTags?" or tags":""} found in ${e.repo.formattedName}`,matchOnDescription:!0,matchOnDetail:!0,value:l,selectValueWhenShown:!0,items:g,additionalButtons:[...h??[],u],onDidClickItemButton:(e,i,{item:r})=>i===q.ig?(t.pickCommitForItem=!0,!0):(i===q.yi&&((0,w.gC)(r)?o._c(r,{select:!0,focus:!1,expand:!0}):(0,w.A1)(r)?d._c(r,{select:!0,focus:!1,expand:!0}):(0,w.bv)(r)&&a.JX(r,{pin:!1,preserveFocus:!0})),!1),onDidClickButton:async(i,r)=>{if(r===u){i.busy=!0;try{t.showTags=!t.showTags,u.on=t.showTags;let r=await p();i.placeholder=0===r.length?`${e.repo.formattedName} has no branches${t.showTags?" or tags":""}`:`${"string"==typeof s?s:s(t)} (or enter a revision using #)`,i.items=r}finally{i.busy=!1}}},keys:["right","alt+right","ctrl+right"],onDidPressKey:(e,t,{item:i})=>{(0,w.gC)(i)?o._c(i,{select:!0,focus:!1,expand:!0}):(0,w.A1)(i)?d._c(i,{select:!0,focus:!1,expand:!0}):(0,w.bv)(i)&&a.JX(i,{pin:!1,preserveFocus:!0})},onValidateValue:j(e.repo,{ranges:c})}),f=yield m;return(0,W.fg)(m,e,f)?f[0].item:W.Lt}function*et(e,t,{allowCreate:i,filter:n,picked:l,placeholder:h,titleContext:c,value:u}){t.showTags=1===e.repos.length;let p=new q.y2(t.showTags),g={label:"Create New Branch...",iconPath:new r.ThemeIcon("plus"),alwaysShow:!0,item:""},m={label:"Choose a Pull Request...",iconPath:new r.ThemeIcon("git-pull-request"),alwaysShow:!0,item:{command:s.Ts.ShowLaunchpad}},f=()=>Q(e.repos,t.showTags?["branches","tags"]:["branches"],{buttons:[q.yi],filter:{branches:1===e.repos.length?void 0:e=>!e.remote,...n},picked:l??e.reference?.ref,sort:{branches:{orderBy:"date:desc"},tags:{orderBy:"date:desc"}}}),v=f().then(e=>0===e.length?[(0,D.Du)(D.WL.Back,!0),(0,D.Du)(D.WL.Cancel)]:i?[g,m,...e]:[m,...e]),y=(0,W.Ac)({title:M(`${t.title}${c??""}`,e,t),placeholder:i=>i?`${"string"==typeof h?h:h(t)} (or enter a revision using #)`:`No ${1===e.repos.length?"":"common "}branches${t.showTags?" or tags":""} found in ${1===e.repos.length?e.repos[0].formattedName:`${e.repos.length} repos`}`,matchOnDescription:!0,matchOnDetail:!0,value:u??((0,w.bv)(e.reference)?e.reference.ref:void 0),selectValueWhenShown:!0,items:v,additionalButtons:[p],onDidChangeValue:e=>(g.item=e.value,!0),onDidClickItemButton:(e,t,{item:i})=>{!("string"==typeof i||(0,W.h8)(i))&&t===q.yi&&((0,w.gC)(i)?o._c(i,{select:!0,focus:!1,expand:!0}):(0,w.A1)(i)?d._c(i,{select:!0,focus:!1,expand:!0}):(0,w.bv)(i)&&a.JX(i,{pin:!1,preserveFocus:!0}))},onDidClickButton:async(i,r)=>{if(r===p){i.busy=!0;try{t.showTags=!t.showTags,p.on=t.showTags;let r=await f();i.placeholder=0===r.length?`No ${1===e.repos.length?"":"common "}branches${t.showTags?" or tags":""} found in ${1===e.repos.length?e.repos[0].formattedName:`${e.repos.length} repos`}`:`${"string"==typeof h?h:h(t)} (or enter a revision using #)`,i.items=r}finally{i.busy=!1}}},keys:["right","alt+right","ctrl+right"],onDidPressKey:(e,t,{item:i})=>{!("string"==typeof i||(0,W.h8)(i))&&((0,w.gC)(i)?o._c(i,{select:!0,focus:!1,expand:!0}):(0,w.A1)(i)?d._c(i,{select:!0,focus:!1,expand:!0}):(0,w.bv)(i)&&a.JX(i,{pin:!1,preserveFocus:!0}))},onValidateValue:j(e.repos)}),b=yield y;return(0,W.fg)(y,e,b)?b[0].item:W.Lt}async function*ei(e,t,{ignoreFocusOut:i,log:r,onDidLoadMore:s,picked:n,placeholder:o,showInSideBarCommand:l,showInSideBarButton:h,titleContext:c}){async function u(e){if(null==e)return[(0,D.Du)(D.WL.Back,!0),(0,D.Du)(D.WL.Cancel)];let t=[q.kk,q.yi];x.$1(e.commits)?.[1].file!=null&&t.splice(0,0,q.Q8);let i=[];for await(let r of(0,x.Tj)(e.commits.values(),async e=>(0,T.Rc)(e,null!=n&&("string"==typeof n?e.ref===n:n.includes(e.ref)),{buttons:t,compact:!0,icon:"avatar"})))i.push(r);return e.hasMore&&i.push((0,D.Du)(D.WL.LoadMore)),i}let d=u(r).then(e=>null!=l?[l,...e]:e),p=(0,W.Ac)({title:M(`${t.title}${c??""}`,e,t),placeholder:"string"==typeof o?o:o(t,r),ignoreFocusOut:i,matchOnDescription:!0,matchOnDetail:!0,value:"string"==typeof n&&r?.count===0?n:void 0,selectValueWhenShown:!0,items:d,onDidLoadMore:async e=>(e.keepScrollPosition=!0,r=await r?.more?.($.H.get("advanced.maxListItems")),s?.(r),"string"!=typeof o&&(e.placeholder=o(t,r)),u(r)),additionalButtons:[...h?.button!=null?[h?.button]:[],...r?.hasMore?[q.TR]:[]],onDidClickItemButton:(e,t,i)=>{if(!k.Fj.is(i))switch(t){case q.kk:a.JX(i.item,{pin:!1,preserveFocus:!0});break;case q.yi:a._c(i.item,{select:!0,focus:!1,expand:!0});break;case q.Q8:{let e=i.item.file?.path;null!=e&&a.eX(e,i.item)}}},onDidClickButton:(e,t)=>{if(null==r)return;let i=e.activeItems.filter(e=>!k.Fj.is(e));t===h?.button&&h.onDidClick(i)},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{let i=e.activeItems.filter(e=>!k.Fj.is(e));"ctrl+right"===t?a.JX(i[0].item,{pin:!1,preserveFocus:!0}):await a._c(i[0].item,{select:!0,focus:!1,expand:!0})},onValidateValue:j(e.repo,{buttons:[q.kk,q.yi]})}),g=yield p;return(0,W.fg)(p,e,g)?k.Fj.is(g[0])?((0,W.nH)(e),await g[0].execute(),W.Lt):g[0].item:W.Lt}function*er(e,t,{log:i,onDidLoadMore:r,picked:s,placeholder:n,titleContext:o}){async function l(e){if(null==e)return[(0,D.Du)(D.WL.Back,!0),(0,D.Du)(D.WL.Cancel)];let t=[];for await(let i of(0,x.Tj)(e.commits.values(),async e=>(0,T.Rc)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:[q.kk,q.yi],compact:!0,icon:"avatar"})))t.push(i);return t}let h=(0,W.Ac)({title:M(`${t.title}${o??""}`,e,t),multiselect:null!=i,placeholder:"string"==typeof n?n:n(t,i),matchOnDescription:!0,matchOnDetail:!0,items:l(i),onDidLoadMore:async e=>(e.keepScrollPosition=!0,i=await i?.more?.($.H.get("advanced.maxListItems")),r?.(i),"string"!=typeof n&&(e.placeholder=n(t,i)),l(i)),additionalButtons:[...i?.hasMore?[q.TR]:[]],onDidClickItemButton:(e,t,{item:i})=>{switch(t){case q.kk:a.JX(i,{pin:!1,preserveFocus:!0});break;case q.yi:a._c(i,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{"ctrl+right"===t?a.JX(i,{pin:!1,preserveFocus:!0}):await a._c(i,{select:!0,focus:!1,expand:!0})}}),c=yield h;return(0,W.fg)(h,e,c)?c.map(e=>e.item):W.Lt}function*es(e,t,i="Choose contributors"){async function r(){let t=(await n.m.instance.git.getOrOpenScmRepository(e.repo.path))?.inputBox.value,i=[];for(let r of(await n.m.instance.git.getContributors(e.repo.path)))i.push(await (0,f.NT)(r,t?.includes(r.getCoauthor()),{buttons:[q.yi]}));return(0,f.tB)(i)}let s=(0,W.Ac)({title:M(t.title,e,t),allowEmpty:!0,multiselect:!0,placeholder:i,matchOnDescription:!0,items:r(),onDidClickItemButton:(e,t,{item:i})=>{t===q.yi&&l._(i,{select:!0,focus:!1,expand:!0})},onDidChangeSelection:(0,O.sg)((e,t)=>{if(!e.canSelectMany||e.busy)return;let i=!1;for(let r of e.items){if((0,D.hr)(r))continue;let e=t.includes(r);(r.picked!==e||r.alwaysShow!==e)&&(r.alwaysShow=r.picked=e,i=!0)}i&&(e.items=(0,f.tB)([...e.items]),e.selectedItems=t)},10),keys:["right","alt+right","ctrl+right"],onDidPressKey:(e,t,{item:i})=>{l._(i,{select:!0,focus:!1,expand:!0})}}),o=yield s;return(0,W.fg)(s,e,o)?o.map(e=>e.item):W.Lt}function*en(e,t,{filter:i,picked:r,placeholder:s,titleContext:n}){let o=H(e.repo,{buttons:[q.yi],filter:i,picked:r}).then(e=>0===e.length?[(0,D.Du)(D.WL.Back,!0),(0,D.Du)(D.WL.Cancel)]:e),a=(0,W.Ac)({title:M(`${t.title}${n??""}`,e,t),placeholder:t=>t?s:`No remotes found in ${e.repo.formattedName}`,matchOnDetail:!0,items:o,onDidClickItemButton:(e,t,{item:i})=>{t===q.yi&&h._c(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await h._c(i,{select:!0,focus:!1,expand:!0})}}),l=yield a;return(0,W.fg)(a,e,l)?l[0].item:W.Lt}async function*eo(e,t,i="Choose a repository"){if("string"==typeof e.repo&&(e.repo=n.m.instance.git.getRepository(e.repo),null!=e.repo))return e.repo;let r=e.repo??await n.m.instance.git.getOrOpenRepositoryForEditor(),s=(0,W.Ac)({title:t.title,placeholder:i,items:0===t.repos.length?[(0,D.Du)(D.WL.Cancel)]:Promise.all(t.repos.map(e=>(0,T.sS)(e,e.id===r?.id,{branch:!0,buttons:[q.yi],fetched:!0,status:!0}))),onDidClickItemButton:(e,i,{item:r})=>{i===q.yi&&c._c(r.path,t.associatedView,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:(e,i,{item:r})=>{c._c(r.path,t.associatedView,{select:!0,focus:!1,expand:!0})}}),o=yield s;return(0,W.fg)(s,e,o)?o[0].item:W.Lt}async function*ea(e,t,i){let r;if(i={placeholder:"Choose repositories",skipIfPossible:!1,...i},null!=e.repos){if((0,I.Bo)(e.repos)){if(r=(0,I.x1)(e.repos,e=>t.repos.find(t=>t.path===e)),i.skipIfPossible&&0!==r.length&&e.repos.length===r.length)return r}else r=e.repos}else{let e=await n.m.instance.git.getOrOpenRepositoryForEditor();r=null!=e?[e]:[]}let s=(0,W.Ac)({multiselect:!0,title:t.title,placeholder:i.placeholder,items:0===t.repos.length?[(0,D.Du)(D.WL.Cancel)]:Promise.all(t.repos.map(e=>(0,T.sS)(e,r.some(t=>t.id===e.id),{branch:!0,buttons:[q.yi],fetched:!0,status:!0}))),onDidClickItemButton:(e,i,{item:r})=>{i===q.yi&&c._c(r.path,t.associatedView,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:(e,i,{item:r})=>{c._c(r.path,t.associatedView,{select:!0,focus:!1,expand:!0})}}),o=yield s;return(0,W.fg)(s,e,o)?o.map(e=>e.item):W.Lt}function*el(e,t,{ignoreFocusOut:i,stash:r,picked:s,placeholder:n,titleContext:o}){let a=(0,W.Ac)({title:M(`${t.title}${o??""}`,e,t),placeholder:"string"==typeof n?n:n(t,r),ignoreFocusOut:i,matchOnDescription:!0,matchOnDetail:!0,items:null==r?[(0,D.Du)(D.WL.Back,!0),(0,D.Du)(D.WL.Cancel)]:[...(0,x.Tj)(r.commits.values(),e=>(0,T.rA)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:[q.kk],compact:!0,icon:!0}))],onDidClickItemButton:(e,t,{item:i})=>{t===q.kk&&u.JX(i,{pin:!1,preserveFocus:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await u.JX(i,{pin:!1,preserveFocus:!0})}}),l=yield a;return(0,W.fg)(a,e,l)?l[0].item:W.Lt}function*eh(e,t,{ignoreFocusOut:i,stash:r,picked:s,placeholder:n,titleContext:o}){let a=(0,W.Ac)({title:M(`${t.title}${o??""}`,e,t),multiselect:!0,placeholder:"string"==typeof n?n:n(t,r),ignoreFocusOut:i,matchOnDescription:!0,matchOnDetail:!0,items:null==r?[(0,D.Du)(D.WL.Back,!0),(0,D.Du)(D.WL.Cancel)]:[...(0,x.Tj)(r.commits.values(),e=>(0,T.rA)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:[q.kk],compact:!0,icon:!0}))],onDidClickItemButton:(e,t,{item:i})=>{t===q.kk&&u.JX(i,{pin:!1,preserveFocus:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await u.JX(i,{pin:!1,preserveFocus:!0})}}),l=yield a;return(0,W.fg)(a,e,l)?l.map(e=>e.item):W.Lt}function*ec(e,t,{filter:i,picked:r,placeholder:s,titleContext:n}){let o=G(e.repo,{buttons:[q.yi],filter:i,picked:r}).then(e=>0===e.length?[(0,D.Du)(D.WL.Back,!0),(0,D.Du)(D.WL.Cancel)]:e),a=(0,W.Ac)({multiselect:!0,title:M(`${t.title}${n??""}`,e,t),placeholder:t=>t?s:`No tags found in ${e.repo.formattedName}`,matchOnDetail:!0,items:o,onDidClickItemButton:(e,t,{item:i})=>{t===q.yi&&d._c(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await d._c(i,{select:!0,focus:!1,expand:!0})}}),l=yield a;return(0,W.fg)(a,e,l)?l.map(e=>e.item):W.Lt}function*eu(e,t,{excludeOpened:i,filter:r,includeStatus:s,picked:n,placeholder:o,titleContext:a}){let l=V(t.worktrees??e.repo,{buttons:[q.xU,q.yi],excludeOpened:i,filter:r,includeStatus:s,picked:n}).then(e=>0===e.length?[(0,D.Du)(D.WL.Back,!0),(0,D.Du)(D.WL.Cancel)]:e),h=(0,W.Ac)({title:M(`${t.title}${a??""}`,e,t),placeholder:t=>t?o:`No worktrees found in ${e.repo.formattedName}`,matchOnDetail:!0,items:l,onDidClickItemButton:(e,t,{item:i})=>{switch(t){case q.xU:(0,U.OH)(i.uri,{location:"newWindow"});break;case q.yi:p._c(i,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await p._c(i,{select:!0,focus:!1,expand:!0})}}),c=yield h;return(0,W.fg)(h,e,c)?c[0].item:W.Lt}function*ed(e,t,{filter:i,includeStatus:r,picked:s,placeholder:n,titleContext:o}){let a=V(t.worktrees??e.repo,{buttons:[q.xU,q.yi],filter:i,includeStatus:r,picked:s}).then(e=>0===e.length?[(0,D.Du)(D.WL.Back,!0),(0,D.Du)(D.WL.Cancel)]:e),l=(0,W.Ac)({multiselect:!0,title:M(`${t.title}${o??""}`,e,t),placeholder:t=>t?n:`No worktrees found in ${e.repo.formattedName}`,matchOnDetail:!0,items:a,onDidClickItemButton:(e,t,{item:i})=>{switch(t){case q.xU:(0,U.OH)(i.uri,{location:"newWindow"});break;case q.yi:p._c(i,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await p._c(i,{select:!0,focus:!1,expand:!0})}}),h=yield l;return(0,W.fg)(l,e,h)?h.map(e=>e.item):W.Lt}function*ep(e,t){let i=(0,W.Ac)({title:M((0,w.M4)(e.reference,{capitalize:!0,icon:!1}),e,t),placeholder:(0,w.M4)(e.reference,{capitalize:!0,icon:!1}),ignoreFocusOut:!0,items:eg(e),onDidClickItemButton:(t,i,r)=>{switch(i){case q.kk:(0,w.Nf)(e.reference)?u.JX(e.reference,{pin:!1,preserveFocus:!0}):a.JX(e.reference,{pin:!1,preserveFocus:!0});break;case q.yi:(0,w.Nf)(e.reference)?u._c(e.reference,{select:!0,focus:!1,expand:!0}):a._c(e.reference,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,i)=>{await i.onDidPressKey(t)}}),r=yield i;return(0,W.fg)(i,e,r)?r[0]:W.Lt}async function eg(e){let t;let i=[new A._w(e.reference),new A.bO(e.reference)];if((0,m.kk)(e.reference))i.push((0,k.uK)("Actions"),new T.DT("Apply Stash...",{command:"stash",state:{subcommand:"apply",repo:e.repo,reference:e.reference}}),new T.DT("Rename Stash...",{command:"stash",state:{subcommand:"rename",repo:e.repo,reference:e.reference}}),new T.DT("Drop Stash...",{command:"stash",state:{subcommand:"drop",repo:e.repo,references:[e.reference]}}),(0,k.uK)(),new A.Xx(e.reference));else{let r=await n.m.instance.git.getRemotesWithProviders(e.repo.path,{sort:!0});r?.length&&i.push((0,k.uK)((0,v.lb)(r)??"Remote"),new _.zB(r,{type:y.J.Commit,sha:e.reference.sha}),new _.oN(r,{type:y.J.Commit,sha:e.reference.sha})),i.push((0,k.uK)("Actions"));let s=await n.m.instance.git.getBranch(e.repo.path),[o,a]=await Promise.all([null!=s?n.m.instance.git.getCommitBranches(e.repo.path,e.reference.ref,s.name,{commitDate:(0,m.WM)(e.reference)?e.reference.committer.date:void 0}):void 0,s?.remote||s?.upstream==null?void 0:e.reference.isPushed()]);o?.length?((t=!a)&&i.push(new T.DT("Push to Commit...",{command:"push",state:{repos:e.repo,reference:e.reference}})),i.push(new T.DT("Revert Commit...",{command:"revert",state:{repo:e.repo,references:[e.reference]}}),new T.DT(`Reset ${s?.name??"Current Branch"} to Commit...`,{command:"reset",state:{repo:e.repo,reference:e.reference}}),new T.DT(`Reset ${s?.name??"Current Branch"} to Previous Commit...`,{command:"reset",state:{repo:e.repo,reference:(0,w.kA)(`${e.reference.ref}^`,e.reference.repoPath,{refType:"revision",name:`${e.reference.name}^`,message:e.reference.message})}}))):i.push(new T.DT("Cherry Pick Commit...",{command:"cherry-pick",state:{repo:e.repo,references:[e.reference]}})),i.push(new T.DT(`Rebase ${s?.name??"Current Branch"} onto Commit...`,{command:"rebase",state:{repo:e.repo,reference:e.reference}}),new T.DT("Switch to Commit...",{command:"switch",state:{repos:[e.repo],reference:e.reference}}),(0,k.uK)(),new T.DT("Create Branch at Commit...",{command:"branch",state:{subcommand:"create",repo:e.repo,reference:e.reference}}),new T.DT("Create Tag at Commit...",{command:"tag",state:{subcommand:"create",repo:e.repo,reference:e.reference}}),(0,k.uK)("Copy"),new A.$t(e.reference),new A.Xx(e.reference))}return i.push((0,k.uK)("Open"),new A.MO(e.reference),new A.ps(e.reference),new A.X8(e.reference),(0,k.uK)(),new A.zR(e.reference),new A.IJ(e.reference)),i.push((0,k.uK)("Compare"),new A.ln(e.reference),new A.Wq(e.reference)),i.push((0,k.uK)(),new A.Y7(e.reference),new A.Tw(e.reference)),i.push((0,k.uK)("Browse"),new A.qB(e.reference,{openInNewWindow:!1}),new A.qB(e.reference,{before:!0,openInNewWindow:!1}),new A.qB(e.reference,{openInNewWindow:!0}),new A.qB(e.reference,{before:!0,openInNewWindow:!0})),i.unshift(new A.o3(e.reference,{unpublished:t,hint:"Click to see all changed files"})),i}function*em(e,t,i){e.reference.files;let r=(0,W.Ac)({title:M((0,w.M4)(e.reference,{capitalize:!0,icon:!1}),e,t),placeholder:(0,w.M4)(e.reference,{capitalize:!0,icon:!1}),ignoreFocusOut:!0,items:[new A.o3(e.reference,{picked:null==e.fileName,hint:`Click to see ${(0,m.kk)(e.reference)?"stash":"commit"} actions`}),(0,k.uK)("Files"),...e.reference.files?.map(t=>new A.p1(e.reference,t,i?.picked===t.path))??[]],matchOnDescription:!0,onDidClickItemButton:(t,i,r)=>{switch(i){case q.kk:(0,w.Nf)(e.reference)?u.JX(e.reference,{pin:!1,preserveFocus:!0}):a.JX(e.reference,{pin:!1,preserveFocus:!0});break;case q.yi:(0,w.Nf)(e.reference)?u._c(e.reference,{select:!0,focus:!1,expand:!0}):a._c(e.reference,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,i)=>{await i.onDidPressKey(t)}}),s=yield r;return(0,W.fg)(r,e,s)?s[0]:W.Lt}function*ef(e,t){let i=(0,W.Ac)({title:M((0,w.M4)(e.reference,{capitalize:!0,icon:!1}),e,t,`${(0,L.eV)(s.EO.Dot,2,2)}${(0,E.j)(e.fileName,{fileOnly:!0})}`),placeholder:`${(0,E.j)(e.fileName,{relativeTo:e.repo.path})} in ${(0,w.M4)(e.reference,{icon:!1})}`,ignoreFocusOut:!0,items:ew(e),matchOnDescription:!0,onDidClickItemButton:(t,i,r)=>{switch(i){case q.kk:(0,w.Nf)(e.reference)?u.JX(e.reference,{pin:!1,preserveFocus:!0}):a.JX(e.reference,{pin:!1,preserveFocus:!0});break;case q.yi:(0,w.Nf)(e.reference)?u._c(e.reference,{select:!0,focus:!1,expand:!0}):a._c(e.reference,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,i)=>{await i.onDidPressKey(t)}}),r=yield i;return(0,W.fg)(i,e,r)?r[0]:W.Lt}async function ew(e){let t=await e.reference.findFile(e.fileName);if(null==t)return[];let i=[new A._w(e.reference),new A.bO(e.reference)];if((0,m.kk)(e.reference))i.push((0,k.uK)(),new A.Xx(e.reference),(0,k.uK)("Actions"),new A.Zq(e.reference,t),new A.$I(e.reference,t),(0,k.uK)(),new A.Xx(e.reference));else{let r=await n.m.instance.git.getRemotesWithProviders(e.repo.path,{sort:!0});r?.length&&i.push((0,k.uK)((0,v.lb)(r)??"Remote"),new _.zB(r,{type:y.J.Revision,fileName:e.fileName,commit:e.reference}),new _.oN(r,{type:y.J.Revision,fileName:e.fileName,commit:e.reference}),(0,k.uK)(),new _.zB(r,{type:y.J.Commit,sha:e.reference.ref}),new _.oN(r,{type:y.J.Commit,sha:e.reference.sha})),i.push((0,k.uK)("Actions"),new A.Zq(e.reference,t),new A.$I(e.reference,t),(0,k.uK)("Copy"),new A.$t(e.reference),new A.Xx(e.reference))}return i.push((0,k.uK)("Open"),new A.NH(e.reference,e.fileName),new A.S5(e.reference,e.fileName),new A.EG(e.reference,e.fileName),(0,k.uK)()),"D"!==t.status&&i.push(new A.Kw(e.reference,t)),i.push(new A.bi(e.reference,t)),i.push((0,k.uK)("Compare"),new A.ln(e.reference),new A.Wq(e.reference)),i.push((0,k.uK)("Browse"),new A.qB(e.reference,{openInNewWindow:!1}),new A.qB(e.reference,{before:!0,openInNewWindow:!1}),new A.qB(e.reference,{openInNewWindow:!0}),new A.qB(e.reference,{before:!0,openInNewWindow:!0})),i.unshift(new A.o3(e.reference,{file:t,hint:"Click to see all changed files"})),i}function*ev(e,t){let i=t.status.getUpstreamStatus({expand:!0,separator:", "}),n=t.status.getFormattedDiffStatus({expand:!0,separator:", "}),o=(0,W.Ac)({title:M(t.title,e,t),placeholder:i?`${i}, ${n}`:n,ignoreFocusOut:!0,items:function(e,t){let i;let n=[],o=t.status.computeWorkingTreeStatus();return i=0===o.staged&&0===o.unstaged?"No working tree changes":`$(files) ${o.staged?`${(0,L.td)("staged file",o.staged)} (${o.stagedStatus})`:""}${o.unstaged?`${o.staged?", ":""}${(0,L.td)("unstaged file",o.unstaged)} (${o.unstagedStatus})`:""}`,t.status.upstream?(0===t.status.state.ahead&&0===t.status.state.behind?n.push((0,D.Du)(D.WL.Noop,!0,{label:`$(git-branch) ${t.status.branch} is up to date with $(git-branch) ${t.status.upstream?.name}`,detail:i})):0!==t.status.state.ahead&&0!==t.status.state.behind?n.push((0,D.Du)(D.WL.Noop,!0,{label:`$(git-branch) ${t.status.branch} has diverged from $(git-branch) ${t.status.upstream?.name}`,detail:i})):0!==t.status.state.ahead?n.push((0,D.Du)(D.WL.Noop,!0,{label:`$(git-branch) ${t.status.branch} is ahead of $(git-branch) ${t.status.upstream?.name}`,detail:i})):0!==t.status.state.behind&&n.push((0,D.Du)(D.WL.Noop,!0,{label:`$(git-branch) ${t.status.branch} is behind $(git-branch) ${t.status.upstream?.name}`,detail:i})),0!==t.status.state.behind&&n.push(new T.DT(`$(cloud-download) ${(0,L.td)("commit",t.status.state.behind)} behind`,{command:"log",state:{repo:e.repo,reference:(0,w.kA)((0,w.Xn)(t.status.ref,t.status.upstream?.name),e.repo.path)}})),0!==t.status.state.ahead&&n.push(new T.DT(`$(cloud-upload) ${(0,L.td)("commit",t.status.state.ahead)} ahead`,{command:"log",state:{repo:e.repo,reference:(0,w.kA)((0,w.Xn)(t.status.upstream?.name,t.status.ref),e.repo.path)}}))):n.push((0,D.Du)(D.WL.Noop,!0,{label:`$(git-branch) ${t.status.branch} has no upstream`,detail:i})),t.status.files.length&&(n.push(new A.aY(o.stagedAddsAndChanges.concat(o.unstagedAddsAndChanges))),n.push(new A.Ol(o.stagedAddsAndChanges.concat(o.unstagedAddsAndChanges)))),o.staged>0&&(n.push(new A.aY(o.stagedAddsAndChanges,"Open Staged Files")),n.push(new A.Ol(o.stagedAddsAndChanges,"Open Only Staged Files"))),o.unstaged>0&&(n.push(new A.aY(o.unstagedAddsAndChanges,"Open Unstaged Files")),n.push(new A.Ol(o.unstagedAddsAndChanges,"Open Only Unstaged Files"))),t.status.files.length&&n.push(new k.Fj("Close Unchanged Files",new r.ThemeIcon("x"),s.Ts.CloseUnchangedFiles)),n}(e,t),keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,i)=>{await i.onDidPressKey(t)}}),a=yield o;return(0,W.fg)(o,e,a)?a[0]:W.Lt}async function*ey(e,t,i){let r;let s=await n.m.instance.git.access(i,e.repo.path);if(s.allowed)return;let o=[];if(s.subscription.current.account?.verified===!1)o.push((0,D.Du)(D.WL.RequiresVerification,!0),(0,k.uK)(),(0,D.Du)(D.WL.Cancel)),r="You must verify your email before you can continue";else{if(null==s.subscription.required)return;r="Pro feature — requires a trial or paid plan for use on privately-hosted repos",(0,P.zx)(s.subscription.required)&&null!=s.subscription.current.account?(r="Pro feature — requires a paid plan for use on privately-hosted repos",o.push((0,D.Du)(D.WL.RequiresPaidSubscription,!0),(0,k.uK)(),(0,D.Du)(D.WL.Cancel))):null!=s.subscription.current.account||(0,P.lc)(s.subscription.current)?o.push((0,D.Du)(D.WL.StartProTrial,!0),(0,D.Du)(D.WL.SignIn),(0,k.uK)(),(0,D.Du)(D.WL.Cancel)):o.push((0,D.Du)(D.WL.StartPreview,!0),(0,k.uK)(),(0,D.Du)(D.WL.Cancel))}let a=(0,W.Ac)({title:M(t.title,e,t),placeholder:r,items:o}),l=yield a;return(0,W.fg)(a,e,l)?void 0:W.Lt}},6741:(e,t,i)=>{i.d(t,{Ac:()=>f,CO:()=>w,Lt:()=>h,Ss:()=>u,TX:()=>m,U5:()=>o,VW:()=>g,Wq:()=>y,XD:()=>c,d6:()=>QuickCommand,fg:()=>d,h8:()=>b,nH:()=>v,ud:()=>a,wc:()=>p,xb:()=>l});var r=i(1270),s=i(2362),n=i(4832);function o(e){return"object"==typeof e&&"type"in e&&"custom"===e.type}function a(e){return"object"==typeof e&&"type"in e&&"input"===e.type}function l(e){return"object"==typeof e&&"type"in e&&"pick"===e.type}let h=Symbol("BreakStep");let QuickCommand=class QuickCommand{constructor(e,t,i,r,s){this.container=e,this.key=t,this.label=i,this.title=r,this.description=s?.description,this.detail=s?.detail}description;detail;initialState;_currentStep;_stepsIterator;get canConfirm(){return!0}get canSkipConfirm(){return!0}_picked=!1;get picked(){return this._picked}set picked(e){this._picked=e,e||(this._pickedVia="menu")}_pickedVia="menu";get pickedVia(){return this._pickedVia}set pickedVia(e){this._pickedVia=e}get skipConfirmKey(){return`${this.key}:${this.pickedVia}`}get value(){return this._currentStep}confirm(e){return!this.canConfirm||!this.canSkipConfirm||(null!=e?e:!n.H.get("gitCommands.skipConfirmations").includes(this.skipConfirmKey))}isMatch(e){return this.key===e}isFuzzyMatch(e){return this.label===e}executeSteps(){return this.steps(this.getStepState(!0))}async previous(){return(await this.next(s.WL.Back)).value}async next(e){null==this._stepsIterator&&(this._stepsIterator=this.steps(this.getStepState(!1)));let t=await this._stepsIterator.next(e);return(t.done&&(this.initialState=void 0,this._stepsIterator=void 0),t.value===h)?(this._currentStep=void 0,{...t,value:void 0}):(this._currentStep=t.value,t)}async retry(){return await this.next(s.WL.Noop),this.value}canStepsContinue(e){return e.counter>=(e.startingStep??0)}createConfirmStep(e,t,i,r={}){return g(e,t,{title:this.title},i,r)}getStepState(e){return{counter:0,...this.initialState,startingStep:e?this.initialState?.counter??0:0}}};function c(e){return e instanceof QuickCommand}async function u(e,t,i){if(!p(e,t,i))return!1;let[r]=await e.validate?.(i)??[!0];return!!r&&(t.counter++,!0)}function d(e,t,i){return!!p(e,t,i)&&!!(e.validate?.(i)??!0)&&(t.counter++,!0)}function p(e,t,i){if(null==i)return!1;if((0,s.qT)(i)){switch(i){case s.WL.Back:t.counter--,t.counter<=(t.startingStep??0)&&(t.counter=0);break;case s.WL.Cancel:v(t)}return!1}return!0}function g(e,t,i,n,o){return f({isConfirmationStep:!0,placeholder:`Confirm ${i.title}`,title:e,ignoreFocusOut:!0,items:[...t,(0,r.uK)(),n??(0,s.Du)(s.WL.Cancel)],selectedItems:[t.find(e=>e.picked)??t[0]],...o})}function m(e){return{type:"input",...e,ignoreFocusOut:!0}}function f(e){return{type:"pick",...e}}function w(e){return{type:"custom",...e}}function v(e){e.counter=-1}function y(e,t){return t.enabled=!1,e.frozen=!0,{[Symbol.dispose]:()=>{e.frozen=!1,t.enabled=!0,t.show()}}}function b(e){return null!=e.command}},5745:(e,t,i)=>{i.d(t,{d:()=>d});var r=i(3807),s=i(7788),n=i(6964),o=i(7899),a=i(4026),l=i(3900),h=Object.defineProperty,c=Object.getOwnPropertyDescriptor,u=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?c(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&h(t,i,n),n};let d=class extends l.uB{constructor(e){super(r.Ts.ConnectRemoteProvider),this.container=e}static getMarkdownCommandArgs(e){let t;return t=(0,s.Vx)(e)?{remote:e.name,repoPath:e.repoPath}:e,super.getMarkdownCommandArgsCore(r.Ts.ConnectRemoteProvider,t)}preExecute(e,t){return(0,l.qv)(e)&&(t={...t,remote:e.node.remote.name,repoPath:e.node.remote.repoPath}),this.execute(t)}async execute(e){let t,i,r;if(e?.repoPath==null){let e=new Map;for(let t of this.container.git.openRepositories){let i=await t.getBestRemoteWithIntegration({includeDisconnected:!0});i?.provider!=null&&e.set(t,i)}if(0===e.size)return!1;if(1===e.size){let i;[i,t]=(0,a.$1)(e),r=i.path}else{let i=await (0,n.oe)(void 0,"Choose which repository to connect to the remote provider",[...e.keys()]);if(null==i)return;r=i.path,t=e.get(i)}}else if(e?.remote==null){if(r=e.repoPath,null==(t=await this.container.git.getBestRemoteWithIntegration(r,{includeDisconnected:!0})))return!1}else if(r=e.repoPath,t=(i=await this.container.git.getRemotesWithProviders(r)).find(t=>t.name===e.remote),!t?.hasIntegration())return!1;let s=await this.container.integrations.getByRemote(t);if(null==s)return!1;let o=await s.connect();return o&&!(i??await this.container.git.getRemotesWithProviders(r)).some(e=>e.default)&&await t.setAsDefault(!0),o}};d=u([(0,o.G5)()],d);let p=class extends l.uB{constructor(e){super(r.Ts.DisconnectRemoteProvider),this.container=e}static getMarkdownCommandArgs(e){let t;return t=(0,s.Vx)(e)?{remote:e.name,repoPath:e.repoPath}:e,super.getMarkdownCommandArgsCore(r.Ts.DisconnectRemoteProvider,t)}preExecute(e,t){return(0,l.qv)(e)&&(t={...t,remote:e.node.remote.name,repoPath:e.node.remote.repoPath}),this.execute(t)}async execute(e){let t,i;if(e?.repoPath==null){let e=new Map;for(let t of this.container.git.openRepositories){let i=await t.getBestRemoteWithIntegration({includeDisconnected:!1});null!=i&&e.set(t,i)}if(0===e.size)return;if(1===e.size){let r;[r,t]=(0,a.$1)(e),i=r.path}else{let r=await (0,n.oe)(void 0,"Choose which repository to disconnect from the remote provider",[...e.keys()]);if(null==r)return;i=r.path,t=e.get(r)}}else if(e?.remote==null){if(i=e.repoPath,null==(t=await this.container.git.getBestRemoteWithIntegration(i,{includeDisconnected:!1})))return}else if(i=e.repoPath,t=(await this.container.git.getRemotesWithProviders(i)).find(t=>t.name===e.remote),!t?.hasIntegration())return;let r=await this.container.integrations.getByRemote(t);return r?.disconnect()}};p=u([(0,o.G5)()],p)},8458:(e,t,i)=>{i.d(t,{L:()=>f});var r=i(3807),s=i(6090),n=i(9432),o=i(7931),a=i(6645),l=i(3269),h=i(3536),c=i(7899),u=i(4026),d=i(3916),p=i(3900),g=Object.defineProperty,m=Object.getOwnPropertyDescriptor;let f=class extends p.Zr{constructor(e){super([r.Ts.ShowCommitInView,r.Ts.ShowInDetailsView,r.Ts.ShowCommitsInView]),this.container=e}static getMarkdownCommandArgs(e,t){return super.getMarkdownCommandArgsCore(r.Ts.ShowCommitInView,"string"==typeof e?{refs:[e],repoPath:t}:e)}preExecute(e,t){return"viewItem"===e.type&&(t={...t},(0,p.j7)(e)&&(t.ref=(0,a.rd)(e.node.commit))),this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null!=(i={...i}).ref)return(0,n.JX)(i.ref);if(void 0===i.refs){if(null==(t=(0,p.qx)(t,e)))return;let r=await o.nk.fromUri(t);if(i.repoPath=r.repoPath,null!=e)try{let t=e.document.isDirty?await this.container.git.getBlameForRangeContents(r,e.selection,e.document.getText()):await this.container.git.getBlameForRange(r,e.selection);if(void 0===t)return(0,h.gD)("Unable to find commits");i.refs=[...(0,u.x1)(t.commits.values(),e=>e.isUncommitted?void 0:e.ref)]}catch(e){return d.Vy.error(e,"ShowCommitsInViewCommand","getBlameForRange"),(0,h.qQ)("Unable to find commits")}else{if(null==r.sha)return;i.refs=[r.sha]}}return 1===i.refs.length?(0,n.JX)((0,a.kA)(i.refs[0],i.repoPath,{refType:"revision"})):(0,s.b)({command:"search",state:{repo:i?.repoPath,query:(0,l.gz)(i.refs),showResultsInSideBar:!0}})}};f=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?m(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&g(t,i,n),n})([(0,c.G5)()],f)},3700:(e,t,i)=>{i.d(t,{p:()=>p});var r=i(3807),s=i(6090),n=i(9432),o=i(7931),a=i(3536),l=i(7899),h=i(3916),c=i(3900),u=Object.defineProperty,d=Object.getOwnPropertyDescriptor;let p=class extends c.dY{constructor(e){super([r.Ts.RevealCommitInView,r.Ts.ShowQuickCommit]),this.container=e}static getMarkdownCommandArgs(e,t){return super.getMarkdownCommandArgsCore(r.Ts.ShowQuickCommit,"string"==typeof e?{sha:e,repoPath:t}:e)}preExecute(e,t){return e.command===r.Ts.RevealCommitInView&&((t={...t}).revealInView=!0),"viewItem"===e.type&&((t={...t}).sha=e.node.uri.sha,(0,c.j7)(e)&&(t.commit=e.node.commit)),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r,l;if(i?.commit==null){if(i?.repoPath!=null&&null!=i.sha)l=i.repoPath,r=o.nk.fromRepoPath(l);else{if(null==(t=(0,c.qx)(t,e)))return;l=(r=await o.nk.fromUri(t)).repoPath}}else null==i.sha&&(i.sha=i.commit.sha),r=i.commit.getGitUri(),l=i.commit.repoPath,null==t&&(t=i.commit.file?.uri);if(null==(i={...i}).sha){if(null==e)return;let t=e.selection.active.line;if(t<0)return;try{let e=await this.container.git.getBlameForLine(r,t);if(null==e){(0,a.gD)("Unable to show commit");return}if(e.commit.isUncommitted){(0,a.CR)("Unable to show commit");return}i.sha=e.commit.sha,l=e.commit.repoPath,i.commit=e.commit}catch(e){h.Vy.error(e,"ShowQuickCommitCommand",`getBlameForLine(${t})`),(0,a.qQ)("Unable to show commit");return}}try{if((null==i.commit||null!=i.commit.file)&&(null!=i.repoLog&&(i.commit=i.repoLog.commits.get(i.sha),null==i.commit&&(i.repoLog=void 0)),null==i.repoLog&&(i.commit=await this.container.git.getCommit(l,i.sha))),null==i.commit){(0,a.pW)("Unable to show commit");return}if(i.revealInView){await (0,n._c)(i.commit,{select:!0,focus:!0,expand:!0});return}await (0,s.b)({command:"show",state:{repo:l,reference:i.commit}})}catch(e){h.Vy.error(e,"ShowQuickCommitCommand"),(0,a.qQ)("Unable to show commit")}}};p=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?d(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&u(t,i,n),n})([(0,l.G5)()],p)},7746:(e,t,i)=>{i.d(t,{N:()=>g});var r=i(1398),s=i(3807),n=i(6090),o=i(7931),a=i(5287),l=i(3536),h=i(7899),c=i(3916),u=i(3900),d=Object.defineProperty,p=Object.getOwnPropertyDescriptor;let g=class extends u.dY{constructor(e){super([s.Ts.ShowQuickCommitFile,s.Ts.ShowQuickCommitRevision,s.Ts.ShowQuickCommitRevisionInDiffLeft,s.Ts.ShowQuickCommitRevisionInDiffRight,s.Ts.ShowLineCommitInView]),this.container=e}static getMarkdownCommandArgs(e){return super.getMarkdownCommandArgsCore(s.Ts.ShowQuickCommitFile,e)}async preExecute(e,t){if("editorLine"===e.type&&(t={...t,line:e.line}),e.command===s.Ts.ShowLineCommitInView&&(t={...t,inView:!0}),null!=e.editor&&e.command.startsWith(s.Ts.ShowQuickCommitRevision)){let i=await o.nk.fromUri(e.editor.document.uri);t={...t,sha:i.sha}}return"viewItem"===e.type&&(t={...t,sha:e.node.uri.sha},(0,u.j7)(e)&&(t.commit=e.node.commit)),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let d;if(null!=(t=(0,u.qx)(t,e))){if(null!=(i={...i}).revisionUri?(d=o.nk.fromRevisionUri(r.Uri.parse(i.revisionUri,!0)),i.sha=d.sha):d=await o.nk.fromUri(t),null==i.sha){let t=i.line??e?.selection.active.line;if(null==t)return;try{let e=await this.container.git.getBlameForLine(d,t);if(null==e){(0,l.gD)("Unable to show commit file details");return}if(e.commit.isUncommitted){(0,l.CR)("Unable to show commit file details");return}i.sha=e.commit.sha,i.commit=e.commit}catch(e){c.Vy.error(e,"ShowQuickCommitFileDetailsCommand",`getBlameForLine(${t})`),(0,l.qQ)("Unable to show commit file details");return}}try{if(null==i.commit&&(null!=i.fileLog&&(i.commit=i.fileLog.commits.get(i.sha),null==i.commit&&(i.fileLog=void 0)),null==i.fileLog)){let e=i.commit?.repoPath??d.repoPath;if(i.commit=await this.container.git.getCommitForFile(e,d,{ref:i.sha}),null==i.commit){(0,l.pW)("Unable to show commit file details");return}}if(null==i.commit){(0,l.pW)("Unable to show commit file details");return}let e=i.commit?.file?.path??d.fsPath;(0,a.WM)(i.commit)&&null==i.commit.files&&await i.commit.ensureFullDetails(),i.inView?await (0,h.RS)(s.Ts.ShowCommitsInView,{refs:[i.commit.sha],repoPath:i.commit.repoPath}):await (0,n.b)({command:"show",state:{repo:i.commit.repoPath,reference:i.commit,fileName:e}})}catch(e){c.Vy.error(e,"ShowQuickCommitFileDetailsCommand"),(0,l.qQ)("Unable to show commit file details")}}}};g=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?p(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&d(t,i,n),n})([(0,h.G5)()],g)},2434:(e,t,i)=>{i.d(t,{Vg:()=>n,Wn:()=>h,ZD:()=>l,md:()=>a,tK:()=>o});var r,s,n=((r=n||{}).CopyRemoteCommitUrl="gitlens.copyRemoteCommitUrl",r.CopyRemoteFileUrl="gitlens.copyRemoteFileUrl",r.DiffWithPrevious="gitlens.diffWithPrevious",r.OpenCommitOnRemote="gitlens.openCommitOnRemote",r.OpenFileOnRemote="gitlens.openFileOnRemote",r.RevealCommitInView="gitlens.revealCommitInView",r.ShowCommitsInView="gitlens.showCommitsInView",r.ShowQuickCommitDetails="gitlens.showQuickCommitDetails",r.ShowQuickCommitFileDetails="gitlens.showQuickCommitFileDetails",r.ShowQuickCurrentBranchHistory="gitlens.showQuickRepoHistory",r.ShowQuickFileHistory="gitlens.showQuickFileHistory",r.ToggleFileBlame="gitlens.toggleFileBlame",r.ToggleFileChanges="gitlens.toggleFileChanges",r.ToggleFileChangesOnly="gitlens.toggleFileChangesOnly",r.ToggleFileHeatmap="gitlens.toggleFileHeatmap",r),o=((s=o||{}).CopyRemoteCommitUrl="gitlens.copyRemoteCommitUrl",s.CopyRemoteFileUrl="gitlens.copyRemoteFileUrl",s.DiffWithPrevious="gitlens.diffWithPrevious",s.DiffWithWorking="gitlens.diffWithWorking",s.OpenCommitOnRemote="gitlens.openCommitOnRemote",s.OpenFileOnRemote="gitlens.openFileOnRemote",s.RevealCommitInView="gitlens.revealCommitInView",s.ShowCommitsInView="gitlens.showCommitsInView",s.ShowQuickCommitDetails="gitlens.showQuickCommitDetails",s.ShowQuickCommitFileDetails="gitlens.showQuickCommitFileDetails",s.ShowQuickCurrentBranchHistory="gitlens.showQuickRepoHistory",s.ShowQuickFileHistory="gitlens.showQuickFileHistory",s.ToggleCodeLens="gitlens.toggleCodeLens",s.ToggleFileBlame="gitlens.toggleFileBlame",s.ToggleFileChanges="gitlens.toggleFileChanges",s.ToggleFileChangesOnly="gitlens.toggleFileChangesOnly",s.ToggleFileHeatmap="gitlens.toggleFileHeatmap",s);let a=["defaultItemLimit","formats","pageItemLimit","showRelativeDateMarkers"],l=["branches","commits","commitDetails","contributors","drafts","fileHistory","lineHistory","patchDetails","pullRequest","remotes","repositories","searchAndCompare","stashes","tags","worktrees","workspaces"];function h(e){switch(e){case"silent":return"off";case"errors":return"error";case"verbose":return"info";default:return e}}},3807:(e,t,i)=>{i.d(t,{D2:()=>l,DS:()=>h,EO:()=>v,HP:()=>y,OB:()=>w,Od:()=>r,Ts:()=>f,WZ:()=>n,e:()=>C,lD:()=>o,s7:()=>m,tM:()=>a,uR:()=>s,xB:()=>b});let r="gitlens",s=80,n="ᴘʀᴇᴠɪᴇᴡ",o="ᴘʀᴏ",a="ᴾᴿᴼ",l=Object.freeze({".png":"image/png",".gif":"image/gif",".jpg":"image/jpeg",".jpeg":"image/jpeg",".jpe":"image/jpeg",".webp":"image/webp",".tif":"image/tiff",".tiff":"image/tiff",".bmp":"image/bmp"}),h=Object.freeze({codeSuggest:"https://gitkraken.com/solutions/code-suggest?utm_source=gitlens-extension&utm_medium=in-app-links",cloudPatches:"https://gitkraken.com/solutions/cloud-patches?utm_source=gitlens-extension&utm_medium=in-app-links",graph:"https://gitkraken.com/solutions/commit-graph?utm_source=gitlens-extension&utm_medium=in-app-links",launchpad:"https://gitkraken.com/solutions/launchpad?utm_source=gitlens-extension&utm_medium=in-app-links",platform:"https://gitkraken.com/devex?utm_source=gitlens-extension&utm_medium=in-app-links",pricing:"https://gitkraken.com/gitlens/pricing?utm_source=gitlens-extension&utm_medium=in-app-links",proFeatures:"https://gitkraken.com/gitlens/pro-features?utm_source=gitlens-extension&utm_medium=in-app-links",security:"https://help.gitkraken.com/gitlens/security?utm_source=gitlens-extension&utm_medium=in-app-links",workspaces:"https://gitkraken.com/solutions/workspaces?utm_source=gitlens-extension&utm_medium=in-app-links",cli:"https://gitkraken.com/cli?utm_source=gitlens-extension&utm_medium=in-app-links",browserExtension:"https://gitkraken.com/browser-extension?utm_source=gitlens-extension&utm_medium=in-app-links",desktop:"https://gitkraken.com/git-client?utm_source=gitlens-extension&utm_medium=in-app-links",gkdev:"https://gitkraken.dev?utm_source=gitlens-extension&utm_medium=in-app-links",releaseNotes:"https://help.gitkraken.com/gitlens/gitlens-release-notes-current/",releaseAnnouncement:"https://www.gitkraken.com/blog/gitkraken-launches-devex-platform-acquires-codesee?utm_source=gitlens-extension&utm_medium=in-app-links"});var c,u,d,p,g,m=((c=m||{})[c.Hash=35]="Hash",c[c.Slash=47]="Slash",c[c.Digit0=48]="Digit0",c[c.Digit1=49]="Digit1",c[c.Digit2=50]="Digit2",c[c.Digit3=51]="Digit3",c[c.Digit4=52]="Digit4",c[c.Digit5=53]="Digit5",c[c.Digit6=54]="Digit6",c[c.Digit7=55]="Digit7",c[c.Digit8=56]="Digit8",c[c.Digit9=57]="Digit9",c[c.Backslash=92]="Backslash",c[c.A=65]="A",c[c.B=66]="B",c[c.C=67]="C",c[c.D=68]="D",c[c.E=69]="E",c[c.F=70]="F",c[c.Z=90]="Z",c[c.a=97]="a",c[c.b=98]="b",c[c.c=99]="c",c[c.d=100]="d",c[c.e=101]="e",c[c.f=102]="f",c[c.z=122]="z",c),f=((u=f||{}).ActionPrefix="gitlens.action.",u.AddAuthors="gitlens.addAuthors",u.BrowseRepoAtRevision="gitlens.browseRepoAtRevision",u.BrowseRepoAtRevisionInNewWindow="gitlens.browseRepoAtRevisionInNewWindow",u.BrowseRepoBeforeRevision="gitlens.browseRepoBeforeRevision",u.BrowseRepoBeforeRevisionInNewWindow="gitlens.browseRepoBeforeRevisionInNewWindow",u.ClearFileAnnotations="gitlens.clearFileAnnotations",u.CloseUnchangedFiles="gitlens.closeUnchangedFiles",u.CompareWith="gitlens.compareWith",u.CompareHeadWith="gitlens.compareHeadWith",u.CompareWorkingWith="gitlens.compareWorkingWith",u.ComputingFileAnnotations="gitlens.computingFileAnnotations",u.ConnectRemoteProvider="gitlens.connectRemoteProvider",u.CopyCurrentBranch="gitlens.copyCurrentBranch",u.CopyDeepLinkToBranch="gitlens.copyDeepLinkToBranch",u.CopyDeepLinkToCommit="gitlens.copyDeepLinkToCommit",u.CopyDeepLinkToComparison="gitlens.copyDeepLinkToComparison",u.CopyDeepLinkToFile="gitlens.copyDeepLinkToFile",u.CopyDeepLinkToFileAtRevision="gitlens.copyDeepLinkToFileAtRevision",u.CopyDeepLinkToLines="gitlens.copyDeepLinkToLines",u.CopyDeepLinkToRepo="gitlens.copyDeepLinkToRepo",u.CopyDeepLinkToTag="gitlens.copyDeepLinkToTag",u.CopyDeepLinkToWorkspace="gitlens.copyDeepLinkToWorkspace",u.CopyMessageToClipboard="gitlens.copyMessageToClipboard",u.CopyRemoteBranchesUrl="gitlens.copyRemoteBranchesUrl",u.CopyRemoteBranchUrl="gitlens.copyRemoteBranchUrl",u.CopyRemoteCommitUrl="gitlens.copyRemoteCommitUrl",u.CopyRemoteComparisonUrl="gitlens.copyRemoteComparisonUrl",u.CopyRemoteFileUrl="gitlens.copyRemoteFileUrlToClipboard",u.CopyRemoteFileUrlWithoutRange="gitlens.copyRemoteFileUrlWithoutRange",u.CopyRemoteFileUrlFrom="gitlens.copyRemoteFileUrlFrom",u.CopyRemotePullRequestUrl="gitlens.copyRemotePullRequestUrl",u.CopyRemoteRepositoryUrl="gitlens.copyRemoteRepositoryUrl",u.CopyShaToClipboard="gitlens.copyShaToClipboard",u.CopyRelativePathToClipboard="gitlens.copyRelativePathToClipboard",u.ApplyPatchFromClipboard="gitlens.applyPatchFromClipboard",u.CopyPatchToClipboard="gitlens.copyPatchToClipboard",u.CopyWorkingChangesToWorktree="gitlens.copyWorkingChangesToWorktree",u.CreatePatch="gitlens.createPatch",u.CreateCloudPatch="gitlens.createCloudPatch",u.CreatePullRequestOnRemote="gitlens.createPullRequestOnRemote",u.DiffDirectory="gitlens.diffDirectory",u.DiffDirectoryWithHead="gitlens.diffDirectoryWithHead",u.DiffFolderWithRevision="gitlens.diffFolderWithRevision",u.DiffFolderWithRevisionFrom="gitlens.diffFolderWithRevisionFrom",u.DiffWith="gitlens.diffWith",u.DiffWithNext="gitlens.diffWithNext",u.DiffWithNextInDiffLeft="gitlens.diffWithNextInDiffLeft",u.DiffWithNextInDiffRight="gitlens.diffWithNextInDiffRight",u.DiffWithPrevious="gitlens.diffWithPrevious",u.DiffWithPreviousInDiffLeft="gitlens.diffWithPreviousInDiffLeft",u.DiffWithPreviousInDiffRight="gitlens.diffWithPreviousInDiffRight",u.DiffLineWithPrevious="gitlens.diffLineWithPrevious",u.DiffWithRevision="gitlens.diffWithRevision",u.DiffWithRevisionFrom="gitlens.diffWithRevisionFrom",u.DiffWithWorking="gitlens.diffWithWorking",u.DiffWithWorkingInDiffLeft="gitlens.diffWithWorkingInDiffLeft",u.DiffWithWorkingInDiffRight="gitlens.diffWithWorkingInDiffRight",u.DiffLineWithWorking="gitlens.diffLineWithWorking",u.DisconnectRemoteProvider="gitlens.disconnectRemoteProvider",u.DisableDebugLogging="gitlens.disableDebugLogging",u.EnableDebugLogging="gitlens.enableDebugLogging",u.DisableRebaseEditor="gitlens.disableRebaseEditor",u.EnableRebaseEditor="gitlens.enableRebaseEditor",u.ExternalDiff="gitlens.externalDiff",u.ExternalDiffAll="gitlens.externalDiffAll",u.FetchRepositories="gitlens.fetchRepositories",u.GenerateCommitMessage="gitlens.generateCommitMessage",u.GetStarted="gitlens.getStarted",u.GKSwitchOrganization="gitlens.gk.switchOrganization",u.InviteToLiveShare="gitlens.inviteToLiveShare",u.OpenBlamePriorToChange="gitlens.openBlamePriorToChange",u.OpenBranchesOnRemote="gitlens.openBranchesOnRemote",u.OpenBranchOnRemote="gitlens.openBranchOnRemote",u.OpenCurrentBranchOnRemote="gitlens.openCurrentBranchOnRemote",u.OpenChangedFiles="gitlens.openChangedFiles",u.OpenCommitOnRemote="gitlens.openCommitOnRemote",u.OpenComparisonOnRemote="gitlens.openComparisonOnRemote",u.OpenFileHistory="gitlens.openFileHistory",u.OpenFileFromRemote="gitlens.openFileFromRemote",u.OpenFileOnRemote="gitlens.openFileOnRemote",u.OpenFileOnRemoteFrom="gitlens.openFileOnRemoteFrom",u.OpenFileAtRevision="gitlens.openFileRevision",u.OpenFileAtRevisionFrom="gitlens.openFileRevisionFrom",u.OpenFolderHistory="gitlens.openFolderHistory",u.OpenOnRemote="gitlens.openOnRemote",u.OpenCloudPatch="gitlens.openCloudPatch",u.OpenPatch="gitlens.openPatch",u.OpenPullRequestOnRemote="gitlens.openPullRequestOnRemote",u.OpenAssociatedPullRequestOnRemote="gitlens.openAssociatedPullRequestOnRemote",u.OpenRepoOnRemote="gitlens.openRepoOnRemote",u.OpenRevisionFile="gitlens.openRevisionFile",u.OpenRevisionFileInDiffLeft="gitlens.openRevisionFileInDiffLeft",u.OpenRevisionFileInDiffRight="gitlens.openRevisionFileInDiffRight",u.OpenWalkthrough="gitlens.openWalkthrough",u.OpenWorkingFile="gitlens.openWorkingFile",u.OpenWorkingFileInDiffLeft="gitlens.openWorkingFileInDiffLeft",u.OpenWorkingFileInDiffRight="gitlens.openWorkingFileInDiffRight",u.PullRepositories="gitlens.pullRepositories",u.PushRepositories="gitlens.pushRepositories",u.GitCommands="gitlens.gitCommands",u.GitCommandsBranch="gitlens.gitCommands.branch",u.GitCommandsBranchCreate="gitlens.gitCommands.branch.create",u.GitCommandsBranchDelete="gitlens.gitCommands.branch.delete",u.GitCommandsBranchPrune="gitlens.gitCommands.branch.prune",u.GitCommandsBranchRename="gitlens.gitCommands.branch.rename",u.GitCommandsCheckout="gitlens.gitCommands.checkout",u.GitCommandsCherryPick="gitlens.gitCommands.cherryPick",u.GitCommandsHistory="gitlens.gitCommands.history",u.GitCommandsMerge="gitlens.gitCommands.merge",u.GitCommandsRebase="gitlens.gitCommands.rebase",u.GitCommandsRemote="gitlens.gitCommands.remote",u.GitCommandsRemoteAdd="gitlens.gitCommands.remote.add",u.GitCommandsRemotePrune="gitlens.gitCommands.remote.prune",u.GitCommandsRemoteRemove="gitlens.gitCommands.remote.remove",u.GitCommandsReset="gitlens.gitCommands.reset",u.GitCommandsRevert="gitlens.gitCommands.revert",u.GitCommandsShow="gitlens.gitCommands.show",u.GitCommandsStash="gitlens.gitCommands.stash",u.GitCommandsStashDrop="gitlens.gitCommands.stash.drop",u.GitCommandsStashList="gitlens.gitCommands.stash.list",u.GitCommandsStashPop="gitlens.gitCommands.stash.pop",u.GitCommandsStashPush="gitlens.gitCommands.stash.push",u.GitCommandsStashRename="gitlens.gitCommands.stash.rename",u.GitCommandsStatus="gitlens.gitCommands.status",u.GitCommandsSwitch="gitlens.gitCommands.switch",u.GitCommandsTag="gitlens.gitCommands.tag",u.GitCommandsTagCreate="gitlens.gitCommands.tag.create",u.GitCommandsTagDelete="gitlens.gitCommands.tag.delete",u.GitCommandsWorktree="gitlens.gitCommands.worktree",u.GitCommandsWorktreeCreate="gitlens.gitCommands.worktree.create",u.GitCommandsWorktreeDelete="gitlens.gitCommands.worktree.delete",u.GitCommandsWorktreeOpen="gitlens.gitCommands.worktree.open",u.OpenOrCreateWorktreeForGHPR="gitlens.ghpr.views.openOrCreateWorktree",u.PlusHide="gitlens.plus.hide",u.PlusLogin="gitlens.plus.login",u.PlusLogout="gitlens.plus.logout",u.PlusManage="gitlens.plus.manage",u.PlusManageCloudIntegrations="gitlens.plus.cloudIntegrations.manage",u.PlusReactivateProTrial="gitlens.plus.reactivateProTrial",u.PlusResendVerification="gitlens.plus.resendVerification",u.PlusRestore="gitlens.plus.restore",u.PlusShowPlans="gitlens.plus.showPlans",u.PlusSignUp="gitlens.plus.signUp",u.PlusStartPreviewTrial="gitlens.plus.startPreviewTrial",u.PlusUpgrade="gitlens.plus.upgrade",u.PlusValidate="gitlens.plus.validate",u.QuickOpenFileHistory="gitlens.quickOpenFileHistory",u.RefreshLaunchpad="gitlens.launchpad.refresh",u.RefreshGraph="gitlens.graph.refresh",u.RefreshHover="gitlens.refreshHover",u.ResetAvatarCache="gitlens.resetAvatarCache",u.ResetAIKey="gitlens.resetAIKey",u.ResetSuppressedWarnings="gitlens.resetSuppressedWarnings",u.ResetTrackedUsage="gitlens.resetTrackedUsage",u.ResetViewsLayout="gitlens.resetViewsLayout",u.RevealCommitInView="gitlens.revealCommitInView",u.ShareAsCloudPatch="gitlens.shareAsCloudPatch",u.SearchCommits="gitlens.showCommitSearch",u.SearchCommitsInView="gitlens.views.searchAndCompare.searchCommits",u.ShowBranchesView="gitlens.showBranchesView",u.ShowCommitDetailsView="gitlens.showCommitDetailsView",u.ShowCommitInView="gitlens.showCommitInView",u.ShowCommitsInView="gitlens.showCommitsInView",u.ShowCommitsView="gitlens.showCommitsView",u.ShowContributorsView="gitlens.showContributorsView",u.ShowDraftsView="gitlens.showDraftsView",u.ShowFileHistoryView="gitlens.showFileHistoryView",u.ShowFocusPage="gitlens.showFocusPage",u.ShowGraph="gitlens.showGraph",u.ShowGraphPage="gitlens.showGraphPage",u.ShowGraphView="gitlens.showGraphView",u.ShowHomeView="gitlens.showHomeView",u.ShowAccountView="gitlens.showAccountView",u.ShowInCommitGraph="gitlens.showInCommitGraph",u.ShowInCommitGraphView="gitlens.showInCommitGraphView",u.ShowInDetailsView="gitlens.showInDetailsView",u.ShowInTimeline="gitlens.showInTimeline",u.ShowLastQuickPick="gitlens.showLastQuickPick",u.ShowLaunchpad="gitlens.showLaunchpad",u.ShowLineCommitInView="gitlens.showLineCommitInView",u.ShowLineHistoryView="gitlens.showLineHistoryView",u.OpenOnlyChangedFiles="gitlens.openOnlyChangedFiles",u.ShowPatchDetailsPage="gitlens.showPatchDetailsPage",u.ShowQuickBranchHistory="gitlens.showQuickBranchHistory",u.ShowQuickCommit="gitlens.showQuickCommitDetails",u.ShowQuickCommitFile="gitlens.showQuickCommitFileDetails",u.ShowQuickCurrentBranchHistory="gitlens.showQuickRepoHistory",u.ShowQuickFileHistory="gitlens.showQuickFileHistory",u.ShowQuickRepoStatus="gitlens.showQuickRepoStatus",u.ShowQuickCommitRevision="gitlens.showQuickRevisionDetails",u.ShowQuickCommitRevisionInDiffLeft="gitlens.showQuickRevisionDetailsInDiffLeft",u.ShowQuickCommitRevisionInDiffRight="gitlens.showQuickRevisionDetailsInDiffRight",u.ShowQuickStashList="gitlens.showQuickStashList",u.ShowRemotesView="gitlens.showRemotesView",u.ShowRepositoriesView="gitlens.showRepositoriesView",u.ShowSearchAndCompareView="gitlens.showSearchAndCompareView",u.ShowSettingsPage="gitlens.showSettingsPage",u.ShowSettingsPageAndJumpToFileAnnotations="gitlens.showSettingsPage!file-annotations",u.ShowSettingsPageAndJumpToBranchesView="gitlens.showSettingsPage!branches-view",u.ShowSettingsPageAndJumpToCommitsView="gitlens.showSettingsPage!commits-view",u.ShowSettingsPageAndJumpToContributorsView="gitlens.showSettingsPage!contributors-view",u.ShowSettingsPageAndJumpToFileHistoryView="gitlens.showSettingsPage!file-history-view",u.ShowSettingsPageAndJumpToLineHistoryView="gitlens.showSettingsPage!line-history-view",u.ShowSettingsPageAndJumpToRemotesView="gitlens.showSettingsPage!remotes-view",u.ShowSettingsPageAndJumpToRepositoriesView="gitlens.showSettingsPage!repositories-view",u.ShowSettingsPageAndJumpToSearchAndCompareView="gitlens.showSettingsPage!search-compare-view",u.ShowSettingsPageAndJumpToStashesView="gitlens.showSettingsPage!stashes-view",u.ShowSettingsPageAndJumpToTagsView="gitlens.showSettingsPage!tags-view",u.ShowSettingsPageAndJumpToWorkTreesView="gitlens.showSettingsPage!worktrees-view",u.ShowSettingsPageAndJumpToViews="gitlens.showSettingsPage!views",u.ShowSettingsPageAndJumpToCommitGraph="gitlens.showSettingsPage!commit-graph",u.ShowSettingsPageAndJumpToAutolinks="gitlens.showSettingsPage!autolinks",u.ShowStashesView="gitlens.showStashesView",u.ShowTagsView="gitlens.showTagsView",u.ShowTimelinePage="gitlens.showTimelinePage",u.ShowTimelineView="gitlens.showTimelineView",u.ShowWelcomePage="gitlens.showWelcomePage",u.ShowWorktreesView="gitlens.showWorktreesView",u.ShowWorkspacesView="gitlens.showWorkspacesView",u.StashApply="gitlens.stashApply",u.StashSave="gitlens.stashSave",u.StashSaveFiles="gitlens.stashSaveFiles",u.SwitchAIModel="gitlens.switchAIModel",u.SwitchMode="gitlens.switchMode",u.ToggleCodeLens="gitlens.toggleCodeLens",u.ToggleFileBlame="gitlens.toggleFileBlame",u.ToggleFileBlameInDiffLeft="gitlens.toggleFileBlameInDiffLeft",u.ToggleFileBlameInDiffRight="gitlens.toggleFileBlameInDiffRight",u.ToggleFileChanges="gitlens.toggleFileChanges",u.ToggleFileChangesOnly="gitlens.toggleFileChangesOnly",u.ToggleFileHeatmap="gitlens.toggleFileHeatmap",u.ToggleFileHeatmapInDiffLeft="gitlens.toggleFileHeatmapInDiffLeft",u.ToggleFileHeatmapInDiffRight="gitlens.toggleFileHeatmapInDiffRight",u.ToggleLaunchpadIndicator="gitlens.launchpad.indicator.toggle",u.ToggleGraph="gitlens.toggleGraph",u.ToggleMaximizedGraph="gitlens.toggleMaximizedGraph",u.ToggleLineBlame="gitlens.toggleLineBlame",u.ToggleReviewMode="gitlens.toggleReviewMode",u.ToggleZenMode="gitlens.toggleZenMode",u.ViewsCopy="gitlens.views.copy",u.ViewsCopyAsMarkdown="gitlens.views.copyAsMarkdown",u.ViewsCopyUrl="gitlens.views.copyUrl",u.ViewsOpenDirectoryDiff="gitlens.views.openDirectoryDiff",u.ViewsOpenDirectoryDiffWithWorking="gitlens.views.openDirectoryDiffWithWorking",u.ViewsOpenUrl="gitlens.views.openUrl",u.Deprecated_DiffHeadWith="gitlens.diffHeadWith",u.Deprecated_DiffWorkingWith="gitlens.diffWorkingWith",u.Deprecated_OpenBranchesInRemote="gitlens.openBranchesInRemote",u.Deprecated_OpenBranchInRemote="gitlens.openBranchInRemote",u.Deprecated_OpenCommitInRemote="gitlens.openCommitInRemote",u.Deprecated_OpenFileInRemote="gitlens.openFileInRemote",u.Deprecated_OpenInRemote="gitlens.openInRemote",u.Deprecated_OpenRepoInRemote="gitlens.openRepoInRemote",u.Deprecated_ShowFileHistoryInView="gitlens.showFileHistoryInView",u);let w=new Map([["workbench.view.scm",["branches","commits","remotes","repositories","stashes","tags","worktrees","contributors"]],["workbench.view.extension.gitlensPanel",["graph","graphDetails"]],["workbench.view.extension.gitlensInspect",["commitDetails","fileHistory","lineHistory","timeline","searchAndCompare"]],["workbench.view.extension.gitlens",["home","workspaces","account"]]]);var v=((d=v||{}).AngleBracketLeftHeavy="❰",d.AngleBracketRightHeavy="❱",d.ArrowBack="↩",d.ArrowDown="↓",d.ArrowDownUp="⇵",d.ArrowDropRight="⤷",d.ArrowHeadRight="➤",d.ArrowLeft="←",d.ArrowLeftDouble="⇐",d.ArrowLeftRight="↔",d.ArrowLeftRightDouble="⇔",d.ArrowLeftRightDoubleStrike="⇎",d.ArrowLeftRightLong="⟷",d.ArrowRight="→",d.ArrowRightDouble="⇒",d.ArrowRightHollow="⇨",d.ArrowUp="↑",d.ArrowUpDown="⇅",d.ArrowUpRight="↗",d.ArrowsHalfLeftRight="⇋",d.ArrowsHalfRightLeft="⇌",d.ArrowsLeftRight="⇆",d.ArrowsRightLeft="⇄",d.Asterisk="∗",d.Check="✔",d.Dash="—",d.Dot="•",d.Ellipsis="…",d.EnDash="–",d.Envelope="✉",d.EqualsTriple="≡",d.Flag="⚑",d.FlagHollow="⚐",d.MiddleEllipsis="⋯",d.MuchLessThan="≪",d.MuchGreaterThan="≫",d.Pencil="✎",d.Space=" ",d.SpaceThin=" ",d.SpaceThinnest=" ",d.SquareWithBottomShadow="❏",d.SquareWithTopShadow="❐",d.Warning="⚠",d.ZeroWidthSpace="​",d);let y=["left","alt+left","ctrl+left","right","alt+right","ctrl+right","alt+,","alt+.","alt+enter","ctrl+enter","escape"];var b=((p=b||{}).DebugConsole="debug",p.File="file",p.Git="git",p.GitHub="github",p.GitLens="gitlens",p.Output="output",p.PRs="pr",p.Terminal="vscode-terminal",p.Vsls="vsls",p.VslsScc="vsls-scc",p.Virtual="vscode-vfs",p),C=((g=C||{}).Version="gitlens:synced:version",g.PreReleaseVersion="gitlens:synced:preVersion",g.HomeViewWelcomeVisible="gitlens:views:welcome:visible",g)},2972:(e,t,i)=>{i.d(t,{m:()=>nO,u:()=>nx});var r,s,n=i(1398),o=i(1364),a=i(3807),l=i(6580),h=i(8803),c=i(4703),u=i(1310),d=i(7931),p=i(9102),g=i(5287),m=i(5313),f=i(4693),w=i(5248),v=i(6645),y=i(7788),b=i(9634),C=i(7736),R=i(468),S=i(4832),P=i(3916),A=i(9858);let k=/\/_git\/?/i,D=/^DefaultCollection\//i,T=/^(.*?)\/(.*?)\/(.*)/,_=/^(ssh|vs-ssh)\./i,I=/^\/?v\d\//i,$=/path=([^&]+)/i,E=/line=(\d+)(?:&lineEnd=(\d+))?/;let AzureDevOpsRemote=class AzureDevOpsRemote extends A.u{constructor(e,t,i,r,s=!1){if(_.test(e)){t=t.replace(I,""),e=e.replace(_,"");let i=T.exec(t);if(null!=i){let[,r,n,o]=i;s?(e=`${r}.${e}`,t=`${n}/_git/${o}`):t=`${r}/${n}/_git/${o}`}}super(e,t=decodeURIComponent(t),i,r)}_autolinks;get autolinks(){if(void 0===this._autolinks){let e=this.baseUrl.replace(k,"/");this._autolinks=[{prefix:"#",url:`${e}/_workitems/edit/<num>`,title:`Open Work Item #<num> on ${this.name}`,type:"issue",description:`${this.name} Work Item #<num>`},{prefix:"PR ",url:`${this.baseUrl}/pullrequest/<num>`,title:`Open Pull Request #<num> on ${this.name}`,type:"pullrequest",description:`${this.name} Pull Request #<num>`}]}return this._autolinks}get icon(){return"azdo"}get id(){return"azure-devops"}get gkProviderId(){return"azureDevops"}get name(){return"Azure DevOps"}_displayPath;get displayPath(){return void 0===this._displayPath&&(this._displayPath=this.path.replace(k,"/").replace(D,"")),this._displayPath}async getLocalInfoFromRemoteUri(e,t,i){let r,s;if(t.authority!==this.domain)return Promise.resolve(void 0);if(t.query){let e=E.exec(t.query);if(null!=e){let[,t,i]=e;t&&(r=parseInt(t,10),i&&(s=parseInt(i,10)))}}let n=$.exec(t.query);if(null==n)return Promise.resolve(void 0);let[,o]=n,a=e.toAbsoluteUri(o,{validate:i?.validate});return Promise.resolve(null!=a?{uri:a,startLine:r,endLine:s}:void 0)}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/?version=GB${e}&_a=history`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commit/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/branchCompare?baseVersion=GB${e}&targetVersion=GB${t}`)}getUrlForFile(e,t,i,r){let s;return(s=null!=r?r.start.line===r.end.line?`&line=${r.start.line}&lineStartColumn=${r.start.character+1}&lineEndColumn=${r.end.character+1}`:`&line=${r.start.line}&lineEnd=${r.end.line}&lineStartColumn=${r.start.character+1}&lineEndColumn=${r.end.character+1}`:"",i)?this.encodeUrl(`${this.baseUrl}?path=${e}&version=GC${i}${s}&_a=contents`):t?this.encodeUrl(`${this.baseUrl}/?path=/${e}&version=GB${t}&_a=contents${s}`):this.encodeUrl(`${this.baseUrl}?path=/${e}${s}`)}};let O=/^\/([^/]+)\/([^/]+?)\/src(.+)$/i,x=/^lines-(\d+)(?::(\d+))?$/;let BitbucketRemote=class BitbucketRemote extends A.u{constructor(e,t,i,r,s=!1){super(e,t,i,r,s)}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[{prefix:"issue #",url:`${this.baseUrl}/issues/<num>`,title:`Open Issue #<num> on ${this.name}`,type:"issue",description:`${this.name} Issue #<num>`},{prefix:"pull request #",url:`${this.baseUrl}/pull-requests/<num>`,title:`Open Pull Request #<num> on ${this.name}`,type:"pullrequest",description:`${this.name} Pull Request #<num>`}]),this._autolinks}get icon(){return"bitbucket"}get id(){return"bitbucket"}get gkProviderId(){return"bitbucket"}get name(){return this.formatName("Bitbucket")}async getLocalInfoFromRemoteUri(e,t,i){let r,s,n;if(t.authority!==this.domain||(i?.validate??!0)&&!t.path.startsWith(`/${this.path}/`))return;if(t.fragment){let e=x.exec(t.fragment);if(null!=e){let[,t,i]=e;t&&(r=parseInt(t,10),i&&(s=parseInt(i,10)))}}let o=O.exec(t.path);if(null==o)return;let[,,,a]=o,l=a.indexOf("/",1);if(-1!==l){let t=a.substring(1,l);if((0,v.HH)(t)){let t=e.toAbsoluteUri(a.substr(l),{validate:i?.validate});if(null!=t)return{uri:t,startLine:r,endLine:s}}}let h=new Map;l=a.length;do l=a.lastIndexOf("/",l-1),n=a.substring(1,l),h.set(n,a.substr(l));while(l>0)if(0!==h.size){let{values:t}=await e.getBranches({filter:e=>e.remote&&h.has(e.getNameWithoutRemote())});for(let n of t){let t=h.get(n.getNameWithoutRemote());if(null==t)continue;let o=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=o)return{uri:o,startLine:r,endLine:s}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/branch/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commits/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/branches/compare/${e}%0D${t}`).replace("%250D","%0D")}getUrlForFile(e,t,i,r){let s;return(s=null!=r?r.start.line===r.end.line?`#${e}-${r.start.line}`:`#${e}-${r.start.line}:${r.end.line}`:"",i)?`${this.encodeUrl(`${this.baseUrl}/src/${i}/${e}`)}${s}`:t?`${this.encodeUrl(`${this.baseUrl}/src/${t}/${e}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}?path=${e}`)}${s}`}};let F=/^\/([^/]+)\/([^/]+?)\/src(.+)$/i,B=/^lines-(\d+)(?::(\d+))?$/;let BitbucketServerRemote=class BitbucketServerRemote extends A.u{constructor(e,t,i,r,s=!1){super(e,t,i,r,s)}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[{prefix:"issue #",url:`${this.baseUrl}/issues/<num>`,title:`Open Issue #<num> on ${this.name}`,type:"issue",description:`${this.name} Issue #<num>`},{prefix:"pull request #",ignoreCase:!0,url:`${this.baseUrl}/pull-requests/<num>`,title:`Open Pull Request #<num> on ${this.name}`,type:"pullrequest",description:`${this.name} Pull Request #<num>`}]),this._autolinks}get baseUrl(){let[e,t]=this.splitPath();return`${this.protocol}://${this.domain}/projects/${e}/repos/${t}`}splitPath(){if(this.path.startsWith("scm/")){let e=this.path.replace("scm/","").indexOf("/");return[this.path.substring(0,e),this.path.substring(e+1)]}return super.splitPath()}get icon(){return"bitbucket"}get id(){return"bitbucket-server"}get gkProviderId(){return"bitbucketServer"}get name(){return this.formatName("Bitbucket Server")}async getLocalInfoFromRemoteUri(e,t,i){let r,s,n;if(t.authority!==this.domain||(i?.validate??!0)&&!t.path.startsWith(`/${this.path}/`))return;if(t.fragment){let e=B.exec(t.fragment);if(null!=e){let[,t,i]=e;t&&(r=parseInt(t,10),i&&(s=parseInt(i,10)))}}let o=F.exec(t.path);if(null==o)return;let[,,,a]=o,l=a.indexOf("/",1);if(-1!==l){let t=a.substring(1,l);if((0,v.HH)(t)){let t=e.toAbsoluteUri(a.substr(l),{validate:i?.validate});if(null!=t)return{uri:t,startLine:r,endLine:s}}}let h=new Map;l=a.length;do l=a.lastIndexOf("/",l-1),n=a.substring(1,l),h.set(n,a.substr(l));while(l>0)if(0!==h.size){let{values:t}=await e.getBranches({filter:e=>e.remote&&h.has(e.getNameWithoutRemote())});for(let n of t){let t=h.get(n.getNameWithoutRemote());if(null==t)continue;let o=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=o)return{uri:o,startLine:r,endLine:s}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/commits?until=${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commits/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/branches/compare/${e}%0D${t}`).replace("%250D","%0D")}getUrlForFile(e,t,i,r){let s;return(s=null!=r?r.start.line===r.end.line?`#${r.start.line}`:`#${r.start.line}-${r.end.line}`:"",i)?`${this.encodeUrl(`${this.baseUrl}/browse/${e}?at=${i}`)}${s}`:t?`${this.encodeUrl(`${this.baseUrl}/browse/${e}?at=${t}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}/browse/${e}`)}${s}`}};var L=i(7279);let CustomRemote=class CustomRemote extends A.u{urls;constructor(e,t,i,r,s){super(e,t,r,s,!0),this.urls=i}get id(){return"custom"}get gkProviderId(){}get name(){return this.formatName("Custom")}getLocalInfoFromRemoteUri(e,t){return Promise.resolve(void 0)}getUrlForRepository(){return this.getUrl(this.urls.repository,this.getContext())}getUrlForBranches(){return this.getUrl(this.urls.branches,this.getContext())}getUrlForBranch(e){return this.getUrl(this.urls.branch,this.getContext({branch:e}))}getUrlForCommit(e){return this.getUrl(this.urls.commit,this.getContext({id:e}))}getUrlForComparison(e,t,i){if(null!=this.urls.comparison)return this.getUrl(this.urls.comparison,this.getContext({ref1:e,ref2:t,notation:i}))}getUrlForFile(e,t,i,r){let s,n,o;s=null!=r?r.start.line===r.end.line?(0,L.GW)(this.urls.fileLine,{line:r.start.line,line_encoded:r.start.line}):(0,L.GW)(this.urls.fileRange,{start:r.start.line,start_encoded:r.start.line,end:r.end.line,end_encoded:r.end.line}):"",i?(n=this.urls.fileInCommit,o=this.getContext({id:i,file:e,line:s})):t?(n=this.urls.fileInBranch,o=this.getContext({branch:t,file:e,line:s})):(n=this.urls.file,o=this.getContext({file:e,line:s}));let a=(0,L.GW)(n,o);if((0,L.Vx)(n).some(e=>e.key.endsWith("_encoded")))return a;let l=a.includes("#");if(a=this.encodeUrl(a),l){let e=a.lastIndexOf("%23");-1!==e&&(a=`${a.substring(0,e)}#${a.substring(e+3)}`)}return a}getUrl(e,t){let i=(0,L.GW)(e,t);return(0,L.Vx)(e).some(e=>e.key.endsWith("_encoded"))?i:this.encodeUrl(i)}getContext(e){let[t,i]=this.splitPath(),r={repo:this.path,repoBase:t,repoPath:i,...e};for(let[e,t]of Object.entries(r))r[`${e}_encoded`]=encodeURIComponent(t);return r}};let U=/^\/([^/]+)\/\+(.+)$/i,W=/^(\d+)$/;let GerritRemote=class GerritRemote extends A.u{constructor(e,t,i,r,s=!1,n=!0){n&&"ssh"!==i&&(t=t.replace(/^a\//,"")),super(e,t,i,r,s)}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[{prefix:"Change-Id: ",url:`${this.baseReviewUrl}/q/<num>`,title:`Open Change #<num> on ${this.name}`,alphanumeric:!0,description:`${this.name} Change #<num>`}]),this._autolinks}get icon(){return"gerrit"}get id(){return"gerrit"}get gkProviderId(){}get name(){return this.formatName("Gerrit")}get baseUrl(){return`${this.protocol}://${this.domain}/plugins/gitiles/${this.path}`}get baseReviewUrl(){return`${this.protocol}://${this.domain}`}async getLocalInfoFromRemoteUri(e,t,i){let r;if(t.authority!==this.domain||(i?.validate??!0)&&!t.path.startsWith(`/${this.path}/`))return;if(t.fragment){let e=W.exec(t.fragment);if(null!=e){let[,t]=e;t&&(r=parseInt(t,10))}}let s=U.exec(t.path);if(null==s)return;let[,,n]=s,o=n.indexOf("/",1);if(-1!==o){let t=n.substring(1,o);if((0,v.HH)(t)||"HEAD"==t){let t=e.toAbsoluteUri(n.substr(o),{validate:i?.validate});if(null!=t)return{uri:t,startLine:r}}}if(n.startsWith("/refs/heads/")){let t;let s=n.substr(12),a=new Map;o=s.length;do o=s.lastIndexOf("/",o-1),t=s.substring(1,o),a.set(t,s.substr(o));while(o>0)if(0!==a.size){let{values:t}=await e.getBranches({filter:e=>e.remote&&a.has(e.getNameWithoutRemote())});for(let s of t){let t=a.get(s.getNameWithoutRemote());if(null==t)continue;let n=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=n)return{uri:n,startLine:r}}}return}if(n.startsWith("/refs/tags/")){let t;let s=n.substr(11),a=new Map;o=s.length;do o=s.lastIndexOf("/",o-1),t=s.substring(1,o),a.set(t,s.substr(o));while(o>0)if(0!==a.size){let{values:t}=await e.getTags({filter:e=>a.has(e.name)});for(let s of t){let t=a.get(s.name);if(null==t)continue;let n=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=n)return{uri:n,startLine:r}}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseReviewUrl}/admin/repos/${this.path},branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/+/refs/heads/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseReviewUrl}/q/${e}`)}getUrlForFile(e,t,i,r){let s=null!=r?`#${r.start.line}`:"";return i?`${this.encodeUrl(`${this.baseUrl}/+/${i}/${e}`)}${s}`:t?`${this.encodeUrl(`${this.getUrlForBranch(t)}/${e}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}/+/HEAD/${e}`)}${s}`}};let q=/^\/([^/]+)\/([^/]+?)\/src(.+)$/i,M=/^L(\d+)(?:-L(\d+))?$/;let GiteaRemote=class GiteaRemote extends A.u{constructor(e,t,i,r,s=!1){super(e,t,i,r,s)}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[{prefix:"#",url:`${this.baseUrl}/issues/<num>`,title:`Open Issue #<num> on ${this.name}`,type:"issue",description:`${this.name} Issue #<num>`}]),this._autolinks}get icon(){return"gitea"}get id(){return"gitea"}get gkProviderId(){}get name(){return this.formatName("Gitea")}async getLocalInfoFromRemoteUri(e,t,i){let r,s,n,o;if(t.authority!==this.domain||(i?.validate??!0)&&!t.path.startsWith(`/${this.path}/`))return;if(t.fragment){let e=M.exec(t.fragment);if(null!=e){let[,t,i]=e;t&&(r=parseInt(t,10),i&&(s=parseInt(i,10)))}}let a=q.exec(t.path);if(null==a)return;let[,,,l]=a;if(l.startsWith("/commit/")&&(n=8,-1!==(o=l.indexOf("/",n)))){let t=l.substring(n,o);if((0,v.HH)(t)){let t=e.toAbsoluteUri(l.substr(o),{validate:i?.validate});if(null!=t)return{uri:t,startLine:r,endLine:s}}}if(l.startsWith("/branch/")){let t;let a=new Map;o=n=8;do t=l.substring(n,o),a.set(t,l.substr(o)),o=l.indexOf("/",o+1);while(o<l.length&&-1!==o)if(0!==a.size){let{values:t}=await e.getBranches({filter:e=>e.remote&&a.has(e.getNameWithoutRemote())});for(let n of t){let t=a.get(n.getNameWithoutRemote());if(null==t)continue;let o=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=o)return{uri:o,startLine:r,endLine:s}}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/src/branch/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commit/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/compare/${e}...${t}`)}getUrlForFile(e,t,i,r){let s;return(s=null!=r?r.start.line===r.end.line?`#L${r.start.line}`:`#L${r.start.line}-L${r.end.line}`:"",i)?`${this.encodeUrl(`${this.baseUrl}/src/commit/${i}/${e}`)}${s}`:t?`${this.encodeUrl(`${this.baseUrl}/src/branch/${t}/${e}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}/src/${e}`)}${s}`}};var N=i(4862),H=i(1856),G=i(3533),V=i(1345),Q=i(8559),j=Object.defineProperty,z=Object.getOwnPropertyDescriptor;let Y=/\b([^/\s]+\/[^/\s]+?)(?:\\)?#([0-9]+)\b(?!]\()/g,K=/\b([^/\s]+\/[^/\s]+?)(?:\\)?!([0-9]+)\b(?!]\()/g,J=/^\/([^/]+)\/([^/]+?)\/-\/blob(.+)$/i,Z=/^L(\d+)(?:-(\d+))?$/;let GitLabRemote=class GitLabRemote extends A.u{constructor(e,t,i,r,s=!1){super(e,t,i,r,s)}get apiBaseUrl(){return this.custom?`${this.protocol}://${this.domain}/api`:`https://${this.domain}/api`}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[{prefix:"#",url:`${this.baseUrl}/-/issues/<num>`,title:`Open Issue #<num> on ${this.name}`,type:"issue",description:`${this.name} Issue #<num>`},{prefix:"!",url:`${this.baseUrl}/-/merge_requests/<num>`,title:`Open Merge Request !<num> on ${this.name}`,type:"pullrequest",description:`${this.name} Merge Request !<num>`},{tokenize:(e,t,i,r,s,n)=>"plaintext"===t?e:e.replace(Y,(e,o,l)=>{let h;let c=(0,V.W)(`${this.protocol}://${this.domain}/${(0,L.e8)(o)}/-/issues/${l}`),u=` "Open Issue #${l} from ${o} on ${this.name}"`,d=`\0${i.size}\0`;"markdown"===t?i.set(d,`[${e}](${c}${u})`):"html"===t&&i.set(d,`<a href="${c}" title=${u}>${e}</a>`);let p=r?.get(l)?.[0];if(p?.value!=null){if(p.paused)null==n||s?.has(l)||(h=n.size+1,n.set(h,`[${(0,Q.xu)()} GitLab Issue ${o}#${l} $(loading~spin)](${c}${u}")`));else{let t=p.value,i=(0,L.FV)(t.title.trim());null==n||s?.has(l)||(h=n.size+1,n.set(h,`[${(0,Q.xu)(t)} **${i}**](${c}${u})\\
${a.EO.Space.repeat(5)}${e} ${t.state} ${(0,H.PI)(t.closedDate??t.createdDate)}`))}}else null==n||s?.has(l)||(h=n.size+1,n.set(h,`[${(0,Q.xu)()} GitLab Issue ${o}#${l}](${c}${u})`));return d}),parse:(e,t)=>{let i,r,s;for(;null!=(s=Y.exec(e));){[,i,r]=s;let[e,n]=i.split("/",2);t.set(r,{provider:this,id:r,prefix:`${i}#`,url:`${this.protocol}://${this.domain}/${i}/-/issues/${r}`,title:`Open Issue #<num> from ${i} on ${this.name}`,type:"issue",description:`${this.name} Issue ${i}#${r}`,descriptor:{key:this.remoteKey,owner:e,name:n}})}}},{tokenize:(e,t,i,r,s,n)=>"plaintext"===t?e:e.replace(K,(e,o,l)=>{let h;let c=(0,V.W)(`${this.protocol}://${this.domain}/${o}/-/merge_requests/${l}`),u=` "Open Merge Request !${l} from ${o} on ${this.name}"`,d=`\0${i.size}\0`;"markdown"===t?i.set(d,`[${e}](${c}${u})`):"html"===t&&i.set(d,`<a href="${c}" title=${u}>${e}</a>`);let p=r?.get(l)?.[0];if(p?.value!=null){if(p.paused)null==n||s?.has(l)||(h=n.size+1,n.set(h,`[${(0,Q.xu)()} ${this.name} Merge Request ${o}!${l} $(loading~spin)](${c}${u}")`));else{let t=p.value,i=(0,L.FV)(t.title.trim());null==n||s?.has(l)||(h=n.size+1,n.set(h,`[${(0,Q.xu)(t)} **${i}**](${c}${u})\\
${a.EO.Space.repeat(5)}${e} ${t.state} ${(0,H.PI)(t.closedDate??t.createdDate)}`))}}else null==n||s?.has(l)||(h=n.size+1,n.set(h,`[${(0,Q.xu)()} ${this.name} Merge Request ${o}!${l}](${c}${u})`));return d}),parse:(e,t)=>{let i,r,s;for(;null!=(s=K.exec(e));){[,i,r]=s;let[e,n]=i.split("/",2);t.set(r,{provider:this,id:r,prefix:`${i}!`,url:`${this.protocol}://${this.domain}/${i}/-/merge_requests/${r}`,title:`Open Merge Request !<num> from ${i} on ${this.name}`,type:"pullrequest",description:`${this.name} Merge Request !${r} from ${i}`,descriptor:{key:this.remoteKey,owner:e,name:n}})}}}]),this._autolinks}get icon(){return"gitlab"}get id(){return"gitlab"}get gkProviderId(){var e;return(e=this.domain,(0,L.Q_)(e,"gitlab.com"))?"gitlab":"gitlabSelfHosted"}get name(){return this.formatName("GitLab")}get repoDesc(){let[e,t]=this.splitPath();return{key:this.remoteKey,owner:e,name:t}}async getLocalInfoFromRemoteUri(e,t,i){let r,s,n;if(t.authority!==this.domain||(i?.validate??!0)&&!t.path.startsWith(`/${this.path}/`))return;if(t.fragment){let e=Z.exec(t.fragment);if(null!=e){let[,t,i]=e;t&&(r=parseInt(t,10),i&&(s=parseInt(i,10)))}}let o=J.exec(t.path);if(null==o)return;let[,,,a]=o,l=a.indexOf("/",1);if(-1!==l){let t=a.substring(1,l);if((0,v.HH)(t)){let t=e.toAbsoluteUri(a.substr(l),{validate:i?.validate});if(null!=t)return{uri:t,startLine:r,endLine:s}}}let h=new Map;l=a.length;do l=a.lastIndexOf("/",l-1),n=a.substring(1,l),h.set(n,a.substr(l));while(l>0)if(0!==h.size){let{values:t}=await e.getBranches({filter:e=>e.remote&&h.has(e.getNameWithoutRemote())});for(let n of t){let t=h.get(n.getNameWithoutRemote());if(null==t)continue;let o=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=o)return{uri:o,startLine:r,endLine:s}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/-/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/-/tree/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/-/commit/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/-/compare/${e}${i}${t}`)}getUrlForFile(e,t,i,r){let s;return(s=null!=r?r.start.line===r.end.line?`#L${r.start.line}`:`#L${r.start.line}-${r.end.line}`:"",i)?`${this.encodeUrl(`${this.baseUrl}/-/blob/${i}/${e}`)}${s}`:t?`${this.encodeUrl(`${this.baseUrl}/-/blob/${t}/${e}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}?path=${e}`)}${s}`}};((e,t,i,r)=>{for(var s,n=r>1?void 0:r?z(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&j(t,i,n)})([(0,G.B)()],GitLabRemote.prototype,"repoDesc",1);let GoogleSourceRemote=class GoogleSourceRemote extends GerritRemote{constructor(e,t,i,r,s=!1){super(e,t,i,r,s,!1)}get id(){return"google-source"}get gkProviderId(){}get name(){return this.formatName("Google Source")}get baseUrl(){return`${this.protocol}://${this.domain}/${this.path}`}get reviewDomain(){let[e,...t]=this.domain.split(".");return[`${e}-review`,...t].join(".")}get baseReviewUrl(){return`${this.protocol}://${this.reviewDomain}`}};let X=[{custom:!1,matcher:"bitbucket.org",creator:(e,t,i)=>new BitbucketRemote(t,i)},{custom:!1,matcher:"github.com",creator:(e,t,i)=>new N.K(t,i)},{custom:!1,matcher:"gitlab.com",creator:(e,t,i)=>new GitLabRemote(t,i)},{custom:!1,matcher:/\bdev\.azure\.com$/i,creator:(e,t,i)=>new AzureDevOpsRemote(t,i)},{custom:!0,matcher:/^(.+\/(?:bitbucket|stash))\/scm\/(.+)$/i,creator:(e,t,i)=>new BitbucketServerRemote(t,i)},{custom:!1,matcher:/\bgitlab\b/i,creator:(e,t,i)=>new GitLabRemote(t,i)},{custom:!1,matcher:/\bvisualstudio\.com$/i,creator:(e,t,i)=>new AzureDevOpsRemote(t,i,void 0,void 0,!0)},{custom:!1,matcher:/\bgitea\b/i,creator:(e,t,i)=>new GiteaRemote(t,i)},{custom:!1,matcher:/\bgerrithub\.io$/i,creator:(e,t,i)=>new GerritRemote(t,i)},{custom:!1,matcher:/\bgooglesource\.com$/i,creator:(e,t,i)=>new GoogleSourceRemote(t,i)}];function ee(e){let t=[];if(e?.length)for(let i of e){let e;let r=function(e){switch(e.type){case"AzureDevOps":return(t,i,r)=>new AzureDevOpsRemote(i,r,e.protocol,e.name,!0);case"Bitbucket":return(t,i,r)=>new BitbucketRemote(i,r,e.protocol,e.name,!0);case"BitbucketServer":return(t,i,r)=>new BitbucketServerRemote(i,r,e.protocol,e.name,!0);case"Custom":return(t,i,r)=>new CustomRemote(i,r,e.urls,e.protocol,e.name);case"Gerrit":return(t,i,r)=>new GerritRemote(i,r,e.protocol,e.name,!0);case"GoogleSource":return(t,i,r)=>new GoogleSourceRemote(i,r,e.protocol,e.name,!0);case"Gitea":return(t,i,r)=>new GiteaRemote(i,r,e.protocol,e.name,!0);case"GitHub":return(t,i,r)=>new N.K(i,r,e.protocol,e.name,!0);case"GitLab":return(t,i,r)=>new GitLabRemote(i,r,e.protocol,e.name,!0);default:return}}(i);if(null!=r){try{if(e=i.regex?RegExp(i.regex,"i"):i.domain?.toLowerCase(),null==e)throw Error("No matcher found")}catch(e){P.Vy.error(e,`Loading remote provider '${i.name??""}' failed`)}t.push({custom:!0,matcher:e,creator:r})}}return t.push(...X),t}function et(e,t){return null==t&&(t=ee(S.H.get("remotes",null))),(i,r,s)=>(function(e,t,i,r,s){try{let n=r.toLowerCase();for(let{custom:o,matcher:a,creator:l}of t){if("string"==typeof a){if(a===n)return l(e,r,s);continue}if(a.test(n))return l(e,r,s);if(!o)continue;let t=a.exec(i);if(null!=t)return l(e,t[1],t[2])}return}catch(e){P.Vy.error(e,"createRemoteProvider");return}})(e,t,i,r,s)}var ei=i(3269),er=i(8973),es=i(6950),en=i(8180),eo=i(4026),ea=i(3446),el=i(4911),eh=i(3131),ec=i(4125),eu=i(560),ed=i(2471);let GitDocumentState=class GitDocumentState{blameCache=new Map;diffCache=new Map;logCache=new Map;clearBlame(e){if(null==e){this.blameCache.clear();return}this.blameCache.delete(e)}clearDiff(e){if(null==e){this.diffCache.clear();return}this.diffCache.delete(e)}clearLog(e){if(null==e){this.logCache.clear();return}this.logCache.delete(e)}getBlame(e){return this.blameCache.get(e)}getDiff(e){return this.diffCache.get(e)}getLog(e){return this.logCache.get(e)}setBlame(e,t){if(null==t){this.blameCache.delete(e);return}this.blameCache.set(e,t)}setDiff(e,t){if(null==t){this.diffCache.delete(e);return}this.diffCache.set(e,t)}setLog(e,t){if(null==t){this.logCache.delete(e);return}this.logCache.set(e,t)}};let TrackedGitDocument=class TrackedGitDocument{constructor(e,t,i,r){this.document=e,this.dirty=t,this._eventDelegates=i,this.container=r}static async create(e,t,i,r){let s=new TrackedGitDocument(e,t,i,r);return await s.initialize(),s}_onDidBlameStateChange=new n.EventEmitter;get onDidBlameStateChange(){return this._onDidBlameStateChange.event}state;_disposable;_disposed=!1;_uri;dispose(){this.state=void 0,this._disposed=!0,this._disposable?.dispose()}initializing=!0;async initialize(){let e=this.document.uri;this._uri=await d.nk.fromUri(e),this._disposed||await this.update({forceDirtyIdle:!0}),this.initializing=!1}_forceDirtyStateChangeOnNextDocumentChange=!1;get forceDirtyStateChangeOnNextDocumentChange(){return this._forceDirtyStateChangeOnNextDocumentChange}_hasRemotes=!1;get hasRemotes(){return this._hasRemotes}get isBlameable(){return null==this._blameFailed&&this._isTracked}get canDirtyIdle(){if(!this.document.isDirty)return!1;let e=S.H.get("advanced.blame.sizeThresholdAfterEdit");return!(e>0&&this.document.lineCount>e)}_isDirtyIdle=!1;get isDirtyIdle(){return this._isDirtyIdle}setIsDirtyIdle(){return!!this.canDirtyIdle&&(this._isDirtyIdle=!0,!0)}get isRevision(){return null!=this._uri&&!!this._uri.sha&&this._uri.sha!==m.nB}_isTracked=!1;get isTracked(){return this._isTracked}get lineCount(){return this.document.lineCount}get uri(){return this._uri}async activate(){this._requiresUpdate&&await this.update({forceDirtyIdle:!0}),(0,er.o)("gitlens:activeFileStatus",this.getStatus())}is(e){return e===this.document}_updateDebounced;refresh(e){this._requiresUpdate=!0,this._blameFailed=void 0,this._isDirtyIdle=!1,null!=this.state&&(this.state=void 0,P.Vy.log(`Reset state for '${this.document.uri.toString(!0)}', reason=${e}`)),"repo-changed"===e&&(0,ed.G1)(this.document)&&(null==this._updateDebounced&&(this._updateDebounced=(0,eu.sg)(this.update.bind(this),250)),this._updateDebounced())}_blameFailed;setBlameFailure(e){let t=this.isBlameable;this._blameFailed=e,t&&(0,ed.G1)(this.document)&&this.update({forceBlameChange:!0})}resetForceDirtyStateChangeOnNextDocumentChange(){this._forceDirtyStateChangeOnNextDocumentChange=!1}setForceDirtyStateChangeOnNextDocumentChange(){this._forceDirtyStateChangeOnNextDocumentChange=!0}_requiresUpdate=!0;async update(e){if(this._requiresUpdate=!1,this._disposed||null==this._uri){this._hasRemotes=!1,this._isTracked=!1;return}this.document.isDirty&&e?.forceDirtyIdle&&this.canDirtyIdle?this._isDirtyIdle=!0:this._isDirtyIdle=!1;let t=(0,ed.LO)(this.document),i=e?.forceBlameChange?void 0:this.isBlameable,r=this.container.git.getRepository(this._uri);if(null==r?(this._isTracked=!1,this._hasRemotes=!1):[this._isTracked,this._hasRemotes]=await Promise.all([this.container.git.isTracked(this._uri),r.hasRemotes()]),null!=t){let e=this.isBlameable;if((0,er.o)("gitlens:activeFileStatus",this.getStatus()),!this.initializing&&i!==e){let i={editor:t,document:this,blameable:e};this._onDidBlameStateChange.fire(i),this._eventDelegates.onDidBlameStateChange(i)}}}getStatus(){let e="";return this.isTracked&&(e+="tracked|"),this.isBlameable&&(e+="blameable|"),this.isRevision&&(e+="revision|"),this.hasRemotes&&(e+="remotes|"),e||void 0}};async function ep(e){try{let e=n.extensions.getExtension("ms-vscode.remote-repositories")??n.extensions.getExtension("GitHub.remotehub");if(null==e)throw P.Vy.log("GitHub Repositories extension is not installed or enabled"),new h.dU("GitHub Repositories","GitHub.remotehub");return e.isActive?e.exports:await e.activate()}catch(t){if(P.Vy.error(t,"Unable to get required api from the GitHub Repositories extension"),h.dU,e)return;throw t}}var eg=((r=eg||{})[r.Branch=0]="Branch",r[r.RemoteBranch=1]="RemoteBranch",r[r.Tag=2]="Tag",r[r.Commit=3]="Commit",r),em=((s=em||{})[s.Branch=0]="Branch",s[s.Tag=1]="Tag",s[s.Commit=2]="Commit",s[s.PullRequest=3]="PullRequest",s[s.Tree=4]="Tree",s),ef=i(1116),ew=Object.defineProperty,ev=Object.getOwnPropertyDescriptor,ey=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?ev(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&ew(t,i,n),n};let eb=/"/g,eC=Object.freeze([]),eR=Object.freeze({values:[]}),eS=Promise.resolve(void 0),eP=["repo","read:user","user:email"],eA=/^[^/](?!.*\/\.)(?!.*\.\.)(?!.*\/\/)(?!.*@\{)[^\000-\037\177 ~^:?*[\\]+[^./]$/;let GitHubGitProvider=class GitHubGitProvider{constructor(e){this.container=e,this._disposables.push(this.container.events.on("git:cache:reset",e=>e.data.repoPath?this.resetCache(e.data.repoPath,...e.data.caches??eC):this.resetCaches(...e.data.caches??eC),n.authentication.onDidChangeSessions(this.onAuthenticationSessionsChanged,this)))}descriptor={id:"github",name:"GitHub",virtual:!0};supportedSchemes=new Set([a.xB.Virtual,a.xB.GitHub,a.xB.PRs]);_onDidChange=new n.EventEmitter;get onDidChange(){return this._onDidChange.event}_onDidChangeRepository=new n.EventEmitter;get onDidChangeRepository(){return this._onDidChangeRepository.event}_onDidCloseRepository=new n.EventEmitter;get onDidCloseRepository(){return this._onDidCloseRepository.event}_onDidOpenRepository=new n.EventEmitter;get onDidOpenRepository(){return this._onDidOpenRepository.event}_branchesCache=new Map;_repoInfoCache=new Map;_tagsCache=new Map;_disposables=[];dispose(){this._disposables.forEach(e=>void e.dispose())}onAuthenticationSessionsChanged(e){"github"===e.provider.id&&(this._sessionPromise=void 0,this.ensureSession(!1,!0))}onRepositoryChanged(e,t){this._branchesCache.delete(e.path),this._tagsCache.delete(e.path),this._repoInfoCache.delete(e.path),this._onDidChangeRepository.fire(t)}async discoverRepositories(e,t){if(!this.supportedSchemes.has(e.scheme))return[];try{let{remotehub:i}=await this.ensureRepositoryContext(e.toString(),!0),r=i.getVirtualWorkspaceUri(e);if(null==r)return[];return this.openRepository(void 0,r,!0,void 0,t?.silent)}catch(t){return t.message.startsWith("No provider registered with")&&(P.Vy.error(t,"No GitHub provider registered with Remote Repositories (yet); queuing pending discovery"),this._pendingDiscovery.add(e),this.ensurePendingRepositoryDiscovery()),[]}}_pendingDiscovery=new Set;_pendingTimer;ensurePendingRepositoryDiscovery(){null==this._pendingTimer&&0!==this._pendingDiscovery.size&&(this._pendingTimer=setTimeout(async()=>{try{let e=await ep();for(let t of this._pendingDiscovery){if(null==e.getProvider(t)){this._pendingTimer=void 0,this.ensurePendingRepositoryDiscovery();return}this._pendingDiscovery.delete(t)}this._pendingTimer=void 0,setTimeout(()=>this._onDidChange.fire(),1),0!==this._pendingDiscovery.size&&this.ensurePendingRepositoryDiscovery()}catch{this._pendingTimer=void 0,this.ensurePendingRepositoryDiscovery()}},250))}updateContext(){(0,er.o)("gitlens:hasVirtualFolders",this.container.git.hasOpenRepositories(this.descriptor.id))}openRepository(e,t,i,r,s){return[new b.LN(this.container,this.onRepositoryChanged.bind(this),this.descriptor,e??n.workspace.getWorkspaceFolder(t),t,i,r??!n.window.state.focused,s)]}async supports(e){switch(e){case c.O.Stashes:case c.O.Worktrees:case c.O.StashOnlyStaged:return!1;default:return!0}}async visibility(e){let t=await this.getRemotes(e,{sort:!0});if(0===t.length)return["local",void 0];for await(let e of(0,eh.w)(t.map(e=>this.getRemoteVisibility(e))))if("fulfilled"===e.status&&"public"===e.value[0])return["public",(0,y.U6)(e.value[1])];return["private",(0,y.U6)(t)]}async getRemoteVisibility(e){if(e.provider?.id==="github"){let{github:t,metadata:i,session:r}=await this.ensureRepositoryContext(e.repoPath);return[await t.getRepositoryVisibility(r.accessToken,i.repo.owner,i.repo.name)??"private",e]}return["private",e]}async getOpenScmRepositories(){return[]}async getScmRepository(e){}async getOrOpenScmRepository(e){}canHandlePathOrUri(e,t){if(this.supportedSchemes.has(e))return"string"==typeof t?t:t.toString()}getAbsoluteUri(e,t){if("string"==typeof t){if((0,el.bm)(t))t=n.Uri.parse(t,!0);else throw n.window.showErrorMessage(`Unable to get absolute uri between ${"string"==typeof e?e:e.toString(!0)} and ${t}; Base path '${t}' must be a uri`),Error(`Base path '${t}' must be a uri`)}if("string"==typeof e&&!(0,el.bm)(e)){let i=(0,el.Fd)(e);if(!(0,el.oP)(i))return n.Uri.joinPath(t,i)}let i=this.getRelativePath(e,t);return n.Uri.joinPath(t,i)}async getBestRevisionUri(e,t,i){return i?this.createProviderUri(e,i,t):this.createVirtualUri(e,i,t)}getRelativePath(e,t){let i;if("string"==typeof t){if((0,el.bm)(t))t=n.Uri.parse(t,!0);else throw n.window.showErrorMessage(`Unable to get relative path between ${"string"==typeof e?e:e.toString(!0)} and ${t}; Base path '${t}' must be a uri`),Error(`Base path '${t}' must be a uri`)}if("string"==typeof e){if(!(0,el.bm)(e))return e=(0,el.Fd)(e),(i=(0,el.oP)(e)&&e.startsWith(t.path)?e.slice(t.path.length):e).charCodeAt(0)===a.s7.Slash&&(i=i.slice(1)),i;e=n.Uri.parse(e,!0)}return(0,el.Fd)((0,el.V8)(t.path.slice(1),e.path.slice(1)))}getRevisionUri(e,t,i){let r=this.createProviderUri(e,i,t);return i===m.nB?r.with({query:"~"}):r}async getWorkingUri(e,t){return this.createVirtualUri(e,void 0,t.path)}async addRemote(e,t,i,r){}async pruneRemote(e,t){}async removeRemote(e,t){}async applyChangesToWorkingFile(e,t,i){}async branchContainsCommit(e,t,i){return!1}async checkout(e,t,i){}resetCache(e,...t){(0===t.length||t.includes("branches"))&&this._branchesCache.delete(e),(0===t.length||t.includes("tags"))&&this._tagsCache.delete(e),0===t.length&&this._repoInfoCache.delete(e)}resetCaches(...e){(0===e.length||e.includes("branches"))&&this._branchesCache.clear(),(0===e.length||e.includes("tags"))&&this._tagsCache.clear(),0===e.length&&this._repoInfoCache.clear()}async excludeIgnoredUris(e,t){return t}async fetch(e,t){}async pull(e,t){}async push(e,t){}async findRepositoryUri(e,t){let i=(0,ea.dQ)();try{return(await this.ensureRemoteHubApi()).getProviderRootUri(e).with({scheme:a.xB.Virtual})}catch(e){h.dU,P.Vy.error(e,i);return}}async getAheadBehindCommitCount(e,t,i){}async getBlame(e,t){let i=(0,ea.dQ)();if(t?.isDirty)return;let r="blame";null!=e.sha&&(r+=`:${e.sha}`);let s=await this.container.documentTracker.getOrAdd(e);if(null!=s.state){let e=s.state.getBlame(r);if(null!=e)return P.Vy.debug(i,`Cache hit: '${r}'`),e.item}P.Vy.debug(i,`Cache miss: '${r}'`),null==s.state&&(s.state=new GitDocumentState);let n=this.getBlameCore(e,s,r,i);return null!=s.state&&(P.Vy.debug(i,`Cache add: '${r}'`),s.state.setBlame(r,{item:n})),n}async getBlameCore(e,t,i,r){try{let t=await this.ensureRepositoryContext(e.repoPath);if(null==t)return;let{metadata:i,github:r,remotehub:s,session:o}=t,l=s.getVirtualUri(s.getProviderRootUri(e)),h=this.getRelativePath(e,l);if(e.scheme===a.xB.Virtual){let[t,i]=await Promise.allSettled([n.workspace.fs.stat(e),n.workspace.fs.stat(e.with({scheme:a.xB.GitHub}))]);if("fulfilled"!==t.status||"fulfilled"!==i.status||t.value.mtime!==i.value.mtime)return}let c=e.sha&&"HEAD"!==e.sha?e.sha:(await i.getRevision()).revision,u=await r.getBlame(o.accessToken,i.repo.owner,i.repo.name,c,h),d=new Map,p=new Map,m=[];for(let t of u.ranges){let i=t.commit,{viewer:r=o.account.label}=u,s=null!=r&&i.author.name===r?"You":i.author.name,n=null!=r&&i.committer.name===r?"You":i.committer.name,a=d.get(s);null==a&&(a={name:s,lineCount:0},d.set(s,a)),a.lineCount+=t.endingLine-t.startingLine+1;let c=p.get(i.oid);null==c&&(c=new g.Yg(this.container,e.repoPath,i.oid,new g.M7(s,i.author.email,new Date(i.author.date),i.author.avatarUrl),new g.M7(n,i.committer.email,new Date(i.author.date)),i.message.split("\n",1)[0],i.parents.nodes[0]?.oid?[i.parents.nodes[0]?.oid]:[],i.message,new w.lY(l.toString(),h,w.NO.Modified),{changedFiles:i.changedFiles??0,additions:i.additions??0,deletions:i.deletions??0},[]),p.set(i.oid,c));for(let e=t.startingLine;e<=t.endingLine;e++){let t={sha:i.oid,originalLine:e,line:e};c.lines.push(t),m[e-1]=t}}let f=new Map([...d.entries()].sort((e,t)=>t[1].lineCount-e[1].lineCount));return{repoPath:e.repoPath,authors:f,commits:p,lines:m}}catch(e){if(null!=t.state&&!String(e).includes("No provider registered with")){let s=e?.toString()??"";return P.Vy.debug(r,`Cache replace (with empty promise): '${i}'`),t.state.setBlame(i,{item:eS,errorMessage:s}),t.setBlameFailure(e),eS}return}}async getBlameContents(e,t){}async getBlameForLine(e,t,i,r){let s=(0,ea.dQ)();if(!i?.isDirty){if(!r?.forceSingleLine){let i=await this.getBlame(e);if(null==i)return;let r=i.lines[t];if(null==r){if(i.lines.length!==t)return;r=i.lines[t-1]}let s=i.commits.get(r.sha);if(null==s)return;return{author:{...i.authors.get(s.author.name),lineCount:s.lines.length},commit:s,line:r}}try{let i=await this.ensureRepositoryContext(e.repoPath);if(null==i)return;let{metadata:r,github:s,remotehub:n,session:o}=i,a=n.getVirtualUri(n.getProviderRootUri(e)),l=this.getRelativePath(e,a),h=e.sha&&"HEAD"!==e.sha?e.sha:(await r.getRevision()).revision,c=await s.getBlame(o.accessToken,r.repo.owner,r.repo.name,h,l),u=t+1,d=c.ranges.find(e=>e.startingLine===u);if(null==d)return;let p=d.commit,{viewer:m=o.account.label}=c,f=null!=m&&p.author.name===m?"You":p.author.name,v=null!=m&&p.committer.name===m?"You":p.committer.name,y=new g.Yg(this.container,e.repoPath,p.oid,new g.M7(f,p.author.email,new Date(p.author.date),p.author.avatarUrl),new g.M7(v,p.committer.email,new Date(p.author.date)),p.message.split("\n",1)[0],p.parents.nodes[0]?.oid?[p.parents.nodes[0]?.oid]:[],p.message,new w.lY(a.toString(),l,w.NO.Modified),{changedFiles:p.changedFiles??0,additions:p.additions??0,deletions:p.deletions??0},[]);for(let e=d.startingLine;e<=d.endingLine;e++){let t={sha:p.oid,originalLine:e,line:e};y.lines.push(t)}return{author:{name:f,lineCount:d.endingLine-d.startingLine+1},commit:y,line:{sha:p.oid,originalLine:d.startingLine,line:d.startingLine}}}catch(e){P.Vy.error(s,e);return}}}async getBlameForLineContents(e,t,i,r){}async getBlameForRange(e,t){let i=await this.getBlame(e);if(null!=i)return this.getBlameRange(i,e,t)}async getBlameForRangeContents(e,t,i){let r=await this.getBlameContents(e,i);if(null!=r)return this.getBlameRange(r,e,t)}getBlameRange(e,t,i){if(0===e.lines.length||0===i.start.line&&i.end.line===e.lines.length-1)return{allLines:e.lines,...e};let r=e.lines.slice(i.start.line,i.end.line+1),s=new Set(r.map(e=>e.sha)),n=i.start.line+1,o=i.end.line+1,a=new Map,l=new Map;for(let t of e.commits.values()){if(!s.has(t.sha))continue;let e=t.with({lines:t.lines.filter(e=>e.line>=n&&e.line<=o)});l.set(t.sha,e);let i=a.get(e.author.name);null==i&&(i={name:e.author.name,lineCount:0},a.set(i.name,i)),i.lineCount+=e.lines.length}let h=new Map([...a.entries()].sort((e,t)=>t[1].lineCount-e[1].lineCount));return{repoPath:t.repoPath,authors:h,commits:l,lines:r,allLines:e.lines}}async getBranch(e){let{values:[t]}=await this.getBranches(e,{filter:e=>e.current});return t}async getBranches(e,t){if(null==e)return eR;let i=(0,ea.dQ)(),r=t?.paging?.cursor?void 0:this._branchesCache.get(e);null==r&&(r=(async function(){try{let{metadata:i,github:r,session:s}=await this.ensureRepositoryContext(e),n=await i.getRevision(),o=0===n.type?n.name:void 0,a=[],l=t?.paging?.cursor,h=null==l;for(;;){let t=await r.getBranches(s.accessToken,i.repo.owner,i.repo.name,{cursor:l});for(let i of t.values){let t=new Date("author-date"===S.H.get("advanced.commitOrdering")?i.target.authoredDate:i.target.committedDate),r=i.target.oid;a.push(new p.Zr(this.container,e,i.name,!1,i.name===o,t,r,{name:`origin/${i.name}`,missing:!1}),new p.Zr(this.container,e,`origin/${i.name}`,!0,!1,t,r))}if(!t.paging?.more||!h)return{...t,values:a};l=t.paging.cursor}}catch(t){return P.Vy.error(t,i),this._branchesCache.delete(e),eR}}).call(this),t?.paging?.cursor==null&&this._branchesCache.set(e,r));let s=await r;return t?.filter!=null&&(s={...s,values:s.values.filter(t.filter)}),t?.sort!=null&&(0,p.Xn)(s.values,"boolean"==typeof t.sort?void 0:t.sort),s}async getChangedFilesCount(e,t){if(!t)return;let i=await this.getCommit(e,t);if(i?.stats==null)return;let{stats:r}=i,s=(0,g.Zx)(r.changedFiles);return{additions:r.additions,deletions:r.deletions,changedFiles:s}}async getCommit(e,t){if(null==e)return;let i=(0,ea.dQ)();try{let{metadata:i,github:r,session:s}=await this.ensureRepositoryContext(e),n=await r.getCommit(s.accessToken,i.repo.owner,i.repo.name,t);if(null==n)return;let{viewer:o=s.account.label}=n,a=null!=o&&n.author.name===o?"You":n.author.name,l=null!=o&&n.committer.name===o?"You":n.committer.name;return new g.Yg(this.container,e,n.oid,new g.M7(a,n.author.email,new Date(n.author.date),n.author.avatarUrl),new g.M7(l,n.committer.email,new Date(n.committer.date)),n.message.split("\n",1)[0],n.parents.nodes.map(e=>e.oid),n.message,n.files?.map(t=>new w.lY(e,t.filename??"",ef.fromCommitFileStatus(t.status)??w.NO.Modified,t.previous_filename,void 0,{additions:t.additions??0,deletions:t.deletions??0,changes:t.changes??0}))??[],{changedFiles:n.changedFiles??0,additions:n.additions??0,deletions:n.deletions??0},[])}catch(e){P.Vy.error(e,i);return}}async getCommitBranches(e,t,i,r){if(null==e||r?.commitDate==null)return[];let s=(0,ea.dQ)();try{let{metadata:s,github:n,session:o}=await this.ensureRepositoryContext(e);return i?await n.getCommitOnBranch(o.accessToken,s.repo.owner,s.repo.name,i,t,r?.mode??"contains",r?.commitDate):await n.getCommitBranches(o.accessToken,s.repo.owner,s.repo.name,t,r?.mode??"contains",r?.commitDate)}catch(e){return P.Vy.error(e,s),[]}}async getCommitCount(e,t){if(null==e)return;let i=(0,ea.dQ)();try{let{metadata:i,github:r,session:s}=await this.ensureRepositoryContext(e);return await r.getCommitCount(s?.accessToken,i.repo.owner,i.repo.name,t)}catch(e){P.Vy.error(e,i);return}}async getCommitForFile(e,t,i){if(null==e)return;let r=(0,ea.dQ)();try{let{metadata:r,github:s,remotehub:n,session:o}=await this.ensureRepositoryContext(e),a=this.getRelativePath(t,n.getProviderRootUri(t)),l=i?.ref&&"HEAD"!==i.ref?i.ref:(await r.getRevision()).revision,h=await s.getCommitForFile(o.accessToken,r.repo.owner,r.repo.name,l,a);if(null==h)return;let{viewer:c=o.account.label}=h,u=null!=c&&h.author.name===c?"You":h.author.name,d=null!=c&&h.committer.name===c?"You":h.committer.name,p=h.files?.map(t=>new w.lY(e,t.filename??"",ef.fromCommitFileStatus(t.status)??w.NO.Modified,t.previous_filename,void 0,{additions:t.additions??0,deletions:t.deletions??0,changes:t.changes??0})),m=p?.find(e=>e.path===a);return new g.Yg(this.container,e,h.oid,new g.M7(u,h.author.email,new Date(h.author.date),h.author.avatarUrl),new g.M7(d,h.committer.email,new Date(h.committer.date)),h.message.split("\n",1)[0],h.parents.nodes.map(e=>e.oid),h.message,{file:m,files:p},{changedFiles:h.changedFiles??0,additions:h.additions??0,deletions:h.deletions??0},[])}catch(e){P.Vy.error(e,r);return}}async getCommitsForGraph(e,t,i){let r=i?.limit??S.H.get("graph.defaultItemLimit")??5e3,s=S.H.get("graph.commitOrdering",void 0,"date"),n=S.H.get("graph.avatars",void 0,!0),[o,a,l,h,c,u]=await Promise.allSettled([this.getLog(e,{all:!0,ordering:s,limit:r}),this.getBranch(e),this.getBranches(e,{filter:e=>e.remote}),this.getRemotes(e),this.getTags(e),this.getCurrentUser(e)]),d=new Map,p=(0,eh.Ro)(a),g=new Map,m=new Map;null!=p&&(g.set(p.name,p),null!=p.sha&&m.set(p.sha,[p.name]));let f=eh.Ro(l)?.values;if(null!=f)for(let e of f){if(g.set(e.name,e),null==e.sha)continue;let t=m.get(e.sha);null==t?m.set(e.sha,[e.name]):t.push(e.name)}let w=new Set,v=(0,eh.Ro)(h)[0],y=null!=v?new Map([[v.name,v]]):new Map,b=new Map,C=eh.Ro(c)?.values;if(null!=C)for(let e of C){if(null==e.sha)continue;let t=b.get(e.sha);null==t?b.set(e.sha,[e.name]):t.push(e.name)}return this.getCommitsForGraphCore(e,t,(0,eh.Ro)(o),p,g,m,v,y,b,(0,eh.Ro)(u),d,w,{...i,useAvatars:n})}async getCommitsForGraphCore(e,t,i,r,s,n,o,a,h,c,u,d,m){let f,w,b,C,S,P,A,k,D,T;let _={...m?.include,stats:!0},I=new Map;if(null==i)return{repoPath:e,avatars:u,ids:d,includes:_,branches:s,remotes:a,downstreams:I,rows:[]};let $=(i.pagedCommits?.()??i.commits)?.values();if(null==$)return{repoPath:e,avatars:u,ids:d,includes:_,branches:s,remotes:a,downstreams:I,rows:[]};let E=[],O=!1,x=!1,F=r.upstream?.name;for(let i of $){if(d.add(i.sha),O=i.sha===r.sha){if(b={webviewItem:`gitlens:branch${O?"+current":""}${r?.upstream!=null?"+tracking":""}`,webviewItemValue:{type:"branch",ref:(0,v.kA)(r.name,e,{id:r.id,refType:"branch",name:r.name,remote:!1,upstream:r.upstream})}},S=[{id:r.id,name:r.name,isCurrentHead:!0,context:(0,ec.C9)(b),upstream:null!=r.upstream?{name:r.upstream.name,id:(0,p.Yk)(e,!0,r.upstream.name)}:void 0}],null!=r.upstream){if(k=(0,p.Yk)(e,!0,r.name),f=((m?.useAvatars?o.provider?.avatarUri:void 0)??y.Wf(this.container,o,t))?.toString(!0),b={webviewItem:"gitlens:branch+remote",webviewItemValue:{type:"branch",ref:(0,v.kA)(r.name,e,{id:k,refType:"branch",name:r.name,remote:!0,upstream:{name:o.name,missing:!1}})}},P=[{id:k,name:r.name,owner:o.name,url:o.url,avatarUrl:f,context:(0,ec.C9)(b),current:!0,hostingServiceType:o.provider?.id}],null!=F){let e=I.get(F);null==e&&(e=[],I.set(F,e)),e.push(r.name)}}else P=[]}else{S=[],P=[];let r=n.get(i.sha);if(null!=r)for(let i of r)k=(0,p.Yk)(e,!0,i),w=(0,p.km)(i),f=((m?.useAvatars?o.provider?.avatarUri:void 0)??y.Wf(this.container,o,t))?.toString(!0),b={webviewItem:"gitlens:branch+remote",webviewItemValue:{type:"branch",ref:(0,v.kA)(i,e,{id:k,refType:"branch",name:i,remote:!0,upstream:{name:o.name,missing:!1}})}},P.push({id:k,name:w,owner:o.name,url:o.url,avatarUrl:f,context:(0,ec.C9)(b),hostingServiceType:o.provider?.id})}A=[];let s=h.get(i.sha);if(null!=s)for(let t of s)T=(0,R.gt)(e,t),b={webviewItem:"gitlens:tag",webviewItemValue:{type:"tag",ref:(0,v.kA)(t,e,{id:T,refType:"tag",name:t})}},A.push({id:T,name:t,annotated:!0,context:(0,ec.C9)(b)});if(i.author.email&&!u.has(i.author.email)){let e=i.getCachedAvatarUri();null!=e&&u.set(i.author.email,e.toString(!0))}x="You"===i.author.name,C={row:(0,ec.C9)({webviewItem:`gitlens:commit${O?"+HEAD":""}+current`,webviewItemValue:{type:"commit",ref:(0,v.kA)(i.sha,e,{refType:"revision",message:i.message})}}),avatar:(0,ec.C9)({webviewItem:`gitlens:contributor${x?"+current":""}`,webviewItemValue:{type:"contributor",repoPath:e,name:x&&c?.name!=null?c.name:i.author.name,email:i.author.email,current:x}})},E.push({sha:i.sha,parents:i.parents,author:i.author.name,email:i.author.email??"",date:i.committer.date.getTime(),message:(0,l.E)(i.message&&String(i.message).length?i.message:i.summary),type:i.parents.length>1?"merge-node":"commit-node",heads:S,remotes:P,tags:A,contexts:C}),null!=i.stats&&(null==D&&(D=new Map),D.set(i.sha,{files:(0,g.Zx)(i.stats.changedFiles),additions:i.stats.additions,deletions:i.stats.deletions}))}return m?.ref==="HEAD"?m.ref=eo.$1(i.commits.values())?.sha:m?.ref!=null&&(m.ref=void 0),{repoPath:e,avatars:u,ids:d,includes:_,branches:s,remotes:a,downstreams:I,rows:E,id:m?.ref,paging:{limit:i.limit,startingCursor:i.startingCursor,hasMore:i.hasMore},more:async l=>{let p=await i.more?.(l);return this.getCommitsForGraphCore(e,t,p,r,s,n,o,a,h,c,u,d,m)}}}async getCommitTags(e,t,i){if(null==e||i?.commitDate==null)return[];let r=(0,ea.dQ)();try{let{metadata:r,github:s,session:n}=await this.ensureRepositoryContext(e);return await s.getCommitTags(n.accessToken,r.repo.owner,r.repo.name,t,i?.commitDate)}catch(e){return P.Vy.error(e,r),[]}}async getContributors(e,t){if(null==e)return[];let i=(0,ea.dQ)();try{let{metadata:t,github:i,session:o}=await this.ensureRepositoryContext(e),a=await i.getContributors(o.accessToken,t.repo.owner,t.repo.name),l=await this.getCurrentUser(e),h=[];for(let t of a)if("User"===t.type){var r,s,n;h.push(new f.sL(e,t.name,t.email,t.contributions,void 0,(r=t.name,s=t.email,n=t.login,null!=l&&(null!=l.name||null!=l.email||null!=l.username)&&(null==l.name||l.name===r)&&(null==l.email||l.email===s)&&(null==l.username||l.username===n)),void 0,t.login,t.avatar_url,t.node_id))}return h}catch(e){return P.Vy.error(e,i),[]}}async getCurrentUser(e){if(!e)return;let t=(0,ea.dQ)(),i=this._repoInfoCache.get(e),r=i?.user;if(null!=r)return r;if(null!==r)try{let{metadata:t,github:s,session:n}=await this.ensureRepositoryContext(e);return r=await s.getCurrentUser(n.accessToken,t.repo.owner,t.repo.name),this._repoInfoCache.set(e,{...i,user:r??null}),r}catch(r){P.Vy.error(r,t),this._repoInfoCache.set(e,{...i,user:null});return}}async getDefaultBranchName(e,t){if(null==e)return;let i=(0,ea.dQ)();try{let{metadata:t,github:i,session:r}=await this.ensureRepositoryContext(e);return await i.getDefaultBranchName(r.accessToken,t.repo.owner,t.repo.name)}catch(e){P.Vy.error(e,i);return}}async getDiffForFile(e,t,i){}async getDiffForFileContents(e,t,i){}async getDiffForLine(e,t,i,r){}async getDiffStatus(e,t,i,r){}async getFileStatusForCommit(e,t,i){if(i===m.nB||(0,v._k)(i))return;let r=await this.getCommitForFile(e,t,{ref:i});if(null!=r)return r.findFile(t)}async getLastFetchedTimestamp(e){}async getLog(e,t){if(null==e)return;let i=(0,ea.dQ)(),r=this.getPagingLimit(t?.limit);try{let{metadata:i,github:s,session:n}=await this.ensureRepositoryContext(e),o=t?.ref&&"HEAD"!==t.ref?t.ref:(await i.getRevision()).revision,a=await s.getCommits(n.accessToken,i.repo.owner,i.repo.name,o,{all:t?.all,authors:t?.authors,after:t?.cursor,limit:r,since:t?.since?new Date(t.since):void 0}),l=new Map,{viewer:h=n.account.label}=a;for(let t of a.values){let i=null!=h&&t.author.name===h?"You":t.author.name,r=null!=h&&t.committer.name===h?"You":t.committer.name,s=l.get(t.oid);null==s&&(s=new g.Yg(this.container,e,t.oid,new g.M7(i,t.author.email,new Date(t.author.date),t.author.avatarUrl),new g.M7(r,t.committer.email,new Date(t.committer.date)),t.message.split("\n",1)[0],t.parents.nodes.map(e=>e.oid),t.message,t.files?.map(t=>new w.lY(e,t.filename??"",ef.fromCommitFileStatus(t.status)??w.NO.Modified,t.previous_filename,void 0,{additions:t.additions??0,deletions:t.deletions??0,changes:t.changes??0})),{changedFiles:t.changedFiles??0,additions:t.additions??0,deletions:t.deletions??0},[]),l.set(t.oid,s))}let c={repoPath:e,commits:l,sha:o,range:void 0,count:l.size,limit:r,hasMore:a.paging?.more??!1,endingCursor:a.paging?.cursor,query:i=>this.getLog(e,{...t,limit:i})};return c.hasMore&&(c.more=this.getLogMoreFn(c,t)),c}catch(e){P.Vy.error(e,i);return}}async getLogRefsOnly(e,t){let i=await this.getLog(e,t);if(null!=i)return new Set([...i.commits.values()].map(e=>e.ref))}getLogMoreFn(e,t){return async i=>{let r=null!=i&&"object"==typeof i?i.until:void 0,s="number"==typeof i?i:void 0;if(r&&(0,eo.zN)(e.commits.values(),e=>e.ref===r))return e;s=this.getPagingLimit(s);let n=await this.getLog(e.repoPath,{...t,limit:s,cursor:e.endingCursor});if(null==n)return{...e,hasMore:!1,more:void 0};let o=new Map([...e.commits,...n.commits]),a={repoPath:e.repoPath,commits:o,sha:e.sha,range:void 0,count:o.size,limit:null==r?(e.limit??0)+s:void 0,hasMore:null!=r||n.hasMore,startingCursor:eo.HV(e.commits)?.[0],endingCursor:n.endingCursor,pagedCommits:()=>{for(let t of e.commits.keys())n.commits.delete(t);return n.commits},query:e.query};return a.hasMore&&(a.more=this.getLogMoreFn(a,t)),a}}async getLogForFile(e,t,i){if(null==e)return;let r=(0,ea.dQ)(),s=this.getRelativePath(t,e);if(null!=e&&e===s)throw Error(`File name cannot match the repository path; path=${s}`);(i={reverse:!1,...i}).renames=!1,i.all=!1;let n="log";null!=i.ref&&(n+=`:${i.ref}`),i.limit=this.getPagingLimit(i?.limit),i.limit&&(n+=`:n${i.limit}`),i.renames&&(n+=":follow"),i.reverse&&(n+=":reverse"),i.since&&(n+=`:since=${i.since}`),i.skip&&(n+=`:skip${i.skip}`),i.cursor&&(n+=`:cursor=${i.cursor}`);let o=await this.container.documentTracker.getOrAdd(d.nk.fromFile(s,e,i.ref));if(!i.force&&null==i.range){if(null!=o.state){let s=o.state.getLog(n);if(null!=s)return P.Vy.debug(r,`Cache hit: '${n}'`),s.item;if(null!=i.ref||null!=i.limit){let s=o.state.getLog(`log${i.renames?":follow":""}${i.reverse?":reverse":""}`);if(null!=s){if(null==i.ref)return P.Vy.debug(r,`Cache hit: ~'${n}'`),s.item;P.Vy.debug(r,`Cache ?: '${n}'`);let o=await s.item;if(null!=o&&!o.hasMore&&o.commits.has(i.ref)){P.Vy.debug(r,`Cache hit: '${n}'`);let s=!0,a=0,l=new Map((0,eo.x1)(o.commits.entries(),([e,t])=>{if(s){if(e!==i?.ref)return;s=!1}if(a++,i?.limit==null||!(a>i.limit))return[e,t]})),h={...i};return{...o,limit:i.limit,count:l.size,commits:l,query:i=>this.getLogForFile(e,t,{...h,limit:i})}}}}}P.Vy.debug(r,`Cache miss: '${n}'`),null==o.state&&(o.state=new GitDocumentState)}let a=this.getLogForFileCore(e,s,o,n,r,i);return null!=o.state&&null==i.range&&(P.Vy.debug(r,`Cache add: '${n}'`),o.state.setLog(n,{item:a})),a}async getLogForFileCore(e,t,i,r,s,n){if(null==e)return;let o=this.getPagingLimit(n?.limit);try{let i=await this.ensureRepositoryContext(e);if(null==i)return;let{metadata:r,github:s,remotehub:a,session:l}=i,h=this.getAbsoluteUri(t,e),c=this.getRelativePath(h,a.getProviderRootUri(h)),u=n?.ref&&"HEAD"!==n.ref?n.ref:(await r.getRevision()).revision,d=await s.getCommits(l.accessToken,r.repo.owner,r.repo.name,u,{all:n?.all,after:n?.cursor,path:c,limit:o,since:n?.since?new Date(n.since):void 0}),p=new Map,{viewer:m=l.account.label}=d;for(let t of d.values){let i=null!=m&&t.author.name===m?"You":t.author.name,r=null!=m&&t.committer.name===m?"You":t.committer.name,s=p.get(t.oid);if(null==s){let n=t.files?.map(t=>new w.lY(e,t.filename??"",ef.fromCommitFileStatus(t.status)??w.NO.Modified,t.previous_filename,void 0,{additions:t.additions??0,deletions:t.deletions??0,changes:t.changes??0})),o=(0,el.Np)(c)?void 0:n?.find(e=>e.path===c)??new w.lY(e,c,w.NO.Modified,void 0,void 0,1===t.changedFiles?{additions:t.additions??0,deletions:t.deletions??0,changes:0}:void 0);s=new g.Yg(this.container,e,t.oid,new g.M7(i,t.author.email,new Date(t.author.date),t.author.avatarUrl),new g.M7(r,t.committer.email,new Date(t.committer.date)),t.message.split("\n",1)[0],t.parents.nodes.map(e=>e.oid),t.message,{file:o,files:n},{changedFiles:t.changedFiles??0,additions:t.additions??0,deletions:t.deletions??0},[]),p.set(t.oid,s)}}let f={repoPath:e,commits:p,sha:u,range:void 0,count:p.size,limit:o,hasMore:d.paging?.more??!1,endingCursor:d.paging?.cursor,query:i=>this.getLogForFile(e,t,{...n,limit:i})};return f.hasMore&&(f.more=this.getLogForFileMoreFn(f,t,n)),f}catch(e){if(null!=i.state&&n?.range==null&&!n?.reverse){let t=e?.toString()??"";return P.Vy.debug(s,`Cache replace (with empty promise): '${r}'`),i.state.setLog(r,{item:eS,errorMessage:t}),eS}return}}getLogForFileMoreFn(e,t,i){return async r=>{let s=null!=r&&"object"==typeof r?r.until:void 0,n="number"==typeof r?r:void 0;if(s&&(0,eo.zN)(e.commits.values(),e=>e.ref===s))return e;n=this.getPagingLimit(n);let o=await this.getLogForFile(e.repoPath,t,{...i,limit:null==s?n:0,cursor:e.endingCursor});if(null==o)return{...e,hasMore:!1,more:void 0};let a=new Map([...e.commits,...o.commits]),l={repoPath:e.repoPath,commits:a,sha:e.sha,range:e.range,count:a.size,limit:null==s?(e.limit??0)+n:void 0,hasMore:null!=s||o.hasMore,endingCursor:o.endingCursor,query:e.query};return l.hasMore&&(l.more=this.getLogForFileMoreFn(l,t,i)),l}}async getMergeBase(e,t,i,r){}async getMergeStatus(e){}async getRebaseStatus(e){}async getNextComparisonUris(e,t,i,r=0){if(!i)return;let s=(0,ea.dQ)();try{let s=await this.ensureRepositoryContext(e);if(null==s)return;let{metadata:n,github:o,remotehub:a,session:l}=s,h=this.getRelativePath(t,a.getProviderRootUri(t)),c=(await n.getRevision()).revision;"HEAD"===i&&(i=c);let u=await o.getNextCommitRefs(l.accessToken,n.repo.owner,n.repo.name,c,h,i);return{current:0===r?d.nk.fromFile(h,e,i):new d.nk(await this.getBestRevisionUri(e,h,u[r-1])),next:new d.nk(await this.getBestRevisionUri(e,h,u[r]))}}catch(e){throw P.Vy.error(e,s),e}}async getOldestUnpushedRefForFile(e,t){}async getPreviousComparisonUris(e,t,i,r=0){if(i===m.nB)return;let s=(0,ea.dQ)();i===m.SU&&(i=void 0);try{let s=await this.ensureRepositoryContext(e);if(null==s)return;let{metadata:n,github:o,remotehub:a,session:l}=s,h=this.getRelativePath(t,a.getProviderRootUri(t)),c=null!=i?1:0,u=await o.getCommitRefs(l.accessToken,n.repo.owner,n.repo.name,i&&"HEAD"!==i?i:(await n.getRevision()).revision,{path:h,first:c+r+1});if(null==u)return;let p=0===r?d.nk.fromFile(h,e,i):new d.nk(await this.getBestRevisionUri(e,h,u.values[c+r-1]?.oid??m.nB));if(null==p||p.sha===m.nB)return;return{current:p,previous:new d.nk(await this.getBestRevisionUri(e,h,u.values[c+r]?.oid??m.nB))}}catch(e){throw P.Vy.error(e,s),e}}async getPreviousComparisonUrisForLine(e,t,i,r,s=0){if(r===m.nB)return;let n=(0,ea.dQ)();try{let n;let o=await this.ensureRepositoryContext(e);if(null==o)return;let{remotehub:a}=o,l=this.getRelativePath(t,a.getProviderRootUri(t)),h=d.nk.fromFile(l,e,r),c=i,u=i,p=i;for(let t=0;t<Math.max(0,s)+2;t++){let t=await this.getBlameForLine(n??h,p,void 0,{forceSingleLine:!0});if(null==t)break;r=t.commit.sha,l=t.commit.file?.path??t.commit.file?.originalPath??l,p=t.line.originalLine-1;let i=d.nk.fromFile(l,e,r);null==n||(h=n,c=u),n=i,u=p}if(null==h)return;return{current:h,previous:n,line:(c??i)+1}}catch(e){throw P.Vy.error(e,n),e}}async getIncomingActivity(e,t){}async getRemotes(e,t){if(null==e)return[];let i=ee(S.H.get("remotes",null)),[,r,s]=n.Uri.parse(e,!0).path.split("/",3),o=`https://github.com/${r}/${s}.git`,a="github.com",l=`${r}/${s}`;return[new y.Xd(this.container,e,"origin","https",a,l,et(this.container,i)(o,a,l),[{type:"fetch",url:o},{type:"push",url:o}])]}async getRevisionContent(e,t,i){let r=i?this.createProviderUri(e,i,t):this.createVirtualUri(e,i,t);return n.workspace.fs.readFile(r)}async getStash(e){}async getStatusForFile(e,t){}async getStatusForFiles(e,t){}async getStatusForRepo(e){if(null==e)return;let t=await this.ensureRepositoryContext(e);if(null==t)return;let i=await t.metadata.getRevision();if(null!=i)return new C.ls(e,i.name,i.revision,[],{ahead:0,behind:0},i.type===eg.Branch||i.type===eg.RemoteBranch?{name:`origin/${i.name}`,missing:!1}:void 0)}async getTags(e,t){if(null==e)return eR;let i=(0,ea.dQ)(),r=t?.paging?.cursor?void 0:this._tagsCache.get(e);null==r&&(r=(async function(){try{let i,r;let{metadata:s,github:n,session:o}=await this.ensureRepositoryContext(e),a=[],l=t?.paging?.cursor,h=null==l;for(;;){let t=await n.getTags(o.accessToken,s.repo.owner,s.repo.name,{cursor:l});for(let s of t.values)i=s.target.authoredDate??s.target.target?.authoredDate??s.target.tagger?.date,r=s.target.committedDate??s.target.target?.committedDate??s.target.tagger?.date,a.push(new R.rN(e,s.name,s.target.target?.oid??s.target.oid,s.target.message??s.target.target?.message??"",null!=i?new Date(i):void 0,null!=r?new Date(r):void 0));if(!t.paging?.more||!h)return{...t,values:a};l=t.paging.cursor}}catch(t){return P.Vy.error(t,i),this._tagsCache.delete(e),eR}}).call(this),t?.paging?.cursor==null&&this._tagsCache.set(e,r));let s=await r;return t?.filter!=null&&(s={...s,values:s.values.filter(t.filter)}),t?.sort!=null&&(0,R.uO)(s.values,"boolean"==typeof t.sort?void 0:t.sort),s}async getTreeEntryForRevision(e,t,i){if(null==e||!t)return;if("HEAD"===i){let t=await this.ensureRepositoryContext(e);if(null==t)return;let r=await t.metadata.getRevision();i=r?.revision}let r=i?this.createProviderUri(e,i,t):this.createVirtualUri(e,i,t),s=await n.workspace.fs.stat(r);if(null!=s)return{ref:i,oid:"",path:this.getRelativePath(r,e),size:s.size,type:(s.type&n.FileType.Directory)===n.FileType.Directory?"tree":"blob"}}async getTreeForRevision(e,t){if(null==e)return[];if("HEAD"===t){let i=await this.ensureRepositoryContext(e);if(null==i)return[];let r=await i.metadata.getRevision();t=r?.revision}let i=t?this.createProviderUri(e,t):this.createVirtualUri(e,t),r=await n.workspace.fs.readDirectory(i);if(null==r)return[];let s=[];for(let[e,o]of r){let r=this.getAbsoluteUri(e,i);s.push({ref:t,oid:"",path:this.getRelativePath(e,r),size:0,type:(o&n.FileType.Directory)===n.FileType.Directory?"tree":"blob"})}return[]}async hasBranchOrTag(e,t){let[{values:i},{values:r}]=await Promise.all([this.getBranches(e,{filter:t?.filter?.branches,sort:!1}),this.getTags(e,{filter:t?.filter?.tags,sort:!1})]);return 0!==i.length||0!==r.length}async hasCommitBeenPushed(e,t){return!0}isTrackable(e){return this.supportedSchemes.has(e.scheme)}async isTracked(e){if(!this.isTrackable(e)||null==this.container.git.getRepository(e))return!1;let t=e.with({scheme:a.xB.GitHub});return null!=await n.workspace.fs.stat(t)}async getDiffTool(e){}async openDiffTool(e,t,i){}async openDirectoryCompare(e,t,i,r){}async resolveReference(e,t,i,r){let s;if(!t||t===m.nB||null==i&&(0,v.HH)(t)||null!=i&&(0,v._k)(t))return t;if(null!=i)s=this.getRelativePath(i,e);else if(!(0,v.a$)(t)||t.endsWith("^3"))return t;let n=await this.ensureRepositoryContext(e);if(null==n)return t;let{metadata:o,github:a,session:l}=n,h=await a.resolveReference(l.accessToken,o.repo.owner,o.repo.name,t,s);return null!=h?h:s?m.nB:t}async richSearchCommits(e,t,i){if(null==e)return;let r=(0,ea.dQ)(),s=(0,ei.OM)(t),n=s.get("commit:");if(n?.size){let t=await this.getCommit(e,(0,eo.$1)(n));if(null==t)return;return{repoPath:e,commits:new Map([[t.sha,t]]),sha:t.sha,range:void 0,count:1,limit:1,hasMore:!1}}let o=await this.getQueryArgsFromSearchQuery(t,s,e);if(0===o.length)return;let a=this.getPagingLimit(i?.limit);try{let{metadata:r,github:s,session:n}=await this.ensureRepositoryContext(e),l=`repo:${r.repo.owner}/${r.repo.name}+${o.join("+").trim()}`,h=await s.searchCommits(n.accessToken,l,{cursor:i?.cursor,limit:a,sort:i?.ordering==="date"?"committer-date":i?.ordering==="author-date"?"author-date":void 0});if(null==h)return;let c=new Map,u=n.account.label;for(let t of h.values){let i=null!=u&&t.author.name===u?"You":t.author.name,r=null!=u&&t.committer.name===u?"You":t.committer.name,s=c.get(t.oid);null==s&&(s=new g.Yg(this.container,e,t.oid,new g.M7(i,t.author.email,new Date(t.author.date),t.author.avatarUrl),new g.M7(r,t.committer.email,new Date(t.committer.date)),t.message.split("\n",1)[0],t.parents.nodes.map(e=>e.oid),t.message,t.files?.map(t=>new w.lY(e,t.filename??"",ef.fromCommitFileStatus(t.status)??w.NO.Modified,t.previous_filename,void 0,{additions:t.additions??0,deletions:t.deletions??0,changes:t.changes??0})),{changedFiles:t.changedFiles??0,additions:t.additions??0,deletions:t.deletions??0},[]),c.set(t.oid,s))}let d={repoPath:e,commits:c,sha:void 0,range:void 0,count:c.size,limit:a,hasMore:h.pageInfo?.hasNextPage??!1,endingCursor:h.pageInfo?.endCursor??void 0,query:t=>this.getLog(e,{...i,limit:t})};if(d.hasMore){let e=function(r){return async s=>{s=this.getPagingLimit(s);let n=await this.richSearchCommits(r.repoPath,t,{...i,limit:s,cursor:r.endingCursor});if(null==n)return{...r,hasMore:!1,more:void 0};let o=new Map([...r.commits,...n.commits]),a={repoPath:r.repoPath,commits:o,sha:r.sha,range:void 0,count:o.size,limit:(r.limit??0)+s,hasMore:n.hasMore,endingCursor:n.endingCursor,query:r.query};return a.hasMore&&(a.more=e.call(this,a)),a}};d.more=e.call(this,d)}return d}catch(e){P.Vy.error(e,r)}}async searchCommits(e,t,i){t={matchAll:!1,matchCase:!1,matchRegex:!0,...t};let r=(0,ei.b4)(t);try{let n=new Map,o=(0,ei.OM)(t),a=o.get("commit:");if(null!=a){let s=await Promise.allSettled((0,eo.Tj)(a,t=>this.getCommit(e,t.replace(eb,"")))),o=0;for(let e of s){let t=(0,eh.Ro)(e);null!=t&&n.set(t.sha,{i:o++,date:Number(i?.ordering==="author-date"?t.author.date:t.committer.date)})}return{repoPath:e,query:t,comparisonKey:r,results:n}}let l=await this.getQueryArgsFromSearchQuery(t,o,e);if(0===l.length)return{repoPath:e,query:t,comparisonKey:r,results:n};let{metadata:h,github:c,session:u}=await this.ensureRepositoryContext(e),d=`repo:${h.repo.owner}/${h.repo.name}+${l.join("+").trim()}`;async function s(o,a){if(i?.cancellation?.isCancellationRequested)return{repoPath:e,query:t,comparisonKey:r,results:n};o=this.getPagingLimit(o??S.H.get("advanced.maxSearchItems"));let l=await c.searchCommitShas(u.accessToken,d,{cursor:a,limit:o,sort:i?.ordering==="date"?"committer-date":i?.ordering==="author-date"?"author-date":void 0});if(null==l||i?.cancellation?.isCancellationRequested)return{repoPath:e,query:t,comparisonKey:r,results:n};for(let e of l.values)n.set(e.sha,{i:n.size,date:Number(i?.ordering==="author-date"?e.authorDate:e.committerDate)});return a=l.pageInfo?.endCursor??void 0,{repoPath:e,query:t,comparisonKey:r,results:n,paging:l.pageInfo?.hasNextPage?{limit:o,hasMore:!0}:void 0,more:async e=>s.call(this,e,a)}}return s.call(this,i?.limit)}catch(e){if(e instanceof u.Do)throw e;throw new u.Do(e)}}async validateBranchOrTagName(e,t){return eA.test(e)}async validateReference(e,t){return!0}async stageFile(e,t){}async stageDirectory(e,t){}async unstageFile(e,t){}async unstageDirectory(e,t){}async ensureRepositoryContext(e,t){let i,r,s=n.Uri.parse(e,!0);if(!/^github\+?/.test(s.authority))throw new h.gK(e,h.ax.NotAGitHubRepository);if(!t){let t=this.container.git.getRepository(s);if(null==t)throw new h.gK(e,h.ax.NotAGitHubRepository);s=t.uri}let o=this._remotehub;if(null==o)try{o=await this.ensureRemoteHubApi()}catch(t){throw h.dU,new h.gK(e,h.ax.RemoteHubApiNotFound,t)}let a=await o?.getMetadata(s);if(a?.provider.id!=="github")throw new h.gK(e,h.ax.NotAGitHubRepository);try{[i,r]=await Promise.all([this.ensureGitHub(),this.ensureSession()])}catch(t){if(t instanceof h.v3)throw new h.gK(e,t.reason===h.R.UserDidNotConsent?h.ax.GitHubAuthenticationDenied:h.ax.GitHubAuthenticationNotFound,t);throw new h.gK(e)}if(null==i)throw new h.gK(e);return{github:i,metadata:a,remotehub:o,session:r}}_github;async ensureGitHub(){if(null==this._github){let e=await this.container.github;null!=e&&this._disposables.push(e.onDidReauthenticate(()=>void this.ensureSession(!0))),this._github=e}return this._github}_remotehub;_remotehubPromise;async ensureRemoteHubApi(e){if(null==this._remotehubPromise&&(this._remotehubPromise=ep(),this._remotehubPromise.then(e=>this._remotehub=e,()=>this._remotehub=void 0)),!e)return this._remotehubPromise;try{return await this._remotehubPromise}catch{return}}_sessionPromise;async ensureSession(e=!1,t=!1){if(e||null==this._sessionPromise){async function i(){let r=this.container.storage.get(`provider:authentication:skip:${this.descriptor.id}`,!1);try{if(e)return r=!1,this.container.storage.delete(`provider:authentication:skip:${this.descriptor.id}`),await n.authentication.getSession("github",eP,{forceNewSession:!0});if(!r&&!t)return await n.authentication.getSession("github",eP,{createIfNone:!0});let i=await n.authentication.getSession("github",eP,{createIfNone:!1,silent:t});if(null!=i)return i;throw Error("User did not consent")}catch(s){if(s instanceof Error&&s.message.includes("User did not consent")){if(!t&&(await this.container.storage.store(`provider:authentication:skip:${this.descriptor.id}`,!0),!r))return e||queueMicrotask(async()=>{let e="Re-enable";await n.window.showInformationMessage("GitLens has been disabled. Authentication is required for GitLens to work with remote GitHub repositories.",e)===e&&this.ensureSession(!0)}),e=!1,i.call(this);throw new h.v3("github",h.R.UserDidNotConsent)}throw P.Vy.error(s),new h.v3("github",void 0,s)}}this._sessionPromise=i.call(this)}return this._sessionPromise}createVirtualUri(e,t,i){var r;let s;if("string"==typeof t)t&&(s=(0,v.HH)(t)?{v:1,ref:{id:t,type:2}}:{v:1,ref:{id:t,type:4}});else switch(t?.refType){case"revision":case"stash":s={v:1,ref:{id:t.ref,type:2}};break;case"branch":case"tag":s={v:1,ref:{id:t.name,type:4}}}if("string"==typeof e&&(e=n.Uri.parse(e,!0)),i){let t=e.path;t.endsWith("/")&&(t=t.slice(0,-1)),i=this.getRelativePath(i,e),i=`${t}/${i.startsWith("/")?i.slice(0,-1):i}`}return e.with({scheme:a.xB.Virtual,authority:(r=s,`github${null!=r?`+${(0,o.l)(JSON.stringify(r))}`:""}`),path:i??e.path})}createProviderUri(e,t,i){let r=this.createVirtualUri(e,t,i);return null==this._remotehub?r.scheme!==a.xB.Virtual?r:r.with({scheme:a.xB.GitHub}):this._remotehub.getProviderUri(r)}getPagingLimit(e){return 0===(e=Math.min(100,e??S.H.get("advanced.maxListItems")??100))&&(e=100),e}async resolveReferenceCore(e,t,i){if(null==i||"HEAD"===i)return(await t.getRevision()).revision;if((0,v.HH)(i))return i;if((0,v.p8)(i))return;let[r,s]=await Promise.allSettled([this.getBranches(e,{filter:e=>e.name===i}),this.getTags(e,{filter:e=>e.name===i})]);return i=eh.Ro(r)?.values[0]?.sha??eh.Ro(s)?.values[0]?.sha}async getQueryArgsFromSearchQuery(e,t,i){let r=[];for(let[s,n]of t.entries())switch(s){case"message:":r.push(...(0,eo.Tj)(n,e=>e.replace(/ /g,"+")));break;case"author:":{let t;for(let s of(n.has("@me")&&(t=await this.getCurrentUser(i)),n))if(s&&(s=s.replace(eb,e.matchRegex?"\\b":""))){if("@me"===s){if(t?.username==null)continue;s=`@${t.username}`}(s=s.replace(/ /g,"+")).startsWith("@")?r.push(`author:${s.slice(1)}`):s.includes("@")?r.push(`author-email:${s}`):r.push(`author-name:${s}`)}}}return r}};ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getBestRevisionUri",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getWorkingUri",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"addRemote",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"pruneRemote",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"removeRemote",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"applyChangesToWorkingFile",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"branchContainsCommit",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"checkout",1),ey([(0,en.Rm)({singleLine:!0})],GitHubGitProvider.prototype,"resetCache",1),ey([(0,en.Rm)({singleLine:!0})],GitHubGitProvider.prototype,"resetCaches",1),ey([(0,en.Rm)({args:{1:e=>e.length}})],GitHubGitProvider.prototype,"excludeIgnoredUris",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"fetch",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"pull",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"push",1),ey([(0,es.G)(),(0,en.Yz)()],GitHubGitProvider.prototype,"findRepositoryUri",1),ey([(0,en.Rm)({args:{1:e=>e.join(",")}})],GitHubGitProvider.prototype,"getAheadBehindCommitCount",1),ey([(0,es.G)((e,t)=>`${e.toString()}|${t?.isDirty}`),(0,en.Rm)({args:{1:e=>e?.isDirty}})],GitHubGitProvider.prototype,"getBlame",1),ey([(0,en.Rm)({args:{1:"<contents>"}})],GitHubGitProvider.prototype,"getBlameContents",1),ey([(0,es.G)((e,t,i,r)=>`${e.toString()}|${t}|${i?.isDirty}|${r?.forceSingleLine}`),(0,en.Rm)({args:{2:e=>e?.isDirty}})],GitHubGitProvider.prototype,"getBlameForLine",1),ey([(0,en.Rm)({args:{2:"<contents>"}})],GitHubGitProvider.prototype,"getBlameForLineContents",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getBlameForRange",1),ey([(0,en.Rm)({args:{2:"<contents>"}})],GitHubGitProvider.prototype,"getBlameForRangeContents",1),ey([(0,en.Rm)({args:{0:"<blame>"}})],GitHubGitProvider.prototype,"getBlameRange",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getBranch",1),ey([(0,en.Rm)({args:{1:!1}})],GitHubGitProvider.prototype,"getBranches",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getChangedFilesCount",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getCommit",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getCommitBranches",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getCommitCount",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getCommitForFile",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getCommitsForGraph",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getCommitTags",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getContributors",1),ey([(0,es.G)(),(0,en.Rm)()],GitHubGitProvider.prototype,"getCurrentUser",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getDefaultBranchName",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getDiffForFile",1),ey([(0,en.Rm)({args:{1:e=>"<contents>"}})],GitHubGitProvider.prototype,"getDiffForFileContents",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getDiffForLine",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getDiffStatus",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getFileStatusForCommit",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getLog",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getLogRefsOnly",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getLogForFile",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getMergeBase",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getMergeStatus",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getRebaseStatus",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getNextComparisonUris",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getOldestUnpushedRefForFile",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getPreviousComparisonUris",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getPreviousComparisonUrisForLine",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getIncomingActivity",1),ey([(0,en.Rm)({args:{1:!1}})],GitHubGitProvider.prototype,"getRemotes",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getRevisionContent",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getStash",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getStatusForFile",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getStatusForFiles",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getStatusForRepo",1),ey([(0,en.Rm)({args:{1:!1}})],GitHubGitProvider.prototype,"getTags",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getTreeEntryForRevision",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getTreeForRevision",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"hasBranchOrTag",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"hasCommitBeenPushed",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"getDiffTool",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"openDiffTool",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"openDirectoryCompare",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"resolveReference",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"richSearchCommits",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"searchCommits",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"validateBranchOrTagName",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"validateReference",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"stageFile",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"stageDirectory",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"unstageFile",1),ey([(0,en.Rm)()],GitHubGitProvider.prototype,"unstageDirectory",1),ey([(0,es.G)()],GitHubGitProvider.prototype,"ensureRepositoryContext",1),ey([(0,es.G)()],GitHubGitProvider.prototype,"ensureGitHub",1);let RepositoryWebPathMappingProvider=class RepositoryWebPathMappingProvider{constructor(e){this._container=e}dispose(){}async getLocalRepoPaths(e){return[]}async writeLocalRepoPath(e,t){}};let WorkspacesWebPathMappingProvider=class WorkspacesWebPathMappingProvider{async getCloudWorkspaceRepoPath(e,t){}async getCloudWorkspaceCodeWorkspacePath(e){}async removeCloudWorkspaceCodeWorkspaceFilePath(e){}async writeCloudWorkspaceCodeWorkspaceFilePathToMap(e,t){}async confirmCloudWorkspaceCodeWorkspaceFilePath(e){return!1}async writeCloudWorkspaceRepoDiskPathToMap(e,t,i){}async getLocalWorkspaceData(){return{workspaces:{}}}async writeCodeWorkspaceFile(e,t,i){return!1}async updateCodeWorkspaceFileSettings(e,t){return!1}};async function ek(e){return[new GitHubGitProvider(e)]}var eD=i(9659),eT=i(5488),e_=i(236),eI=i(153),e$=i(1031),eE=i(4022),eO=i(7253),ex=Object.defineProperty,eF=Object.getOwnPropertyDescriptor,eB=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?eF(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&ex(t,i,n),n};let eL=n.window.createTextEditorDecorationType({after:{margin:"0 0 0 3em",textDecoration:"none"},rangeBehavior:n.DecorationRangeBehavior.OpenOpen}),eU=1073741824-1;let LineAnnotationController=class LineAnnotationController{constructor(e){this.container=e,this._disposable=n.Disposable.from((0,eE.Oo)(e.onReady)(this.onReady,this),S.H.onDidChange(this.onConfigurationChanged,this),e.fileAnnotations.onDidToggleAnnotations(this.onFileAnnotationsToggled,this),e.integrations.onDidChangeConnectionState((0,eu.sg)(()=>void this.refresh(n.window.activeTextEditor),250)))}_cancellation;_disposable;_editor;_enabled=!1;dispose(){this.clearAnnotations(this._editor),this.container.lineTracker.unsubscribe(this),this._disposable.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){S.H.changed(e,"currentLine")&&(S.H.changed(e,"currentLine.enabled")&&(S.H.get("currentLine.enabled")?(this._enabled=!0,this.resume()):(this._enabled=!1,this.setLineTracker(!1))),this.refresh(n.window.activeTextEditor))}_suspended=!1;get suspended(){return!this._enabled||this._suspended}resume(){return this.setLineTracker(!0),!!this._suspended&&(this._suspended=!1,!0)}suspend(){return this.setLineTracker(!1),!this._suspended&&(this._suspended=!0,!0)}onActiveLinesChanged(e){if(!e.pending&&void 0!==e.selections){this.refresh(e.editor);return}this.clear(e.editor)}onFileAnnotationsToggled(){this.refresh(n.window.activeTextEditor)}clear(e){this._cancellation?.cancel(),this._editor!==e&&null!=this._editor&&this.clearAnnotations(this._editor),this.clearAnnotations(e)}async toggle(e){this._enabled=!(this._enabled&&!this.suspended),this._enabled?this.resume()&&await this.refresh(e):this.suspend()&&await this.refresh(e)}clearAnnotations(e){void 0!==e&&!0!==e._disposed&&e.setDecorations(eL,[])}getPullRequestsForLines(e,t){let i=new Map;if(0===t.size)return i;let r=this.container.git.getBestRemoteWithIntegration(e);for(let[,e]of t){if(e.commit.isUncommitted)continue;let t=i.get(e.commit.ref);null==t&&(t=r.then(t=>e.commit.getAssociatedPullRequest(t)),i.set(e.commit.ref,t))}return i}async refresh(e){let t;if(null==e&&null==this._editor)return;let i=(0,ea.dQ)(),r=this.container.lineTracker.selections;if(null==e||null==r||!(0,ed.ld)(e)){(0,ea.TT)(i,` ${a.EO.Dot} Skipped because there is no valid editor or no valid selections`),this.clear(this._editor);return}this._editor!==e&&(this.clear(this._editor),this._editor=e);let s=S.H.get("currentLine");if(this.suspended){(0,ea.TT)(i,` ${a.EO.Dot} Skipped because the controller is suspended`),this.clear(e);return}let o=await this.container.documentTracker.getOrAdd(e.document);if(!o.isBlameable&&this.suspended){null!=i&&(i.exitDetails=` ${a.EO.Dot} Skipped because the ${this.suspended?"controller is suspended":`document(${o.uri.toString(!0)}) is not blameable`}`),this.clear(e);return}if(null==e.document||!this.container.lineTracker.includes(r)){null!=i&&(i.exitDetails=` ${a.EO.Dot} Skipped because the ${null==e.document?"editor is gone":`selection(s)=${r.map(e=>`[${e.anchor}-${e.active}]`).join()} are no longer current`}`);return}null!=i&&(i.exitDetails=` ${a.EO.Dot} selection(s)=${r.map(e=>`[${e.anchor}-${e.active}]`).join()}`);let l=!0,h=new Map,c=new Map;for(let e of r){let t=this.container.lineTracker.getState(e.active);if(t?.commit==null){P.Vy.debug(i,`Line ${e.active} returned no commit`);continue}null!=t.commit.message||h.has(t.commit.ref)||h.set(t.commit.ref,t.commit.ensureFullDetails()),c.set(e.active,t),t.commit.isUncommitted||(l=!1)}let u=o.uri.repoPath;if(e.document.uri.scheme===a.xB.Vsls||e.document.uri.scheme===a.xB.VslsScc){let e=S.H.get("hovers");t={autolinks:e.autolinks.enabled,dateFormat:S.H.get("defaultDateFormat"),format:e.detailsMarkdownFormat,pullRequests:e.pullRequests.enabled}}let d=!l&&null!=u&&s.pullRequests.enabled&&e_.c.has(s.format,"pullRequest","pullRequestAgo","pullRequestAgoOrDate","pullRequestDate","pullRequestState");this._cancellation?.cancel(),this._cancellation=new n.CancellationTokenSource;let p=this._cancellation.token,g=e_.c.has(s.format,"tips")?this.container.git.getBranchesAndTagsTipsFn(u):void 0;async function m(e,i,r,l,h){let u={family:s.fontFamily,size:s.fontSize,style:s.fontStyle,weight:s.fontWeight},d=[];for(let[p,g]of c){let c=g.commit;if(null==c||c.isUncommitted&&""===s.uncommittedChangesFormat)continue;let m=l?.get(c.ref),f=(0,eO.iS)(c,c.isUncommitted?s.uncommittedChangesFormat??s.format:s.format,{dateFormat:null===s.dateFormat?S.H.get("defaultDateFormat"):s.dateFormat,getBranchAndTagTips:r,pullRequest:m?.value,pullRequestPendingMessage:`PR ${a.EO.Ellipsis}`},u,s.scrollable);f.range=i.document.validateRange(new n.Range(p,eU,p,eU)),null!=t&&(f.hoverMessage=await (0,eI.MX)(e,c,o.uri,p,{...t,pullRequest:m?.value,timeout:h})),d.push(f)}i.setDecorations(eL,d)}let f=d?await (0,e$.wD)(this.getPullRequestsForLines(u,c),!0,p,100,async t=>{if("timedout"!==t.reason||p.isCancellationRequested||e!==this._editor)return;P.Vy.debug(i,`${a.EO.Dot} pull request queries took too long (over 100 ms)`);let[r,s]=await Promise.allSettled([g,t.value]);if(p.isCancellationRequested||e!==this._editor)return;let n=(0,eh.Ro)(s),o=(0,eh.Ro)(r);P.Vy.debug(i,`${a.EO.Dot} pull request queries completed; updating...`),m(this.container,e,o,n)}):void 0,[w]=await Promise.allSettled([g,...h.values()]);p.isCancellationRequested||await m(this.container,e,(0,eh.Ro)(w),f,100)}setLineTracker(e){if(e){this.container.lineTracker.subscribed(this)||this.container.lineTracker.subscribe(this,this.container.lineTracker.onDidChangeActiveLines(this.onActiveLinesChanged,this));return}this.container.lineTracker.unsubscribe(this)}};eB([(0,en.Rm)()],LineAnnotationController.prototype,"resume",1),eB([(0,en.Rm)()],LineAnnotationController.prototype,"suspend",1),eB([(0,en.Yz)({args:{0:e=>`editor=${e.editor?.document.uri.toString(!0)}, selections=${e.selections?.map(e=>`[${e.anchor}-${e.active}]`).join(",")}, pending=${!!e.pending}, reason=${e.reason}`}})],LineAnnotationController.prototype,"onActiveLinesChanged",1),eB([(0,en.Yz)({args:!1,singleLine:!0})],LineAnnotationController.prototype,"clear",1),eB([(0,en.Rm)({args:!1})],LineAnnotationController.prototype,"toggle",1),eB([(0,en.Yz)({args:!1})],LineAnnotationController.prototype,"refresh",1);var eW=i(1760),eq=i(5176);let CacheProvider=class CacheProvider{_cache=new Map;constructor(e){}dispose(){this._cache.clear()}delete(e,t){this._cache.delete(`${e}:${t}`)}get(e,t,i,r,s){let n;let o=this._cache.get(`${e}:${t}`);if(null!=o&&(n="number"==typeof s?.expiryOverride&&s.expiryOverride>0?o.cachedAt+s.expiryOverride:o.expiresAt),null==o||s?.expiryOverride===!0||null!=n&&n>0&&n<Date.now()||null!=o.etag&&o.etag!==i){let{value:s,expiresAt:n}=r();return this.set(e,t,s,i,n)?.value}return o.value}getIssueOrPullRequest(e,t,i,r,s){let{key:n,etag:o}=eM(t,i);return null==t?this.get("issuesOrPrsById",`id:${e}:${n}`,o,r,s):this.get("issuesOrPrsByIdAndRepo",`id:${e}:${n}:${JSON.stringify(t)}}`,o,r,s)}getPullRequestForBranch(e,t,i,r,s){let{key:n,etag:o}=eM(t,i);return this.get("prByBranch",`branch:${e}:${n}`,o,this.wrapPullRequestCacheable(r,n,o),s)}getPullRequestForSha(e,t,i,r,s){let{key:n,etag:o}=eM(t,i);return this.get("prsBySha",`sha:${e}:${n}`,o,this.wrapPullRequestCacheable(r,n,o),s)}getRepositoryDefaultBranch(e,t,i,r){let{key:s,etag:n}=eM(e,t);return this.get("defaultBranch",`repo:${s}`,n,i,r)}getRepositoryMetadata(e,t,i,r){let{key:s,etag:n}=eM(e,t);return this.get("repoMetadata",`repo:${s}`,n,i,r)}getCurrentAccount(e,t,i){let{key:r,etag:s}={key:e.id,etag:`${e.id}:${e.maybeConnected??!1}`};return this.get("currentAccount",`id:${r}`,s,t,i)}set(e,t,i,r,s){let n;return(0,eh.yL)(i)?(i.then(i=>{this.set(e,t,i,r,s)},()=>{this.delete(e,t)}),n={value:i,etag:r,cachedAt:Date.now()}):n={value:i,etag:r,cachedAt:Date.now(),expiresAt:s??function(e,t){let i=Date.now(),r=i+36e5;switch(e){case"defaultBranch":case"repoMetadata":case"currentAccount":return 0;case"issuesOrPrsById":case"issuesOrPrsByIdAndRepo":{if(null==t)return 0;if(!t.closed)return r;let e=i-(t.closedDate??t.updatedDate).getTime();return i+(e>12096e5?12:1)*36e5}case"prByBranch":case"prsBySha":{if(null==t)return"prByBranch"===e?r:0;if("opened"===t.state)return r;let s=i-(t.closedDate??t.mergedDate??t.updatedDate).getTime();return i+(s>12096e5?12:1)*36e5}default:return null==t?0:r}}(e,i)},this._cache.set(`${e}:${t}`,n),n}wrapPullRequestCacheable(e,t,i){return()=>{let r=e();return(0,eh.yL)(r.value)&&r.value.then(e=>{null!=e&&this.set("issuesOrPrsById",`id:${e.id}:${t}`,e,i)}),r}}};function eM(e,t){return{key:e.key,etag:`${e.key}:${t?.maybeConnected??!1}`}}let GitCodeLensController=class GitCodeLensController{constructor(e){this.container=e,this._disposable=n.Disposable.from((0,eE.Oo)(e.onReady)(this.onReady,this),S.H.onDidChange(this.onConfigurationChanged,this))}_canToggle=!1;_disposable;_provider;_providerDisposable;dispose(){this._providerDisposable?.dispose(),this._disposable?.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){if(S.H.changed(e,["codeLens","defaultDateFormat","defaultDateSource","defaultDateStyle"])){null!=e&&P.Vy.log("CodeLens config changed; resetting CodeLens provider");let t=S.H.get("codeLens");t.enabled&&(t.recentChange.enabled||t.authors.enabled)?this.ensureProvider():(this._providerDisposable?.dispose(),this._provider=void 0),this._canToggle=t.recentChange.enabled||t.authors.enabled,(0,er.o)("gitlens:disabledToggleCodeLens",!this._canToggle)}}onBlameStateChanged(e){null!=this._provider&&e.blameable&&(P.Vy.log("Blame state changed; resetting CodeLens provider"),this._provider.reset())}onDirtyIdleTriggered(e){null!=this._provider&&e.document.isBlameable&&(P.Vy.log("Dirty idle triggered; resetting CodeLens provider"),this._provider.reset())}toggleCodeLens(){if(this._canToggle){if(P.Vy.log("toggleCodeLens()"),null!=this._provider){this._providerDisposable?.dispose(),this._provider=void 0;return}this.ensureProvider()}}async ensureProvider(){if(null!=this._provider){this._provider.reset();return}this._providerDisposable?.dispose();let{GitCodeLensProvider:e}=await Promise.resolve().then(i.bind(i,4416));this._provider=new e(this.container),this._providerDisposable=n.Disposable.from(n.languages.registerCodeLensProvider(e.selector,this._provider),this.container.documentTracker.onDidChangeBlameState(this.onBlameStateChanged,this),this.container.documentTracker.onDidTriggerDirtyIdle(this.onDirtyIdleTriggered,this))}};var eN=i(2434);let eH=new Set(["commit:selected","draft:selected","file:selected"]),eG=new Map;let EventBus=class EventBus{_emitter=new n.EventEmitter;dispose(){this._emitter.dispose()}fire(e,t,i){eH.has(e)&&eG.set(e,t),this._emitter.fire({name:e,data:t,source:i?.source})}fireAsync(e,t,i){queueMicrotask(()=>this.fire(e,t,i))}getCachedEventArgs(e){return eG.get(e)}on(e,t,i){return this._emitter.event(function(r){e===r.name&&t.call(i,r)},i)}};var eV=i(3794);let eQ={done:!0,value:void 0};let StringIterator=class StringIterator{_value="";_pos=0;reset(e){return this._value=e,this._pos=0,this}next(){return this._pos+=1,this}hasNext(){return this._pos<this._value.length-1}cmp(e){return e.charCodeAt(0)-this._value.charCodeAt(this._pos)}value(){return this._value[this._pos]}};let PathIterator=class PathIterator{constructor(e=!0,t=!0){this._splitOnBackslash=e,this._caseSensitive=t}_value;_from;_to;reset(e){return this._value=e.replace(/\\$|\/$/,""),this._from=0,this._to=0,this.next()}hasNext(){return this._to<this._value.length}next(){this._from=this._to;let e=!0;for(;this._to<this._value.length;this._to++){let t=this._value.charCodeAt(this._to);if(t===a.s7.Slash||this._splitOnBackslash&&t===a.s7.Backslash){if(e)this._from++;else break}else e=!1}return this}cmp(e){return this._caseSensitive?(0,L.lF)(e,this._value,0,e.length,this._from,this._to):(0,L.zd)(e,this._value,0,e.length,this._from,this._to)}value(){return this._value.substring(this._from,this._to)}};let TernarySearchTreeNode=class TernarySearchTreeNode{segment;value;key;left;mid;right;isEmpty(){return!this.left&&!this.mid&&!this.right&&!this.value}};let TernarySearchTree=class TernarySearchTree{static forPaths(){return new TernarySearchTree(new PathIterator)}static forStrings(){return new TernarySearchTree(new StringIterator)}_iter;_root;constructor(e){this._iter=e}clear(){this._root=void 0}set(e,t){let i;let r=this._iter.reset(e);for(this._root||(this._root=new TernarySearchTreeNode,this._root.segment=r.value()),i=this._root;;){let e=r.cmp(i.segment);if(e>0)i.left||(i.left=new TernarySearchTreeNode,i.left.segment=r.value()),i=i.left;else if(e<0)i.right||(i.right=new TernarySearchTreeNode,i.right.segment=r.value()),i=i.right;else if(r.hasNext())r.next(),i.mid||(i.mid=new TernarySearchTreeNode,i.mid.segment=r.value()),i=i.mid;else break}let s=i.value;return i.value=t,i.key=e,s}get(e){return this._getNode(e)?.value}_getNode(e){let t=this._iter.reset(e),i=this._root;for(;i;){let e=t.cmp(i.segment);if(e>0)i=i.left;else if(e<0)i=i.right;else if(t.hasNext())t.next(),i=i.mid;else break}return i}has(e){let t=this._getNode(e);return!(t?.value===void 0&&t?.mid===void 0)}delete(e){this._delete(e,!1)}deleteSuperstr(e){this._delete(e,!0)}_delete(e,t){let i=this._iter.reset(e),r=[],s=this._root;for(;s;){let e=i.cmp(s.segment);if(e>0)r.push([1,s]),s=s.left;else if(e<0)r.push([-1,s]),s=s.right;else if(i.hasNext())i.next(),r.push([0,s]),s=s.mid;else{for(t?(s.left=void 0,s.mid=void 0,s.right=void 0):s.value=void 0;r.length>0&&s.isEmpty();){let[e,t]=r.pop();switch(e){case 1:t.left=void 0;break;case 0:t.mid=void 0;break;case -1:t.right=void 0}s=t}break}}}findSubstr(e){let t;let i=this._iter.reset(e),r=this._root;for(;r;){let e=i.cmp(r.segment);if(e>0)r=r.left;else if(e<0)r=r.right;else if(i.hasNext())i.next(),t=r.value||t,r=r.mid;else break}return r?.value||t}findSuperstr(e,t=!1){let i=this._iter.reset(e),r=this._root;for(;r;){let e=i.cmp(r.segment);if(e>0)r=r.left;else if(e<0)r=r.right;else if(i.hasNext())i.next(),r=r.mid;else{if(!r.mid)return;return r=r.mid,{[Symbol.iterator]:()=>this._nodeIterator(r,t)}}}}_nodeIterator(e,t=!1){let i,r,s;return{next:()=>(s||(s=[],r=0,this._forEach(e,e=>s.push(e),t)),r>=s.length)?eQ:(i?i.value=s[r++]:i={done:!1,value:s[r++]},i)}}forEach(e){this._forEach(this._root,e)}_forEach(e,t,i=!1){void 0!==e&&(this._forEach(e.left,t,i),e.value&&t(e.value,e.key),i||this._forEach(e.mid,t,i),this._forEach(e.right,t,i))}any(){return void 0!==this._root&&!this._root.isEmpty()}count(e){return void 0===this._root||this._root.isEmpty()?0:(0,eo.U9)(this.entries(),void 0===e?void 0:([,t])=>e(t))}entries(){return this._iterator(this._root)}values(){return(0,eo.Tj)(this.entries(),([,e])=>e)}highlander(){let e,t;if(void 0===this._root||this._root.isEmpty())return;let i=this.entries(),r=0;for(;!(e=i.next()).done;)if(t=e.value,++r>1)return;return t}some(e){return!(void 0===this._root||this._root.isEmpty())&&(0,eo.zN)(this.entries(),([,t])=>e(t))}*[Symbol.iterator](){yield*this._iterator(this._root)}*_iterator(e){e&&(yield*this._iterator(e.left),e.value&&(yield[e.key,e.value]),yield*this._iterator(e.mid),yield*this._iterator(e.right))}};var ej=Object.defineProperty,ez=Object.getOwnPropertyDescriptor,eY=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?ez(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&ej(t,i,n),n};let eK=new Uint8Array(0);function eJ(e){let t=(0,d.t5)(e)?e:d.nk.fromRevisionUri(e);return{path:t.relativePath,ref:t.sha,repoPath:t.repoPath}}let GitFileSystemProvider=class GitFileSystemProvider{constructor(e){this.container=e,this._disposable=n.Disposable.from(n.workspace.registerFileSystemProvider(a.xB.GitLens,this,{isCaseSensitive:eV.j9,isReadonly:!0}))}_disposable;_searchTreeMap=new Map;dispose(){this._disposable.dispose()}_onDidChangeFile=new n.EventEmitter;get onDidChangeFile(){return this._onDidChangeFile.event}copy(e,t,i){throw n.FileSystemError.NoPermissions(e)}createDirectory(e){throw n.FileSystemError.NoPermissions(e)}delete(e,t){throw n.FileSystemError.NoPermissions(e)}async readDirectory(e){let{path:t,ref:i,repoPath:r}=eJ(e),s=await this.getTree(t,i,r);if(void 0===s)throw n.FileSystemError.FileNotFound(e);return[...(0,eo.Tj)(s,e=>[null!=t&&0!==t.length?(0,el.Fd)((0,el.V8)(t,e.path)):e.path,eZ(e.type)])]}async readFile(e){let{path:t,ref:i,repoPath:r}=eJ(e);if(i===m.nB)return eK;let s=await this.container.git.getRevisionContent(r,t,i);return null!=s?s:eK}rename(e,t,i){throw n.FileSystemError.NoPermissions(e)}async stat(e){let t;let{path:i,ref:r,repoPath:s}=eJ(e);if(r===m.nB)return{type:n.FileType.File,size:0,ctime:0,mtime:0};let o=this._searchTreeMap.get(r);if(null!=o)t=(await o).get(`/~/${i}`);else{if(null==i||0===i.length){if(null==await this.getTree(i,r,s))throw n.FileSystemError.FileNotFound(e);return{type:n.FileType.Directory,size:0,ctime:0,mtime:0}}t=await this.container.git.getTreeEntryForRevision(s,i,r)}if(null==t)throw n.FileSystemError.FileNotFound(e);return{type:eZ(t.type),size:t.size,ctime:0,mtime:0}}watch(){return{dispose:()=>{}}}writeFile(e){throw n.FileSystemError.NoPermissions(e)}async createSearchTree(e,t){let i=TernarySearchTree.forPaths(),r=await this.container.git.getTreeForRevision(t,e);for(let e of(i.set("~",{ref:"",oid:"",path:"~",size:0,type:"tree"}),r))i.set(`~/${e.path}`,e);return i}getOrCreateSearchTree(e,t){let i=this._searchTreeMap.get(e);return void 0===i&&(i=this.createSearchTree(e,t),this._searchTreeMap.set(e,i)),i}async getTree(e,t,i){return(await this.getOrCreateSearchTree(t,i)).findSuperstr(`/~/${e}`,!0)}};function eZ(e){switch(e){case"blob":return n.FileType.File;case"tree":return n.FileType.Directory;default:return n.FileType.Unknown}}eY([(0,en.Yz)()],GitFileSystemProvider.prototype,"readDirectory",1),eY([(0,en.Yz)()],GitFileSystemProvider.prototype,"readFile",1),eY([(0,en.Yz)()],GitFileSystemProvider.prototype,"stat",1);var eX=i(4293),e0=i(5900),e1=i(2927),e2=i(7899),e3=i(9736),e4=Object.defineProperty,e8=Object.getOwnPropertyDescriptor,e5=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?e8(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&e4(t,i,n),n};let e7=Object.freeze([]),e9=Object.freeze({dispose:()=>{}}),e6=new Map([["master",100],["main",15],["default",10],["develop",5],["development",1]]);let GitProviderService=class GitProviderService{constructor(e){this.container=e,this._initializing=(0,eh.v6)(),this._disposable=n.Disposable.from(e.subscription.onDidChange(this.onSubscriptionChanged,this),n.window.onDidChangeWindowState(this.onWindowStateChanged,this),n.workspace.onDidChangeWorkspaceFolders(this.onWorkspaceFoldersChanged,this),S.H.onDidChange(this.onConfigurationChanged,this),e.integrations.onDidChangeConnectionState(e=>{"connected"===e.reason&&(0,eq.H3)("failed"),this.resetCaches("providers"),this.updateContext()}),n.workspace.isTrusted?e9:n.workspace.onDidGrantWorkspaceTrust(()=>{n.workspace.isTrusted&&n.workspace.workspaceFolders?.length&&this.discoverRepositories(n.workspace.workspaceFolders,{force:!0})}),...this.registerCommands()),this.container.BranchDateFormatting.reset(),this.container.CommitDateFormatting.reset(),this.container.CommitShaFormatting.reset(),this.container.PullRequestDateFormatting.reset(),this.updateContext()}_onDidChangeProviders=new n.EventEmitter;get onDidChangeProviders(){return this._onDidChangeProviders.event}fireProvidersChanged(e,t){this.container.telemetry.enabled&&this.container.telemetry.setGlobalAttributes({"providers.count":this._providers.size,"providers.ids":(0,eo.fj)(this._providers.keys(),",")}),this._etag=Date.now(),this._onDidChangeProviders.fire({added:e??[],removed:t??[],etag:this._etag})}_onDidChangeRepositories=new n.EventEmitter;get onDidChangeRepositories(){return this._onDidChangeRepositories.event}fireRepositoriesChanged(e,t){if(this.container.telemetry.enabled){let i=this.openRepositories.map(e=>e.uri.scheme);this.container.telemetry.setGlobalAttributes({"repositories.count":i.length,"repositories.schemes":(0,e1.EG)(i,",")}),this.container.telemetry.sendEvent("repositories/changed",{"repositories.added":e?.length??0,"repositories.removed":t?.length??0})}this._etag=Date.now(),this._accessCache.clear(),this._reposVisibilityCache=void 0,this._onDidChangeRepositories.fire({added:e??[],removed:t??[],etag:this._etag}),e?.length&&this.container.telemetry.enabled&&setTimeout(async()=>{for(let t of e){let e=new Set;for(let i of(await t.getRemotes()))e.add(i.provider?.id??"unknown");this.container.telemetry.sendEvent("repository/opened",{"repository.id":t.idHash,"repository.scheme":t.uri.scheme,"repository.closed":t.closed,"repository.folder.scheme":t.folder?.uri.scheme,"repository.provider.id":t.provider.id,"repository.remoteProviders":(0,eo.fj)(e,",")})}},0)}_onDidChangeRepository=new n.EventEmitter;get onDidChangeRepository(){return this._onDidChangeRepository.event}supportedSchemes=new Set;_bestRemotesCache=new Map;_disposable;_initializing;_pendingRepositories=new Map;_providers=new Map;_repositories=new e0.PB;_visitedPaths=new e3.ZZ;dispose(){this._disposable.dispose(),this._providers.clear(),this._repositories.forEach(e=>e.dispose()),this._repositories.clear()}_etag=0;get etag(){return this._etag}onConfigurationChanged(e){(S.H.changed(e,"defaultDateFormat")||S.H.changed(e,"defaultDateSource")||S.H.changed(e,"defaultDateStyle"))&&(this.container.BranchDateFormatting.reset(),this.container.CommitDateFormatting.reset(),this.container.PullRequestDateFormatting.reset()),S.H.changed(e,"advanced.abbreviatedShaLength")&&this.container.CommitShaFormatting.reset(),S.H.changed(e,"views.contributors.showAllBranches")&&this.resetCaches("contributors"),null!=e&&S.H.changed(e,"integrations.enabled")&&this.updateContext()}registerCommands(){return[(0,e2.Lb)("gitlens.plus.resetRepositoryAccess",()=>this.clearAllRepoVisibilityCaches()),(0,e2.Lb)("gitlens.plus.refreshRepositoryAccess",()=>this.clearAllOpenRepoVisibilityCaches())]}onSubscriptionChanged(e){this._accessCache.clear(),this._subscription=e.current}onWindowStateChanged(e){e.focused?this._repositories.forEach(e=>e.resume()):this._repositories.forEach(e=>e.suspend())}onWorkspaceFoldersChanged(e){if(this.container.telemetry.enabled){let e=n.workspace.workspaceFolders?.map(e=>e.uri.scheme);this.container.telemetry.setGlobalAttributes({"folders.count":e?.length??0,"folders.schemes":null!=e?(0,e1.EG)(e,", "):""})}if(e.added.length&&this.discoverRepositories(e.added),e.removed.length){let t=[];for(let i of e.removed){let e=this._repositories.getClosest(i.uri);null!=e&&(this._repositories.remove(e.uri,!1),t.push(e))}t.length&&(this.updateContext(),queueMicrotask(()=>{this.fireRepositoriesChanged([],t),t.forEach(e=>e.dispose())}))}}get hasProviders(){return 0!==this._providers.size}get registeredProviders(){return[...(0,eo.Tj)(this._providers.values(),e=>({...e.descriptor}))]}get openRepositories(){if(0===this.repositoryCount)return e7;let e=[...(0,eo.pb)(this.repositories,e=>!e.closed)];return 0===e.length?e:b.LN.sort(e)}get openRepositoryCount(){return 0===this.repositoryCount?0:(0,eo.U9)(this.repositories,e=>!e.closed)}get repositories(){return this._repositories.values()}get repositoryCount(){return this._repositories.count}get highlander(){return 1===this.repositoryCount||1===this.openRepositoryCount?(0,eo.$1)(this._repositories.values()):void 0}register(e,t){if(e!==t.descriptor.id)throw Error(`Id '${e}' must match provider id '${t.descriptor.id}'`);if(this._providers.has(e))throw Error(`Provider '${e}' has already been registered`);for(let i of(this._providers.set(e,t),t.supportedSchemes))this.supportedSchemes.add(i);let i=[],r=t.openRepositoryInitWatcher?.();null!=r&&i.push(r,r.onDidCreate(e=>{let t=n.workspace.getWorkspaceFolder(e);null!=t&&this.discoverRepositories([t],{force:!0})}));let s=n.Disposable.from(t,...i,t.onDidChange(()=>{P.Vy.debug(`GitProvider(${e}).onDidChange()`);let{workspaceFolders:t}=n.workspace;t?.length&&this.discoverRepositories(t,{force:!0})}),t.onDidChangeRepository(async i=>{if(P.Vy.debug(`GitProvider(${e}).onDidChangeRepository(e=${i.repository.toString()})`),i.changed(b.Z_.Remotes,b.Z_.RemoteProviders,b.Ti.Any)&&this._bestRemotesCache.clear(),i.changed(b.Z_.Closed,b.Ti.Any)?(this.updateContext(),queueMicrotask(()=>this.fireRepositoriesChanged([],[i.repository]))):i.changed(b.Z_.Opened,b.Ti.Any)&&(this.updateContext(),queueMicrotask(()=>this.fireRepositoriesChanged([i.repository],[]))),i.changed(b.Z_.Remotes,b.Ti.Any)){let e=await t.getRemotes(i.repository.path),r=this.getVisibilityInfoFromCache(i.repository.path);null!=r&&this.checkVisibilityCachedRemotes(i.repository.path,r,e)}this._onDidChangeRepository.fire(i)}),t.onDidCloseRepository(t=>{let i=this._repositories.get(t.uri);P.Vy.debug(`GitProvider(${e}).onDidCloseRepository(e=${i?.toString()??t.uri.toString()})`),null!=i&&(i.closed=!0)}),t.onDidOpenRepository(t=>{let i=this._repositories.get(t.uri);P.Vy.debug(`GitProvider(${e}).onDidOpenRepository(e=${i?.toString()??t.uri.toString()})`),null!=i?i.closed=!1:this.getOrOpenRepository(t.uri)}));return this.fireProvidersChanged([t]),null!=this._initializing&&this.onWorkspaceFoldersChanged({added:n.workspace.workspaceFolders??[],removed:[]}),{dispose:()=>{s.dispose(),this._providers.delete(e);let i=[];for(let t of[...this._repositories.values()])t?.provider.id===e&&(this._repositories.remove(t.uri,!1),i.push(t));let{deactivating:r}=this.container;r||this.updateContext(),i.length&&queueMicrotask(()=>{r||this.fireRepositoriesChanged([],i),i.forEach(e=>e.dispose())}),r||this.fireProvidersChanged([],[t])}}}async registrationComplete(){let e=(0,ea.dQ)(),{workspaceFolders:t}=n.workspace;t?.length?(await this.discoverRepositories(t),0===this.repositoryCount&&eV.HZ&&setTimeout(()=>{({workspaceFolders:t}=n.workspace),t?.length&&this.discoverRepositories(t,{force:!0})},1e3)):(this._initializing?.fulfill(this._etag),this._initializing=void 0,this.updateContext());let i=S.H.getCore("git.autoRepositoryDetection");this.container.telemetry.enabled&&setTimeout(()=>this.container.telemetry.sendEvent("providers/registrationComplete",{"config.git.autoRepositoryDetection":i}),0),(0,ea.TT)(e,` ${a.EO.Dot} repositories=${this.repositoryCount}, workspaceFolders=${t?.length}, git.autoRepositoryDetection=${i}`)}getOpenProviders(){return[...this.getOpenRepositoriesByProvider().keys()].map(e=>this._providers.get(e))}getOpenRepositories(e){return(0,eo.pb)(this.repositories,t=>!t.closed&&(null==e||e===t.provider.id))}getOpenRepositoriesByProvider(){let e=[...(0,eo.pb)(this.repositories,e=>!e.closed)];return 0===e.length?new Map:(0,eo.Fi)(e,e=>e.provider.id)}hasOpenRepositories(e){return(0,eo.zN)(this.repositories,t=>!t.closed&&(null==e||e===t.provider.id))}_discoveredWorkspaceFolders=new Map;_discoveringRepositories;get isDiscoveringRepositories(){return(0,eh.FO)(this._discoveringRepositories)??(0,eh.FO)(this._initializing)}async discoverRepositories(e,t){this._discoveringRepositories?.pending&&(await this._discoveringRepositories.promise,this._discoveringRepositories=void 0);let i=this._initializing??(0,eh.v6)();this._discoveringRepositories=i,this._initializing=void 0;try{let i=[];for(let r of e){if(!t?.force&&this._discoveredWorkspaceFolders.has(r))continue;let e=this.discoverRepositoriesCore(r);i.push(e),this._discoveredWorkspaceFolders.set(r,e)}if(0===i.length)return;let r=await Promise.allSettled(i),s=(0,eo.qI)((0,eo.pb)(r,e=>"fulfilled"===e.status),e=>e.value),n=[];for(let e of s)this._repositories.add(e),e.closed||n.push(e);this.updateContext(),n.length&&queueMicrotask(()=>this.fireRepositoriesChanged(n))}finally{queueMicrotask(()=>{i.fulfill(this._etag)})}}async discoverRepositoriesCore(e){let{provider:t}=this.getProvider(e.uri);try{return await t.discoverRepositories(e.uri)}catch(i){return this._discoveredWorkspaceFolders.delete(e),P.Vy.error(i,`${t.descriptor.name} Provider(${t.descriptor.id}) failed discovering repositories in ${e.uri.toString(!0)}`),[]}}async findRepositories(e,t){let{provider:i}=this.getProvider(e);return i.discoverRepositories(e,t)}_subscription;async getSubscription(){return this._subscription??(this._subscription=await this.container.subscription.getSubscription())}_accessCache=new Map;async access(e,t){if(null==t){let i=this._accessCache.get(void 0);return null==i&&(i=this.accessCore(e,t),this._accessCache.set(void 0,i)),i}let{path:i}=this.getProvider(t),r=this._accessCache.get(i);return null==r&&(r=this.accessCore(e,t),this._accessCache.set(i,r)),r}async accessCore(e,t){let i=await this.getSubscription();this.container.telemetry.enabled&&queueMicrotask(()=>void this.visibility());let r=i.plan.effective.id;if((0,eX.zx)(r))return{allowed:i.account?.verified!==!1,subscription:{current:i}};function s(e,t=!1){let{path:r}=this.getProvider(e),s=t?void 0:this._accessCache.get(r);return null==s&&(s=this.visibility(e).then(e=>"private"===e?{allowed:!1,subscription:{current:i,required:eX.qn.Pro},visibility:e}:{allowed:!0,subscription:{current:i},visibility:e},()=>({allowed:!0,subscription:{current:i}})),this._accessCache.set(r,s)),s}if(null==t){let e=this.openRepositories;if(0===e.length)return{allowed:!1,subscription:{current:i}};if(1===e.length)return s.call(this,e[0].path);switch(await this.visibility()){case"private":return{allowed:!1,subscription:{current:i,required:eX.qn.Pro},visibility:"private"};case"mixed":return{allowed:"mixed",subscription:{current:i,required:eX.qn.Pro}};default:return{allowed:!0,subscription:{current:i},visibility:"public"}}}return s.call(this,t,!0)}async ensureAccess(e,t){let{allowed:i,subscription:r}=await this.access(e,t);if(!1===i)throw new h.Uk(r.current,r.required)}supports(e,t){let{provider:i}=this.getProvider(e);return i.supports(t)}_reposVisibilityCache;_repoVisibilityCache;ensureRepoVisibilityCache(){if(null==this._repoVisibilityCache){let e=this.container.storage.get("repoVisibility")?.map(([e,t])=>[e,{visibility:t.visibility,timestamp:t.timestamp,remotesHash:t.remotesHash}]);this._repoVisibilityCache=new Map(e)}}clearRepoVisibilityCache(e){if(null==e)this._repoVisibilityCache=void 0,this.container.storage.delete("repoVisibility");else{e?.forEach(e=>this._repoVisibilityCache?.delete(e));let t=Array.from(this._repoVisibilityCache?.entries()??[]);0===t.length?this.container.storage.delete("repoVisibility"):this.container.storage.store("repoVisibility",t)}}getVisibilityInfoFromCache(e){this.ensureRepoVisibilityCache();let t=this._repoVisibilityCache?.get(e);if(null!=t){if(Date.now()-t.timestamp>2592e6){this.clearRepoVisibilityCache([e]);return}return t}}checkVisibilityCachedRemotes(e,t,i){if(null==t)return!0;if("public"===t.visibility){if(0==i.length||!i.some(e=>e.remoteKey===t.remotesHash))return this.clearRepoVisibilityCache([e]),!1}else if("private"===t.visibility&&(0,y.U6)(i)!==t.remotesHash)return this.clearRepoVisibilityCache([e]),!1;return!0}updateVisibilityCache(e,t){this.ensureRepoVisibilityCache(),this._repoVisibilityCache?.set(e,t),this.container.storage.store("repoVisibility",Array.from(this._repoVisibilityCache.entries()))}clearAllRepoVisibilityCaches(){this.clearRepoVisibilityCache()}clearAllOpenRepoVisibilityCaches(){let e=this.openRepositories.map(e=>this.getProvider(e.path).path);this.clearRepoVisibilityCache(e)}async visibility(e){if(null==e){let e=this._reposVisibilityCache;return null==e&&(e=await this.visibilityCore(),this.container.telemetry.enabled&&(this.container.telemetry.setGlobalAttribute("repositories.visibility",e),this.container.telemetry.sendEvent("repositories/visibility")),this._reposVisibilityCache=e),e}let{path:t}=this.getProvider(e),i=this.getVisibilityInfoFromCache(t)?.visibility;return null==i&&(i=await this.visibilityCore(e),this.container.telemetry.enabled&&setTimeout(()=>{let t=this.getRepository(e);this.container.telemetry.sendEvent("repository/visibility",{"repository.visibility":i,"repository.id":t?.idHash,"repository.scheme":t?.uri.scheme,"repository.closed":t?.closed,"repository.folder.scheme":t?.folder?.uri.scheme,"repository.provider.id":t?.provider.id})},0)),i}async visibilityCore(e){async function t(e){let{provider:t,path:i}=this.getProvider(e),r=await t.getRemotes(i,{sort:!0}),s=this.getVisibilityInfoFromCache(i);if(null==s||!this.checkVisibilityCachedRemotes(i,s,r)){let[e,r]=await t.visibility(i);return"local"!==e&&this.updateVisibilityCache(i,{visibility:e,timestamp:Date.now(),remotesHash:r}),e}return s.visibility}if(null==e){let e=this.openRepositories;if(0===e.length)return"private";if(1===e.length)return t.call(this,e[0].path);let i=!1,r=!1,s=!1;for await(let n of(0,eh.w)(e.map(e=>t.call(this,e.path))))if("fulfilled"===n.status){if("public"===n.value){if(s||r)return"mixed";i=!0}else if("local"===n.value){if(i||r)return"mixed";s=!0}else if("private"===n.value){if(i||s)return"mixed";r=!0}}return i?"public":s?"local":"private"}return t.call(this,e)}_context={enabled:!1,disabled:!1};async setEnabledContext(e){let t=!e;if(e||null==this._initializing||(t=!this.container.storage.getWorkspace("assumeRepositoriesOnStartup")),this.container.telemetry.setGlobalAttribute("enabled",e),this._context.enabled===e&&this._context.disabled===t)return;let i=[];this._context.enabled!==e&&(this._context.enabled=e,i.push((0,er.o)("gitlens:enabled",e))),this._context.disabled!==t&&(this._context.disabled=t,i.push((0,er.o)("gitlens:disabled",t))),await Promise.allSettled(i),null==this._initializing&&this.container.storage.storeWorkspace("assumeRepositoriesOnStartup",e).catch()}_sendProviderContextTelemetryDebounced;updateContext(){if(this.container.deactivating)return;let e=this.openRepositoryCount,t=0!==e;async function i(){let e=S.H.get("integrations.enabled"),i=this.container.telemetry.enabled,r=new Set,s=!1,n=!1,o=!1;if(t)for(let t of this._repositories.values()){if(i)for(let e of(await t.getRemotes()))r.add(e.provider?.id??"unknown");if(!o&&e&&(o=await t.hasRemoteWithIntegration({includeDisconnected:!1}))&&(n=!0,s=!0),!n&&e&&(n=await t.hasRemoteWithIntegration({includeDisconnected:!0}))&&(s=!0),s||(s=await t.hasRemotes()),s&&(n&&o||!e))break}i&&(this.container.telemetry.setGlobalAttributes({"repositories.hasRemotes":s,"repositories.hasRichRemotes":n,"repositories.hasConnectedRemotes":o,"repositories.remoteProviders":(0,eo.fj)(r,",")}),null==this._sendProviderContextTelemetryDebounced&&(this._sendProviderContextTelemetryDebounced=(0,eu.sg)(()=>this.container.telemetry.sendEvent("providers/context"),2500)),this._sendProviderContextTelemetryDebounced()),await Promise.allSettled([(0,er.o)("gitlens:hasRemotes",s),(0,er.o)("gitlens:hasRichRemotes",n),(0,er.o)("gitlens:hasConnectedRemotes",o)])}this.setEnabledContext(t),null==this._initializing&&(this.container.telemetry.setGlobalAttributes({enabled:t,"repositories.count":e}),t&&(i.call(this),this._providers.forEach(e=>e.updateContext?.())))}getProvider(e){let t;if(null==e||"string"!=typeof e&&!this.supportedSchemes.has(e.scheme))throw new h.ND(e);"string"==typeof e?t=(0,el.my)(e)??a.xB.File:{scheme:t}=e;let i=new Set;for(let r of this._providers.values()){let s=r.canHandlePathOrUri(t,e);null!=s&&i.add({provider:r,path:s})}if(0===i.size)throw new h.ND(e);if(i.size>1){for(let e of i)if(this.hasOpenRepositories(e.provider.descriptor.id))return e}return(0,eo.$1)(i)}getAbsoluteUri(e,t){if(null==t)return"string"==typeof e?(0,el.bm)(e)?n.Uri.parse(e,!0):n.Uri.file(e):e;if("string"!=typeof t&&"string"==typeof e){let i=(0,el.Fd)(e);if(!(0,el.oP)(i))return n.Uri.joinPath(t,i)}let{provider:i}=this.getProvider(t);return i.getAbsoluteUri(e,t)}async getBestRevisionUri(e,t,i){if(null==e||i===m.nB)return;let{provider:r,path:s}=this.getProvider(e);return r.getBestRevisionUri(s,r.getRelativePath(t,s),i)}getRelativePath(e,t){let{provider:i}=this.getProvider(e instanceof n.Uri?e:t);return i.getRelativePath(e,t)}getRevisionUri(e,t,i){let r,s;"string"==typeof e?(s=e,r="string"==typeof t?t:t?.originalPath??t?.path??""):(s=e.sha,i=e.repoPath,r=(0,el.Sp)(e));let{provider:n,path:o}=this.getProvider(i);return n.getRevisionUri(o,n.getRelativePath(r,o),s)}getWorkingUri(e,t){let{provider:i,path:r}=this.getProvider(e);return i.getWorkingUri(r,t)}addRemote(e,t,i,r){let{provider:s,path:n}=this.getProvider(e);return s.addRemote(n,t,i,r)}pruneRemote(e,t){let{provider:i,path:r}=this.getProvider(e);return i.pruneRemote(r,t)}removeRemote(e,t){let{provider:i,path:r}=this.getProvider(e);return i.removeRemote(r,t)}applyChangesToWorkingFile(e,t,i){let{provider:r}=this.getProvider(e);return r.applyChangesToWorkingFile(e,t,i)}async applyUnreachableCommitForPatch(e,t,i){let{provider:r,path:s}=this.getProvider(e);return r.applyUnreachableCommitForPatch?.(s,t,i)}checkout(e,t,i){let{provider:r,path:s}=this.getProvider(e);return r.checkout(s,t,i)}async clone(e,t){let{provider:i}=this.getProvider(t);return i.clone?.(e,t)}async createUnreachableCommitForPatch(e,t,i,r){let{provider:s,path:n}=this.getProvider(e);return s.createUnreachableCommitForPatch?.(n,t,i,r)}resetCaches(...e){(0===e.length||e.includes("providers"))&&this._bestRemotesCache.clear(),this.container.events.fire("git:cache:reset",{caches:e})}excludeIgnoredUris(e,t){let{provider:i,path:r}=this.getProvider(e);return i.excludeIgnoredUris(r,t)}fetch(e,t){let{provider:i,path:r}=this.getProvider(e);return i.fetch(r,t)}async fetchAll(e,t){if(null==e&&(e=this.openRepositories),0!==e.length){if(1===e.length){await e[0].fetch(t);return}await n.window.withProgress({location:n.ProgressLocation.Notification,title:`Fetching ${e.length} repositories`},()=>Promise.all(e.map(e=>e.fetch({progress:!1,...t}))))}}pull(e,t){let{provider:i,path:r}=this.getProvider(e);return i.pull(r,t)}async pullAll(e,t){if(null==e&&(e=this.openRepositories),0!==e.length){if(1===e.length){await e[0].pull(t);return}await n.window.withProgress({location:n.ProgressLocation.Notification,title:`Pulling ${e.length} repositories`},()=>Promise.all(e.map(e=>e.pull({progress:!1,...t}))))}}push(e,t){let{provider:i,path:r}=this.getProvider(e);return i.push(r,t)}async pushAll(e,t){if(null==e&&(e=this.openRepositories),0!==e.length){if(1===e.length){await e[0].push(t);return}await n.window.withProgress({location:n.ProgressLocation.Notification,title:`Pushing ${e.length} repositories`},()=>Promise.all(e.map(e=>e.push({progress:!1,...t}))))}}getAheadBehindCommitCount(e,t,i){let{provider:r,path:s}=this.getProvider(e);return r.getAheadBehindCommitCount(s,t,i)}async getBlame(e,t){let{provider:i}=this.getProvider(e);return i.getBlame(e,t)}async getBlameContents(e,t){let{provider:i}=this.getProvider(e);return i.getBlameContents(e,t)}async getBlameForLine(e,t,i,r){let{provider:s}=this.getProvider(e);return s.getBlameForLine(e,t,i,r)}async getBlameForLineContents(e,t,i,r){let{provider:s}=this.getProvider(e);return s.getBlameForLineContents(e,t,i,r)}async getBlameForRange(e,t){let{provider:i}=this.getProvider(e);return i.getBlameForRange(e,t)}async getBlameForRangeContents(e,t,i){let{provider:r}=this.getProvider(e);return r.getBlameForRangeContents(e,t,i)}getBlameRange(e,t,i){let{provider:r}=this.getProvider(t);return r.getBlameRange(e,t,i)}async getBranch(e){if(null==e)return;let{provider:t,path:i}=this.getProvider(e);return t.getBranch(i)}async getBranchAheadRange(e){if(e.state.ahead>0)return(0,v.Xn)(e.upstream?.name,e.ref);if(null==e.upstream){let{values:t}=await this.getBranches(e.repoPath,{filter:e=>e6.has(e.name)});if(t.length>0){let i;for(let e of t){let t=e6.get(e.name);if((null==i||i.weight<t)&&(i={weight:t,branch:e}),100===i.weight)break}let r=i.branch.upstream?.name??i.branch.ref;if(r!==e.ref)return(0,v.Xn)(r,e.ref)}}}async getBranches(e,t){if(null==e)return{values:[]};let{provider:i,path:r}=this.getProvider(e);return i.getBranches(r,t)}async getBranchesAndTagsTipsFn(e,t){let[i,r]=await Promise.allSettled([this.getBranches(e),this.getTags(e)]),s=eh.Ro(i)?.values??[],n=eh.Ro(r)?.values??[],o=(0,eo.fA)(s.concat(n),e=>e.sha,e=>{if(t){if(e.name===t)return;if("branch"===e.refType&&e.getNameWithoutRemote()===t)return{name:e.name,compactName:e.getRemoteName(),type:e.refType}}return{name:e.name,compactName:void 0,type:e.refType}});return(e,t)=>{let i=o.get(e);if(null!=i&&0!==i.length){if(!t?.compact)return i.map(e=>`${t?.icons?`${"tag"===e.type?"$(tag)":"$(git-branch)"} `:""}${e.name}`).join(", ");if(i.length>1){let[e]=i;return`${t?.icons?`${"tag"===e.type?"$(tag)":"$(git-branch)"} `:""}${e.compactName??e.name}, ${a.EO.Ellipsis}`}return i.map(e=>`${t?.icons?`${"tag"===e.type?"$(tag)":"$(git-branch)"} `:""}${e.compactName??e.name}`).join(", ")}}}getChangedFilesCount(e,t){let{provider:i,path:r}=this.getProvider(e);return i.getChangedFilesCount(r,t)}async getCommit(e,t){let{provider:i,path:r}=this.getProvider(e);if(t===m.SU||t===m.id){let i=new Date,s=await this.getCurrentUser(e);return new g.Yg(this.container,r,t,new g.M7("You",s?.email??void 0,i),new g.M7("You",s?.email??void 0,i),"Uncommitted changes",[],"Uncommitted changes",void 0,void 0,[])}return i.getCommit(r,t)}getCommitBranches(e,t,i,r){let{provider:s,path:n}=this.getProvider(e);return s.getCommitBranches(n,"string"==typeof t?[t]:t,i,r)}getCommitCount(e,t){let{provider:i,path:r}=this.getProvider(e);return i.getCommitCount(r,t)}async getCommitForFile(e,t,i){if(null==e)return;let{provider:r,path:s}=this.getProvider(e);return r.getCommitForFile(s,t,i)}getCommitsForGraph(e,t,i){let{provider:r,path:s}=this.getProvider(e);return r.getCommitsForGraph(s,t,i)}getCommitTags(e,t,i){let{provider:r,path:s}=this.getProvider(e);return r.getCommitTags(s,t,i)}async getConfig(e,t){let{provider:i,path:r}=this.getProvider(e);return i.getConfig?.(r,t)}async setConfig(e,t,i){let{provider:r,path:s}=this.getProvider(e);return r.setConfig?.(s,t,i)}async getContributors(e,t){if(null==e)return[];let{provider:i,path:r}=this.getProvider(e);return i.getContributors(r,t)}getCurrentUser(e){let{provider:t,path:i}=this.getProvider(e);return t.getCurrentUser(i)}async getDefaultBranchName(e,t){if(null==e)return;let{provider:i,path:r}=this.getProvider(e);return i.getDefaultBranchName(r,t)}async getDiff(e,t,i,r){let{provider:s,path:n}=this.getProvider(e);return s.getDiff?.(n,t,i,r)}async getDiffFiles(e,t){let{provider:i,path:r}=this.getProvider(e);return i.getDiffFiles?.(r,t)}getDiffForFile(e,t,i){let{provider:r}=this.getProvider(e);return r.getDiffForFile(e,t,i)}getDiffForFileContents(e,t,i){let{provider:r}=this.getProvider(e);return r.getDiffForFileContents(e,t,i)}getDiffForLine(e,t,i,r){let{provider:s}=this.getProvider(e);return s.getDiffForLine(e,t,i,r)}getDiffStatus(e,t,i,r){let{provider:s,path:n}=this.getProvider(e);return s.getDiffStatus(n,t,i,r)}async getFileStatusForCommit(e,t,i){if(i===m.nB||(0,v._k)(i))return;let{provider:r,path:s}=this.getProvider(e);return r.getFileStatusForCommit(s,t,i)}getGitDir(e){let{provider:t,path:i}=this.getProvider(e);return Promise.resolve(t.getGitDir?.(i))}getLastFetchedTimestamp(e){let{provider:t,path:i}=this.getProvider(e);return t.getLastFetchedTimestamp(i)}async getLog(e,t){let{provider:i,path:r}=this.getProvider(e);return i.getLog(r,t)}async getLogRefsOnly(e,t){let{provider:i,path:r}=this.getProvider(e);return i.getLogRefsOnly(r,t)}async getLogForFile(e,t,i){if(null==e)return;let{provider:r,path:s}=this.getProvider(e);return r.getLogForFile(s,t,i)}async getMergeBase(e,t,i,r){let{provider:s,path:n}=this.getProvider(e);return s.getMergeBase(n,t,i,r)}async getMergeStatus(e){let{provider:t,path:i}=this.getProvider(e);return t.getMergeStatus(i)}async getRebaseStatus(e){let{provider:t,path:i}=this.getProvider(e);return t.getRebaseStatus(i)}getNextComparisonUris(e,t,i,r=0){if(!i)return Promise.resolve(void 0);let{provider:s,path:n}=this.getProvider(e);return s.getNextComparisonUris(n,t,i,r)}async getOldestUnpushedRefForFile(e,t){let{provider:i,path:r}=this.getProvider(e);return i.getOldestUnpushedRefForFile(r,t)}getPreviousComparisonUris(e,t,i,r=0){if(i===m.nB)return Promise.resolve(void 0);let{provider:s,path:n}=this.getProvider(e);return s.getPreviousComparisonUris(n,t,i,r)}getPreviousComparisonUrisForLine(e,t,i,r,s=0){if(r===m.nB)return Promise.resolve(void 0);let{provider:n,path:o}=this.getProvider(e);return n.getPreviousComparisonUrisForLine(o,t,i,r,s)}async getIncomingActivity(e,t){let{provider:i,path:r}=this.getProvider(e);return i.getIncomingActivity(r,t)}async getBestRemoteWithProvider(e,t){return(await this.getBestRemotesWithProviders(e,t))[0]}async getBestRemotesWithProviders(e,t){if(null==e)return[];"string"==typeof e&&(e=this.getAbsoluteUri(e));let i=(0,e0.dX)(e),r=this._bestRemotesCache.get(i);return null==r&&(r=(async function(){let i=await this.getRemotesWithProviders(e,{sort:!0},t);if(0===i.length)return[];if(1===i.length)return[...i];if(t?.isCancellationRequested)throw new h.AL;let r=i.find(e=>e.default)?.name,s=(await this.getBranch(i[0].repoPath))?.getRemoteName(),n=[],o=!1;for(let e of i){let i;switch(e.name){case r:i=1e3;break;case s:i=6;break;case"upstream":i=5;break;case"origin":i=4;break;default:i=0}if(i>0&&i<1e3&&!o){let r=await e.getIntegration();if(null!=r&&(r.maybeConnected||void 0===r.maybeConnected&&await r.isConnected())){if(t?.isCancellationRequested)throw new h.AL;let s=await r.getRepositoryMetadata(e.provider.repoDesc,{cancellation:t});if(t?.isCancellationRequested)throw new h.AL;null!=s&&(i+=s.isFork?-3:3,o=!s.isFork)}}n.push([i,e])}return n.sort(([e,t],[i,r])=>0===i&&0===e?(0,L.wN)(t.name,r.name):i-e),n.map(e=>e[1])}).call(this),this._bestRemotesCache.set(i,r)),[...await r]}async getBestRemoteWithIntegration(e,t,i){let r=await this.getBestRemotesWithProviders(e,i),s=t?.includeDisconnected??!1;for(let e of r)if(e.hasIntegration()){let i=await this.container.integrations.getByRemote(e);if(null!=i){if(t?.filter?.(e,i)===!1)continue;if(s||!0===i.maybeConnected||void 0===i.maybeConnected&&(e.default||1===r.length)&&await i.isConnected())return e}}}async getRemotes(e,t,i){if(null==e)return[];let{provider:r,path:s}=this.getProvider(e);return r.getRemotes(s,t)}async getRemotesWithProviders(e,t,i){return(await this.getRemotes(e,t,i)).filter(e=>null!=e.provider)}async getRemotesWithIntegrations(e,t,i){return(await this.getRemotes(e,t,i)).filter(e=>e.hasIntegration())}getBestRepository(e,t){let i=this.repositoryCount;if(0!==i){if(1===i)return this.highlander;if(null!=e&&e instanceof n.Uri){let t=this.getRepository(e);if(null!=t)return t;e=void 0}return(null!=(t=e??t??n.window.activeTextEditor)?this.getRepository(t.document.uri):void 0)??this.highlander}}getBestRepositoryOrFirst(e,t){let i=this.repositoryCount;if(0!==i){if(1===i)return(0,eo.$1)(this._repositories.values());if(null!=e&&e instanceof n.Uri){let t=this.getRepository(e);if(null!=t)return t;e=void 0}return(null!=(t=e??t??n.window.activeTextEditor)?this.getRepository(t.document.uri):void 0)??(0,eo.$1)(this._repositories.values())}}async getOrOpenRepository(e,t){let i,r,s;if(null==e)return;let o=(0,ea.dQ)();if("string"==typeof e){if(!e)return;i=this.getAbsoluteUri(e)}else i=e;let a=(0,el.Sp)(i);if(null==(r=this.getRepository(i))&&this._discoveringRepositories?.pending&&(await this._discoveringRepositories.promise,r=this.getRepository(i)),t?.detectNested??S.H.get("detectNestedRepositories",i)){if(!t?.force&&this._visitedPaths.has(a))return r;{let e=await n.workspace.fs.stat(i),a=(0,el.Sp)(i);if(P.Vy.debug(o,`Ensuring URI is a folder; repository=${r?.toString()}, uri=${i.toString(!0)} stats.type=${e.type}, bestPath=${a}, visitedPaths.has=${this._visitedPaths.has(a)}`),(e.type&n.FileType.Directory)!==n.FileType.Directory&&(i=n.Uri.joinPath(i,".."),!t?.force&&this._visitedPaths.has(a)))return r;s=!0}}else if(null!=r)return r;let l=(0,e0.dX)(i),h=this._pendingRepositories.get(l);return null==h&&(h=(async function(){let e;let{provider:n}=this.getProvider(i),h=await n.findRepositoryUri(i,s);if(this._visitedPaths.set(a),null==h)return;if(0!==this._repositories.count){if(null!=(r=this._repositories.get(h)))return r;e=this._repositories.getClosest(n.getAbsoluteUri(i,h))}let c=S.H.getCore("git.autoRepositoryDetection")??!0,u=t?.closeOnOpen??(!0!==c&&"openEditors"!==c);P.Vy.log(o,`Repository found in '${h.toString(!0)}'`);let d=n.openRepository(e?.folder,h,!1,void 0,u),p=[];for(let e of d)this._repositories.add(e),e.closed||p.push(e);return this._pendingRepositories.delete(l),this.updateContext(),p.length&&queueMicrotask(()=>this.fireRepositoriesChanged(p)),r=1===d.length?d[0]:this.getRepository(i)}).call(this),this._pendingRepositories.set(l,h)),h}async getOrOpenRepositoryForEditor(e){return null==(e=e??n.window.activeTextEditor)?this.highlander:this.getOrOpenRepository(e.document.uri)}getRepository(e){if(0!==this.repositoryCount&&null!=e){if("string"==typeof e){if(!e)return;return this._repositories.getClosest(this.getAbsoluteUri(e))}return this._repositories.getClosest(e)}}async getLocalInfoFromRemoteUri(e,t){for(let i of this.openRepositories)for(let r of(await i.getRemotes())){let s=await r?.provider?.getLocalInfoFromRemoteUri(i,e,t);if(null!=s)return s}}async getStash(e){if(null==e)return;let{provider:t,path:i}=this.getProvider(e);return t.getStash(i)}async getStatusForFile(e,t){let{provider:i,path:r}=this.getProvider(e);return i.getStatusForFile(r,t)}async getStatusForFiles(e,t){let{provider:i,path:r}=this.getProvider(e);return i.getStatusForFiles(r,t)}async getStatusForRepo(e){if(null==e)return;let{provider:t,path:i}=this.getProvider(e);return t.getStatusForRepo(i)}async getTags(e,t){if(null==e)return{values:[]};let{provider:i,path:r}=this.getProvider(e);return i.getTags(r,t)}async getTreeEntryForRevision(e,t,i){if(null==e||!t)return;let{provider:r,path:s}=this.getProvider(e);return r.getTreeEntryForRevision(s,r.getRelativePath(t,s),i)}async getTreeForRevision(e,t){if(null==e)return[];let{provider:i,path:r}=this.getProvider(e);return i.getTreeForRevision(r,t)}getRevisionContent(e,t,i){let{provider:r,path:s}=this.getProvider(e);return r.getRevisionContent(s,t,i)}async getFirstCommitSha(e){let{provider:t,path:i}=this.getProvider(e);try{return await t.getFirstCommitSha?.(i)}catch{return}}getUniqueRepositoryId(e){return this.getFirstCommitSha(e)}async hasBranchOrTag(e,t){if(null==e)return!1;let{provider:i,path:r}=this.getProvider(e);return i.hasBranchOrTag(r,t)}async hasCommitBeenPushed(e,t){if(null==e)return!1;let{provider:i,path:r}=this.getProvider(e);return i.hasCommitBeenPushed(r,t)}async hasRemotes(e){if(null==e)return!1;let t=this.getRepository(e);return null!=t&&t.hasRemotes()}async hasTrackingBranch(e){if(null==e)return!1;let t=this.getRepository(e);return null!=t&&t.hasUpstreamBranch()}hasUnsafeRepositories(){for(let e of this._providers.values())if(e.hasUnsafeRepositories?.())return!0;return!1}isRepositoryForEditor(e,t){return null!=(t=t??n.window.activeTextEditor)&&e===this.getRepository(t.document.uri)}isTrackable(e){if(!this.supportedSchemes.has(e.scheme))return!1;let{provider:t}=this.getProvider(e);return t.isTrackable(e)}async isTracked(e){if(!this.supportedSchemes.has(e.scheme))return!1;let{provider:t}=this.getProvider(e);return t.isTracked(e)}async getDiffTool(e){if(null==e)return;let{provider:t,path:i}=this.getProvider(e);return t.getDiffTool(i)}async openDiffTool(e,t,i){let{provider:r,path:s}=this.getProvider(e);return r.openDiffTool(s,t,i)}async openDirectoryCompare(e,t,i,r){let{provider:s,path:n}=this.getProvider(e);return s.openDirectoryCompare(n,t,i,r)}async resolveReference(e,t,i,r){if(null!=i&&(0,v.i8)(t)&&(t="HEAD"),!t||t===m.nB||null==i&&(0,v.HH)(t)||null!=i&&(0,v._k)(t))return t;let{provider:s,path:n}=this.getProvider(e);return s.resolveReference(n,t,i,r)}async richSearchCommits(e,t,i){let{provider:r,path:s}=this.getProvider(e);return r.richSearchCommits(s,t,i)}searchCommits(e,t,i){let{provider:r,path:s}=this.getProvider(e);return r.searchCommits(s,t,i)}async runGitCommandViaTerminal(e,t,i,r){let{provider:s,path:n}=this.getProvider(e);return s.runGitCommandViaTerminal?.(n,t,i,r)}validateBranchOrTagName(e,t){let{provider:i,path:r}=this.getProvider(e);return i.validateBranchOrTagName(r,t)}async validatePatch(e,t){try{let{provider:i,path:r}=this.getProvider(e);return await i.validatePatch?.(r||void 0,t)??!1}catch{return!1}}async validateReference(e,t){if(null==t||0===t.length)return!1;if(t===m.nB||(0,v._k)(t))return!0;let{provider:i,path:r}=this.getProvider(e);return i.validateReference(r,t)}stageFile(e,t){let{provider:i,path:r}=this.getProvider(e);return i.stageFile(r,t)}stageDirectory(e,t){let{provider:i,path:r}=this.getProvider(e);return i.stageDirectory(r,t)}unstageFile(e,t){let{provider:i,path:r}=this.getProvider(e);return i.unstageFile(r,t)}unstageDirectory(e,t){let{provider:i,path:r}=this.getProvider(e);return i.unstageDirectory(r,t)}async stashApply(e,t,i){let{provider:r,path:s}=this.getProvider(e);return r.stashApply?.(s,t,i)}async stashDelete(e,t,i){let{provider:r,path:s}=this.getProvider(e);return r.stashDelete?.(s,t,i)}async stashRename(e,t,i,r,s){let{provider:n,path:o}=this.getProvider(e);return n.stashRename?.(o,t,i,r,s)}async stashSave(e,t,i,r){let{provider:s,path:n}=this.getProvider(e);return s.stashSave?.(n,t,i,r)}async stashSaveSnapshot(e,t){let{provider:i,path:r}=this.getProvider(e);return i.stashSaveSnapshot?.(r,t)}createWorktree(e,t,i){let{provider:r,path:s}=this.getProvider(e);return Promise.resolve(r.createWorktree?.(s,t,i))}async getWorktree(e,t){let{provider:i,path:r}=this.getProvider(e);return(await i.getWorktrees?.(r)??[]).find(t)}async getWorktrees(e){let{provider:t,path:i}=this.getProvider(e);return await t.getWorktrees?.(i)??[]}async getWorktreesDefaultUri(e){let{provider:t,path:i}=this.getProvider(e),r=await t.getWorktreesDefaultUri?.(i);return null!=r||null!=(r=this.getRepository(i)?.uri)&&(r=n.Uri.joinPath(r,"..")),r}deleteWorktree(e,t,i){let{provider:r,path:s}=this.getProvider(e);return Promise.resolve(r.deleteWorktree?.(s,t,i))}async getOpenScmRepositories(){let e=await Promise.allSettled([...this._providers.values()].map(e=>e.getOpenScmRepositories()));return[...(0,eo.qI)((0,eo.pb)(e,e=>"fulfilled"===e.status),e=>e.value)]}getScmRepository(e){let{provider:t,path:i}=this.getProvider(e);return t.getScmRepository(i)}getOrOpenScmRepository(e){let{provider:t,path:i}=this.getProvider(e);return t.getOrOpenScmRepository(i)}};e5([(0,en.Yz)({args:{0:e=>`(${e?.length??0}) ${e?.map(e=>e.descriptor.id).join(", ")}`,1:e=>`(${e?.length??0}) ${e?.map(e=>e.descriptor.id).join(", ")}`}})],GitProviderService.prototype,"fireProvidersChanged",1),e5([(0,en.Yz)({args:{0:e=>`(${e?.length??0}) ${e?.map(e=>e.id).join(", ")}`,1:e=>`(${e?.length??0}) ${e?.map(e=>e.id).join(", ")}`}})],GitProviderService.prototype,"fireRepositoriesChanged",1),e5([(0,en.Yz)()],GitProviderService.prototype,"onSubscriptionChanged",1),e5([(0,en.Yz)({args:{0:e=>`focused=${e.focused}`}})],GitProviderService.prototype,"onWindowStateChanged",1),e5([(0,en.Yz)({args:{0:e=>`added=${e.added.length}, removed=${e.removed.length}`},singleLine:!0})],GitProviderService.prototype,"onWorkspaceFoldersChanged",1),e5([(0,en.Rm)({args:{1:!1},singleLine:!0})],GitProviderService.prototype,"register",1),e5([(0,en.Rm)({singleLine:!0})],GitProviderService.prototype,"registrationComplete",1),e5([(0,en.Rm)({args:{0:e=>e.length}})],GitProviderService.prototype,"discoverRepositories",1),e5([(0,en.Yz)({exit:!0})],GitProviderService.prototype,"discoverRepositoriesCore",1),e5([(0,en.Rm)()],GitProviderService.prototype,"findRepositories",1),e5([(0,en.Yz)({exit:!0})],GitProviderService.prototype,"access",1),e5([(0,en.Yz)({exit:!0})],GitProviderService.prototype,"accessCore",1),e5([(0,en.Yz)({exit:!0})],GitProviderService.prototype,"supports",1),e5([(0,en.Yz)({exit:e=>`returned ${e?.visibility}`})],GitProviderService.prototype,"getVisibilityInfoFromCache",1),e5([(0,en.Yz)()],GitProviderService.prototype,"clearAllRepoVisibilityCaches",1),e5([(0,en.Yz)()],GitProviderService.prototype,"clearAllOpenRepoVisibilityCaches",1),e5([(0,en.Yz)({exit:!0})],GitProviderService.prototype,"visibility",1),e5([(0,en.Yz)({exit:!0})],GitProviderService.prototype,"visibilityCore",1),e5([(0,en.Yz)()],GitProviderService.prototype,"setEnabledContext",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getBestRevisionUri",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getRevisionUri",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getWorkingUri",1),e5([(0,en.Rm)()],GitProviderService.prototype,"addRemote",1),e5([(0,en.Rm)()],GitProviderService.prototype,"pruneRemote",1),e5([(0,en.Rm)()],GitProviderService.prototype,"removeRemote",1),e5([(0,en.Rm)()],GitProviderService.prototype,"applyChangesToWorkingFile",1),e5([(0,en.Rm)()],GitProviderService.prototype,"applyUnreachableCommitForPatch",1),e5([(0,en.Rm)()],GitProviderService.prototype,"checkout",1),e5([(0,en.Rm)()],GitProviderService.prototype,"clone",1),e5([(0,en.Rm)({args:{1:"<contents>",3:"<message>"}})],GitProviderService.prototype,"createUnreachableCommitForPatch",1),e5([(0,en.Rm)({singleLine:!0})],GitProviderService.prototype,"resetCaches",1),e5([(0,en.Rm)({args:{1:e=>e.length}})],GitProviderService.prototype,"excludeIgnoredUris",1),e5([(0,es.G)(),(0,en.Rm)()],GitProviderService.prototype,"fetch",1),e5([(0,es.G)((e,t)=>`${null==e?"":e.map(e=>e.id).join(",")}|${JSON.stringify(t)}`),(0,en.Rm)({args:{0:e=>e?.map(e=>e.name).join(", ")}})],GitProviderService.prototype,"fetchAll",1),e5([(0,es.G)(),(0,en.Rm)()],GitProviderService.prototype,"pull",1),e5([(0,es.G)((e,t)=>`${null==e?"":e.map(e=>e.id).join(",")}|${JSON.stringify(t)}`),(0,en.Rm)({args:{0:e=>e?.map(e=>e.name).join(", ")}})],GitProviderService.prototype,"pullAll",1),e5([(0,es.G)(),(0,en.Rm)()],GitProviderService.prototype,"push",1),e5([(0,es.G)(e=>null==e?"":e.map(e=>e.id).join(",")),(0,en.Rm)({args:{0:e=>e?.map(e=>e.name).join(", ")}})],GitProviderService.prototype,"pushAll",1),e5([(0,en.Rm)({args:{1:e=>e.join(",")}})],GitProviderService.prototype,"getAheadBehindCommitCount",1),e5([(0,en.Rm)({args:{1:e=>e?.isDirty}})],GitProviderService.prototype,"getBlame",1),e5([(0,en.Rm)({args:{1:"<contents>"}})],GitProviderService.prototype,"getBlameContents",1),e5([(0,en.Rm)({args:{2:e=>e?.isDirty}})],GitProviderService.prototype,"getBlameForLine",1),e5([(0,en.Rm)({args:{2:"<contents>"}})],GitProviderService.prototype,"getBlameForLineContents",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getBlameForRange",1),e5([(0,en.Rm)({args:{2:"<contents>"}})],GitProviderService.prototype,"getBlameForRangeContents",1),e5([(0,en.Rm)({args:{0:"<blame>"}})],GitProviderService.prototype,"getBlameRange",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getBranch",1),e5([(0,en.Rm)({args:{0:e=>e.name}})],GitProviderService.prototype,"getBranchAheadRange",1),e5([(0,en.Rm)({args:{1:!1}})],GitProviderService.prototype,"getBranches",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getBranchesAndTagsTipsFn",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getChangedFilesCount",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getCommit",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getCommitBranches",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getCommitCount",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getCommitForFile",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getCommitsForGraph",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getCommitTags",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getConfig",1),e5([(0,en.Rm)()],GitProviderService.prototype,"setConfig",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getContributors",1),e5([(0,es.G)(),(0,en.Rm)()],GitProviderService.prototype,"getCurrentUser",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getDefaultBranchName",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getDiff",1),e5([(0,en.Rm)({args:{1:!1}})],GitProviderService.prototype,"getDiffFiles",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getDiffForFile",1),e5([(0,en.Rm)({args:{1:"<contents>"}})],GitProviderService.prototype,"getDiffForFileContents",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getDiffForLine",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getDiffStatus",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getFileStatusForCommit",1),e5([(0,en.Yz)()],GitProviderService.prototype,"getGitDir",1),e5([(0,en.Yz)()],GitProviderService.prototype,"getLastFetchedTimestamp",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getLog",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getLogRefsOnly",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getLogForFile",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getMergeBase",1),e5([(0,es.G)(),(0,en.Rm)()],GitProviderService.prototype,"getMergeStatus",1),e5([(0,es.G)(),(0,en.Rm)()],GitProviderService.prototype,"getRebaseStatus",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getNextComparisonUris",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getOldestUnpushedRefForFile",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getPreviousComparisonUris",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getPreviousComparisonUrisForLine",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getIncomingActivity",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getBestRemoteWithProvider",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getBestRemotesWithProviders",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getBestRemoteWithIntegration",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getRemotes",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getRemotesWithProviders",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getRemotesWithIntegrations",1),e5([(0,en.Rm)({exit:!0})],GitProviderService.prototype,"getBestRepository",1),e5([(0,en.Rm)({exit:!0})],GitProviderService.prototype,"getBestRepositoryOrFirst",1),e5([(0,en.Rm)({exit:!0})],GitProviderService.prototype,"getOrOpenRepository",1),e5([(0,en.Rm)({args:{0:e=>null!=e?`TextEditor(${P.Vy.toLoggable(e.document.uri)})`:void 0}})],GitProviderService.prototype,"getOrOpenRepositoryForEditor",1),e5([(0,en.Rm)({exit:!0})],GitProviderService.prototype,"getRepository",1),e5([(0,es.G)(),(0,en.Rm)()],GitProviderService.prototype,"getStash",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getStatusForFile",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getStatusForFiles",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getStatusForRepo",1),e5([(0,en.Rm)({args:{1:!1}})],GitProviderService.prototype,"getTags",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getTreeEntryForRevision",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getTreeForRevision",1),e5([(0,es.G)(),(0,en.Rm)()],GitProviderService.prototype,"getRevisionContent",1),e5([(0,en.Rm)({exit:!0})],GitProviderService.prototype,"getFirstCommitSha",1),e5([(0,en.Rm)({exit:!0})],GitProviderService.prototype,"getUniqueRepositoryId",1),e5([(0,en.Rm)({args:{1:!1},exit:!0})],GitProviderService.prototype,"hasBranchOrTag",1),e5([(0,en.Rm)({args:{1:!1},exit:!0})],GitProviderService.prototype,"hasCommitBeenPushed",1),e5([(0,en.Rm)({exit:!0})],GitProviderService.prototype,"hasRemotes",1),e5([(0,en.Rm)({exit:!0})],GitProviderService.prototype,"hasTrackingBranch",1),e5([(0,en.Rm)({exit:!0})],GitProviderService.prototype,"hasUnsafeRepositories",1),e5([(0,en.Rm)({args:{0:e=>e.uri.toString(!0),1:e=>null!=e?`TextEditor(${P.Vy.toLoggable(e.document.uri)})`:void 0},exit:!0})],GitProviderService.prototype,"isRepositoryForEditor",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getDiffTool",1),e5([(0,en.Rm)()],GitProviderService.prototype,"openDiffTool",1),e5([(0,en.Rm)()],GitProviderService.prototype,"openDirectoryCompare",1),e5([(0,es.G)(),(0,en.Rm)()],GitProviderService.prototype,"resolveReference",1),e5([(0,en.Rm)({args:{1:e=>`[${e.matchAll?"A":""}${e.matchCase?"C":""}${e.matchRegex?"R":""}]: ${e.query.length>500?`${e.query.substring(0,500)}...`:e.query}`}})],GitProviderService.prototype,"richSearchCommits",1),e5([(0,en.Rm)()],GitProviderService.prototype,"searchCommits",1),e5([(0,en.Rm)({args:!1})],GitProviderService.prototype,"runGitCommandViaTerminal",1),e5([(0,en.Rm)({exit:!0})],GitProviderService.prototype,"validateBranchOrTagName",1),e5([(0,en.Rm)({args:{1:!1},exit:!0})],GitProviderService.prototype,"validatePatch",1),e5([(0,en.Rm)({exit:!0})],GitProviderService.prototype,"validateReference",1),e5([(0,en.Rm)()],GitProviderService.prototype,"stageFile",1),e5([(0,en.Rm)()],GitProviderService.prototype,"stageDirectory",1),e5([(0,en.Rm)()],GitProviderService.prototype,"unstageFile",1),e5([(0,en.Rm)()],GitProviderService.prototype,"unstageDirectory",1),e5([(0,en.Rm)()],GitProviderService.prototype,"stashApply",1),e5([(0,en.Rm)()],GitProviderService.prototype,"stashDelete",1),e5([(0,en.Rm)()],GitProviderService.prototype,"stashRename",1),e5([(0,en.Rm)({args:{2:e=>e?.length}})],GitProviderService.prototype,"stashSave",1),e5([(0,en.Rm)()],GitProviderService.prototype,"stashSaveSnapshot",1),e5([(0,en.Rm)()],GitProviderService.prototype,"createWorktree",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getWorktree",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getWorktrees",1),e5([(0,en.Rm)({exit:!0})],GitProviderService.prototype,"getWorktreesDefaultUri",1),e5([(0,en.Rm)()],GitProviderService.prototype,"deleteWorktree",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getOpenScmRepositories",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getScmRepository",1),e5([(0,en.Rm)()],GitProviderService.prototype,"getOrOpenScmRepository",1);var te=i(1994),tt=Object.defineProperty,ti=Object.getOwnPropertyDescriptor,tr=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?ti(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&tt(t,i,n),n};let ts=1073741824-1;let LineHoverController=class LineHoverController{constructor(e){this.container=e,this._disposable=n.Disposable.from((0,eE.Oo)(e.onReady)(this.onReady,this),S.H.onDidChange(this.onConfigurationChanged,this))}_disposable;_hoverProviderDisposable;_uri;dispose(){this.unregister(),this.container.lineTracker.unsubscribe(this),this._disposable.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){if(!S.H.changed(e,"hovers.enabled")&&!S.H.changed(e,"hovers.currentLine.enabled"))return;let t=S.H.get("hovers");t.enabled&&t.currentLine.enabled?(this.container.lineTracker.subscribe(this,this.container.lineTracker.onDidChangeActiveLines(this.onActiveLinesChanged,this)),this.register(n.window.activeTextEditor)):(this.container.lineTracker.unsubscribe(this),this.unregister())}onActiveLinesChanged(e){if(!e.pending){if(null==e.editor||null==e.selections){this.unregister();return}this.isRegistered(e.editor?.document.uri)||this.register(e.editor)}}async provideDetailsHover(e,t,i){if(!this.container.lineTracker.includes(t.line))return;let r=this.container.lineTracker.getState(t.line),s=r?.commit;if(null==s)return;let o=S.H.get("hovers");if(o.annotations.details&&"blame"===await this.container.fileAnnotations.getAnnotationType(n.window.activeTextEditor))return;let a="line"===o.currentLine.over;if(!a&&this.container.lineAnnotations.suspended)return;let l=e.validateRange(new n.Range(t.line,a?t.character:ts,t.line,ts));if(!a&&l.start.character!==t.character)return;let h=t.line,c=h+1;h=(s.lines.find(e=>e.line===c)??s.lines[0]).originalLine-1;let u=await this.container.documentTracker.get(e);if(null==u||i.isCancellationRequested)return;let d=await (0,eI.MX)(this.container,s,u.uri,h,{autolinks:o.autolinks.enabled,cancellation:i,dateFormat:S.H.get("defaultDateFormat"),format:o.detailsMarkdownFormat,pullRequests:o.pullRequests.enabled,timeout:250})??"Cancelled";return new n.Hover(d,l)}async provideChangesHover(e,t,i){if(!this.container.lineTracker.includes(t.line))return;let r=this.container.lineTracker.getState(t.line),s=r?.commit;if(null==s)return;let o=S.H.get("hovers");if(o.annotations.changes&&"blame"===await this.container.fileAnnotations.getAnnotationType(n.window.activeTextEditor))return;let a="line"===o.currentLine.over;if(!a&&this.container.lineAnnotations.suspended)return;let l=e.validateRange(new n.Range(t.line,a?t.character:ts,t.line,ts));if(!a&&l.start.character!==t.character)return;let h=await this.container.documentTracker.get(e);if(null==h)return;let c=await (0,eI.PV)(this.container,s,h.uri,t.line,h.document);if(null!=c)return new n.Hover(c,l)}isRegistered(e){return null!=this._hoverProviderDisposable&&te.Y.equals(this._uri,e)}register(e){if(this.unregister(),null==e)return;let t=S.H.get("hovers");if(!t.enabled||!t.currentLine.enabled||!t.currentLine.details&&!t.currentLine.changes)return;this._uri=e.document.uri;let i=[];t.currentLine.changes&&i.push(n.languages.registerHoverProvider({pattern:this._uri.fsPath},{provideHover:this.provideChangesHover.bind(this)})),t.currentLine.details&&i.push(n.languages.registerHoverProvider({pattern:this._uri.fsPath},{provideHover:this.provideDetailsHover.bind(this)})),this._hoverProviderDisposable=n.Disposable.from(...i)}unregister(){this._uri=void 0,null!=this._hoverProviderDisposable&&(this._hoverProviderDisposable.dispose(),this._hoverProviderDisposable=void 0)}};tr([(0,en.Yz)({args:{0:e=>`editor=${e.editor?.document.uri.toString(!0)}, selections=${e.selections?.map(e=>`[${e.anchor}-${e.active}]`).join(",")}, pending=${!!e.pending}, reason=${e.reason}`}})],LineHoverController.prototype,"onActiveLinesChanged",1),tr([(0,en.Yz)({args:{0:e=>P.Vy.toLoggable(e.uri),1:e=>`${e.line}:${e.character}`,2:!1}})],LineHoverController.prototype,"provideDetailsHover",1),tr([(0,en.Yz)({args:{0:e=>P.Vy.toLoggable(e.uri),1:e=>`${e.line}:${e.character}`,2:!1}})],LineHoverController.prototype,"provideChangesHover",1);var tn=i(910),to=i(1298),ta=i(7463),tl=Object.defineProperty,th=Object.getOwnPropertyDescriptor,tc=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?th(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&tl(t,i,n),n};let DraftService=class DraftService{constructor(e,t){this.container=e,this.connection=t}dispose(){}async createDraft(e,t,i,r){let s=(0,ea.dQ)();try{let n,o,a;let l=await Promise.allSettled(i.map(e=>this.getCreateDraftPatchRequestFromChange(e)));if(!l.length)throw Error("No changes found");let h=[],c=[];for(let e of l)"fulfilled"===e.status?e.value.contents&&(h.push(e.value),null==n&&(n=e.value.user)):c.push(e.reason);if(c.length)throw AggregateError(c,"Unable to create draft");if("suggested_pr_change"===e){if(r?.prEntityId==null)throw Error("No pull request info provided");a={prEntityId:r.prEntityId};let e=h[0].repository,t=await this.getProviderAuthFromRepository(e);if(null==t)throw Error("No provider integration found");o={"Provider-Auth":Buffer.from(JSON.stringify(t)).toString("base64")}}let u=await this.connection.fetchGkDevApi("v1/drafts",{method:"POST",body:JSON.stringify({type:e,title:t,description:r?.description,visibility:r?.visibility??"public"})});u.ok||await tu("Unable to create draft",u,s);let d=(await u.json()).data.id,p=await this.connection.fetchGkDevApi(`v1/drafts/${d}/changesets`,{method:"POST",body:JSON.stringify({gitUserName:n?.name,gitUserEmail:n?.email,patches:h.map(e=>e.patch)}),headers:o});p.ok||await tu(`Unable to create changeset for draft '${d}'`,p,s);let g=(await p.json()).data,m=[],f=0;for(let e of g.patches){let{url:t,method:i,headers:r}=e.secureUploadData,{contents:s,repository:n}=h[f++];if(null==s)throw Error(`No contents found for ${e.baseCommitSha}`);let o=await this.container.git.getDiffFiles(n.path,s),a=o?.files.map(t=>({...t,gkRepositoryId:e.gitRepositoryId}))??[];await this.connection.fetch(t,{method:i,headers:{"Content-Type":"text/plain",...r},body:s});let l=tg({...e,secureDownloadData:void 0},{contents:s,files:a,repository:n});m.push(l)}let w=await this.connection.fetchGkDevApi(`v1/drafts/${d}/publish`,{method:"POST",headers:o,body:null!=a?JSON.stringify(a):void 0});w.ok||await tu(`Failed to publish draft '${d}'`,w,s);let v=await this.connection.fetchGkDevApi(`v1/drafts/${d}`,{method:"GET",headers:o});v.ok||await tu(`Unable to open draft '${d}'`,v,s);let y=(await v.json()).data,{account:b}=await this.container.subscription.getSubscription(),C=td(y,{account:b});return C.changesets=[{...tp({...g,patches:[]}),patches:m}],C}catch(e){throw P.Vy.error(e,s),e}}async getCreateDraftPatchRequestFromChange(e){let t;let i=(0,v._k)(e.revision.to),[r,s,n,o,a]=await Promise.allSettled([i?this.container.git.getBranch(e.repository.uri).then(e=>null!=e?[e.name]:void 0):this.container.git.getCommitBranches(e.repository.uri,[e.revision.to,e.revision.from]),null==e.contents?this.container.git.getDiff(e.repository.path,e.revision.to,e.revision.from):void 0,this.container.git.getFirstCommitSha(e.repository.uri),this.container.git.getBestRemoteWithProvider(e.repository.uri),this.container.git.getCurrentUser(e.repository.uri)]),l=(0,eh.Ro)(n),h=(0,eh.Ro)(o);if(null==h){if(null==l)throw Error("No remote or initial commit found");t={initialCommitSha:l}}else t={initialCommitSha:l,remote:{url:h.url,domain:h.domain,path:h.path},provider:null!=h.provider.gkProviderId&&null!=h.provider.owner&&null!=h.provider.repoName?{id:h.provider.gkProviderId,repoDomain:h.provider.owner,repoName:h.provider.repoName}:void 0};let c=(0,eh.Ro)(s),u=e.contents??c?.contents;if(null==u)throw Error(`Unable to diff ${e.revision.from} and ${e.revision.to}`);let d=(0,eh.Ro)(a),p=(0,eh.Ro)(r),g=p?.[0]??"HEAD",m=e.revision.from;if(!(0,v.HH)(m)){let t=await this.container.git.getCommit(e.repository.uri,m);null!=t&&(m=t.sha)}return{patch:{baseCommitSha:m,baseBranchName:g,gitRepoData:t,prEntityId:e.prEntityId},contents:u,repository:e.repository,user:d}}async deleteDraft(e){await this.connection.fetchGkDevApi(`v1/drafts/${e}`,{method:"DELETE"})}async archiveDraft(e,t){let i=(0,ea.dQ)();try{let r,s=t?.providerAuth;if("provider_access"===e.visibility&&null==s&&(s=await this.getProviderAuthForDraft(e),null==s))throw Error("No provider integration found");null!=s&&(r={"Provider-Auth":Buffer.from(JSON.stringify(s)).toString("base64")});let n=await this.connection.fetchGkDevApi(`v1/drafts/${e.id}/archive`,{method:"POST",body:t?.archiveReason!=null?JSON.stringify({archiveReason:t.archiveReason}):void 0,headers:r});n.ok||await tu(`Unable to archive draft '${e.id}'`,n,i)}catch(e){throw P.Vy.error(e,i),e}}async getDraft(e,t){let i;let r=(0,ea.dQ)();t?.providerAuth&&(i={"Provider-Auth":Buffer.from(JSON.stringify(t.providerAuth)).toString("base64")});let[s,n]=await Promise.allSettled([this.connection.fetchGkDevApi(`v1/drafts/${e}`,{method:"GET",headers:i}),this.getChangesets(e)]);if("rejected"===s.status)throw P.Vy.error(s.reason,r,`Unable to open draft '${e}': ${s.reason}`),Error(`Unable to open draft '${e}': ${s.reason}`);if("rejected"===n.status)throw P.Vy.error(n.reason,r,`Unable to open changeset for draft '${e}': ${n.reason}`),Error(`Unable to open changesets for draft '${e}': ${n.reason}`);let o=(0,eh.Ro)(s);o?.ok||await tu(`Unable to open draft '${e}'`,o,r);let a=(await o.json()).data,l=(0,eh.Ro)(n),[h,c]=await Promise.allSettled([this.container.subscription.getSubscription(),this.container.organizations.getMembers(a.organizationId)]),u=td(a,{account:eh.Ro(h)?.account,members:(0,eh.Ro)(c)});return u.changesets=l,u}async getDrafts(e){return this.getDraftsCore(e?{isArchived:e}:void 0)}async getDraftsCore(e){let t;let i=(0,ea.dQ)(),r=[],s=!1;if(e?.prEntityId!=null){if(null==e.providerAuth)throw Error("No provider integration found");s=!0,r.push(`prEntityId=${encodeURIComponent(e.prEntityId)}`)}e?.isArchived&&r.push("archived=true"),e?.providerAuth&&(t={"Provider-Auth":Buffer.from(JSON.stringify(e.providerAuth)).toString("base64")});let n=await this.connection.fetchGkDevApi("/v1/drafts",{method:"GET",headers:t},{query:r.length?r.join("&"):void 0});n.ok||await tu("Unable to open drafts",n,i);let o=(await n.json()).data,[a,l]=await Promise.allSettled([this.container.subscription.getSubscription(),this.container.organizations.getMembers()]),h=eh.Ro(a)?.account,c=(0,eh.Ro)(l);return o.map(e=>td(e,{account:h,members:c,fromPrEntityId:s}))}async getChangesets(e){let t=(0,ea.dQ)();try{let i=await this.connection.fetchGkDevApi(`/v1/drafts/${e}/changesets`,{method:"GET"});i.ok||await tu(`Unable to open changesets for draft '${e}'`,i,t);let r=(await i.json()).data,s=[];for(let e of r){let t=tp(e);s.push(t)}return s}catch(e){throw P.Vy.error(e,t),e}}async getPatch(e){let t=await this.getPatchCore(e),i=await this.getPatchDetails(t);return t.contents=i.contents,t.files=i.files,t.repository=i.repository,t}async getPatchCore(e){let t=(0,ea.dQ)(),i=await this.connection.fetchGkDevApi(`/v1/patches/${e}`,{method:"GET"});return i.ok||await tu(`Unable to open patch '${e}'`,i,t),tg((await i.json()).data)}async getPatchDetails(e){let t="string"==typeof e?await this.getPatchCore(e):e,[i,r]=await Promise.allSettled([this.getPatchContentsCore(t.secureLink),this.getRepositoryOrIdentity(t.draftId,t.gkRepositoryId,{openIfNeeded:!0,skipRefValidation:!0})]),s=(0,eh.Ro)(i),n=(0,eh.Ro)(r),o="";(0,b.Z6)(n)&&(o=n.path);let a=await this.container.git.getDiffFiles(o,s),l=a?.files.map(e=>({...e,gkRepositoryId:t.gkRepositoryId}))??[];return{id:t.id,contents:s,files:l,repository:n}}async getPatchContentsCore(e){let{url:t,method:i,headers:r}=e;return(await this.connection.fetch(t,{method:i,headers:{Accept:"text/plain",...r}})).text()}async updateDraftVisibility(e,t){let i=(0,ea.dQ)();try{let r=await this.connection.fetchGkDevApi(`/v1/drafts/${e}`,{method:"PATCH",body:JSON.stringify({visibility:t})});return r?.ok===!1&&await tu(`Unable to update draft '${e}'`,r,i),(await r.json()).data}catch(e){throw P.Vy.error(e,i),e}}async getDraftUsers(e){let t=(0,ea.dQ)();try{let i=await this.connection.fetchGkDevApi(`/v1/drafts/${e}/users`,{method:"GET"});return i?.ok===!1&&await tu(`Unable to get users for draft '${e}'`,i,t),(await i.json()).data}catch(e){throw P.Vy.error(e,t),e}}async addDraftUsers(e,t){let i=(0,ea.dQ)();try{if(0===t.length)throw Error("No changes found");let r=await this.connection.fetchGkDevApi(`/v1/drafts/${e}/users`,{method:"POST",body:JSON.stringify({id:e,users:t})});return r?.ok===!1&&await tu(`Unable to add users for draft '${e}'`,r,i),(await r.json()).data}catch(e){throw P.Vy.error(e,i),e}}async removeDraftUser(e,t){let i=(0,ea.dQ)();try{let r=await this.connection.fetchGkDevApi(`/v1/drafts/${e}/users/${t}`,{method:"DELETE"});return r?.ok===!1&&await tu(`Unable to update user ${t} for draft '${e}'`,r,i),!0}catch(e){throw P.Vy.error(e,i),e}}async getRepositoryOrIdentity(e,t,i){let r=await this.getRepositoryIdentity(e,t);return await this.container.repositoryIdentity.getRepository(r,i)??r}async getRepositoryIdentity(e,t){let i;let r=await this.connection.fetchGkDevApi(`/v1/drafts/${e}/git-repositories/${t}`,{method:"GET"}),s=(await r.json()).data;if("name"in s&&"string"==typeof s.name)i=s.name;else if(s.provider?.repoName!=null)i=s.provider.repoName;else if(s.remote?.url!=null&&s.remote?.domain!=null&&s.remote?.path!=null){let e=et(this.container)(s.remote.url,s.remote.domain,s.remote.path);i=e?.repoName??s.remote.path}else i=s.remote?.path??`Unknown ${s.initialCommitSha?` (${(0,v.pV)(s.initialCommitSha)})`:""}`;return{id:s.id,createdAt:new Date(s.createdAt),updatedAt:new Date(s.updatedAt),name:i,initialCommitSha:s.initialCommitSha,remote:s.remote,provider:s.provider}}async getProviderAuthFromRepository(e){let t=await e.getBestRemoteWithIntegration();if(null==t)return;let i=await t.getIntegration();if(null==i)return;let r=await this.container.integrationAuthentication.getSession(i.id,i.authProviderDescriptor);if(null!=r)return{provider:i.authProvider.id,token:r.accessToken}}async getProviderAuthForIntegration(e){let t=to.Mt[e];if(null==t)return;let i=await this.container.integrationAuthentication.getSession(e,{domain:t.domain,scopes:t.scopes});if(null!=i)return{provider:e,token:i.accessToken}}async getProviderAuthForDraft(e){let t,i;if(null!=e.changesets&&0!==e.changesets.length){for(let i of e.changesets){let e=i.patches?.find(e=>e.repository??e.gkRepositoryId);null!=e&&(t=e)}if(null!=t){if(null!=t.repository&&(i=t.repository instanceof b.LN?t.repository:await this.container.repositoryIdentity.getRepository(t.repository)),null==i){let r=await this.getRepositoryOrIdentity(e.id,t.gkRepositoryId);if(!(r instanceof b.LN))return;i=r}return this.getProviderAuthFromRepository(i)}}}async getCodeSuggestions(e,t,i){let r=(0,ta.D)(e),s=tn.EntityIdentifierUtils.encode(r),n=(0,b.Z6)(t)?await this.getProviderAuthFromRepository(t):await this.getProviderAuthForIntegration(t);try{return await this.getDraftsCore({prEntityId:s,providerAuth:n,isArchived:i?.includeArchived==null||i.includeArchived})}catch(e){return[]}}async getCodeSuggestionCounts(e){let t=(0,ea.dQ)(),i=JSON.stringify({prEntityIds:e.map(e=>tn.EntityIdentifierUtils.encode((0,ta.D)(e)))});try{let e=await this.connection.fetchGkDevApi("v1/drafts/counts",{method:"POST",body:i},{query:"type=suggested_pr_change"});return e.ok||await tu("Unable to open code suggestion counts",e,t),(await e.json()).data.counts}catch(e){throw P.Vy.error(e,t),e}}generateWebUrl(e){let t="string"==typeof e?e:e.id;return this.connection.getGkDevUri(`/drafts/${t}`,"?source=gitlens").toString()}};async function tu(e,t,i){let r;try{r=await t?.json()}catch{}let s="string"==typeof r?.error?r.error:r?.error?.message??t?.statusText,n=null!=t?`${e}: (${t?.status}) ${s}`:e;throw P.Vy.error(void 0,i,n),Error(n)}function td(e,t){let i;let r=!1;if(e.createdBy===t?.account?.id)r=!0,i={id:e.createdBy,name:`${t.account.name} (you)`,email:t.account.email,avatarUri:(0,eq.m_)(t.account.email)};else{let r;t?.members?.length&&(r=t.members.find(t=>t.id===e.createdBy)),i={id:e.createdBy,name:r?.name??"Unknown",email:r?.email,avatarUri:(0,eq.m_)(r?.email)}}let s=e.role;return s||(s=t?.fromPrEntityId===!0?"editor":"viewer"),{draftType:"cloud",type:e.type,id:e.id,createdAt:new Date(e.createdAt),updatedAt:new Date(e.updatedAt??e.createdAt),author:i,isMine:r,organizationId:e.organizationId||void 0,role:s,isPublished:e.isPublished,title:e.title,description:e.description,deepLinkUrl:e.deepLink,visibility:e.visibility,isArchived:e.isArchived,archivedBy:e.archivedBy,archivedReason:e.archivedReason,archivedAt:null!=e.archivedAt?new Date(e.archivedAt):e.archivedAt,latestChangesetId:e.latestChangesetId}}function tp(e){return{id:e.id,createdAt:new Date(e.createdAt),updatedAt:new Date(e.updatedAt??e.createdAt),draftId:e.draftId,parentChangesetId:e.parentChangesetId,userId:e.userId,gitUserName:e.gitUserName,gitUserEmail:e.gitUserEmail,deepLinkUrl:e.deepLink,patches:e.patches.map(e=>tg(e))}}function tg(e,t){return{type:"cloud",id:e.id,createdAt:new Date(e.createdAt),updatedAt:new Date(e.updatedAt??e.createdAt),draftId:e.draftId,changesetId:e.changesetId,userId:e.userId,baseBranchName:e.baseBranchName,baseRef:e.baseCommitSha,gkRepositoryId:e.gitRepositoryId,secureLink:e.secureDownloadData,commit:t?.commit,contents:t?.contents,files:t?.files,repository:t?.repository}}tc([(0,en.Rm)({args:{2:!1}})],DraftService.prototype,"createDraft",1),tc([(0,en.Rm)()],DraftService.prototype,"deleteDraft",1),tc([(0,en.Rm)({args:{1:e=>JSON.stringify({...e,providerAuth:void 0})}})],DraftService.prototype,"archiveDraft",1),tc([(0,en.Rm)({args:{1:e=>JSON.stringify({...e,providerAuth:void 0})}})],DraftService.prototype,"getDraft",1),tc([(0,en.Rm)()],DraftService.prototype,"getDrafts",1),tc([(0,en.Rm)()],DraftService.prototype,"getChangesets",1),tc([(0,en.Rm)()],DraftService.prototype,"getPatch",1),tc([(0,en.Rm)({args:{0:e=>"string"==typeof e?e:e.id}})],DraftService.prototype,"getPatchDetails",1),tc([(0,en.Rm)()],DraftService.prototype,"updateDraftVisibility",1),tc([(0,en.Rm)()],DraftService.prototype,"getDraftUsers",1),tc([(0,en.Rm)({args:{1:!1}})],DraftService.prototype,"addDraftUsers",1),tc([(0,en.Rm)()],DraftService.prototype,"removeDraftUser",1),tc([(0,en.Rm)()],DraftService.prototype,"getRepositoryOrIdentity",1),tc([(0,en.Rm)()],DraftService.prototype,"getRepositoryIdentity",1),tc([(0,en.Rm)({args:{0:e=>e.id,1:e=>(0,b.Z6)(e)?e.id:e}})],DraftService.prototype,"getCodeSuggestions",1),tc([(0,en.Rm)({args:{0:e=>e.map(e=>e.id).join(",")}})],DraftService.prototype,"getCodeSuggestionCounts",1);var tm=i(2048),tf=i(5029);let FocusIndicator=class FocusIndicator{constructor(e,t){this.container=e,this.focus=t,this._disposable=n.Disposable.from(n.window.onDidChangeWindowState(this.onWindowStateChanged,this),t.onDidRefresh(this.onFocusRefreshed,this),S.H.onDidChange(this.onConfigurationChanged,this),e.integrations.onDidChangeConnectionState(this.onConnectedIntegrationsChanged,this),...this.registerCommands()),this.onReady()}_disposable;_statusBarFocus;_refreshTimer;_state;_lastDataUpdate;_lastRefreshPaused;dispose(){this.clearRefreshTimer(),this._statusBarFocus?.dispose(),this._statusBarFocus=void 0,this._disposable.dispose()}async onConnectedIntegrationsChanged(e){tf._W.includes(e.key)&&await this.maybeLoadData()}async onConfigurationChanged(e){if(!S.H.changed(e,"launchpad.indicator"))return;S.H.changed(e,"launchpad.indicator.openInEditor")&&this.updateStatusBarCommand();let t=!1;S.H.changed(e,"launchpad.indicator.polling")&&(S.H.changed(e,"launchpad.indicator.polling.enabled")?(await this.maybeLoadData(),t=!0):S.H.changed(e,"launchpad.indicator.polling.interval")&&this.startRefreshTimer()),(!t&&S.H.changed(e,"launchpad.indicator.useColors")||S.H.changed(e,"launchpad.indicator.icon")||S.H.changed(e,"launchpad.indicator.label")||S.H.changed(e,"launchpad.indicator.groups"))&&(await this.maybeLoadData(),S.H.changed(e,"launchpad.indicator.label")&&this.updateStatusBarCommand())}async maybeLoadData(){S.H.get("launchpad.indicator.polling.enabled")&&S.H.get("launchpad.indicator.polling.interval")>0?await this.focus.hasConnectedIntegration()?this.updateStatusBar("loading"):this.updateStatusBar("disconnected"):this.updateStatusBar("idle")}onFocusRefreshed(e){null!=this._statusBarFocus&&S.H.get("launchpad.indicator.polling.enabled")&&this.updateStatusBar("load",e.items)}async onReady(){S.H.get("launchpad.indicator.enabled")&&(this._statusBarFocus=n.window.createStatusBarItem("gitlens.launchpad",n.StatusBarAlignment.Left,9997),this._statusBarFocus.name="GitLens Launchpad",await this.maybeLoadData(),this.updateStatusBarCommand(),this._statusBarFocus.show())}startRefreshTimer(e){if(null!=this._refreshTimer&&clearInterval(this._refreshTimer),!S.H.get("launchpad.indicator.polling.enabled")||"disconnected"===this._state)return;let t=6e4*S.H.get("launchpad.indicator.polling.interval");t<=0||(null!=e?this._refreshTimer=setTimeout(()=>{this.focus.getCategorizedItems({force:!0}),this._refreshTimer=setInterval(()=>{this.focus.getCategorizedItems({force:!0})},t)},e):this._refreshTimer=setInterval(()=>{this.focus.getCategorizedItems({force:!0})},t))}clearRefreshTimer(){null!=this._refreshTimer&&(clearInterval(this._refreshTimer),this._refreshTimer=void 0)}onWindowStateChanged(e){if("disconnected"===this._state||"idle"===this._state)return;if(!e.focused){this.clearRefreshTimer(),this._lastRefreshPaused=new Date;return}if(null==this._lastRefreshPaused)return;if("loading"===this._state){this.startRefreshTimer(5e3);return}let t=Date.now(),i=null!=this._lastDataUpdate?t-this._lastDataUpdate.getTime():void 0,r=t-this._lastRefreshPaused.getTime();this._lastRefreshPaused=void 0;let s=6e4*S.H.get("launchpad.indicator.polling.interval"),n=null!=i?s-i:s;n<0&&(n=0);let o=n-r;this.startRefreshTimer(o<0?0:o)}updateStatusBar(e,t){if(null==this._statusBarFocus||e===this._state&&"load"!==e)return;this._state=e;let i=new n.MarkdownString("",!0);switch(i.supportHtml=!0,i.isTrusted=!0,i.appendMarkdown(`GitLens Launchpad ${a.WZ}\xa0\xA0\xa0\xA0&mdash;\xa0\xA0\xa0\xA0`),i.appendMarkdown('[$(question)](command:gitlens.launchpad.indicator.action?%22info%22 "What is this?")'),i.appendMarkdown(" "),i.appendMarkdown('[$(gear)](command:workbench.action.openSettings?%22gitlens.launchpad%22 "Settings")'),i.appendMarkdown("  |  "),i.appendMarkdown('[$(circle-slash) Hide](command:gitlens.launchpad.indicator.action?%22hide%22 "Hide")'),"idle"!==e&&"disconnected"!==e&&"loading"!==e&&("load"!==e||this.hasInteracted())||(i.appendMarkdown("\n\n---\n\n"),i.appendMarkdown('[Launchpad](command:gitlens.launchpad.indicator.action?%info%22 "Learn about Launchpad") organizes your pull requests into actionable groups to help you focus and keep your team unblocked.'),i.appendMarkdown("\n\nIt's always accessible using the `GitLens: Open Launchpad` command from the Command Palette.")),e){case"idle":this.clearRefreshTimer(),this._statusBarFocus.text="$(rocket)",this._statusBarFocus.tooltip=i,this._statusBarFocus.color=void 0;break;case"disconnected":this.clearRefreshTimer(),i.appendMarkdown(`

---

[Connect to GitHub](command:gitlens.launchpad.indicator.action?%22connectGitHub%22 "Connect to GitHub") to get started.`),this._statusBarFocus.text="$(rocket)$(gitlens-unplug) Launchpad",this._statusBarFocus.tooltip=i,this._statusBarFocus.color=void 0;break;case"loading":this.startRefreshTimer(5e3),i.appendMarkdown("\n\n---\n\n$(loading~spin) Loading..."),this._statusBarFocus.text="$(loading~spin)",this._statusBarFocus.tooltip=i,this._statusBarFocus.color=void 0;break;case"load":this.updateStatusBarWithItems(i,t)}}updateStatusBarCommand(){if(null==this._statusBarFocus)return;let e=S.H.get("launchpad.indicator.label")??"item";this._statusBarFocus.command=S.H.get("launchpad.indicator.openInEditor")?"gitlens.showFocusPage":{title:"Open Launchpad",command:a.Ts.ShowLaunchpad,arguments:[{source:"launchpad-indicator",state:{selectTopItem:"item"===e}}]}}updateStatusBarWithItems(e,t){let i,r,s;if(null==this._statusBarFocus)return;this.sendTelemetryFirstLoadEvent(),this._lastDataUpdate=new Date;let o=S.H.get("launchpad.indicator.useColors"),a=S.H.get("launchpad.indicator.groups")??[],l=S.H.get("launchpad.indicator.label")??"item",h=S.H.get("launchpad.indicator.icon")??"default",c=(0,tf.zt)(t),u=Array.from(c.values()).reduce((e,t)=>e+t.length,0),d=a.some(e=>c.get(e)?.length);if(0===u)e.appendMarkdown("\n\n---\n\n"),e.appendMarkdown("You are all caught up!");else if(d)for(let t of a){let o=c.get(t);if(o?.length)switch(e.value.length>0&&e.appendMarkdown(`

---

`),t){case"mergeable":i??="rocket",s=new n.ThemeColor("gitlens.launchpadIndicatorMergeableColor"),r??={item:o[0],groupLabel:"can be merged"},e.appendMarkdown(`<span style="color:var(--vscode-gitlens-launchpadIndicatorMergeableHoverColor);">$(rocket)</span>$(blank) [${"item"===l&&null!=r?this.getPriorityItemLabel(r.item,o.length):(0,L.td)("pull request",o.length)} can be merged](command:gitlens.showLaunchpad?${encodeURIComponent(JSON.stringify({source:"launchpad-indicator",state:{initialGroup:"mergeable",selectTopItem:"item"===l}}))} "Open Ready to Merge in Launchpad")`);break;case"blocked":{let t;let a=(0,eo.Fi)(o,e=>"failed-checks"===e.actionableCategory||"conflicts"===e.actionableCategory||"unassigned-reviewers"===e.actionableCategory?e.actionableCategory:"blocked"),h=a.size>1,c="",u="(",d=a.get("unassigned-reviewers");if(d?.length&&(c=`${d.length>1?"need":"needs"} reviewers`,u+=`${d.length} ${c}`,t??=d[0]),d=a.get("failed-checks"),d?.length&&(c="failed CI checks",u+=`${h?", ":""}${d.length} ${c}`,t??=d[0]),d=a.get("conflicts"),d?.length&&(c=`${d.length>1?"have":"has"} conflicts`,u+=`${h?", ":""}${d.length} ${c}`,t??=d[0]),u+=")",i??="error",s??=new n.ThemeColor("gitlens.launchpadIndicatorBlockedColor"),e.appendMarkdown(`<span style="color:var(--vscode-gitlens-launchpadIndicatorBlockedColor);">$(error)</span>$(blank) [${"item"===l&&null!=t&&null==r?this.getPriorityItemLabel(t,o.length):(0,L.td)("pull request",o.length)} ${h?"are blocked":c}](command:gitlens.showLaunchpad?${encodeURIComponent(JSON.stringify({source:"launchpad-indicator",state:{initialGroup:"blocked",selectTopItem:"item"===l}}))} "Open Blocked in Launchpad")`),h&&e.appendMarkdown(`\\
$(blank)$(blank) ${u}`),null!=t){let e="is blocked";"unassigned-reviewers"===t.actionableCategory?e="needs reviewers":"failed-checks"===t.actionableCategory?e="failed CI checks":"conflicts"===t.actionableCategory&&(e="has conflicts"),r??={item:t,groupLabel:e}}break}case"follow-up":i??="report",s??=new n.ThemeColor("gitlens.launchpadIndicatorAttentionColor"),e.appendMarkdown(`<span style="color:var(--vscode-gitlens-launchpadIndicatorAttentionHoverColor);">$(report)</span>$(blank) [${"item"===l&&null==r&&o.length?this.getPriorityItemLabel(o[0],o.length):(0,L.td)("pull request",o.length)} ${o.length>1?"require":"requires"} follow-up](command:gitlens.showLaunchpad?${encodeURIComponent(JSON.stringify({source:"launchpad-indicator",state:{initialGroup:"follow-up",selectTopItem:"item"===l}}))} "Open Follow-Up in Launchpad")`),r??={item:o[0],groupLabel:"requires follow-up"};break;case"needs-review":i??="comment-unresolved",s??=new n.ThemeColor("gitlens.launchpadIndicatorAttentionColor"),e.appendMarkdown(`<span style="color:var(--vscode-gitlens-launchpadIndicatorAttentionHoverColor);">$(comment-unresolved)</span>$(blank) [${"item"===l&&null==r&&o.length?this.getPriorityItemLabel(o[0],o.length):(0,L.td)("pull request",o.length)} ${o.length>1?"need":"needs"} your review](command:gitlens.showLaunchpad?${encodeURIComponent(JSON.stringify({source:"launchpad-indicator",state:{initialGroup:"needs-review",selectTopItem:"item"===l}}))} "Open Needs Your Review in Launchpad")`),r??={item:o[0],groupLabel:"needs your review"}}}else e.appendMarkdown("\n\n---\n\n"),e.appendMarkdown(`No pull requests need your attention\\
(${u} other pull requests)`);let p=null!=i&&"group"===h?`$(${i})`:"$(rocket)",g="item"===l&&null!=r?` ${this.getPriorityItemLabel(r.item)} ${r.groupLabel}`:"";this._statusBarFocus.text=`${p}${g}`,this._statusBarFocus.tooltip=e,this._statusBarFocus.color=o?s:void 0}registerCommands(){return[(0,e2.Lb)("gitlens.launchpad.indicator.action",async e=>{switch(this.storeFirstInteractionIfNeeded(),e){case"info":(0,e2.RS)(a.Ts.OpenWalkthrough,{step:"launchpad",source:"launchpad-indicator",detail:"info"});break;case"hide":{let e={title:"Hide Anyway"};await n.window.showInformationMessage("GitLens Launchpad helps you focus and keep your team unblocked.\n\nAre you sure you want hide the indicator?",{modal:!0,detail:'\nYou can always access Launchpad using the "GitLens: Open Launchpad" command, and can re-enable the indicator with the "GitLens: Toggle Launchpad Indicator" command.'},e,{title:"Cancel",isCloseAffordance:!0})===e&&S.H.updateEffective("launchpad.indicator.enabled",!1);break}case"connectGitHub":{let e=await this.container.integrations?.get(to.Q7.GitHub);if(null==e)break;(e.maybeConnected??await e.isConnected())||e.connect()}}})]}getPriorityItemLabel(e,t){return`${null!=e.repository?`${e.repository.owner.login}/${e.repository.name}`:""}#${e.id}${null!=t&&t>1?` and ${(0,L.td)("pull request",t-1,{infix:" other "})}`:""}`}sendTelemetryFirstLoadEvent(){this.container.telemetry.enabled&&(this.container.storage.get("launchpad:indicator:hasLoaded")||(this.container.storage.store("launchpad:indicator:hasLoaded",!0),this.container.telemetry.sendEvent("launchpad/indicator/firstLoad")))}storeFirstInteractionIfNeeded(){null==this.container.storage.get("launchpad:indicator:hasInteracted")&&this.container.storage.store("launchpad:indicator:hasInteracted",new Date().toISOString())}hasInteracted(){return null!=this.container.storage.get("launchpad:indicator:hasInteracted")}};var tw=i(9032),tv=Object.defineProperty,ty=Object.getOwnPropertyDescriptor,tb=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?ty(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&tv(t,i,n),n};let tC="did-authenticate";let AuthenticationConnection=class AuthenticationConnection{constructor(e,t){this.container=e,this.connection=t}_cancellationSource;_deferredCodeExchanges=new Map;_pendingStates=new Map;_statusBarItem;dispose(){}abort(){return null==this._cancellationSource?Promise.resolve():(this._cancellationSource.cancel(),new Promise(e=>setTimeout(e,50)))}async getAccountInfo(e){let t;let i=(0,ea.dQ)();try{t=await this.connection.fetchApi("user",void 0,{token:e})}catch(e){throw P.Vy.error(e,i),e}if(!t.ok)throw P.Vy.error(void 0,`Getting account info failed: (${t.status}) ${t.statusText}`),Error(t.statusText);let r=await t.json();return{id:r.id,accountName:r.username}}async login(e,t,i=!1){this.updateStatusBarItem(!0);let r=(0,tw.uR)(),s=this._pendingStates.get(t)??[];this._pendingStates.set(t,[...s,r]);let o=await n.env.asExternalUri(n.Uri.parse(`${n.env.uriScheme}://${this.container.context.extension.id}/${tC}`)),a=this.connection.getGkDevUri(i?"register":"login",`${e.includes("gitlens")?"source=gitlens&":""}state=${encodeURIComponent(r)}&redirect_uri=${encodeURIComponent(o.toString(!0))}`);await (0,ed.CZ)(a.toString(!0));let l=this._deferredCodeExchanges.get(t);null==l&&(l=(0,eE.I7)(this.container.uri.onDidReceiveAuthenticationUri,this.getUriHandlerDeferredExecutor()),this._deferredCodeExchanges.set(t,l)),null!=this._cancellationSource&&(this._cancellationSource.cancel(),this._cancellationSource=void 0),this._cancellationSource=new n.CancellationTokenSource;try{let e=await Promise.race([l.promise,new Promise(e=>this.openCompletionInputFallback(this._cancellationSource.token,e)),new Promise((e,t)=>this._cancellationSource?.token.onCancellationRequested(()=>t("Cancelled"))),new Promise((e,t)=>setTimeout(t,12e4,"Cancelled"))]);return await this.getTokenFromCodeAndState(t,e,r)}finally{this._cancellationSource?.cancel(),this._cancellationSource=void 0,this._pendingStates.delete(t),l?.cancel(),this._deferredCodeExchanges.delete(t),this.updateStatusBarItem(!1)}}async openCompletionInputFallback(e,t){let i;let r=n.window.createInputBox();r.ignoreFocusOut=!0;let s=[];try{if(e.isCancellationRequested)return;i=await new Promise(t=>{s.push(e.onCancellationRequested(()=>r.hide()),r.onDidHide(()=>t(void 0)),r.onDidChangeValue(e=>{if(!e){r.validationMessage="Please enter a valid code";return}r.validationMessage=void 0}),r.onDidAccept(()=>t(r.value))),r.title="GitKraken Sign In",r.placeholder="Please enter the provided authorization code",r.prompt="If the auto-redirect fails, paste the authorization code",r.show()})}finally{r.dispose(),s.forEach(e=>void e.dispose())}null!=i&&t(i)}async getTokenFromCodeAndState(e,t,i){let r=this._pendingStates.get(e);if(!r?.includes(i))throw Error("Getting token failed: Invalid state");let s=await this.connection.fetchGkDevApi("oauth/access_token",{method:"POST",body:JSON.stringify({grant_type:"authorization_code",client_id:"gitkraken.gitlens",code:t,state:i})},{unAuthenticated:!0});if(!s.ok)throw Error(`Getting token failed: (${s.status}) ${s.statusText}`);let n=await s.json();if(null==n.access_token)throw Error("Getting token failed: No access token returned");return n.access_token}getUriHandlerDeferredExecutor(){return(e,t,i)=>{let r=new URLSearchParams(e.query).get("code");if(null==r){i("Code not returned");return}t(r)}}updateStatusBarItem(e){e&&null==this._statusBarItem&&(this._statusBarItem=n.window.createStatusBarItem("gitlens.plus.signIn",n.StatusBarAlignment.Left),this._statusBarItem.name="GitKraken Sign in",this._statusBarItem.text="Signing in to GitKraken...",this._statusBarItem.show()),e||null==this._statusBarItem||(this._statusBarItem.dispose(),this._statusBarItem=void 0)}};tb([(0,en.Yz)({args:!1,exit:e=>`returned ${e.id}`})],AuthenticationConnection.prototype,"getAccountInfo",1),tb([(0,en.Yz)()],AuthenticationConnection.prototype,"login",1);var tR=Object.defineProperty,tS=Object.getOwnPropertyDescriptor,tP=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?tS(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&tR(t,i,n),n};let tA="gitlens+",tk=["gitlens"];let AccountAuthenticationProvider=class AccountAuthenticationProvider{constructor(e,t){this.container=e,this._authConnection=new AuthenticationConnection(e,t),this._sessionsPromise=this.getSessionsFromStorage(),this._disposable=n.Disposable.from(this._authConnection,n.authentication.registerAuthenticationProvider(tA,"GitKraken: GitLens",this,{supportsMultipleAccounts:!1}),this.container.storage.onDidChangeSecrets(()=>this.checkForUpdates()))}_onDidChangeSessions=new n.EventEmitter;get onDidChangeSessions(){return this._onDidChangeSessions.event}_disposable;_authConnection;_sessionsPromise;dispose(){this._disposable.dispose()}get secretStorageKey(){return`gitlens.plus.auth:${this.container.env}`}abort(){return this._authConnection.abort()}async createSession(e){let t=(0,ea.dQ)(),i=e.includes("signUp");i&&(e=e.filter(e=>"signUp"!==e));let r=tD(e=e.sort());try{let t=await this._authConnection.login(e,r,i),s=await this.createSessionForToken(t,e),n=await this._sessionsPromise,o=n.findIndex(e=>e.id===s.id||tD(e.scopes)===r);return o>-1?n.splice(o,1,s):n.push(s),await this.storeSessions(n),this._onDidChangeSessions.fire({added:[s],removed:[],changed:[]}),s}catch(e){if("Cancelled"===e)throw e;throw P.Vy.error(e,t),n.window.showErrorMessage(`Unable to sign in to GitKraken: ${e instanceof h.AL?"request timed out":e}. Please try again. If this issue persists, please contact support.`),e}}async getSessions(e){let t=(0,ea.dQ)(),i=tD(e=e?.sort()),r=await this._sessionsPromise,s=null!=e?r.filter(e=>tD(e.scopes)===i):r;return(0,ea.TT)(t,` \u2022 Found ${s.length} sessions`),s}async removeSession(e){let t=(0,ea.dQ)();try{let t=await this._sessionsPromise,i=t.findIndex(t=>t.id===e);if(-1===i){P.Vy.log(`Unable to remove session ${e}; Not found`);return}let r=t[i];t.splice(i,1),await this.storeSessions(t),this._onDidChangeSessions.fire({added:[],removed:[r],changed:[]})}catch(e){throw P.Vy.error(e,t),n.window.showErrorMessage(`Unable to sign out of GitKraken: ${e}`),e}}async removeSessionsByScopes(e){let t=(0,ea.dQ)();try{e=e?.sort();let t=tD(e),i=[],r=0,s=await this._sessionsPromise;for(let e of s){if(tD(e.scopes)!==t){r++;continue}s.splice(r,1),i.push(e)}if(0===i.length)return;await this.storeSessions(s),this._onDidChangeSessions.fire({added:[],removed:i,changed:[]})}catch(e){throw P.Vy.error(e,t),n.window.showErrorMessage(`Unable to sign out of GitKraken: ${e}`),e}}async checkForUpdates(){let e=await this._sessionsPromise;this._sessionsPromise=this.getSessionsFromStorage();let t=await this._sessionsPromise,i=[],r=[];for(let r of t)e.some(e=>e.id===r.id)||i.push(r);for(let i of e)t.some(e=>e.id===i.id)||r.push(i);(i.length||r.length)&&(P.Vy.debug(`Firing sessions changed event; added=${i.length}, removed=${r.length}`),this._onDidChangeSessions.fire({added:i,removed:r,changed:[]}))}async createSessionForToken(e,t){let i=await this._authConnection.getAccountInfo(e);return{id:(0,tw.uR)(),accessToken:e,account:{label:i.accountName,id:i.id},scopes:t}}async getSessionsFromStorage(){let e;try{let t=await this.container.storage.getSecret(this.secretStorageKey);if(!t||"[]"===t)return[];try{e=JSON.parse(t)}catch(e){try{await this.container.storage.deleteSecret(this.secretStorageKey)}catch{}throw e}}catch(e){return P.Vy.error(e,"Unable to read sessions from storage"),[]}let t=e.map(async e=>{let t;let i=tD(e.scopes);if(P.Vy.debug(`Read session from storage with scopes=${i}`),null==e.account)try{t=await this._authConnection.getAccountInfo(e.accessToken),P.Vy.debug(`Verified session with scopes=${i}`)}catch(e){if("Unauthorized"===e.message)return}return{id:e.id,account:{label:null!=e.account?e.account.label??e.account.displayName??"<unknown>":t?.accountName??"<unknown>",id:e.account?.id??t?.id??"<unknown>"},scopes:e.scopes,accessToken:e.accessToken}}),i=(await Promise.allSettled(t)).filter(e=>"fulfilled"===e.status).map(e=>e.value).filter(e=>!!e);return P.Vy.debug(`Found ${i.length} verified sessions`),i.length!==e.length&&await this.storeSessions(i),i}async storeSessions(e){try{this._sessionsPromise=Promise.resolve(e),await this.container.storage.storeSecret(this.secretStorageKey,JSON.stringify(e))}catch(t){P.Vy.error(t,`Unable to store ${e.length} sessions`)}}};function tD(e){return e?.join("|")}tP([(0,en.Yz)()],AccountAuthenticationProvider.prototype,"createSession",1),tP([(0,en.Yz)()],AccountAuthenticationProvider.prototype,"getSessions",1),tP([(0,en.Yz)()],AccountAuthenticationProvider.prototype,"removeSession",1),tP([(0,en.Yz)()],AccountAuthenticationProvider.prototype,"removeSessionsByScopes",1);var tT=Object.defineProperty,t_=Object.getOwnPropertyDescriptor,tI=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?t_(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&tT(t,i,n),n};let OrganizationService=class OrganizationService{constructor(e,t){this.container=e,this.connection=t,this._disposable=n.Disposable.from((0,eu.Oo)(e.onReady)(async()=>{let e=await this.getActiveOrganizationId();this.updateOrganizationPermissions(e)}),e.subscription.onDidChange(this.onSubscriptionChanged,this))}_disposable;_organizations;_fullOrganizations;_organizationSettings;dispose(){this._disposable.dispose()}async getOrganizations(e){let t=(0,ea.dQ)(),i=e?.userId??(await this.container.subscription.getSubscription(!0))?.account?.id;if(null==i)return this.updateOrganizations(void 0),this._organizations;if(void 0===this._organizations||e?.force){let r;if(!e?.force&&(this.loadStoredOrganizations(i),null!=this._organizations))return this._organizations;try{r=await this.connection.fetchApi("user/organizations-light",{method:"GET"},{token:e?.accessToken})}catch(e){return P.Vy.error(e,t),n.window.showErrorMessage(`Unable to get organizations due to error: ${e}`,"OK"),this.updateOrganizations(void 0),this._organizations}if(!r.ok)return P.Vy.error("",t,`Unable to get organizations; status=(${r.status}): ${r.statusText}`),n.window.showErrorMessage(`Unable to get organizations; Status: ${r.statusText}`,"OK"),this.updateOrganizations(null),this._organizations;let s=(await r.json()).map(e=>({id:e.id,name:e.name,role:e.role}));await this.storeOrganizations(s,i),this.updateOrganizations(s)}return this._organizations}loadStoredOrganizations(e){let t=this.container.storage.get(`gk:${e}:organizations`);if(null==t)return;let{timestamp:i,data:r}=t;null==i||Date.now()-i>864e5||this.updateOrganizations(r)}async storeOrganizations(e,t){return this.container.storage.store(`gk:${t}:organizations`,{v:1,timestamp:Date.now(),data:e})}onSubscriptionChanged(e){e.current?.account?.id==null&&this.updateOrganizations(void 0),this.updateOrganizationPermissions(e.current?.activeOrganization?.id)}updateOrganizations(e){this._organizations=e,(0,er.o)("gitlens:gk:hasOrganizations",(e??[]).length>1)}async updateOrganizationPermissions(e){let t=null!=e?await this.getOrganizationSettings(e):void 0;(0,er.o)("gitlens:gk:organization:ai:enabled",t?.aiSettings.enabled??!0),(0,er.o)("gitlens:gk:organization:drafts:byob",t?.draftsSettings.bucket!=null),(0,er.o)("gitlens:gk:organization:drafts:enabled",t?.draftsSettings.enabled??!0)}async getFullOrganization(e,t){if(!this._fullOrganizations?.has(e)||t?.force===!0){let t=await this.connection.fetchApi(`organization/${e}`,{method:"GET"});if(!t.ok){P.Vy.error("",(0,ea.dQ)(),`Unable to get organization; status=(${t.status}): ${t.statusText}`);return}let i=await t.json();null==this._fullOrganizations&&(this._fullOrganizations=new Map),i.members.sort((e,t)=>(e.name??e.username).localeCompare(t.name??t.username)),this._fullOrganizations.set(e,i)}return this._fullOrganizations.get(e)}async getMembers(e,t){if(null==e&&null==(e=await this.getActiveOrganizationId()))return[];let i=await this.getFullOrganization(e,t);return i?.members??[]}async getMemberById(e,t){return(await this.getMembers(t)).find(t=>t.id===e)}async getMembersByIds(e,t){return(await this.getMembers(t)).filter(t=>e.includes(t.id))}async getActiveOrganizationId(e=!0){let t=await this.container.subscription.getSubscription(e);return t?.activeOrganization?.id}async getOrganizationSettings(e,t){let i=e??await this.getActiveOrganizationId();if(null!=i){if(!this._organizationSettings?.has(i)||t?.force===!0){let e=await this.connection.fetchApi("v1/organizations/settings",{method:"GET"});if(!e.ok){P.Vy.error("",(0,ea.dQ)(),`Unable to get organization settings; status=(${e.status}): ${e.statusText}`);return}let t=await e.json();if(null!=t.error){P.Vy.error("",(0,ea.dQ)(),`Unable to get organization settings; status=(${e.status}): ${t.error}`);return}null==this._organizationSettings&&(this._organizationSettings=new Map),this._organizationSettings.set(i,t.data)}return this._organizationSettings.get(i)}}};tI([(0,es.G)()],OrganizationService.prototype,"getOrganizations",1),tI([(0,es.G)()],OrganizationService.prototype,"loadStoredOrganizations",1),tI([(0,es.G)()],OrganizationService.prototype,"getFullOrganization",1),tI([(0,es.G)()],OrganizationService.prototype,"getMembers",1),tI([(0,es.G)()],OrganizationService.prototype,"getOrganizationSettings",1);var t$=i(3395),tE=i(4766);function tO(e,t,i){let r,s,n;let o={id:e.user.id,name:e.user.name,email:e.user.email,verified:"activated"===e.user.status,createdOn:e.user.createdDate},a=Object.entries(e.licenses.effectiveLicenses),l=Object.entries(e.licenses.paidLicenses);(l=l.filter(e=>"expired"!==e[1].latestStatus&&"cancelled"!==e[1].latestStatus)).length>1&&l.sort((e,t)=>(0,eX.Nm)(tx(t[0]))+tB(t[1].latestStatus)-((0,eX.Nm)(tx(e[0]))+tB(e[1].latestStatus))),a.length>1&&a.sort((e,t)=>(0,eX.Nm)(tx(t[0]))+tB(t[1].latestStatus)-((0,eX.Nm)(tx(e[0]))+tB(e[1].latestStatus)));let h=new Map,c=new Map;for(let e of a){let[,t]=e;null!=t.organizationId&&null==h.get(t.organizationId)&&h.set(t.organizationId,e)}for(let e of l){let[,t]=e;null!=t.organizationId&&null==c.get(t.organizationId)&&c.set(t.organizationId,e)}let u=t.filter(e=>!c.has(e.id)&&!h.has(e.id));null!=i&&(l=l.filter(([,e])=>e.organizationId===i||null==e.organizationId),a=a.filter(([,e])=>e.organizationId===i||null==e.organizationId));let d=l.length>0?l[0]:void 0,p=a.length>0?a[0]:void 0,g=null!=i?c.get(i)??d:d;if(null!=g){let[e,t]=g;r=(0,eX.le)(tx(e),tF(e),t.reactivationCount??0,t.organizationId,new Date(t.latestStartDate),new Date(t.latestEndDate))}null==r&&(r=(0,eX.le)(eX.qn.FreePlus,!1,0,void 0,null!=e.user.firstGitLensCheckIn?new Date(e.user.firstGitLensCheckIn):null!=e.user.createdDate?new Date(e.user.createdDate):void 0,void 0,void 0,e.nextOptInDate));let m=null!=i?h.get(i)??p:p;if(null!=m){let[t,i]=m;s=(0,eX.le)(tx(t),tF(t),i.reactivationCount??0,i.organizationId,new Date(i.latestStartDate),new Date(i.latestEndDate),"cancelled"===i.latestStatus,i.nextOptInDate??e.nextOptInDate)}return(null==s||(0,eX.Nm)(r.id)>=(0,eX.Nm)(s.id))&&(s={...r}),null!=i?n=t.find(e=>e.id===i):s?.organizationId!=null?n=t.find(e=>e.id===s.organizationId):u.length>0&&(n=u[0]),{plan:{actual:r,effective:s},account:o,activeOrganization:n}}function tx(e){switch(e){case"gitlens-pro":case"bundle-pro":case"gitkraken_v1-pro":return eX.qn.Pro;case"gitlens-teams":case"bundle-teams":case"gitkraken_v1-teams":return eX.qn.Teams;case"gitlens-hosted-enterprise":case"gitlens-self-hosted-enterprise":case"gitlens-standalone-enterprise":case"bundle-hosted-enterprise":case"bundle-self-hosted-enterprise":case"bundle-standalone-enterprise":case"gitkraken_v1-hosted-enterprise":case"gitkraken_v1-self-hosted-enterprise":case"gitkraken_v1-standalone-enterprise":return eX.qn.Enterprise;default:return eX.qn.FreePlus}}function tF(e){switch(e){case"bundle-pro":case"bundle-teams":case"bundle-hosted-enterprise":case"bundle-self-hosted-enterprise":case"bundle-standalone-enterprise":return!0;default:return!1}}function tB(e){switch(e){case"active":return 100;case"expired":case"cancelled":return -100;case"in_trial":case"trial":return 1;case"canceled":case"non_renewing":return 0;default:return -200}}var tL=i(4379),tU=Object.defineProperty,tW=Object.getOwnPropertyDescriptor,tq=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?tW(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&tU(t,i,n),n};let SubscriptionService=class SubscriptionService{constructor(e,t,i){this.container=e,this.connection=t,this._disposable=n.Disposable.from((0,eu.Oo)(e.onReady)(this.onReady,this),this.container.accountAuthentication.onDidChangeSessions(e=>setTimeout(()=>this.onAuthenticationChanged(e),0),this),S.H.onDidChange(e=>{S.H.changed(e,"plusFeatures")&&this.updateContext()}));let r=this.getStoredSubscription();this._getCheckInData=()=>Promise.resolve(void 0),null!=r&&((0,tE.ib)(i,"< 14.0")&&(r.previewTrial=void 0),r.account?.id!=null&&(this._getCheckInData=()=>this.loadStoredCheckInData(r.account.id))),this.changeSubscription(r,{silent:!0}),setTimeout(()=>void this.ensureSession(!1),1e4)}_onDidChange=new n.EventEmitter;get onDidChange(){return this._onDidChange.event}_onDidCheckIn=new n.EventEmitter;get onDidCheckIn(){return this._onDidCheckIn.event}_disposable;_subscription;_getCheckInData;_statusBarSubscription;_validationTimer;dispose(){this._statusBarSubscription?.dispose(),this._disposable.dispose()}async onAuthenticationChanged(e){let t=this._session;if(null==t&&null!=this._sessionPromise&&(t=await this._sessionPromise),null!=t&&e.removed?.some(e=>e.id===t.id)){this._session=void 0,this._sessionPromise=void 0,this.logout(void 0,void 0);return}let i=e.added?.[0]??e.changed?.[0];if(null!=i){if(i.id===t?.id&&i.accessToken===t?.accessToken)return;this._session=t,this.validate({force:!0})}}_etag=0;get etag(){return this._etag}onReady(){this._disposable=n.Disposable.from(this._disposable,this.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this),...this.registerCommands()),this.updateContext()}onRepositoriesChanged(e){this.updateContext()}registerCommands(){return this.container.viewCommands,[(0,e2.Lb)(a.Ts.PlusLogin,e=>this.loginOrSignUp(!1,e)),(0,e2.Lb)(a.Ts.PlusSignUp,e=>this.loginOrSignUp(!0,e)),(0,e2.Lb)(a.Ts.PlusLogout,e=>this.logout(void 0,e)),(0,e2.Lb)(a.Ts.GKSwitchOrganization,()=>this.switchOrganization()),(0,e2.Lb)(a.Ts.PlusManage,e=>this.manage(e)),(0,e2.Lb)(a.Ts.PlusShowPlans,e=>this.showPlans(e)),(0,e2.Lb)(a.Ts.PlusStartPreviewTrial,e=>this.startPreviewTrial(e)),(0,e2.Lb)(a.Ts.PlusReactivateProTrial,e=>this.reactivateProTrial(e)),(0,e2.Lb)(a.Ts.PlusResendVerification,e=>this.resendVerification(e)),(0,e2.Lb)(a.Ts.PlusUpgrade,e=>this.upgrade(e)),(0,e2.Lb)(a.Ts.PlusHide,e=>this.setProFeaturesVisibility(!1,e)),(0,e2.Lb)(a.Ts.PlusRestore,e=>this.setProFeaturesVisibility(!0,e)),(0,e2.Lb)(a.Ts.PlusValidate,e=>this.validate({force:!0},e)),...this.container.debugging?[(0,e2.Lb)("gitlens.plus.reset",()=>this.logout(!0,void 0))]:[]]}async getAuthenticationSession(e=!1){return this.ensureSession(e)}async getSubscription(e=!1){let t=this.ensureSession(!1);return e||await t,this._subscription}async learnAboutPro(e,t){switch(null!=t&&(e.detail={..."string"==typeof e.detail?{action:e.detail}:e.detail,...(0,t$.Bq)(t,{prefix:"original"})}),(await this.getSubscription()).state){case eX.zZ.Free:case eX.zZ.FreeInPreviewTrial:case eX.zZ.FreePreviewTrialExpired:(0,e2.RS)(a.Ts.OpenWalkthrough,{...e,step:"pro-features"});break;case eX.zZ.FreePlusInTrial:(0,e2.RS)(a.Ts.OpenWalkthrough,{...e,step:"pro-trial"});break;case eX.zZ.FreePlusTrialExpired:(0,e2.RS)(a.Ts.OpenWalkthrough,{...e,step:"pro-upgrade"});break;case eX.zZ.FreePlusTrialReactivationEligible:(0,e2.RS)(a.Ts.OpenWalkthrough,{...e,step:"pro-reactivate"});break;case eX.zZ.Paid:(0,e2.RS)(a.Ts.OpenWalkthrough,{...e,step:"pro-paid"})}}async loginOrSignUp(e,t){if(!await (0,tL.Z)())return!1;this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:e?"sign-up":"sign-in"},t),await this.container.accountAuthentication.abort(),this.showAccountView();let i=!!await this.ensureSession(!0,{signUp:e});if(i){let{account:e,plan:{actual:i,effective:r}}=this._subscription;if(e?.verified===!1){let e=(0,eX.NK)(this._subscription,"days")??7,i={title:"Resend Email"},s={title:"See Pro Features"},o=await n.window.showInformationMessage(`Welcome to your ${r.name} Trial.

You must first verify your email. Once verified, you will have full access to Pro features for ${e<1?"<1 more day":(0,L.td)("day",e,{infix:" more "})}.`,{modal:!0,detail:"Your trial also includes access to our DevEx platform, unleashing powerful Git visualization & productivity capabilities everywhere you work: IDE, desktop, browser, and terminal."},i,s,{title:"Continue",isCloseAffordance:!0});o===i?this.resendVerification(t):o===s&&this.learnAboutPro({source:"prompt",detail:{action:"trial-started-verify-email"}},t)}else if((0,eX.A_)(this._subscription)){let e={title:"See Pro Features"};await n.window.showInformationMessage(`You are now on the ${i.name} plan and have full access to Pro features.`,{modal:!0,detail:"Your plan also includes access to our DevEx platform, unleashing powerful Git visualization & productivity capabilities everywhere you work: IDE, desktop, browser, and terminal."},e,{title:"Continue",isCloseAffordance:!0})===e&&this.learnAboutPro({source:"prompt",detail:{action:"upgraded"}},t)}else if((0,eX.Mt)(this._subscription)){let e=(0,eX.NK)(this._subscription,"days")??0,i={title:"See Pro Features"};await n.window.showInformationMessage(`Welcome to your ${r.name} Trial.

You now have full access to Pro features for ${e<1?"<1 more day":(0,L.td)("day",e,{infix:" more "})}.`,{modal:!0,detail:"Your trial also includes access to our DevEx platform, unleashing powerful Git visualization & productivity capabilities everywhere you work: IDE, desktop, browser, and terminal."},{title:"Continue",isCloseAffordance:!0},i)===i&&this.learnAboutPro({source:"prompt",detail:{action:"trial-started"}},t)}else{let e={title:"Upgrade to Pro"},r={title:"See Pro Features"},s=await n.window.showInformationMessage(`You are now on the ${i.name} plan.`,{modal:!0,detail:"You only have access to Pro features on publicly-hosted repos. For full access to Pro features, please upgrade to a paid plan.\nA paid plan also includes access to our DevEx platform, unleashing powerful Git visualization & productivity capabilities everywhere you work: IDE, desktop, browser, and terminal."},e,r,{title:"Continue",isCloseAffordance:!0});s===e?this.upgrade(t):s===r&&this.learnAboutPro({source:"prompt",detail:{action:"trial-ended"}},t)}}return i}async logout(e=!1,t){return this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:"sign-out"},t),this.logoutCore(e)}async logoutCore(e=!1){if(this._lastValidatedDate=void 0,null!=this._validationTimer&&(clearInterval(this._validationTimer),this._validationTimer=void 0),await this.container.accountAuthentication.abort(),this._sessionPromise=void 0,null!=this._session?(this.container.accountAuthentication.removeSession(this._session.id),this._session=void 0):this.container.accountAuthentication.removeSessionsByScopes(tk),e&&this.container.debugging){this.changeSubscription(void 0);return}this.changeSubscription({...this._subscription,plan:{actual:(0,eX.le)(eX.qn.Free,!1,0,void 0,this._subscription.plan?.actual?.startedOn!=null?new Date(this._subscription.plan.actual.startedOn):void 0),effective:(0,eX.le)(eX.qn.Free,!1,0,void 0,this._subscription.plan?.effective?.startedOn!=null?new Date(this._subscription.plan.actual.startedOn):void 0)},account:void 0,activeOrganization:void 0})}manage(e){this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:"manage"},e),n.env.openExternal(this.connection.getAccountsUri())}async reactivateProTrial(e){if(!await (0,tL.Z)())return;let t=(0,ea.dQ)();this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:"reactivate"},e);let i=await this.ensureSession(!1);if(null==i)return;let r=await this.connection.fetchApi("user/reactivate-trial",{method:"POST",body:JSON.stringify({client:"gitlens"})});if(!r.ok){if(409===r.status){n.window.showErrorMessage("You are not eligible to reactivate your Pro trial. If you feel that is an error, please contact support.","OK");return}n.window.showErrorMessage(`Unable to reactivate trial: (${r.status}) ${r.statusText}. Please try again. If this issue persists, please contact support.`,"OK");return}try{if(await this.checkInAndValidate(i,{force:!0}),(0,eX.Mt)(this._subscription)){let e=(0,eX.NK)(this._subscription,"days"),t={title:"See What's New"};await n.window.showInformationMessage(`Your Pro trial has been reactivated! Experience all the new Pro features for another ${(0,L.td)("day",e??0)}.`,{modal:!0},{title:"OK"},t)===t&&(0,ed.CZ)(a.DS.releaseNotes)}}catch(e){P.Vy.error(e,t)}}async resendVerification(e){if(this._subscription.account?.verified)return!0;let t=(0,ea.dQ)();this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:"resend-verification"},e),this.showAccountView(!0);let i=await this.ensureSession(!1);if(null==i)return!1;try{let r=await this.connection.fetchApi("resend-email",{method:"POST",body:JSON.stringify({id:i.account.id})},{token:i.accessToken});if(!r.ok)return P.Vy.error("",t,`Unable to resend verification email; status=(${r.status}): ${r.statusText}`),n.window.showErrorMessage(`Unable to resend verification email; Status: ${r.statusText}`,"OK"),!1;let s={title:"Recheck"};if(await n.window.showInformationMessage("Once you have verified your email address, click 'Recheck'.",s,{title:"Cancel"})===s)return await this.validate({force:!0},e),!0}catch(e){P.Vy.error(e,t),n.window.showErrorMessage("Unable to resend verification email","OK")}return!1}setProFeaturesVisibility(e,t){this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:"visibility",visible:e},t),S.H.updateEffective("plusFeatures.enabled",!1)}async showAccountView(e=!1){(!e||S.H.get("plusFeatures.enabled",void 0,!0))&&!this.container.accountView.visible&&await (0,e2.RS)(a.Ts.ShowAccountView)}showPlans(e){this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:"pricing"},e),(0,ed.CZ)(a.DS.pricing)}async startPreviewTrial(e){let t;if(!await (0,tL.Z)())return;this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:"start-preview-trial"},e);let{plan:i,previewTrial:r}=this._subscription;if(null!=r){if(this.showAccountView(),i.effective.id===eX.qn.Free){let t={title:"Start Pro Trial"},i={title:"Sign In"},r=await n.window.showInformationMessage("Do you want to start your free 7-day Pro trial for full access to Pro features?",{modal:!0},t,i,{title:"Cancel",isCloseAffordance:!0});(r===t||r===i)&&this.loginOrSignUp(r===t,e)}return}if((0,eX.yV)(this._subscription))return;let s=new Date,o=new Date(s);this.container.debugging?(o=(0,H.Tl)(o,{minutes:1}),t=0):(o.setHours(23,59,59,999),o=(0,H.Tl)(o,{days:3}),t=3),r={startedOn:s.toISOString(),expiresOn:o.toISOString()},this.changeSubscription({...this._subscription,plan:{...this._subscription.plan,effective:(0,eX.le)(eX.qn.Pro,!1,0,void 0,s,o)},previewTrial:r}),setTimeout(async()=>{let i={title:"See Pro Features"};await n.window.showInformationMessage(`You can now preview local Pro features for ${t<1?"1 day":(0,L.td)("day",t)}, or [start your free 7-day Pro trial](command:gitlens.plus.signUp "Start Pro Trial") for full access to Pro features.`,{title:"Continue"},i)===i&&this.learnAboutPro({source:"notification",detail:{action:"preview-started"}},e)},1)}async upgrade(e){if(await (0,tL.Z)()){if(this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:"upgrade"},e),null==this._subscription.account)this.showPlans(e);else{let e=this._subscription.activeOrganization?.id;n.env.openExternal(this.connection.getGkDevUri("purchase",e?`source=gitlens&org=${e}`:"source=gitlens")),(0,eE.s)(n.window.onDidChangeWindowState,2)(e=>{e.focused&&null!=this._session&&this.checkInAndValidate(this._session,{force:!0})})}await this.showAccountView()}}async validate(e,t){let i=(0,ea.dQ)(),r=await this.ensureSession(!1);if(null==r){this.changeSubscription(this._subscription);return}try{await this.checkInAndValidate(r,e)}catch(e){P.Vy.error(e,i)}}_lastValidatedDate;async checkInAndValidate(e,t){let i=(0,ea.dQ)();if(!t?.force&&null!=this._lastValidatedDate&&Date.now()-this._lastValidatedDate.getTime()<432e5&&!(0,eX.Jc)(this._subscription)){(0,ea.TT)(i,` (${(0,H.PI)(this._lastValidatedDate.getTime(),!0)})...`,"skipped");return}let r=this.checkInAndValidateCore(e,t?.organizationId);if(!t?.showSlowProgress)return r;let s=await (0,e$.wW)(r,void 0,3e3);return s.paused?n.window.withProgress({location:n.ProgressLocation.Notification,title:"Validating your GitKraken account..."},()=>s.value):s.value}async checkInAndValidateCore(e,t){let i=(0,ea.dQ)();this._lastValidatedDate=void 0;try{let i={id:e.account.id,platform:(0,eV.uo)(),gitlensVersion:this.container.version,machineId:n.env.machineId,sessionId:n.env.sessionId,vscodeEdition:n.env.appName,vscodeHost:n.env.appHost,vscodeVersion:n.version,previewStartedOn:this._subscription.previewTrial?.startedOn,previewExpiresOn:this._subscription.previewTrial?.expiresOn},r=await this.connection.fetchApi("gitlens/checkin",{method:"POST",body:JSON.stringify(i)},{token:e.accessToken,organizationId:t});if(!r.ok)throw this._getCheckInData=()=>Promise.resolve(void 0),new h.pf("Unable to validate account",void 0,r.status,r.statusText);this._onDidCheckIn.fire();let s=await r.json();return this._getCheckInData=()=>Promise.resolve(s),this.storeCheckInData(s),await this.validateAndUpdateSubscriptions(s,e),s}catch(e){if(this._getCheckInData=()=>Promise.resolve(void 0),P.Vy.error(e,i),e instanceof h.pf)throw e;throw new h.pf("Unable to validate account",e)}finally{this.startDailyValidationTimer()}}startDailyValidationTimer(){null!=this._validationTimer&&clearInterval(this._validationTimer),this._validationTimer=setInterval(()=>{(null==this._lastValidatedDate||this._lastValidatedDate.getDate()!==new Date().getDate())&&this.ensureSession(!1,{force:!0})},216e5)}storeCheckInData(e){e.user?.id!=null&&this.container.storage.store(`gk:${e.user.id}:checkin`,{v:1,timestamp:Date.now(),data:e})}async loadStoredCheckInData(e){let t=(0,ea.dQ)(),i=this.container.storage.get(`gk:${e}:checkin`);if(i?.timestamp==null||Date.now()-i.timestamp>864e5){let e=await this.getAuthenticationSession(!1);if(null==e)return;try{return await this.checkInAndValidate(e,{force:!0})}catch(e){P.Vy.error(e,t);return}}return i?.data}async validateAndUpdateSubscriptions(e,t){let i;let r=(0,ea.dQ)();try{i=await this.container.organizations.getOrganizations({force:!0,accessToken:t.accessToken,userId:t.account.id})??[]}catch(e){P.Vy.error(e,r),i=[]}let s=S.H.get("gitKraken.activeOrganizationId")??void 0;""===s?s=void 0:null==s||i.some(e=>e.id===s)||(s=void 0,S.H.updateEffective("gitKraken.activeOrganizationId",void 0));let n=tO(e,i,s);this._lastValidatedDate=new Date,this.changeSubscription({...this._subscription,...n},{store:!0})}_sessionPromise;_session;async ensureSession(e,t){return(null!=this._sessionPromise&&await this._sessionPromise,t?.force||null==this._session)?null!==this._session||e?(void 0===this._sessionPromise&&(this._sessionPromise=this.getOrCreateSession(e,t?.signUp).then(e=>(this._session=e,this._sessionPromise=void 0,this._session),()=>(this._session=null,this._sessionPromise=void 0,this._session))),await this._sessionPromise??void 0):void 0:this._session}async getOrCreateSession(e,t=!1){let i;let r=(0,ea.dQ)();try{i=await n.authentication.getSession(tA,t?[...tk,"signUp"]:tk,{createIfNone:e,silent:!e})}catch(e){if(i=null,e instanceof Error&&e.message.includes("User did not consent"))return(0,ea.TT)(r," • User declined authentication"),await this.logoutCore(),null;P.Vy.error(e,r)}if(null==i)return(0,ea.TT)(r," • No valid session was found"),await this.logoutCore(),i??null;try{await this.checkInAndValidate(i,{showSlowProgress:e,force:e})}catch(t){if(P.Vy.error(t,r),this.container.telemetry.sendEvent("account/validation/failed",{"account.id":i.account.id,exception:String(t),code:t.original?.code,statusCode:t.statusCode}),(0,ea.TT)(r,` \u2022 Account validation failed (${t.statusCode??t.original?.code})`,"FAILED"),t instanceof h.pf){let r=i.account.label;if(t.original?.code!=="ENOTFOUND"&&null!=t.statusCode&&t.statusCode<500&&t.statusCode>=400){if(i=null,await this.logoutCore(),e){let e=401===t.statusCode;queueMicrotask(async()=>{let i={title:"Retry Sign In"};await n.window.showErrorMessage(`Unable to sign in to your (${r}) GitKraken account. Please try again. If this issue persists, please contact support.${e?"":` Error=${t.message}`}`,i)===i&&this.loginOrSignUp(!1,{source:"subscription",detail:{error:"validation-failed","error.message":t.message}})})}}else i=i??null}}return i}changeSubscription(e,t){null==e&&(e={plan:{actual:(0,eX.le)(eX.qn.Free,!1,0,void 0),effective:(0,eX.le)(eX.qn.Free,!1,0,void 0)},account:void 0,state:eX.zZ.Free}),(0,eX.Jc)(e)&&(e={...e,plan:{...e.plan,effective:e.plan.actual}}),!(0,eX.A_)(e)&&null!=e.previewTrial&&((0,eX.Cj)(e.previewTrial.expiresOn)??0)>0&&(e={...e,plan:{...e.plan,effective:(0,eX.le)(eX.qn.Pro,!1,0,void 0,new Date(e.previewTrial.startedOn),new Date(e.previewTrial.expiresOn))}}),e.state=(0,eX.UJ)(e),(0,eX.JP)(e);let i=this._subscription,r=null!=i&&JSON.stringify(i)===JSON.stringify(e);if(r){t?.store&&this.storeSubscription(e);return}queueMicrotask(()=>{let t=tM(e);this.container.telemetry.setGlobalAttributes(t),t={...t,...r?{}:tM(i,"previous")},this.container.telemetry.sendEvent(null==i?"subscription":"subscription/changed",t)}),this.storeSubscription(e),this._subscription=e,this._etag=Date.now(),t?.silent||(this.updateContext(),null!=i&&this._onDidChange.fire({current:e,previous:i,etag:this._etag}))}getStoredSubscription(){let e,t;let i=this.container.storage.get("premium:subscription");return i?.data!=null?({lastValidatedAt:e,...t}=i.data,this._lastValidatedDate=null!=e?new Date(e):void 0):t=void 0,null!=t&&(t.plan.actual.name=(0,eX.SB)(t.plan.actual.id),t.plan.effective.name=(0,eX.SB)(t.plan.effective.id)),t}async storeSubscription(e){return this.container.storage.store("premium:subscription",{v:1,data:{...e,lastValidatedAt:this._lastValidatedDate?.getTime()}})}_cancellationSource;_updateAccessContextDebounced;updateContext(){this._updateAccessContextDebounced?.cancel(),null==this._updateAccessContextDebounced&&(this._updateAccessContextDebounced=(0,eu.sg)(this.updateAccessContext.bind(this),500)),null!=this._cancellationSource&&this._cancellationSource.cancel(),this._cancellationSource=new n.CancellationTokenSource,this._updateAccessContextDebounced(this._cancellationSource.token),this.updateStatusBar();let{plan:{actual:e},state:t}=this._subscription;(0,er.o)("gitlens:plus",e.id!=eX.qn.Free?e.id:void 0),(0,er.o)("gitlens:plus:state",t)}async updateAccessContext(e){let t,i=!1;if(0!==this.container.git.repositoryCount&&({allowed:i}=await this.container.git.access(),e.isCancellationRequested))return;let r=S.H.get("plusFeatures.enabled")??!0;if(!r&&"mixed"===i)for(let i of(t=[],this.container.git.repositories)){if(i.closed)continue;let r=await this.container.git.access(void 0,i.uri);if(e.isCancellationRequested)return;r.allowed||t.push(i.uri.toString())}(0,er.o)("gitlens:plus:enabled",!!i||r),(0,er.o)("gitlens:plus:required",!1===i),(0,er.o)("gitlens:plus:disallowedRepos",t)}updateStatusBar(){let{account:e,plan:{effective:t},state:i}=this._subscription;if(t.id===eX.qn.Free){this._statusBarSubscription?.dispose(),this._statusBarSubscription=void 0;return}let r=(0,eX.Mt)(this._subscription);if(!r&&e?.verified!==!1){this._statusBarSubscription?.dispose(),this._statusBarSubscription=void 0;return}if(null==this._statusBarSubscription&&(this._statusBarSubscription=n.window.createStatusBarItem("gitlens.plus.subscription",n.StatusBarAlignment.Left,1)),this._statusBarSubscription.name="GitKraken Subscription",this._statusBarSubscription.command=a.Ts.ShowAccountView,e?.verified===!1)this._statusBarSubscription.text=`$(warning) ${t.name} (Unverified)`,this._statusBarSubscription.backgroundColor=new n.ThemeColor("statusBarItem.warningBackground"),this._statusBarSubscription.tooltip=new n.MarkdownString(r?`**Please verify your email**

You must verify your email before you can start your **${t.name}** trial.

Click for details`:`**Please verify your email**

You must verify your email before you can use Pro features on privately-hosted repos.

Click for details`,!0);else{let e=(0,eX.NK)(this._subscription,"days"),r=i===eX.zZ.FreePlusInTrial&&t.trialReactivationCount>0;this._statusBarSubscription.text=`${t.name} (Trial)`,this._statusBarSubscription.tooltip=new n.MarkdownString(`${r?`[See what's new](${a.DS.releaseNotes}) with ${(0,L.td)("day",e??0,{infix:" more "})} in your **${t.name}** trial.`:`You have ${(0,L.td)("day",e??0)} remaining in your **${t.name}** trial.`} Once your trial ends, you'll need a paid plan for full access to [Pro features](command:gitlens.openWalkthrough?%7B%22step%22%3A%22pro-trial%22,%22source%22%3A%22prompt%22%7D).

Your trial also includes access to our [DevEx platform](${a.DS.platform}), unleashing powerful Git visualization & productivity capabilities everywhere you work: IDE, desktop, browser, and terminal.`,!0)}this._statusBarSubscription.show()}async switchOrganization(){let e;let t=(0,ea.dQ)();if(null==this._session)return;try{e=await this.container.organizations.getOrganizations()}catch(e){P.Vy.error(e,t);return}if(null==e||0===e.length)return;let i=e.map(e=>({label:e.name,org:e})),r=await n.window.showQuickPick(i,{title:"Switch Organization",placeHolder:"Select the active organization for your GitKraken account"}),s=this._subscription?.activeOrganization;if(r?.org==null||null!=s&&r.org.id===s.id)return;await this.checkInAndValidate(this._session,{force:!0,organizationId:r.org.id});let o=await this._getCheckInData();if(null==o)return;let a=tO(o,e,r.org.id);S.H.get("gitKraken.activeOrganizationId")!==r.org.id&&await S.H.updateEffective("gitKraken.activeOrganizationId",r.org.id),this.changeSubscription({...this._subscription,...a},{store:!0})}};function tM(e,t){return null==e?{}:{...(0,t$.Bq)(e.account,{arrays:"join",prefix:`${t?`${t}.`:""}account`,skipPaths:["name","email"],skipNulls:!0,stringify:!0}),...(0,t$.Bq)(e.plan,{prefix:`${t?`${t}.`:""}subscription`,skipPaths:["actual.name","effective.name"],skipNulls:!0,stringify:!0}),...(0,t$.Bq)(e.previewTrial,{prefix:`${t?`${t}.`:""}subscription.previewTrial`,skipPaths:["actual.name","effective.name"],skipNulls:!0,stringify:!0}),"subscription.state":e.state}}tq([(0,en.Yz)()],SubscriptionService.prototype,"learnAboutPro",1),tq([(0,en.Rm)()],SubscriptionService.prototype,"loginOrSignUp",1),tq([(0,en.Rm)()],SubscriptionService.prototype,"logout",1),tq([(0,en.Rm)()],SubscriptionService.prototype,"manage",1),tq([(0,es.G)(()=>""),(0,en.Rm)()],SubscriptionService.prototype,"reactivateProTrial",1),tq([(0,es.G)(()=>""),(0,en.Rm)()],SubscriptionService.prototype,"resendVerification",1),tq([(0,en.Rm)()],SubscriptionService.prototype,"showAccountView",1),tq([(0,es.G)(()=>""),(0,en.Rm)()],SubscriptionService.prototype,"startPreviewTrial",1),tq([(0,en.Rm)()],SubscriptionService.prototype,"upgrade",1),tq([(0,es.G)(e=>`${e?.force??!1}`),(0,en.Rm)()],SubscriptionService.prototype,"validate",1),tq([(0,en.Yz)({args:{0:e=>e?.account?.label}})],SubscriptionService.prototype,"checkInAndValidate",1),tq([(0,es.G)(e=>e.account.id),(0,en.Yz)({args:{0:e=>e?.account?.label}})],SubscriptionService.prototype,"checkInAndValidateCore",1),tq([(0,en.Yz)()],SubscriptionService.prototype,"validateAndUpdateSubscriptions",1),tq([(0,es.G)(),(0,en.Yz)()],SubscriptionService.prototype,"ensureSession",1),tq([(0,en.Yz)()],SubscriptionService.prototype,"getOrCreateSession",1),tq([(0,en.Yz)()],SubscriptionService.prototype,"changeSubscription",1);var tN=i(7609),tH=Object.defineProperty,tG=Object.getOwnPropertyDescriptor,tV=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?tG(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&tH(t,i,n),n};let ServerConnection=class ServerConnection{constructor(e){this.container=e}dispose(){}get baseGkDevUri(){return"staging"===this.container.env?n.Uri.parse("https://staging.gitkraken.dev"):"dev"===this.container.env?n.Uri.parse("https://dev.gitkraken.dev"):n.Uri.parse("https://gitkraken.dev")}getGkDevUri(e,t){let i=null!=e?n.Uri.joinPath(this.baseGkDevUri,e):this.baseGkDevUri;return null!=t&&(i=i.with({query:t})),i}get accountsUri(){return"staging"===this.container.env?n.Uri.parse("https://stagingapp.gitkraken.com"):"dev"===this.container.env?n.Uri.parse("https://devapp.gitkraken.com"):n.Uri.parse("https://app.gitkraken.com")}getAccountsUri(e,t){let i=null!=e?n.Uri.joinPath(this.accountsUri,e):this.accountsUri;return null!=t&&(i=i.with({query:t})),i}get baseApiUri(){return"staging"===this.container.env?n.Uri.parse("https://stagingapi.gitkraken.com"):"dev"===this.container.env?n.Uri.parse("https://devapi.gitkraken.com"):n.Uri.parse("https://api.gitkraken.com")}getApiUrl(...e){return n.Uri.joinPath(this.baseApiUri,...e).toString()}get baseGkDevApiUri(){return"staging"===this.container.env?n.Uri.parse("https://staging-api.gitkraken.dev"):"dev"===this.container.env?n.Uri.parse("https://dev-api.gitkraken.dev"):n.Uri.parse("https://api.gitkraken.dev")}getGkDevApiUrl(...e){return n.Uri.joinPath(this.baseGkDevApiUri,...e).toString()}get userAgent(){return`${this.container.debugging?"GitLens-Debug":this.container.prerelease?"GitLens-Pre":"GitLens"}/${this.container.version} (${n.env.appName}/${n.version}; ${(0,eV.uo)()})`}get clientName(){return this.container.debugging?"gitlens-vsc-debug":this.container.prerelease?"gitlens-vsc-pre":"gitlens-vsc"}async fetch(e,t,i){let r;let s=(0,ea.dQ)();if(i?.cancellation?.isCancellationRequested)throw new h.AL;let n=new AbortController;i?.cancellation!=null?(r=i.timeout,i.cancellation.onCancellationRequested(()=>n.abort())):r=i?.timeout??6e4;let o=null!=r?setTimeout(()=>n.abort(),r):void 0;try{let i=(0,tN.hd)(e,{agent:(0,tN.cQ)(),...t,headers:{"User-Agent":this.userAgent,...t?.headers},signal:n?.signal});return i.finally(()=>clearTimeout(o)),await i}catch(e){if(P.Vy.error(e,s),"AbortError"===e.name)throw new h.AL(e);throw e}}async fetchApi(e,t,i){return this.gkFetch(this.getApiUrl(e),t,i)}async fetchApiGraphQL(e,t,i,r){return this.fetchApi(e,{method:"POST",...i,body:JSON.stringify(t)},r)}async fetchGkDevApi(e,t,i){return this.gkFetch(this.getGkDevApiUrl(e),t,i)}async gkFetch(e,t,i){let r=(0,ea.dQ)();try{let r;({token:r,...i}=i??{}),i?.unAuthenticated||(r??=await this.getAccessToken());let s={Authorization:`Bearer ${r}`,"Content-Type":"application/json","Client-Name":this.clientName,"Client-Version":this.container.version,...t?.headers},n=i?.organizationId;return void 0===n&&(n=(await this.container.subscription.getSubscription(!0)).activeOrganization?.id),n&&(s["gk-org-id"]=n),i?.query!=null&&(e instanceof URL?e.search=i.query:"string"==typeof e&&(e=`${e}?${i.query}`)),this.fetch(e,{...t,headers:s},i)}catch(e){throw P.Vy.error(e,r),e}}async getAccessToken(){let e=await this.container.subscription.getAuthenticationSession();if(null!=e)return e.accessToken;throw new h.WT}};tV([(0,G.B)()],ServerConnection.prototype,"baseGkDevUri",1),tV([(0,G.B)()],ServerConnection.prototype,"accountsUri",1),tV([(0,G.B)()],ServerConnection.prototype,"baseApiUri",1),tV([(0,G.B)()],ServerConnection.prototype,"baseGkDevApiUri",1),tV([(0,G.B)()],ServerConnection.prototype,"userAgent",1),tV([(0,G.B)()],ServerConnection.prototype,"clientName",1);var tQ=Object.defineProperty,tj=Object.getOwnPropertyDescriptor,tz=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?tj(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&tQ(t,i,n),n};let IntegrationAuthenticationService=class IntegrationAuthenticationService{constructor(e,t){this.container=e,this.connection=t}providers=new Map;dispose(){this.providers.clear()}async createSession(e,t){let i=await this.ensureProvider(e),r=await i.createSession(t);if(null==r)return;let s=this.getSecretKey(e,i.getSessionId(t));return await this.container.storage.storeSecret(s,JSON.stringify(r)),r}async getSession(e,t,i){if(this.supports(e)){let r;let s=await this.ensureProvider(e),n=this.getSecretKey(e,s.getSessionId(t));i?.forceNewSession&&await this.container.storage.deleteSecret(n);try{let e=await this.container.storage.getSecret(n);e&&(r=JSON.parse(e))}catch(e){try{await this.container.storage.deleteSecret(n)}catch{}if(!i?.createIfNeeded)throw e}return i?.createIfNeeded&&null==r||r?.expiresAt!=null&&new Date(r.expiresAt).getTime()<Date.now()?this.createSession(e,t):r}if(null==t)return;let{createIfNeeded:r,forceNewSession:s}=i??{};return(0,tN.Ff)(this.container.integrations.ignoreSSLErrors({id:e,domain:t?.domain}),()=>n.authentication.getSession(e,t.scopes,{createIfNone:s?void 0:r,silent:!r&&!s||void 0,forceNewSession:!!s||void 0}))}async deleteSession(e,t){let i=await this.ensureProvider(e),r=this.getSecretKey(e,i.getSessionId(t));await this.container.storage.deleteSecret(r)}supports(e){switch(e){case to.Q7.AzureDevOps:case to.Q7.Bitbucket:case to.PY.GitHubEnterprise:case to.Q7.GitLab:case to.PY.GitLabSelfHosted:case to.tp.Jira:return!0;default:return!1}}getSecretKey(e,t){return`gitlens.integration.auth:${e}|${t}`}async ensureProvider(e){let t=this.providers.get(e);if(null==t){switch(e){case to.Q7.AzureDevOps:t=new(await Promise.resolve().then(i.bind(i,3202))).AzureDevOpsAuthenticationProvider;break;case to.Q7.Bitbucket:t=new(await Promise.resolve().then(i.bind(i,5317))).BitbucketAuthenticationProvider;break;case to.PY.GitHubEnterprise:t=new(await Promise.resolve().then(i.bind(i,3253))).GitHubEnterpriseAuthenticationProvider;break;case to.Q7.GitLab:case to.PY.GitLabSelfHosted:t=new(await Promise.resolve().then(i.bind(i,45))).GitLabAuthenticationProvider;break;case to.tp.Jira:t=new(await Promise.resolve().then(i.bind(i,5122))).JiraAuthenticationProvider(this.container);break;default:throw Error(`Provider '${e}' is not supported`)}this.providers.set(e,t)}return t}};tz([(0,en.Yz)()],IntegrationAuthenticationService.prototype,"createSession",1),tz([(0,en.Yz)()],IntegrationAuthenticationService.prototype,"getSession",1),tz([(0,en.Yz)()],IntegrationAuthenticationService.prototype,"deleteSession",1);var tY=i(8188),tK=Object.defineProperty,tJ=Object.getOwnPropertyDescriptor,tZ=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?tJ(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&tK(t,i,n),n};let IntegrationService=class IntegrationService{constructor(e,t){this.container=e,this.connection=t,this._disposable=n.Disposable.from(S.H.onDidChange(e=>{S.H.changed(e,"remotes")&&this._ignoreSSLErrors.clear()}),n.authentication.onDidChangeSessions(this.onAuthenticationSessionsChanged,this),e.subscription.onDidCheckIn(this.onUserCheckedIn,this),e.subscription.onDidChange(this.onDidChangeSubscription,this))}_onDidChangeConnectionState=new n.EventEmitter;get onDidChangeConnectionState(){return this._onDidChangeConnectionState.event}_connectedCache=new Set;_disposable;_integrations=new Map;dispose(){this._disposable?.dispose()}async syncCloudIntegrations(e){let t=new Set;if(null!=await this.container.subscription.getAuthenticationSession()){let e=await this.container.cloudIntegrations;t=new Set((await e?.getConnections()??[]).map(e=>tY.F7[e.provider]))}for(let e of tY.oE){let i=await this.get(e),r=i.maybeConnected??await i.isConnected();if(t.has(e)){if(r)continue;await i.connect()}else{if(!r)continue;await i.disconnect({silent:!0})}}}onUserCheckedIn(){this.syncCloudIntegrations()}onDidChangeSubscription(e){e.current?.account==null&&this.syncCloudIntegrations()}async manageCloudIntegrations(e,t){if(this.container.telemetry.enabled&&this.container.telemetry.sendEvent("cloudIntegrations/settingsOpened",{"integration.id":e},t),null==(await this.container.subscription.getSubscription()).account&&!await this.container.subscription.loginOrSignUp(!0,t))return;let i="source=gitlens";null!=e&&(i+=`&connect=${e}`),await n.env.openExternal(this.connection.getGkDevUri("settings/integrations",i)),(0,eE.s)(n.window.onDidChangeWindowState,2)(e=>{e.focused&&this.syncCloudIntegrations()})}onAuthenticationSessionsChanged(e){for(let t of this._integrations.values())e.provider.id===t.authProvider.id&&t.refresh()}connected(e,t){this._connectedCache.has(t)||(this._connectedCache.add(t),this.container.telemetry.enabled&&("hosting"===e.type?tY.oE.includes(e.id)?this.container.telemetry.sendEvent("cloudIntegrations/hosting/connected",{"hostingProvider.provider":e.id,"hostingProvider.key":t}):this.container.telemetry.sendEvent("remoteProviders/connected",{"hostingProvider.provider":e.id,"hostingProvider.key":t,"remoteProviders.key":t}):this.container.telemetry.sendEvent("cloudIntegrations/issue/connected",{"issueProvider.provider":e.id,"issueProvider.key":t})),setTimeout(()=>this._onDidChangeConnectionState.fire({key:t,reason:"connected"}),250))}disconnected(e,t){this._connectedCache.delete(t),this.container.telemetry.enabled&&("hosting"===e.type?tY.oE.includes(e.id)?this.container.telemetry.sendEvent("cloudIntegrations/hosting/disconnected",{"hostingProvider.provider":e.id,"hostingProvider.key":t}):this.container.telemetry.sendEvent("remoteProviders/disconnected",{"hostingProvider.provider":e.id,"hostingProvider.key":t,"remoteProviders.key":t}):this.container.telemetry.sendEvent("cloudIntegrations/issue/disconnected",{"issueProvider.provider":e.id,"issueProvider.key":t})),setTimeout(()=>this._onDidChangeConnectionState.fire({key:t,reason:"disconnected"}),250)}isConnected(e){return null==e?0!==this._connectedCache.size:this._connectedCache.has(e)}async get(e,t){let r=this.getCached(e,t);if(null==r){switch(e){case to.Q7.GitHub:r=new(await Promise.resolve().then(i.bind(i,6315))).GitHubIntegration(this.container,this.getProvidersApi.bind(this));break;case to.PY.GitHubEnterprise:if(null==t)throw Error(`Domain is required for '${e}' integration`);r=new(await Promise.resolve().then(i.bind(i,6315))).GitHubEnterpriseIntegration(this.container,this.getProvidersApi.bind(this),t);break;case to.Q7.GitLab:r=new(await Promise.resolve().then(i.bind(i,2035))).GitLabIntegration(this.container,this.getProvidersApi.bind(this));break;case to.PY.GitLabSelfHosted:if(null==t)throw Error(`Domain is required for '${e}' integration`);r=new(await Promise.resolve().then(i.bind(i,2035))).GitLabSelfHostedIntegration(this.container,this.getProvidersApi.bind(this),t);break;case to.Q7.Bitbucket:r=new(await Promise.resolve().then(i.bind(i,7287))).BitbucketIntegration(this.container,this.getProvidersApi.bind(this));break;case to.Q7.AzureDevOps:r=new(await Promise.resolve().then(i.bind(i,552))).AzureDevOpsIntegration(this.container,this.getProvidersApi.bind(this));break;case to.tp.Jira:r=new(await Promise.resolve().then(i.bind(i,7832))).JiraIntegration(this.container,this.getProvidersApi.bind(this));break;default:throw Error(`Integration with '${e}' is not supported`)}this._integrations.set(this.getCacheKey(e,t),r)}return r}_providersApi;async getProvidersApi(){if(null==this._providersApi){let t=this.container;async function e(){return new(await Promise.resolve().then(i.bind(i,1574))).ProvidersApi(t)}this._providersApi=e()}return this._providersApi}getByRemote(e){return e?.provider==null?Promise.resolve(void 0):this.getByRemoteCore(e,this.get)}getByRemoteCached(e){if(e?.provider!=null)return this.getByRemoteCore(e,this.getCached)}getByRemoteCore(e,t){let i=t.bind(this);switch(e.provider.id){case"azure-devops":return i(to.Q7.AzureDevOps);case"bitbucket":return i(to.Q7.Bitbucket);case"github":if(e.provider.custom&&null!=e.provider.domain)return i(to.PY.GitHubEnterprise,e.provider.domain);return i(to.Q7.GitHub);case"gitlab":if(e.provider.custom&&null!=e.provider.domain)return i(to.PY.GitLabSelfHosted,e.provider.domain);return i(to.Q7.GitLab);default:return t===this.get?Promise.resolve(void 0):void 0}}getConnected(e){return[...this._integrations.values()].filter(t=>t.maybeConnected&&t.type===e)}async getMyIssues(e,t){let i=new Map;for(let t of e?.length?e:Object.values(to.Q7)){let e=await this.get(t);null!=e&&i.set(e,void 0)}if(0!==i.size)return this.getMyIssuesCore(i,t)}async getMyIssuesCore(e,t){let i=[];for(let[r,s]of e)null!=r&&i.push(r.searchMyIssues(s,t));let r=await Promise.allSettled(i);return[...(0,eo.Bq)((0,eo.x1)(r,e=>"fulfilled"===e.status?e.value:void 0))]}async getMyIssuesForRemotes(e){if(Array.isArray(e)||(e=[e]),!e.length)return;if(1===e.length){let[t]=e;if(t?.provider==null)return;let i=await this.getByRemote(t);return i?.searchMyIssues(t.provider.repoDesc)}let t=new Map;for(let i of e){if(i?.provider==null)continue;let e=await i.getIntegration();if(null==e)continue;let r=t.get(e);null==r&&(r=[],t.set(e,r)),r.push(i.provider.repoDesc)}return this.getMyIssuesCore(t)}async getMyPullRequests(e,t){let i=new Map;for(let t of e?.length?e:Object.values(to.Q7)){let e=await this.get(t);null!=e&&i.set(e,void 0)}if(0!==i.size)return this.getMyPullRequestsCore(i,t)}async getMyPullRequestsCore(e,t){let i=[];for(let[r,s]of e)null!=r&&i.push(r.searchMyPullRequests(s,t));let r=await Promise.allSettled(i);return[...(0,eo.Bq)((0,eo.x1)(r,e=>"fulfilled"===e.status?e.value:void 0))]}async getMyPullRequestsForRemotes(e){if(Array.isArray(e)||(e=[e]),!e.length)return;if(1===e.length){let[t]=e;if(t?.provider==null)return;let i=await this.getByRemote(t);return i?.searchMyPullRequests(t.provider.repoDesc)}let t=new Map;for(let i of e){if(i?.provider==null)continue;let e=await i.getIntegration();if(null==e)continue;let r=t.get(e);null==r&&(r=[],t.set(e,r)),r.push(i.provider.repoDesc)}return this.getMyPullRequestsCore(t)}isMaybeConnected(e){return!!(e.provider?.id!=null&&this.supports(e.provider.id))&&(this.getByRemoteCached(e)?.maybeConnected??!1)}supports(e){switch(e){case"azure-devops":case"bitbucket":case"github":case"gitlab":return!0;default:return!1}}_ignoreSSLErrors=new Map;ignoreSSLErrors(e){if(eV.HZ)return!1;let t=this._ignoreSSLErrors.get(e.id);if(void 0===t){let i=S.H.get("remotes")?.find(t=>t.type.toLowerCase()===e.id&&t.domain===e.domain);t=i?.ignoreSSLErrors??!1,this._ignoreSSLErrors.set(e.id,t)}return t}getCached(e,t){return this._integrations.get(this.getCacheKey(e,t))}getCacheKey(e,t){return(0,to.NT)(e)?`${e}:${t}`:e}};tZ([(0,en.Yz)({args:{0:e=>Array.isArray(e)?e.map(e=>e.name):e.name}})],IntegrationService.prototype,"getMyIssuesForRemotes",1),tZ([(0,en.Yz)({args:{0:e=>Array.isArray(e)?e.map(e=>e.name):e.name}})],IntegrationService.prototype,"getMyPullRequestsForRemotes",1);var tX=i(2124),t0=i(1225),t1=i(9188),t2=Object.defineProperty,t3=Object.getOwnPropertyDescriptor,t4=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?t3(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&t2(t,i,n),n};let RepositoryIdentityService=class RepositoryIdentityService{constructor(e,t){this.container=e,this.connection=t}dispose(){}getRepository(e,t){return this.locateRepository(e,t)}async locateRepository(e,t){let i;let r=null!=e.initialCommitSha&&e.initialCommitSha!==t1.E,s=e?.remote?.url!=null,o=e.provider?.id!=null&&null!=e.provider.repoDomain&&null!=e.provider.repoName;if(!r&&!s&&!o)return;let a=s||o?await this.container.repositoryPathMapping.getLocalRepoPaths({remoteUrl:e.remote?.url,repoInfo:null!=e.provider?{provider:e.provider.id,owner:e.provider.repoDomain,repoName:e.provider.repoName}:void 0}):[];if(a.length){for(let e of a){let t=this.container.git.getRepository(n.Uri.file(e));if(null!=t){i=t;break}}null==i&&t?.openIfNeeded&&(i=await this.container.git.getOrOpenRepository(n.Uri.file(a[0]),{closeOnOpen:!t?.keepOpen}))}else{let[,s,n]=e.remote?.url!=null?(0,t0.BX)(e.remote.url):[];for(let o of this.container.git.repositories)if(null!=s&&null!=n&&(await o.getRemotes({filter:e=>e.matches(s,n)})).length>0||!t?.skipRefValidation&&r&&await this.container.git.validateReference(o.uri,e.initialCommitSha)){i=o;break}}if(null==i&&t?.prompt){let r={title:"Locate Repository"};if(await n.window.showInformationMessage(`Unable to locate a repository for ${e.name}`,{modal:!0},r,{title:"Cancel",isCloseAffordance:!0})!==r)return;let s=(await n.window.showOpenDialog({title:`Choose a location for ${e.name}`,canSelectFiles:!1,canSelectFolders:!0,canSelectMany:!1}))?.[0];if(null==s)return;let o=await this.container.git.getOrOpenRepository(s,{closeOnOpen:!t?.keepOpen,detectNested:!1});if(null==o)return;(null==e.initialCommitSha||await this.container.git.validateReference(o.uri,e.initialCommitSha))&&(i=o,await this.addFoundRepositoryToMap(i,e))}return i}async addFoundRepositoryToMap(e,t){let i=e.uri.fsPath;for(let t of(await e.getRemotes())){let e=t.provider?.url({type:tX.J.Repo});null!=e&&await this.container.repositoryPathMapping.writeLocalRepoPath({remoteUrl:e},i)}t?.provider?.id!=null&&t?.provider?.repoDomain!=null&&t?.provider?.repoName!=null&&await this.container.repositoryPathMapping.writeLocalRepoPath({repoInfo:{provider:t.provider.id,owner:t.provider.repoDomain,repoName:t.provider.repoName}},i)}};t4([(0,en.Rm)()],RepositoryIdentityService.prototype,"getRepository",1),t4([(0,en.Rm)()],RepositoryIdentityService.prototype,"locateRepository",1);var t8=i(3900),t5=i(5911),t7=i(5158);let GraphStatusBarController=class GraphStatusBarController{_disposable;_statusBarItem;constructor(e){this._disposable=n.Disposable.from(S.H.onDidChange(this.onConfigurationChanged,this),e.subscription.onDidChange(this.onSubscriptionChanged,this),(0,eu.Oo)(e.onReady)(()=>queueMicrotask(()=>this.updateStatusBar())),(0,er.wt)(e=>{("gitlens:enabled"===e||"gitlens:plus:enabled"===e)&&this.updateStatusBar()}),{dispose:()=>this._statusBarItem?.dispose()})}dispose(){this._disposable.dispose()}onConfigurationChanged(e){(S.H.changed(e,"graph.statusBar.enabled")||S.H.changed(e,"plusFeatures.enabled"))&&this.updateStatusBar()}onSubscriptionChanged(e){this.updateStatusBar()}updateStatusBar(){S.H.get("graph.statusBar.enabled")&&(0,er.SD)("gitlens:enabled")&&(0,tL.L)()?(null==this._statusBarItem&&(this._statusBarItem=n.window.createStatusBarItem("gitlens.graph",n.StatusBarAlignment.Left,9998),this._statusBarItem.name="GitLens Commit Graph",this._statusBarItem.command=a.Ts.ShowGraph,this._statusBarItem.text="$(gitlens-graph)",this._statusBarItem.tooltip=new n.MarkdownString("Visualize commits on the Commit Graph"),this._statusBarItem.accessibilityInformation={label:"Show the GitLens Commit Graph"}),this._statusBarItem.show()):(this._statusBarItem?.dispose(),this._statusBarItem=void 0)}};var t9=i(6964),t6=i(410),ie=Object.defineProperty,it=Object.getOwnPropertyDescriptor,ii=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?it(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&ie(t,i,n),n};let WorkspacesApi=class WorkspacesApi{constructor(e,t){this.container=e,this.connection=t}async getWorkspace(e,t){let i;if(t?.includeRepositories){let e=`(first: ${t?.repoCount??t6.w2}`;t?.repoPage&&(e+=`, page: ${t.repoPage}`),e+=")",i=`
				provider_data {
					repositories ${e} {
						total_count
						page_info {
							end_cursor
							has_next_page
						}
						nodes {
							id
							name
							repository_id
							provider
							provider_project_name
							provider_organization_id
							provider_organization_name
							url
						}
					}
				}
			`}let r=`
			id
			description
			name
			organization {
				id
			}
			provider
			azure_organization_id
			azure_project
			repo_relation
			${i??""}
		`,s=`
			query getWorkspace {
				project(id: "${e}") { ${r} }
			}
		`,n=await this.fetch({query:s});if(!n.ok)throw P.Vy.error(void 0,`Getting workspace failed: (${n.status}) ${n.statusText}`),Error(n.statusText);return await n.json()}async getWorkspaces(e){let t,i;if(e?.includeRepositories){let i=`(first: ${e?.repoCount??t6.w2}`;e?.repoPage&&(i+=`, page: ${e.repoPage}`),i+=")",t=`
				provider_data {
					repositories ${i} {
						total_count
						page_info {
							end_cursor
							has_next_page
						}
						nodes {
							id
							name
							repository_id
							provider
							provider_project_name
							provider_organization_id
							provider_organization_name
							url
						}
					}
				}
			`}let r=`
			total_count
			page_info {
				end_cursor
				has_next_page
			}
			nodes {
				id
				description
				name
				organization {
					id
				}
				provider
				azure_organization_id
				azure_project
				repo_relation
				${t??""}
			}
		`,s=`(first: ${e?.count??t6.Uw}`;e?.cursor?s+=`, after: "${e.cursor}"`:e?.page&&(s+=`, page: ${e.page}`),s+=")";let n=`
			query getWorkpaces {
				memberProjects: projects ${s} { ${r} }
			}
		`,o=await this.fetch({query:n});if(!o.ok)throw P.Vy.error(void 0,`Getting workspaces failed: (${o.status}) ${o.statusText}`),Error(o.statusText);let a=new Set,l=await o.json();if(l?.data!=null){for(let e of Object.values(l.data))if(null!=e){if(null==i)for(let t of(i={data:{projects:e}},e.nodes))a.add(t.id);else for(let t of e.nodes)a.has(t.id)||(a.add(t.id),i.data.projects.nodes.push(t))}return null!=i&&(i.data.projects.total_count=a.size),i}}async getWorkspaceRepositories(e,t){let i=`(first: ${t?.count??t6.w2}`;t?.cursor?i+=`, after: "${t.cursor}"`:t?.page&&(i+=`, page: ${t.page}`),i+=")";let r=await this.fetch({query:`
					query getWorkspaceRepos {
						project (id: "${e}") {
							provider_data {
								repositories ${i} {
									total_count
									page_info {
										end_cursor
										has_next_page
									}
									nodes {
										id
										name
										repository_id
										provider
										provider_project_name
										provider_organization_id
										provider_organization_name
										url
									}
								}
							}
						}
					}
				`});if(!r.ok)throw P.Vy.error(void 0,`Getting workspace repos failed: (${r.status}) ${r.statusText}`),Error(r.statusText);return await r.json()}async createWorkspace(e){if(!e.name||!e.description||!e.provider||e.provider===t6.y1.Azure&&(!e.azureOrganizationName||!e.azureProjectName)||(e.provider===t6.y1.GitHubEnterprise||e.provider===t6.y1.GitLabSelfHosted)&&!e.hostUrl)return;let t=await this.fetch({query:`
					mutation createWorkspace {
						create_project(
							input: {
						  		type: GK_PROJECT
						  		name: "${e.name}"
						  		description: "${e.description}"
						  		provider: ${e.provider}
								${e.hostUrl?`host_url: "${e.hostUrl}"`:""}
								${e.azureOrganizationName?`azure_organization_id: "${e.azureOrganizationName}"`:""}
								${e.azureProjectName?`azure_project: "${e.azureProjectName}"`:""}
						  		profile_id: "shared-services"
							}
						) {
							id,
							name,
							description,
							organization {
								id
							}
							provider
							azure_organization_id
							azure_project
							repo_relation
						}
					}
				`});if(!t.ok)throw P.Vy.error(void 0,`Creating workspace failed: (${t.status}) ${t.statusText}`),Error(t.statusText);return await t.json()}async deleteWorkspace(e){let t=await this.fetch({query:`
					mutation deleteWorkspace {
						delete_project(
							id: "${e}"
						) {
							id
						}
					}
				`});if(!t.ok)throw P.Vy.error(void 0,`Deleting workspace failed: (${t.status}) ${t.statusText}`),Error(t.statusText);let i=await t.json();if(i?.errors?.some(e=>e.message.includes("permission"))){let e="Adding repositories to workspace failed: you do not have permission to delete this workspace";throw P.Vy.error(void 0,e),Error(e)}return i}async addReposToWorkspace(e,t){if(0===t.length)return;let i="[";i+=t.map(e=>`{ provider_organization_id: "${e.owner}", name: "${e.repoName}" }`).join(",")+"]";let r=1,s=t.map(e=>`Repository${r++}: repository(provider_organization_id: "${e.owner}", name: "${e.repoName}") {
			id
			name
			repository_id
			provider
			provider_project_name
			provider_organization_id
			provider_organization_name
			url
		}`).join(","),n=await this.fetch({query:`
					mutation addReposToWorkspace {
						add_repositories_to_project(
							input: {
								project_id: "${e}",
								repositories: ${i}
							}
						) {
							id
							provider_data {
								${s}
							}
						}
					}
				`});if(!n.ok)throw P.Vy.error(void 0,`Adding repositories to workspace failed: (${n.status}) ${n.statusText}`),Error(n.statusText);let o=await n.json();if(o?.errors?.some(e=>e.message.includes("permission"))){let e="Adding repositories to workspace failed: you do not have permission to add repositories to this workspace";throw P.Vy.error(void 0,e),Error(e)}return o}async removeReposFromWorkspace(e,t){if(0===t.length)return;let i="[";i+=t.map(e=>`{ provider_organization_id: "${e.owner}", name: "${e.repoName}" }`).join(",")+"]";let r=await this.fetch({query:`
					mutation removeReposFromWorkspace {
						remove_repositories_from_project(
							input: {
								project_id: "${e}",
								repositories: ${i}
							}
						) {
							id
						}
					}
				`});if(!r.ok)throw P.Vy.error(void 0,`Removing repositories from workspace failed: (${r.status}) ${r.statusText}`),Error(r.statusText);let s=await r.json();if(s?.errors?.some(e=>e.message.includes("permission"))){let e="Adding repositories to workspace failed: you do not have permission to remove repositories from this workspace";throw P.Vy.error(void 0,e),Error(e)}return s}async fetch(e,t){return this.connection.fetchApiGraphQL("api/projects/graphql",e,t)}};ii([(0,en.Rm)()],WorkspacesApi.prototype,"getWorkspace",1),ii([(0,en.Rm)()],WorkspacesApi.prototype,"getWorkspaces",1),ii([(0,en.Rm)()],WorkspacesApi.prototype,"getWorkspaceRepositories",1),ii([(0,en.Rm)()],WorkspacesApi.prototype,"createWorkspace",1),ii([(0,en.Rm)()],WorkspacesApi.prototype,"deleteWorkspace",1),ii([(0,en.Rm)()],WorkspacesApi.prototype,"addReposToWorkspace",1),ii([(0,en.Rm)()],WorkspacesApi.prototype,"removeReposFromWorkspace",1);var ir=Object.defineProperty,is=Object.getOwnPropertyDescriptor,io=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?is(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&ir(t,i,n),n};let WorkspacesService=class WorkspacesService{constructor(e,t){this.container=e,this.connection=t,this._workspacesApi=new WorkspacesApi(this.container,this.connection),this._workspacesPathProvider=new WorkspacesWebPathMappingProvider,this._currentWorkspaceId=il(),this._currentWorkspaceAutoAddSetting=n.workspace.getConfiguration("gitkraken")?.get("workspaceAutoAddSetting")??"disabled",this._disposable=n.Disposable.from(e.subscription.onDidChange(this.onSubscriptionChanged,this))}_onDidResetWorkspaces=new n.EventEmitter;get onDidResetWorkspaces(){return this._onDidResetWorkspaces.event}_cloudWorkspaces;_disposable;_localWorkspaces;_workspacesApi;_workspacesPathProvider;_currentWorkspaceId;_currentWorkspaceAutoAddSetting="disabled";_currentWorkspace;dispose(){this._disposable.dispose()}get currentWorkspaceId(){return this._currentWorkspaceId}get currentWorkspace(){return this._currentWorkspace}onSubscriptionChanged(e){(null==e.current.account||e.current.account.id!==e.previous?.account?.id||e.current.state!==e.previous?.state)&&this.resetWorkspaces({cloud:!0})}async loadCloudWorkspaces(e=!1){let t;let i=await this.container.subscription.getSubscription();if(i?.account==null)return{cloudWorkspaces:void 0,cloudWorkspaceInfo:"Please sign in to use cloud workspaces."};let r=[];try{let i=await this._workspacesApi.getWorkspaces({includeRepositories:!e,includeOrganizations:!0});t=i?.data?.projects?.nodes}catch{return{cloudWorkspaces:void 0,cloudWorkspaceInfo:"Failed to load cloud workspaces."}}let s=0,n=i.state===eX.zZ.FreeInPreviewTrial||i.state===eX.zZ.FreePlusInTrial||i.state===eX.zZ.Paid;if(t?.length)for(let i of t){let t=await this._workspacesPathProvider.getCloudWorkspaceCodeWorkspacePath(i.id);if(!n&&i.organization?.id){s+=1;continue}let o=i.provider_data?.repositories?.nodes,a=null!=o?o.map(e=>({...e,workspaceId:i.id})):o;null!=a||e||(a=[]),r.push(new t6.j2(this.container,i.id,i.name,i.organization?.id,i.provider,i.repo_relation,null!=this._currentWorkspaceId&&this._currentWorkspaceId===i.id,i.provider===t6.UQ.Azure?{organizationId:i.azure_organization_id??void 0,project:i.azure_project??void 0}:void 0,a,t))}return{cloudWorkspaces:r,cloudWorkspaceInfo:s>0?`${s} shared workspaces hidden - upgrade to GitLens Pro to access.`:void 0}}async loadLocalWorkspaces(){let e=[];for(let t of Object.values((await this._workspacesPathProvider.getLocalWorkspaceData())?.workspaces||{}))null!=t.localId&&null!=t.name&&e.push(new t6.hu(this.container,t.localId,t.name,t.repositories?.map(e=>({localPath:e.localPath,name:e.localPath.split(/[\\/]/).pop()??"unknown",workspaceId:t.localId}))??[],null!=this._currentWorkspaceId&&this._currentWorkspaceId===t.localId));return{localWorkspaces:e,localWorkspaceInfo:void 0}}getCloudWorkspace(e){return this._cloudWorkspaces?.find(t=>t.id===e)}getLocalWorkspace(e){return this._localWorkspaces?.find(t=>t.id===e)}async getWorkspaces(e){let t={cloudWorkspaces:[],localWorkspaces:[],cloudWorkspaceInfo:void 0,localWorkspaceInfo:void 0};if(null==this._cloudWorkspaces||e?.force){let i=await this.loadCloudWorkspaces(e?.excludeRepositories);this._cloudWorkspaces=i.cloudWorkspaces,t.cloudWorkspaceInfo=i.cloudWorkspaceInfo}if(null==this._localWorkspaces||e?.force){let e=await this.loadLocalWorkspaces();this._localWorkspaces=e.localWorkspaces,t.localWorkspaceInfo=e.localWorkspaceInfo}let i=[...this._cloudWorkspaces??[],...this._localWorkspaces??[]].find(e=>e.current);return null!=i&&(this._currentWorkspaceId=i.id,this._currentWorkspace=i),t.cloudWorkspaces=this._cloudWorkspaces??[],t.localWorkspaces=this._localWorkspaces??[],t}async getCloudWorkspaceRepositories(e){let t=await this._workspacesApi.getWorkspaceRepositories(e),i=t?.data?.project?.provider_data?.repositories?.nodes;return i?.map(t=>({...t,workspaceId:e}))??[]}async addMissingCurrentWorkspaceRepos(e){if(null==this._currentWorkspaceId)return;let t=[...this._cloudWorkspaces??[],...this._localWorkspaces??[]].find(e=>e.current);if(null==t)try{let e=await this._workspacesApi.getWorkspace(this._currentWorkspaceId,{includeRepositories:!0});if(e?.data?.project==null)return;let i=e.data.project.provider_data?.repositories?.nodes,r=null!=i?i.map(t=>({...t,workspaceId:e.data.project.id})):[];t=new t6.j2(this.container,e.data.project.id,e.data.project.name,e.data.project.organization?.id,e.data.project.provider,e.data.project.repo_relation,!0,e.data.project.provider===t6.UQ.Azure?{organizationId:e.data.project.azure_organization_id??void 0,project:e.data.project.azure_project??void 0}:void 0,r,n.workspace.workspaceFile?.fsPath)}catch{return}if(!e?.force&&"disabled"===this._currentWorkspaceAutoAddSetting||!t?.current||(this._currentWorkspace=t,!(await t.getRepositoryDescriptors())?.length))return;let i=[...(await this.resolveWorkspaceRepositoriesByName(t,{resolveFromPath:!0,usePathMapping:!0})).values()].map(e=>e.repository),r=new Map;for(let e of this.container.git.openRepositories)r.set(e.id,e);let s=i.filter(e=>!r.has(e.id));if(0===s.length){e?.force&&n.window.showInformationMessage("No new repositories found to add.",{modal:!0});return}let o=[];if(!e?.force&&"prompt"===this._currentWorkspaceAutoAddSetting){let e={title:"Change Auto-Add Behavior..."},t={title:"Cancel",isCloseAffordance:!0},i=await n.window.showInformationMessage("New repositories found in the linked GitKraken workspace. Would you like to add them to the current VS Code workspace?",{title:"Add..."},e,t);if(null==i||i===t)return;if(i===e){this.chooseCodeWorkspaceAutoAddSetting({current:!0});return}}if(e?.force||"prompt"===this._currentWorkspaceAutoAddSetting){let e=await (0,t9.ST)("Add Repositories to Workspace","Choose which repositories to add to the current workspace",s);if(0===e.length)return;o=e.map(e=>e.path)}else o=s.map(e=>e.path);if(0===o.length)return;let a=n.workspace.workspaceFolders?.length??0;n.window.withProgress({location:n.ProgressLocation.Notification,title:"Adding new repositories from linked cloud workspace...",cancellable:!1},()=>new Promise(e=>{n.workspace.updateWorkspaceFolders(a,0,...o.map(e=>({uri:n.Uri.file(e)}))),e(!0)}))}resetWorkspaces(e){(e?.cloud??!0)&&(this._cloudWorkspaces=void 0),(e?.local??!0)&&(this._localWorkspaces=void 0),this._onDidResetWorkspaces.fire()}async getCloudWorkspaceRepoPath(e,t){return this._workspacesPathProvider.getCloudWorkspaceRepoPath(e,t)}async updateCloudWorkspaceRepoLocalPath(e,t,i){await this._workspacesPathProvider.writeCloudWorkspaceRepoDiskPathToMap(e,t,i)}async getRepositoriesInParentFolder(e){let t=(await n.window.showOpenDialog({title:"Choose a folder containing repositories for this workspace",canSelectFiles:!1,canSelectFolders:!0,canSelectMany:!1}))?.[0];if(!(null==t||e?.isCancellationRequested))try{return this.container.git.findRepositories(t,{cancellation:e,depth:1,silent:!0})}catch(e){return}}async locateAllCloudWorkspaceRepos(e,t){let i=this.getCloudWorkspace(e);if(null==i)return;let r=await i.getRepositoryDescriptors();if(null==r||0===r.length)return;let s=await this.getRepositoriesInParentFolder(t);if(!(null==s||0===s.length||t?.isCancellationRequested)){for(let i of(await this.resolveWorkspaceRepositoriesByName(e,{cancellation:t,repositories:s})).values())if(await this.locateWorkspaceRepo(e,i.descriptor,i.repository),t?.isCancellationRequested)return}}async locateWorkspaceRepo(e,t,i){let r,s;if(null==i||i instanceof n.Uri){let e=i;if(null==e&&(e=(await n.window.showOpenDialog({title:`Choose a location for ${t.name}`,canSelectFiles:!1,canSelectFolders:!0,canSelectMany:!1}))?.[0]),null==e||null==(r=await this.container.git.getOrOpenRepository(e,{closeOnOpen:!0,detectNested:!1})))return}else r=i;let o=r.uri.fsPath,a=await r.getRemotes(),l=[];for(let e of a){let t=e.provider?.url({type:tX.J.Repo});null!=t&&l.push(t)}for(let e of l)await this.container.repositoryPathMapping.writeLocalRepoPath({remoteUrl:e},o);let h=this.getCloudWorkspace(e)??this.getLocalWorkspace(e);null==s&&h?.type==="cloud"&&(s=h.provider),null!=t.id&&(null!=t.url||null!=t.provider_organization_id&&null!=t.name&&null!=s)&&await this.container.repositoryPathMapping.writeLocalRepoPath({remoteUrl:t.url??void 0,repoInfo:{provider:s,owner:t.provider_organization_id,repoName:t.name}},o),null!=t.id&&await this.updateCloudWorkspaceRepoLocalPath(e,t.id,o)}async createCloudWorkspace(e){let t,i,r,s,o,a,l;let h=n.window.createInputBox();h.title="Create Cloud Workspace";let c=n.window.createQuickPick();c.title="Create Cloud Workspace";let u={GitHub:t6.y1.GitHub,"GitHub Enterprise":t6.y1.GitHubEnterprise};h.ignoreFocusOut=!0;let d=[];if(e?.repos!=null&&e.repos.length>0){for(let t of e.repos)if(0===(await t.getRemotes({filter:e=>"github.com"===e.domain})).length){await n.window.showErrorMessage("Only GitHub is supported for this operation. Please ensure all open repositories are hosted on GitHub.",{modal:!0});return}a=t6.y1.GitHub}try{if(!(t=await new Promise(e=>{d.push(h.onDidHide(()=>e(void 0)),h.onDidAccept(()=>{let t=h.value.trim();if(!t){h.validationMessage="Please enter a non-empty name for the workspace";return}e(t)})),h.placeholder="Please enter a name for the new workspace",h.prompt="Enter your workspace name",h.show()}))||!(i=await new Promise(e=>{d.push(h.onDidHide(()=>e(void 0)),h.onDidAccept(()=>{let t=h.value.trim();if(!t){h.validationMessage="Please enter a non-empty description for the workspace";return}e(t)})),h.value="",h.title="Create Workspace",h.placeholder="Please enter a description for the new workspace",h.prompt="Enter your workspace description",h.show()}))||(null==a&&(a=await new Promise(e=>{d.push(c.onDidHide(()=>e(void 0)),c.onDidAccept(()=>{0!==c.activeItems.length&&e(u[c.activeItems[0].label])})),c.placeholder="Please select a provider for the new workspace",c.items=Object.keys(u).map(e=>({label:e})),c.canSelectMany=!1,c.show()})),!a||(a==t6.y1.GitHubEnterprise||a==t6.y1.GitLabSelfHosted)&&!(r=await new Promise(e=>{d.push(h.onDidHide(()=>e(void 0)),h.onDidAccept(()=>{let t=h.value.trim();if(!t){h.validationMessage="Please enter a non-empty host URL for the workspace";return}e(t)})),h.value="",h.placeholder="Please enter a host URL for the new workspace",h.prompt="Enter your workspace host URL",h.show()}))||a==t6.y1.Azure&&(!(s=await new Promise(e=>{d.push(h.onDidHide(()=>e(void 0)),h.onDidAccept(()=>{let t=h.value.trim();if(!t){h.validationMessage="Please enter a non-empty organization name for the workspace";return}e(t)})),h.value="",h.placeholder="Please enter an organization name for the new workspace",h.prompt="Enter your workspace organization name",h.show()}))||!(o=await new Promise(e=>{d.push(h.onDidHide(()=>e(void 0)),h.onDidAccept(()=>{let t=h.value.trim();if(!t){h.validationMessage="Please enter a non-empty project name for the workspace";return}e(t)})),h.value="",h.placeholder="Please enter a project name for the new workspace",h.prompt="Enter your workspace project name",h.show()})))))return}finally{h.dispose(),c.dispose(),d.forEach(e=>void e.dispose())}let p={name:t,description:i,provider:a,hostUrl:r,azureOrganizationName:s,azureProjectName:o};try{let e=await this._workspacesApi.createWorkspace(p);l=e?.data?.create_project}catch{return}if(null!=l){null==this._cloudWorkspaces&&(this._cloudWorkspaces=[]);let t=await this._workspacesPathProvider.getCloudWorkspaceCodeWorkspacePath(l.id);this._cloudWorkspaces?.push(new t6.j2(this.container,l.id,l.name,l.organization?.id,l.provider,l.repo_relation,null!=this._currentWorkspaceId&&this._currentWorkspaceId===l.id,l.provider===t6.UQ.Azure?{organizationId:l.azure_organization_id??void 0,project:l.azure_project??void 0}:void 0,[],t));let i=this.getCloudWorkspace(l.id);null!=i&&await this.addCloudWorkspaceRepos(i.id,{repos:e?.repos,suppressNotifications:!0})}}async deleteCloudWorkspace(e){let t=await n.window.showWarningMessage("Are you sure you want to delete this workspace? This cannot be undone.",{modal:!0},{title:"Confirm"},{title:"Cancel",isCloseAffordance:!0});if(null!=t&&"Cancel"!=t.title)try{let t=await this._workspacesApi.deleteWorkspace(e);t?.data?.delete_project?.id===e&&(this._cloudWorkspaces=this._cloudWorkspaces?.filter(t=>t.id!==e))}catch(e){n.window.showErrorMessage(e.message)}}async filterReposForProvider(e,t){let i=[];for(let r of e)(await r.getRemotes({filter:e=>e.provider?.id===t6.ft[t]})).length&&i.push(r);return i}async filterReposForCloudWorkspace(e,t){let i=this.getCloudWorkspace(t)??this.getLocalWorkspace(t);if(null==i)return e;let r=[...(await i.getRepositoriesByName()).values()].map(e=>e.repository);return e.filter(e=>!r.find(t=>t.id===e.id))}async addCloudWorkspaceRepos(e,t){let i=this.getCloudWorkspace(e);if(null==i)return;let r=[],s=t?.repos;if(!t?.repos){let r=await this.filterReposForProvider(this.container.git.openRepositories,i.provider);r=await this.filterReposForCloudWorkspace(r,e);let o=[{label:"Choose repositories from a folder",description:void 0,choice:t6.yz.ParentFolder}];r.length>0&&o.unshift({label:"Choose repositories from the current window",description:void 0,choice:t6.yz.CurrentWindow}),o[0].picked=!0;let a=await n.window.showQuickPick(o,{placeHolder:"Choose repositories from the current window or a folder",ignoreFocusOut:!0});if(null==a)return;a.choice===t6.yz.ParentFolder&&await n.window.withProgress({location:n.ProgressLocation.Notification,title:"Finding repositories to add to the workspace...",cancellable:!0},async(s,o)=>{let a=await this.getRepositoriesInParentFolder(o);if(null!=a){if(0===a.length){t?.suppressNotifications||n.window.showInformationMessage("No repositories found in the chosen folder.",{modal:!0});return}if(!o.isCancellationRequested){if(0===(r=await this.filterReposForProvider(a,i.provider)).length){t?.suppressNotifications||n.window.showInformationMessage(`No matching repositories found for provider ${i.provider}.`,{modal:!0});return}o.isCancellationRequested||0!==(r=await this.filterReposForCloudWorkspace(r,e)).length||t?.suppressNotifications||n.window.showInformationMessage("All possible repositories are already in this workspace.",{modal:!0})}}});let l=await (0,t9.ST)("Add Repositories to Workspace","Choose which repositories to add to the workspace",r);if(0===l.length)return;s=l.map(e=>e.path)}if(null==s)return;for(let e of s){let t=e instanceof b.LN?e:await this.container.git.getOrOpenRepository(n.Uri.file(e),{closeOnOpen:!0});if(null==t)continue;let i=ia(await t.getRemote("origin")||(await t.getRemotes())?.[0]);null!=i&&r.push({owner:i.owner,repoName:i.repoName,repo:t,url:i.url})}if(0===r.length)return;let o=[],a=new Set((await i.getRepositoryDescriptors()).map(e=>e.id));await n.window.withProgress({location:n.ProgressLocation.Notification,title:`Adding repositories to workspace ${i.name}...`,cancellable:!1},async()=>{try{let t=await this._workspacesApi.addReposToWorkspace(e,r.map(e=>({owner:e.owner,repoName:e.repoName})));if(t?.data.add_repositories_to_project==null)return;o=Object.values(t.data.add_repositories_to_project.provider_data).filter(e=>null!=e).map(t=>({...t,workspaceId:e}))}catch(e){n.window.showErrorMessage(e.message);return}for(let{repo:t,repoName:s,url:n}of(o.length>0&&i.addRepositories(o),o.length<r.length&&(o=(await i.getRepositoryDescriptors({force:!0})).filter(e=>!a.has(e.id))),r)){let i=o.find(e=>e.name.toLowerCase()===s||e.url===n);null!=i&&await this.locateWorkspaceRepo(e,i,t)}})}async removeCloudWorkspaceRepo(e,t){let i=this.getCloudWorkspace(e);if(null==i)return;let r=await n.window.showWarningMessage(`Are you sure you want to remove ${t.name} from this workspace? This cannot be undone.`,{modal:!0},{title:"Confirm"},{title:"Cancel",isCloseAffordance:!0});if(null!=r&&"Cancel"!=r.title)try{let r=await this._workspacesApi.removeReposFromWorkspace(e,[{owner:t.provider_organization_id,repoName:t.name}]);if(r?.data.remove_repositories_from_project==null)return;i.removeRepositories([t.name])}catch(e){n.window.showErrorMessage(e.message)}}async resolveWorkspaceRepositoriesByName(e,t){let i=new Map,r=e instanceof t6.j2||e instanceof t6.hu?e:this.getLocalWorkspace(e)??this.getCloudWorkspace(e);if(null==r)return i;let s=await r.getRepositoryDescriptors();if(null==s||0===s.length)return i;let o=t?.repositories??this.container.git.repositories,a=new Map,l=new Map;for(let e of o){if(t?.cancellation?.isCancellationRequested)break;if(l.set((0,el.Fd)(e.uri.fsPath.toLowerCase()),e),r instanceof t6.j2)for(let t of(await e.getRemotes())){let i=ia(t);null!=i&&a.set(`${i.provider}/${i.owner}/${i.repoName}`,e)}}for(let e of s){let r=null,s=null;null==e.id?r=e.localPath:t?.usePathMapping===!0&&(r=await this.getMappedPathForCloudWorkspaceRepoDescriptor(e)),null!=r&&(s=l.get((0,el.Fd)(r.toLowerCase()))),null==s&&null!=e.id&&null!=e.provider&&(s=a.get(`${e.provider.toLowerCase()}/${e.provider_organization_id.toLowerCase()}/${e.name.toLowerCase()}`)),null!=r&&null==s&&t?.resolveFromPath===!0&&(s=await this.container.git.getOrOpenRepository(n.Uri.file(r),{closeOnOpen:!0,force:!0})),null!=s&&i.set(e.name,{descriptor:e,repository:s})}return i}async saveAsCodeWorkspaceFile(e){let t=this.getCloudWorkspace(e)??this.getLocalWorkspace(e);if(null==t)return;let i=await t.getRepositoryDescriptors();if(null==i)return;let r=await t.getRepositoriesByName();if(0===r.size){n.window.showErrorMessage("No repositories in this workspace could be found locally. Please locate at least one repository.",{modal:!0});return}let s=[];for(let e of r.values()){let t=e.repository;t.virtual||s.push(t.uri.fsPath)}if(s.length<i.length){let e=await n.window.showWarningMessage("Some repositories in this workspace could not be located locally. Do you want to continue?",{modal:!0},{title:"Continue"},{title:"Cancel",isCloseAffordance:!0});if(null==e||"Cancel"==e.title)return}let o=await n.window.showSaveDialog({defaultUri:n.Uri.file(`${t.name}.code-workspace`),filters:{"Code Workspace":["code-workspace"]},title:"Choose a location for the new code workspace file"});if(null==o)return;let a=await this.chooseCodeWorkspaceAutoAddSetting();if(!await this._workspacesPathProvider.writeCodeWorkspaceFile(o,s,{workspaceId:e,workspaceAutoAddSetting:a})){n.window.showErrorMessage("Could not create the new workspace file. Check logs for details");return}t.setLocalPath(o.fsPath);let l={title:"Cancel",isCloseAffordance:!0},h=await n.window.showInformationMessage(`Workspace file created for ${t.name}. Would you like to open it now?`,{modal:!0},{title:"Open in New Window",location:"newWindow"},{title:"Open in Current Window",location:"currentWindow"},l);null!=h&&h!==l&&this.openCodeWorkspaceFile(e,{location:h.location})}async chooseCodeWorkspaceAutoAddSetting(e){if(e?.current&&(null==n.workspace.workspaceFile||null==this._currentWorkspaceId||null==this._currentWorkspaceAutoAddSetting))return"disabled";let t=e?.current?this._currentWorkspaceAutoAddSetting:"disabled",i=[{label:"Add on Workspace (Window) Open",description:"enabled"===this._currentWorkspaceAutoAddSetting?"current":void 0,option:"enabled"},{label:"Prompt on Workspace (Window) Open",description:"prompt"===this._currentWorkspaceAutoAddSetting?"current":void 0,option:"prompt"},{label:"Never",description:"disabled"===this._currentWorkspaceAutoAddSetting?"current":void 0,option:"disabled"}],r=await n.window.showQuickPick(i,{placeHolder:"Choose the behavior of automatically adding missing repositories to the current VS Code workspace",title:"Linked Workspace: Automatically Add Repositories"});if(r?.option==null)return t;let s=r.option;if(e?.current&&null!=n.workspace.workspaceFile){if(!await this._workspacesPathProvider.updateCodeWorkspaceFileSettings(n.workspace.workspaceFile,{workspaceAutoAddSetting:s}))return this._currentWorkspaceAutoAddSetting;this._currentWorkspaceAutoAddSetting=s}return s}async openCodeWorkspaceFile(e,t){let i=this.getCloudWorkspace(e)??this.getLocalWorkspace(e);if(null==i)return;if(null==i.localPath){let t=await n.window.showInformationMessage(`The workspace file for ${i.name} has not been created. Would you like to create it now?`,{modal:!0},{title:"Create"},{title:"Cancel",isCloseAffordance:!0});if(null==t||"Cancel"==t.title)return;return void this.saveAsCodeWorkspaceFile(e)}let r=t?.location==="currentWindow"?"currentWindow":"newWindow";if(!t?.location){let e=await n.window.showInformationMessage(`How would you like to open the workspace file for ${i.name}?`,{modal:!0},{title:"Open in New Window",location:"newWindow"},{title:"Open in Current Window",location:"currentWindow"},{title:"Cancel",isCloseAffordance:!0});if(null==e||"Cancel"==e.title)return;r=e.location??"newWindow"}if(!await this._workspacesPathProvider.confirmCloudWorkspaceCodeWorkspaceFilePath(i.id)){await this._workspacesPathProvider.removeCloudWorkspaceCodeWorkspaceFilePath(i.id),i.setLocalPath(void 0);let e=await n.window.showInformationMessage(`The workspace file for ${i.name} could not be found. Would you like to locate it now?`,{modal:!0},{title:"Locate"},{title:"Cancel",isCloseAffordance:!0});if(e?.title!=="Locate")return;let t=(await n.window.showOpenDialog({defaultUri:n.Uri.file(i.localPath),canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!1,filters:{"Code Workspace":["code-workspace"]},title:"Locate the workspace file"}))?.[0]?.fsPath;if(null==t)return;await this._workspacesPathProvider.writeCloudWorkspaceCodeWorkspaceFilePathToMap(i.id,t),i.setLocalPath(t)}(0,ed.OH)(n.Uri.file(i.localPath),{location:r})}async getMappedPathForCloudWorkspaceRepoDescriptor(e){let t=await this.getCloudWorkspaceRepoPath(e.workspaceId,e.id);return null==t&&(t=(await this.container.repositoryPathMapping.getLocalRepoPaths({remoteUrl:e.url??void 0,repoInfo:{repoName:e.name,provider:e.provider??void 0,owner:e.provider_organization_id}}))?.[0]),t}};function ia(e){if(e.provider?.owner==null)return;let t=e.provider.path.split("/").pop();if(null!=t)return{provider:e.provider.id.toLowerCase(),owner:e.provider.owner.toLowerCase(),repoName:t.toLowerCase(),url:e.provider.url({type:tX.J.Repo})}}function il(){return n.workspace.getConfiguration("gitkraken")?.get("workspaceId")}io([(0,en.Rm)()],WorkspacesService.prototype,"getWorkspaces",1),io([(0,en.Rm)()],WorkspacesService.prototype,"addMissingCurrentWorkspaceRepos",1),io([(0,en.Rm)()],WorkspacesService.prototype,"resetWorkspaces",1),io([(0,en.Rm)({args:{1:!1,2:!1}})],WorkspacesService.prototype,"locateWorkspaceRepo",1),io([(0,en.Rm)({args:!1})],WorkspacesService.prototype,"createCloudWorkspace",1),io([(0,en.Rm)()],WorkspacesService.prototype,"deleteCloudWorkspace",1),io([(0,en.Rm)({args:{1:!1}})],WorkspacesService.prototype,"addCloudWorkspaceRepos",1),io([(0,en.Rm)({args:{1:!1}})],WorkspacesService.prototype,"removeCloudWorkspaceRepo",1),io([(0,en.Rm)({args:{1:!1}})],WorkspacesService.prototype,"resolveWorkspaceRepositoriesByName",1),io([(0,en.Rm)()],WorkspacesService.prototype,"saveAsCodeWorkspaceFile",1),io([(0,en.Rm)()],WorkspacesService.prototype,"chooseCodeWorkspaceAutoAddSetting",1),io([(0,en.Rm)()],WorkspacesService.prototype,"openCodeWorkspaceFile",1);var ih=Object.defineProperty,ic=Object.getOwnPropertyDescriptor,iu=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?ic(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&ih(t,i,n),n};let StatusBarController=class StatusBarController{constructor(e){this.container=e,this._disposable=n.Disposable.from((0,eE.Oo)(e.onReady)(this.onReady,this),S.H.onDidChange(this.onConfigurationChanged,this))}_cancellation;_disposable;_selectedSha;_statusBarBlame;_statusBarMode;dispose(){this.clearBlame(),this._statusBarBlame?.dispose(),this._statusBarMode?.dispose(),this.container.lineTracker.unsubscribe(this),this._disposable.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){if(S.H.changed(e,"mode")){let t=S.H.get("mode.statusBar.enabled")?this.container.mode:void 0;if(t?.statusBarItemName){let i="left"!==S.H.get("mode.statusBar.alignment")?n.StatusBarAlignment.Right:n.StatusBarAlignment.Left;S.H.changed(e,"mode.statusBar.alignment")&&this._statusBarMode?.alignment!==i&&(this._statusBarMode?.dispose(),this._statusBarMode=void 0),this._statusBarMode=this._statusBarMode??n.window.createStatusBarItem("gitlens.mode",i,i===n.StatusBarAlignment.Right?999:1),this._statusBarMode.name="GitLens Modes",this._statusBarMode.command=a.Ts.SwitchMode,this._statusBarMode.text=t.statusBarItemName,this._statusBarMode.tooltip=new n.MarkdownString(`**${t.statusBarItemName}** ${a.EO.Dash} ${t.description}

---

Click to Switch GitLens Modes`,!0),this._statusBarMode.accessibilityInformation={label:`GitLens Mode: ${t.statusBarItemName}
Click to Switch GitLens Modes`},this._statusBarMode.show()}else this._statusBarMode?.dispose(),this._statusBarMode=void 0}if(S.H.changed(e,"statusBar")){if(S.H.get("statusBar.enabled")){let t="left"!==S.H.get("statusBar.alignment")?n.StatusBarAlignment.Right:n.StatusBarAlignment.Left;S.H.changed(e,"statusBar.alignment")&&this._statusBarBlame?.alignment!==t&&(this._statusBarBlame?.dispose(),this._statusBarBlame=void 0),this._statusBarBlame=this._statusBarBlame??n.window.createStatusBarItem("gitlens.blame",t,t===n.StatusBarAlignment.Right?1e3:0),this._statusBarBlame.name="GitLens Current Line Blame",this._statusBarBlame.command=S.H.get("statusBar.command"),S.H.changed(e,"statusBar.enabled")&&this.container.lineTracker.subscribe(this,this.container.lineTracker.onDidChangeActiveLines(this.onActiveLinesChanged,this))}else S.H.changed(e,"statusBar.enabled")&&(this.container.lineTracker.unsubscribe(this),this._statusBarBlame?.dispose(),this._statusBarBlame=void 0)}}onActiveLinesChanged(e){let t=!(S.H.get("statusBar.reduceFlicker")&&"selection"===e.reason&&(e.pending||null!=e.selections));if(!e.pending&&null!=e.selections){let i=this.container.lineTracker.getState(e.selections[0].active);if(i?.commit!=null){this.updateBlame(e.editor,i);return}t=!0}if(t){if(this.clearBlame(),e.suspended&&e.editor?.document.isDirty&&null!=this._statusBarBlame){let t=this._statusBarBlame,i=this.container.documentTracker.get(e.editor.document);queueMicrotask(async()=>{let e=await i;e?.isBlameable&&(t.tooltip=new n.MarkdownString,t.tooltip.isTrusted={enabledCommands:[a.Ts.ShowSettingsPage]},e.canDirtyIdle?(t.text="$(watch) Blame Paused",t.tooltip.appendMarkdown(`Blame will resume after a [${S.H.get("advanced.blame.delayAfterEdit")} ms delay](${t8.uB.getMarkdownCommandArgsCore(a.Ts.ShowSettingsPage,[void 0,"advanced.blame.delayAfterEdit"])} 'Change the after edit delay') to limit the performance impact because there are unsaved changes`)):(t.text="$(debug-pause) Blame Paused",t.tooltip.appendMarkdown(`Blame will resume after saving because there are unsaved changes and the file is over the [${S.H.get("advanced.blame.sizeThresholdAfterEdit")} line threshold](${t8.uB.getMarkdownCommandArgsCore(a.Ts.ShowSettingsPage,[void 0,"advanced.blame.sizeThresholdAfterEdit"])} 'Change the after edit line threshold') to limit the performance impact`)),t.show())})}}else this._statusBarBlame?.text.startsWith("$(git-commit)")&&(this._statusBarBlame.text=`$(watch)${this._statusBarBlame.text.substring(13)}`)}clearBlame(){this._selectedSha=void 0,this._cancellation?.cancel(),this._statusBarBlame?.hide()}async updateBlame(e,t){let i,r;let s=S.H.get("statusBar");if(!s.enabled||null==this._statusBarBlame||!(0,ed.ld)(e)){this._cancellation?.cancel(),this._selectedSha=void 0;return}let{commit:o}=t;if(null==o){this._cancellation?.cancel();return}if(this._selectedSha===o.sha&&!o.isUncommitted){this._statusBarBlame?.text.startsWith("$(watch)")&&(this._statusBarBlame.text=`$(git-commit)${this._statusBarBlame.text.substring(8)}`);return}let l=(0,ea.dQ)();this._selectedSha=o.sha,this._cancellation?.cancel(),this._cancellation=new n.CancellationTokenSource;let h=this._cancellation.token;switch(s.command){case eN.tK.CopyRemoteCommitUrl:i="Click to Copy Remote Commit URL";break;case eN.tK.CopyRemoteFileUrl:this._statusBarBlame.command=a.Ts.CopyRemoteFileUrl,i="Click to Copy Remote File Revision URL";break;case eN.tK.DiffWithPrevious:this._statusBarBlame.command=a.Ts.DiffLineWithPrevious,i="Click to Open Line Changes with Previous Revision";break;case eN.tK.DiffWithWorking:this._statusBarBlame.command=a.Ts.DiffLineWithWorking,i="Click to Open Line Changes with Working File";break;case eN.tK.OpenCommitOnRemote:i="Click to Open Commit on Remote";break;case eN.tK.OpenFileOnRemote:i="Click to Open Revision on Remote";break;case eN.tK.RevealCommitInView:i="Click to Reveal Commit in the Side Bar";break;case eN.tK.ShowCommitsInView:i="Click to Search for Commit";break;case eN.tK.ShowQuickCommitDetails:i="Click to Show Commit";break;case eN.tK.ShowQuickCommitFileDetails:i="Click to Show Commit (file)";break;case eN.tK.ShowQuickCurrentBranchHistory:i="Click to Show Branch History";break;case eN.tK.ShowQuickFileHistory:i="Click to Show File History";break;case eN.tK.ToggleCodeLens:i="Click to Toggle Git CodeLens";break;case eN.tK.ToggleFileBlame:i="Click to Toggle File Blame";break;case eN.tK.ToggleFileChanges:null!=o.file&&(this._statusBarBlame.command=(0,e2.AU)({title:"Toggle File Changes",command:a.Ts.ToggleFileChanges,arguments:[o.file.uri,{type:"changes",context:{sha:o.sha,only:!1,selection:!1}}]})),i="Click to Toggle File Changes";break;case eN.tK.ToggleFileChangesOnly:null!=o.file&&(this._statusBarBlame.command=(0,e2.AU)({title:"Toggle File Changes",command:a.Ts.ToggleFileChanges,arguments:[o.file.uri,{type:"changes",context:{sha:o.sha,only:!0,selection:!1}}]})),i="Click to Toggle File Changes";break;case eN.tK.ToggleFileHeatmap:i="Click to Toggle File Heatmap"}this._statusBarBlame.tooltip=new n.MarkdownString(`Loading... 

---

${i}`),this._statusBarBlame.accessibilityInformation={label:`${this._statusBarBlame.text}
${i}`};let c=await this.container.git.getBestRemotesWithProviders(o.repoPath),[u]=c,d=S.H.get("defaultDateFormat"),p=e_.c.has(s.format,"tips")||e_.c.has(s.tooltipFormat,"tips")?this.container.git.getBranchesAndTagsTipsFn(o.repoPath):void 0,g=!o.isUncommitted&&u?.hasIntegration()&&s.pullRequests.enabled&&(e_.c.has(s.format,"pullRequest","pullRequestAgo","pullRequestAgoOrDate","pullRequestDate","pullRequestState")||e_.c.has(s.tooltipFormat,"pullRequest","pullRequestAgo","pullRequestAgoOrDate","pullRequestDate","pullRequestState"));function m(e,t,r){e.text=`$(git-commit) ${e_.c.fromTemplate(s.format,o,{dateFormat:null===s.dateFormat?d:s.dateFormat,getBranchAndTagTips:t,messageTruncateAtNewLine:!0,pullRequest:r,pullRequestPendingMessage:"PR $(watch)",remotes:c})}`,e.accessibilityInformation={label:`${e.text}
${i}`}}async function f(e,t,i,r){return(0,eI.MX)(e,o,o.getGitUri(),o.lines[0].line-1,{autolinks:!0,cancellation:h,dateFormat:d,format:s.tooltipFormat,getBranchAndTagTips:t,pullRequest:i,pullRequests:g&&null!=i,remotes:c,timeout:r})}g&&(r=await (0,e$.wW)(o.getAssociatedPullRequest(u),h,100,async e=>{if("timedout"!==e.reason||null==this._statusBarBlame)return;P.Vy.debug(l,`${a.EO.Dot} pull request query took too long (over 100 ms)`);let[t,r]=await Promise.allSettled([p,e.value]);if(h.isCancellationRequested||null==this._statusBarBlame)return;let s=(0,eh.Ro)(r),n=(0,eh.Ro)(t);P.Vy.debug(l,`${a.EO.Dot} pull request query completed; updating...`),m(this._statusBarBlame,n,s);let o=await f(this.container,n,s);null!=o&&(this._statusBarBlame.tooltip=o.appendMarkdown(`

---

${i}`))}));let w=null!=p?await p:void 0;if(h.isCancellationRequested)return;m(this._statusBarBlame,w,r?.value),this._statusBarBlame.show();let v=await (0,e$.wW)(f(this.container,w,r?.value,20),h,100,async e=>{if("timedout"!==e.reason||null==this._statusBarBlame)return;let t=await e.value;null!=t&&(this._statusBarBlame.tooltip=t.appendMarkdown(`

---

${i}`))});h.isCancellationRequested||v.paused||null==v.value||(this._statusBarBlame.tooltip=v.value.appendMarkdown(`

---

${i}`))}};iu([(0,en.Yz)({args:{0:e=>`editor=${e.editor?.document.uri.toString(!0)}, selections=${e.selections?.map(e=>`[${e.anchor}-${e.active}]`).join(",")}, pending=${!!e.pending}, reason=${e.reason}`}})],StatusBarController.prototype,"onActiveLinesChanged",1),iu([(0,en.Yz)({args:{0:!1,1:e=>e.commit?.sha}})],StatusBarController.prototype,"updateBlame",1);var id=Object.defineProperty,ip=Object.getOwnPropertyDescriptor,ig=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?ip(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&id(t,i,n),n};let im=Object.create(null),iw=[];let KeyboardScope=class KeyboardScope{_mapping;constructor(e){for(let t in this._mapping=e,this._mapping)this._mapping[t]=this._mapping[t]??im;iw.push(this._mapping)}async dispose(){let e=iw.indexOf(this._mapping),t=(0,ea.dQ)();(0,ea.TT)(t,` \u2022 index=${e}`),e===iw.length-1?(iw.pop(),await this.updateKeyCommandsContext(iw[iw.length-1])):iw.splice(e,1)}_paused=!0;get paused(){return this._paused}async clearKeyCommand(e){let t=(0,ea.dQ)(),i=iw[iw.length-1];if(i!==this._mapping||null==i[e]){(0,ea.TT)(t," • skipped");return}i[e]=void 0,await (0,er.o)(`${a.Od}:key:${e}`,!1)}async pause(e){if(this._paused)return;this._paused=!0;let t=Object.keys(this._mapping).reduce((t,i)=>(t[i]=null==e||e.includes(i)?void 0:this._mapping[i],t),Object.create(null));await this.updateKeyCommandsContext(t)}async resume(){this._paused&&(this._paused=!1,await this.updateKeyCommandsContext(this._mapping))}async start(){await this.resume()}async setKeyCommand(e,t){let i=(0,ea.dQ)(),r=iw[iw.length-1];if(r!==this._mapping){(0,ea.TT)(i," • skipped");return}let s=!!r[e];r[e]=t,s||await (0,er.o)(`${a.Od}:key:${e}`,!0)}async updateKeyCommandsContext(e){await Promise.all(a.HP.map(t=>(0,er.o)(`${a.Od}:key:${t}`,!!e?.[t])))}};ig([(0,en.Rm)({args:!1,prefix:e=>`${e.prefix}[${iw.length}]`})],KeyboardScope.prototype,"dispose",1),ig([(0,en.Rm)({args:!1,prefix:(e,t)=>`${e.prefix}[${iw.length}](${t})`})],KeyboardScope.prototype,"clearKeyCommand",1),ig([(0,en.Rm)({args:!1,prefix:e=>`${e.prefix}(paused=${e.instance._paused})`})],KeyboardScope.prototype,"pause",1),ig([(0,en.Rm)({args:!1,prefix:e=>`${e.prefix}(paused=${e.instance._paused})`})],KeyboardScope.prototype,"resume",1),ig([(0,en.Rm)({args:!1,prefix:(e,t)=>`${e.prefix}[${iw.length}](${t})`})],KeyboardScope.prototype,"setKeyCommand",1);let Keyboard=class Keyboard{_disposable;constructor(){let e=a.HP.map(e=>(0,e2.Lb)(`${a.Od}.key.${e}`,()=>this.execute(e),this));this._disposable=n.Disposable.from(...e)}dispose(){this._disposable.dispose()}createScope(e){return new KeyboardScope({...e})}async beginScope(e){let t=this.createScope(e);return await t.start(),t}async execute(e){let t=(0,ea.dQ)();if(!iw.length){(0,ea.TT)(t," • skipped, no mappings");return}try{let i=iw[iw.length-1][e];if("function"==typeof i&&(i=await i()),"function"!=typeof i?.onDidPressKey){(0,ea.TT)(t," • skipped, no callback");return}await i.onDidPressKey(e)}catch(e){P.Vy.error(e,t)}}};ig([(0,en.Rm)({args:!1,prefix:(e,t)=>`${e.prefix}[${iw.length}](${void 0===t?"":Object.keys(t).join(",")})`})],Keyboard.prototype,"createScope",1),ig([(0,en.Rm)({args:!1,prefix:(e,t)=>`${e.prefix}[${iw.length}](${void 0===t?"":Object.keys(t).join(",")})`})],Keyboard.prototype,"beginScope",1),ig([(0,en.Rm)()],Keyboard.prototype,"execute",1);let TelemetryService=class TelemetryService{constructor(e){this.container=e,e.context.subscriptions.push(S.H.onDidChange(t=>{S.H.changed(t,"telemetry.enabled")&&this.ensureTelemetry(e)}),n.env.onDidChangeTelemetryEnabled(()=>this.ensureTelemetry(e))),this.ensureTelemetry(e)}_enabled=!1;get enabled(){return this._enabled}provider;globalAttributes=new Map;eventQueue=[];dispose(){this.provider?.dispose(),this.provider=void 0}_initializationTimer;ensureTelemetry(e){if(this._enabled=n.env.isTelemetryEnabled&&S.H.get("telemetry.enabled",void 0,!0),!this._enabled){null!=this._initializationTimer&&(clearTimeout(this._initializationTimer),this._initializationTimer=void 0),this.eventQueue.length=0,this.provider?.dispose(),this.provider=void 0;return}null==this._initializationTimer&&(this._initializationTimer=setTimeout(()=>this.initializeTelemetry(e),7500))}async initializeTelemetry(e){if(null!=this._initializationTimer&&(clearTimeout(this._initializationTimer),this._initializationTimer=void 0),this.provider=new(await Promise.resolve().then(i.bind(i,6885))).OpenTelemetryProvider({env:e.env,extensionId:e.id,extensionVersion:e.version,machineId:n.env.machineId,sessionId:n.env.sessionId,language:n.env.language,platform:(0,eV.uo)(),vscodeEdition:n.env.appName,vscodeHost:n.env.appHost,vscodeRemoteName:n.env.remoteName??"",vscodeShell:n.env.shell,vscodeUIKind:String(n.env.uiKind),vscodeVersion:n.version},(0,tN.cQ)(),e.debugging),this.eventQueue.length){let e=[...this.eventQueue];for(let{type:t,name:i,data:r,global:s}of(this.eventQueue.length=0,e))"sendEvent"===t&&(this.provider.setGlobalAttributes(s),this.provider.sendEvent(i,iy(r)))}this.provider.setGlobalAttributes(this.globalAttributes)}sendEvent(e,t,i,r,s){if(this._enabled){if(iv(i,t),null==this.provider){this.eventQueue.push({type:"sendEvent",name:e,data:t,global:new Map(this.globalAttributes),startTime:r??Date.now(),endTime:s??Date.now()});return}this.provider.sendEvent(e,iy(t),r,s)}}startEvent(e,t,i,r){if(this._enabled){if(iv(i,t),null!=this.provider){let i=this.provider.startEvent(e,iy(t),r);return{dispose:()=>i?.end()}}return r=r??Date.now(),{dispose:()=>this.sendEvent(e,t,i,r,Date.now())}}}setGlobalAttribute(e,t){null==t?(this.globalAttributes.delete(e),e.startsWith("global.")||this.globalAttributes.delete(`global.${e}`)):(this.globalAttributes.set(e,t),e.startsWith("global.")||this.globalAttributes.set(`global.${e}`,t)),this.provider?.setGlobalAttributes(this.globalAttributes)}setGlobalAttributes(e){for(let[t,i]of Object.entries(e))null==i?(this.globalAttributes.delete(t),t.startsWith("global.")||this.globalAttributes.delete(`global.${t}`)):(this.globalAttributes.set(t,i),t.startsWith("global.")||this.globalAttributes.set(`global.${t}`,i));this.provider?.setGlobalAttributes(this.globalAttributes)}deleteGlobalAttribute(e){this.globalAttributes.delete(e),e.startsWith("global.")||this.globalAttributes.delete(`global.${e}`),this.provider?.setGlobalAttributes(this.globalAttributes)}};function iv(e,t){if(null!=e&&((t??={})["source.name"]=e.source,null!=e.detail)){if("string"==typeof e.detail)t["source.detail"]=e.detail;else if("object"==typeof e.detail)for(let[i,r]of Object.entries(e.detail))t[`source.detail.${i}`]=r}}function iy(e){if(null==e)return;let t=Object.create(null);for(let[i,r]of Object.entries(e))null!=r&&(t[i]=r);return t}let UsageTracker=class UsageTracker{constructor(e,t){this.container=e,this.storage=t}_onDidChange=new n.EventEmitter;get onDidChange(){return this._onDidChange.event}dispose(){}get(e){return this.storage.get("usages")?.[e]}async reset(e){let t=this.storage.get("usages");if(null!=t){if(null==e){await this.storage.delete("usages"),this._onDidChange.fire(void 0);return}t=(0,t$.Y8)(t,e,void 0),await this.storage.store("usages",t),this._onDidChange.fire({key:e,usage:void 0})}}async track(e){let t=this.storage.get("usages");null==t&&(t=Object.create(null));let i=Date.now(),r=t[e];null==r?(r={count:0,firstUsedAt:i,lastUsedAt:i},t[e]=r):(r.count!==Number.MAX_SAFE_INTEGER&&r.count++,r.lastUsedAt=i),this.container.telemetry.sendEvent("usage/track",{"usage.key":e,"usage.count":r.count}),await this.storage.store("usages",t),this._onDidChange.fire({key:e,usage:r})}};let ib=/\b(g(?:it)?\b\s*)\b(branch|checkout|cherry-pick|fetch|grep|log|merge|pull|push|rebase|reset|revert|show|stash|status|tag)\b/gi,iC=/\b((?!.*\/\.)(?!.*\.\.)(?!.*\/\/)(?!.*@\{)[^\000-\037\177 ,~^:?*[\\]+[^ ./])\b/gi,iR=/^[0-9a-f]{7,40}\.\.\.?[0-9a-f]{7,40}$/,iS=/^[0-9a-f]{7,40}$/;let GitTerminalLinkProvider=class GitTerminalLinkProvider{constructor(e){this.container=e,this.disposable=n.window.registerTerminalLinkProvider(this)}disposable;dispose(){this.disposable.dispose()}async provideTerminalLinks(e){let t,i,r;if(0===e.line.trim().length)return[];let s=this.container.git.highlander?.path;if(!s)return[];let n=S.H.get("terminalLinks.showDetailsView"),o=[],l=new RegExp(iC,iC.flags),h=new RegExp(ib,ib.flags);for(;;){if(null!=(r=h.exec(e.line))){let[e,t,i]=r,s={startIndex:r.index+t.length,length:i.length,tooltip:"Open in Git Command Palette",command:{command:a.Ts.GitCommands,args:{command:i}}};o.push(s)}if(null==(r=l.exec(e.line)))break;let[c,u]=r;if("HEAD"===u.toUpperCase()){let e={startIndex:r.index,length:u.length,tooltip:"Show HEAD",command:{command:a.Ts.ShowQuickBranchHistory,args:{branch:"HEAD",repoPath:s}}};o.push(e);continue}void 0===t&&(t=await this.container.git.getBranches(s));let d=t.values.find(e=>e.name===u);if(null==d&&(d=t.values.find(e=>(0,p.km)(e.name)===u)),null!=d){let e={startIndex:r.index,length:u.length,tooltip:"Show Branch",command:{command:a.Ts.ShowQuickBranchHistory,args:{repoPath:s,branch:d.name}}};o.push(e);continue}void 0===i&&(i=await this.container.git.getTags(s));let g=i.values.find(e=>e.name===u);if(null!=g){let e={startIndex:r.index,length:u.length,tooltip:"Show Tag",command:{command:a.Ts.ShowQuickBranchHistory,args:{repoPath:s,tag:g.name}}};o.push(e);continue}if(!iS.test(u)){if(iR.test(u)){let e={startIndex:r.index,length:u.length,tooltip:"Show Commits",command:{command:a.Ts.GitCommands,args:{command:"log",state:{repo:s,reference:(0,v.kA)(u,s,{refType:"revision"})}}}};o.push(e)}continue}if(await this.container.git.validateReference(s,u)){let e={startIndex:r.index,length:u.length,tooltip:"Show Commit",command:n?{command:a.Ts.ShowInDetailsView,args:{repoPath:s,refs:[u]}}:{command:a.Ts.ShowQuickCommit,args:{repoPath:s,sha:u}}};o.push(e)}}return o}handleTerminalLink(e){n.commands.executeCommand(e.command.command,e.command.args)}};let GitDocumentTracker=class GitDocumentTracker{constructor(e){this.container=e,this._disposable=n.Disposable.from((0,eE.Oo)(e.onReady)(this.onReady,this),S.H.onDidChange(this.onConfigurationChanged,this),n.window.onDidChangeActiveTextEditor(this.onActiveTextEditorChanged,this),n.workspace.onDidChangeTextDocument(this.onTextDocumentChanged,this),n.workspace.onDidCloseTextDocument(this.onTextDocumentClosed,this),n.workspace.onDidSaveTextDocument(this.onTextDocumentSaved,this),this.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this),this.container.git.onDidChangeRepository(this.onRepositoryChanged,this)),this._dirtyIdleTriggerDelay=S.H.get("advanced.blame.delayAfterEdit")}_onDidChangeBlameState=new n.EventEmitter;get onDidChangeBlameState(){return this._onDidChangeBlameState.event}_onDidChangeContent=new n.EventEmitter;get onDidChangeContent(){return this._onDidChangeContent.event}_onDidChangeDirtyState=new n.EventEmitter;get onDidChangeDirtyState(){return this._onDidChangeDirtyState.event}_onDidTriggerDirtyIdle=new n.EventEmitter;get onDidTriggerDirtyIdle(){return this._onDidTriggerDirtyIdle.event}_dirtyIdleTriggerDelay;_dirtyIdleTriggeredDebounced;_dirtyStateChangedDebounced;_disposable;_documentMap=new Map;dispose(){this._disposable.dispose(),this.clear()}onReady(){this.onConfigurationChanged(),this.onActiveTextEditorChanged(n.window.activeTextEditor)}_timer;onActiveTextEditorChanged(e){if(null!=e&&!(0,ed.ld)(e))return;if(this._dirtyIdleTriggeredDebounced?.flush(),this._dirtyIdleTriggeredDebounced?.cancel(),this._dirtyIdleTriggeredDebounced=void 0,this._dirtyStateChangedDebounced?.flush(),this._dirtyStateChangedDebounced?.cancel(),this._dirtyStateChangedDebounced=void 0,null!=this._timer&&(clearTimeout(this._timer),this._timer=void 0),null==e){this._timer=setTimeout(()=>{this._timer=void 0,(0,er.o)("gitlens:activeFileStatus",void 0)},250);return}let t=this._documentMap.get(e.document);if(null!=t){t.then(e=>e.activate(),()=>{});return}this.addCore(e.document)}onConfigurationChanged(e){null!=e&&(S.H.changed(e,"blame.ignoreWhitespace")||S.H.changed(e,"advanced.caching.enabled"))&&this.refreshDocuments(),S.H.changed(e,"advanced.blame.delayAfterEdit")&&(this._dirtyIdleTriggerDelay=S.H.get("advanced.blame.delayAfterEdit"),this._dirtyIdleTriggeredDebounced?.flush(),this._dirtyIdleTriggeredDebounced?.cancel(),this._dirtyIdleTriggeredDebounced=void 0)}onRepositoriesChanged(e){this.refreshDocuments({addedOrChangedRepoPaths:e.added.length?new Set(e.added.map(e=>e.path.toLowerCase())):void 0,removedRepoPaths:e.removed.length?new Set(e.removed.map(e=>e.path.toLowerCase())):void 0})}onRepositoryChanged(e){e.changed(b.Z_.Index,b.Z_.Heads,b.Z_.Status,b.Z_.Unknown,b.Ti.Any)&&this.refreshDocuments({addedOrChangedRepoPaths:new Set([e.repository.path])})}debouncedTextDocumentChanges=new WeakMap;onTextDocumentChanged(e){let{scheme:t}=e.document.uri;if(!this.container.git.supportedSchemes.has(t))return;let i=this.debouncedTextDocumentChanges.get(e.document);null==i&&(i=(0,eu.sg)(e=>this.onTextDocumentChangedCore(e),50,([e],[t])=>[{...t,contentChanges:[...e.contentChanges,...t.contentChanges]}]),this.debouncedTextDocumentChanges.set(e.document,i)),i(e)}async onTextDocumentChangedCore(e){this.debouncedTextDocumentChanges.delete(e.document);let t=await (this._documentMap.get(e.document)??this.addCore(e.document));t.refresh("doc-changed");let i=e.document.isDirty,r=n.window.activeTextEditor;null!=this._dirtyIdleTriggeredDebounced&&(i?this._dirtyIdleTriggeredDebounced({editor:r,document:t}):this._dirtyIdleTriggeredDebounced.cancel()),r?.document===e.document&&this._onDidChangeContent.fire({editor:r,document:t,contentChanges:e.contentChanges}),(t.forceDirtyStateChangeOnNextDocumentChange||t.dirty!==i)&&(t.resetForceDirtyStateChangeOnNextDocumentChange(),t.dirty=i,null!=r&&r.document===e.document&&this.fireDocumentDirtyStateChanged({editor:r,document:t,dirty:t.dirty}))}onTextDocumentClosed(e){this.remove(e)}async onTextDocumentSaved(e){let t=this._documentMap.get(e);if(null!=t){(await t).update({forceBlameChange:!0});return}(0,ed.G1)(e)&&this.addCore(e)}async add(e){let t;if((0,d.t5)(e))try{t=await n.workspace.openTextDocument(e.documentUri())}catch(r){let i=r?.toString()??"";if(n.env.language.startsWith("en")){if(i.includes("File seems to be binary and cannot be opened as text"))t=new BinaryTextDocument(e);else if(i.includes("File not found")||i.includes("Unable to read file")||i.includes("Unable to resolve non-existing file"))t=new MissingRevisionTextDocument(e);else throw r}else if(i.includes("cannot open"))t=new MissingRevisionTextDocument(e);else throw r}else t=e instanceof n.Uri?await n.workspace.openTextDocument(e):e;return this.addCore(t)}async addCore(e){let t=TrackedGitDocument.create(e,!1,{onDidBlameStateChange:e=>this._onDidChangeBlameState.fire(e)},this.container);return this._documentMap.set(e,t),t}async clear(){for(let e of this._documentMap.values())(await e).dispose();this._documentMap.clear()}get(e){if(e instanceof n.Uri){let t=(0,ed.c5)(e);if(null==t)return;e=t}return this._documentMap.get(e)}async getOrAdd(e){return e instanceof n.Uri&&(e=(0,ed.c5)(e)??e),this.get(e)??this.add(e)}has(e){if(e instanceof n.Uri){let t=(0,ed.c5)(e);if(null==t)return!1;e=t}return this._documentMap.has(e)}async resetCache(e,t){let i=this.get(e);if(null!=i)switch(t){case"blame":(await i).state?.clearBlame();break;case"diff":(await i).state?.clearDiff();break;case"log":(await i).state?.clearLog()}}async remove(e,t){let i;null!=t&&(i=this._documentMap.get(e)),this._documentMap.delete(e),(t??await i)?.dispose()}fireDocumentDirtyStateChanged(e){if(e.dirty){queueMicrotask(()=>{this._dirtyStateChangedDebounced?.cancel(),n.window.activeTextEditor===e.editor&&this._onDidChangeDirtyState.fire(e)}),this._dirtyIdleTriggerDelay>0&&(this._dirtyIdleTriggeredDebounced??=(0,eu.sg)(e=>{!this._dirtyIdleTriggeredDebounced?.pending()&&e.document.setIsDirtyIdle()&&this._onDidTriggerDirtyIdle.fire(e)},this._dirtyIdleTriggerDelay),this._dirtyIdleTriggeredDebounced({editor:e.editor,document:e.document}));return}this._dirtyStateChangedDebounced??=(0,eu.sg)(e=>{n.window.activeTextEditor===e.editor&&this._onDidChangeDirtyState.fire(e)},250),this._dirtyStateChangedDebounced(e)}async refreshDocuments(e){if(0!==this._documentMap.size)for await(let t of this._documentMap.values()){let i=t.uri.repoPath?.toLocaleLowerCase();null!=i&&(e?.removedRepoPaths?.has(i)?this.remove(t.document,t):(null==e||e?.addedOrChangedRepoPaths?.has(i))&&t.refresh("repo-changed"))}}};let EmptyTextDocument=class EmptyTextDocument{constructor(e){this.gitUri=e,this.uri=e.documentUri(),this.eol=n.EndOfLine.LF,this.fileName=this.uri.fsPath,this.isClosed=!1,this.isDirty=!1,this.isUntitled=!1,this.languageId="",this.lineCount=0,this.version=0}eol;fileName;isClosed;isDirty;isUntitled;languageId;lineCount;uri;version;getText(e){throw Error("Method not supported.")}getWordRangeAtPosition(e,t){throw Error("Method not supported.")}lineAt(e){throw Error("Method not supported.")}offsetAt(e){throw Error("Method not supported.")}positionAt(e){throw Error("Method not supported.")}save(){throw Error("Method not supported.")}validatePosition(e){throw Error("Method not supported.")}validateRange(e){throw Error("Method not supported.")}};let BinaryTextDocument=class BinaryTextDocument extends EmptyTextDocument{};let MissingRevisionTextDocument=class MissingRevisionTextDocument extends EmptyTextDocument{};var iP=Object.defineProperty,iA=Object.getOwnPropertyDescriptor,ik=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?iA(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&iP(t,i,n),n};let LineTracker=class LineTracker{constructor(e,t){this.container=e,this.documentTracker=t}_onDidChangeActiveLines=new n.EventEmitter;get onDidChangeActiveLines(){return this._onDidChangeActiveLines.event}_disposable;_editor;_state=new Map;_subscriptions=new Map;_subscriptionOnlyWhenTracking;dispose(){for(let e of this._subscriptions.keys())this.unsubscribe(e)}onActiveTextEditorChanged(e){e!==this._editor&&(null==e||(0,ed.ld)(e))&&(this._editor=e,this._selections=iT(e?.selections),this._suspended?this.resume({force:!0}):this.notifyLinesChanged("editor"))}onBlameStateChanged(e){this.notifyLinesChanged("editor")}onContentChanged(e){this.selections?.length&&e.contentChanges.some(e=>this.selections.some(t=>e.range.end.line>=t.active&&t.active>=e.range.start.line||e.range.start.line>=t.active&&t.active>=e.range.end.line))&&this.notifyLinesChanged("editor")}onDirtyIdleTriggered(e){this.resume()}onDirtyStateChanged(e){e.dirty?this.suspend():this.resume({force:!0})}onTextEditorSelectionChanged(e){if(this._editor!==e.textEditor&&!(0,ed.ld)(e.textEditor))return;let t=iT(e.selections);this._editor===e.textEditor&&this.includes(t)||(this._editor=e.textEditor,this._selections=t,this.notifyLinesChanged(this._editor===e.textEditor?"selection":"editor"))}_selections;get selections(){return this._selections}_suspended=!1;get suspended(){return this._suspended}getState(e){return this._state.get(e)}resetState(e){if(null!=e){this._state.delete(e);return}this._state.clear()}setState(e,t){this._state.set(e,t)}includes(e,t){if("number"!=typeof e)return iD(e,this._selections);if(null==this._selections||0===this._selections.length)return!1;let i=t?.activeOnly??!0;for(let t of this._selections)if(e===t.active||!i&&(t.anchor>=e&&e>=t.active||t.active>=e&&e>=t.anchor))return!0;return!1}refresh(){this.notifyLinesChanged("editor")}resume(e){(e?.force||this._suspended)&&(this._suspended=!1,this._subscriptionOnlyWhenTracking??=this.documentTracker.onDidChangeContent(this.onContentChanged,this),e?.silent||this.notifyLinesChanged("editor"))}suspend(e){!e?.force&&this._suspended||(this._suspended=!0,this._subscriptionOnlyWhenTracking?.dispose(),this._subscriptionOnlyWhenTracking=void 0,e?.silent||this.notifyLinesChanged("editor"))}subscribed(e){return this._subscriptions.has(e)}subscribe(e,t){let i=(0,ea.dQ)(),r=0===this._subscriptions.size,s=this._subscriptions.get(e);return null==s?(s=[t],this._subscriptions.set(e,s)):s.push(t),r?((0,ea.TT)(i," • starting line tracker..."),this.resume({force:!0,silent:!0}),this._disposable=n.Disposable.from({dispose:()=>this.suspend({force:!0,silent:!0})},n.window.onDidChangeActiveTextEditor((0,eu.sg)(this.onActiveTextEditorChanged,0),this),n.window.onDidChangeTextEditorSelection(this.onTextEditorSelectionChanged,this),this.documentTracker.onDidChangeBlameState(this.onBlameStateChanged,this),this.documentTracker.onDidChangeDirtyState(this.onDirtyStateChanged,this),this.documentTracker.onDidTriggerDirtyIdle(this.onDirtyIdleTriggered,this)),queueMicrotask(()=>this.onActiveTextEditorChanged(n.window.activeTextEditor))):(0,ea.TT)(i," • already started..."),{dispose:()=>this.unsubscribe(e)}}unsubscribe(e){let t=this._subscriptions.get(e);if(null!=t){for(let i of(this._subscriptions.delete(e),t))i.dispose();0===this._subscriptions.size&&(this._fireLinesChangedDebounced?.cancel(),this._disposable?.dispose(),this._disposable=void 0)}}async fireLinesChanged(e){let t=!1;this.suspended||e.pending||null==e.selections||null==e.editor||(t=await this.updateState(e.selections,e.editor)),this._onDidChangeActiveLines.fire(t?e:{...e,selections:void 0,suspended:this.suspended})}_fireLinesChangedDebounced;notifyLinesChanged(e){"editor"===e&&this.resetState();let t={editor:this._editor,selections:this.selections,reason:e};if(null==t.selections){queueMicrotask(()=>{t.editor===n.window.activeTextEditor&&(this._fireLinesChangedDebounced?.cancel(),this.fireLinesChanged(t))});return}null==this._fireLinesChangedDebounced&&(this._fireLinesChangedDebounced=(0,eu.sg)(e=>{e.editor===n.window.activeTextEditor&&iD(e.selections,iT(e.editor?.selections))&&this.fireLinesChanged(e)},250)),this._fireLinesChangedDebounced.pending()||this.fireLinesChanged({...t,pending:!0}),this._fireLinesChangedDebounced(t)}async updateState(e,t){let i=(0,ea.dQ)();if(!this.includes(e))return(0,ea.TT)(i,` \u2022 lines no longer match`),!1;let r=await this.documentTracker.getOrAdd(t.document);if(!r.isBlameable)return(0,ea.TT)(i,` \u2022 document is not blameable`),!1;if(1===e.length){let s=await this.container.git.getBlameForLine(r.uri,e[0].active,t?.document);if(null==s)return(0,ea.TT)(i,` \u2022 blame failed`),!1;null!=s.commit&&s.commit.file,this.setState(s.line.line-1,{commit:s.commit})}else{let s=await this.container.git.getBlame(r.uri,t.document);if(null==s)return(0,ea.TT)(i,` \u2022 blame failed`),!1;for(let t of e){let e=s.lines[t.active],i=s.commits.get(e.sha);null!=i&&i.file,null==i?this.resetState(t.active):this.setState(t.active,{commit:i})}}return this.includes(e)?r.isBlameable?(t.document.isDirty&&r.setForceDirtyStateChangeOnNextDocumentChange(),!0):((0,ea.TT)(i,` \u2022 document is not blameable`),!1):((0,ea.TT)(i,` \u2022 lines no longer match`),!1)}};function iD(e,t){return null==e&&null==t||null!=e&&null!=t&&e.length===t.length&&e.every((e,i)=>{let r=t[i];return e.active===r.active&&e.anchor===r.anchor})}function iT(e){return e?.map(e=>({active:e.active.line,anchor:e.anchor.line}))}ik([(0,en.Yz)({args:{0:e=>`editor/doc=${e.editor.document.uri.toString(!0)}, blameable=${e.blameable}`}})],LineTracker.prototype,"onBlameStateChanged",1),ik([(0,en.Yz)({args:{0:e=>`editor/doc=${e.editor.document.uri.toString(!0)}`}})],LineTracker.prototype,"onContentChanged",1),ik([(0,en.Yz)({args:{0:e=>`editor/doc=${e.editor.document.uri.toString(!0)}`}})],LineTracker.prototype,"onDirtyIdleTriggered",1),ik([(0,en.Yz)({args:{0:e=>`editor/doc=${e.editor.document.uri.toString(!0)}, dirty=${e.dirty}`}})],LineTracker.prototype,"onDirtyStateChanged",1),ik([(0,en.Yz)()],LineTracker.prototype,"resume",1),ik([(0,en.Yz)()],LineTracker.prototype,"suspend",1),ik([(0,en.Yz)({args:!1,singleLine:!0})],LineTracker.prototype,"subscribe",1),ik([(0,en.Yz)({args:!1,singleLine:!0})],LineTracker.prototype,"unsubscribe",1),ik([(0,en.Yz)({args:{0:e=>e?.map(e=>e.active).join(","),1:e=>e.document.uri.toString(!0)},exit:!0})],LineTracker.prototype,"updateState",1);var i_=i(6090),iI=i(9432),i$=i(1014),iE=i(1270),iO=i(378),ix=i(1144);let DeepLinkService=class DeepLinkService{constructor(e){this.container=e,this._context={state:ix.rq.Idle},this._disposables.push(e.uri.onDidReceiveUri(async e=>this.processDeepLinkUri(e)));let t=this.container.storage.get("deepLinks:pending");null!=t&&(this.container.storage.delete("deepLinks:pending"),this.processPendingDeepLink(t))}_disposables=[];_context;_onDeepLinkProgressUpdated=new n.EventEmitter;dispose(){n.Disposable.from(...this._disposables).dispose()}resetContext(){this._context={state:ix.rq.Idle,url:void 0,mainId:void 0,repo:void 0,remoteUrl:void 0,remote:void 0,secondaryRemote:void 0,repoPath:void 0,filePath:void 0,targetId:void 0,secondaryTargetId:void 0,secondaryRemoteUrl:void 0,targetType:void 0,targetSha:void 0,action:void 0,repoOpenLocation:void 0,repoOpenUri:void 0,params:void 0}}setContextFromDeepLink(e,t){this._context={...this._context,mainId:e.mainId,targetType:e.type,url:t,remoteUrl:e.remoteUrl,repoPath:e.repoPath,filePath:e.filePath,targetId:e.targetId,secondaryTargetId:e.secondaryTargetId,secondaryRemoteUrl:e.secondaryRemoteUrl,action:e.action,params:e.params}}async processDeepLinkUri(e,t=!0){let i=(0,ix.yI)(e);if(null!=i&&this._context.state===ix.rq.Idle){if(this.container.git.isDiscoveringRepositories&&await this.container.git.isDiscoveringRepositories,!i.type||!i.mainId&&!i.remoteUrl&&!i.repoPath&&!i.targetId){n.window.showErrorMessage("Unable to resolve link"),P.Vy.warn(`Unable to resolve link - missing basic properties: ${e.toString()}`);return}if(!Object.values(ix.vk).includes(i.type)){n.window.showErrorMessage("Unable to resolve link"),P.Vy.warn(`Unable to resolve link - unknown link type: ${e.toString()}`);return}if(i.type!==ix.vk.Repository&&null==i.targetId&&null==i.mainId){n.window.showErrorMessage("Unable to resolve link"),P.Vy.warn(`Unable to resolve link - no main/target id provided: ${e.toString()}`);return}if(i.type===ix.vk.Comparison&&null==i.secondaryTargetId){n.window.showErrorMessage("Unable to resolve link"),P.Vy.warn(`Unable to resolve link - no secondary target id provided: ${e.toString()}`);return}this.setContextFromDeepLink(i,e.toString()),await this.processDeepLink(void 0,t)}}async processPendingDeepLink(e){if(null==e.url)return;let t=(0,ix.yI)(n.Uri.parse(e.url));if(null==t)return;this._context={state:ix.rq.MaybeOpenRepo},this.setContextFromDeepLink(t,e.url),this._context.targetSha=e.targetSha,this._context.secondaryTargetSha=e.secondaryTargetSha,this._context.repoPath=e.repoPath;let i=ix.uW.RepoOpening;if(this.container.git.isDiscoveringRepositories&&await this.container.git.isDiscoveringRepositories,null!=e.repoPath){let t=n.Uri.parse(e.repoPath);try{let e=await this.container.git.getOrOpenRepository(t,{detectNested:!1});null!=e&&(this._context.repo=e,i=ix.uW.RepoOpened)}catch{}}queueMicrotask(()=>{this.processDeepLink(i,e.useProgress)})}async getBranch(e){let{repo:t,remote:i,secondaryRemote:r}=this._context;if(!t)return;let s=e;null==i||s.startsWith(`${i.name}/`)?null==r||s.startsWith(`${r.name}/`)||(s=`${r.name}/${s}`):s=`${i.name}/${s}`;let n=await t.getBranch(s);if(null!=n)return n;if(e.includes(":")){let[i,r]=e.split(":");if(null!=i&&null!=s){let[e,o]=i.split("/");if(null!=e&&null!=o){for(let i of(await t.getRemotes()))if(i.provider?.owner===e&&(s=`${i.name}/${r}`,null!=(n=await t.getBranch(s))))return n}}}return t.getBranch(e)}async getCommit(e){let{repo:t}=this._context;if(t&&await this.container.git.validateReference(t.path,e))return t.getCommit(e)}async getTag(e){let{repo:t}=this._context;return t?.getTag(e)}async getShaForBranch(e){return(await this.getBranch(e))?.sha}async getShaForTag(e){return(await this.getTag(e))?.sha}async getShaForCommit(e){let{repo:t}=this._context;if(t&&await this.container.git.validateReference(t.path,e))return e}async getShasForComparison(e,t){let i=await this.getRefSha(e);if(null==i)return;let r=await this.getRefSha(t);if(null!=r)return[i,r]}async getRefSha(e){if(""===e)return e;if((0,v.HH)(e))return this.getShaForCommit(e);let t=e.toLocaleLowerCase();if(!t.startsWith("refs/tags/")&&!t.startsWith("tags/")){let t=await this.getShaForBranch(e);if(null!=t)return t}let i=await this.getShaForTag(e);return null!=i?i:this.getShaForCommit(e)}async getTargetRef(e){if(""===e)return;if((0,v.HH)(e))return this.getCommit(e);let t=e.toLocaleLowerCase();if(!t.startsWith("refs/tags/")&&!t.startsWith("tags/")){let t=await this.getBranch(e);if(null!=t)return t}let i=await this.getTag(e);return null!=i?i:this.getCommit(e)}async getShasForTargets(){let{repo:e,targetType:t,targetId:i,secondaryTargetId:r}=this._context;if(null!=e&&t!==ix.vk.Repository&&null!=i){if(t===ix.vk.Branch)return this.getShaForBranch(i);if(t===ix.vk.Tag)return this.getShaForTag(i);if(t===ix.vk.Commit)return this.getShaForCommit(i);if(t===ix.vk.File)return this.getRefSha(i);if(t===ix.vk.Comparison){if(null==r)return;return this.getShasForComparison(i,r)}}}async showOpenTypePrompt(e){let t=[{label:"Choose a Local Folder...",action:"folder"},{label:"Choose a Workspace File...",action:"workspace"}];null!=this._context.remoteUrl&&t.push({label:"Clone Repository...",action:"clone"}),e?.includeCurrent&&t.push((0,iE.uK)(),{label:"Use Current Window",action:"current"}),t.push((0,iE.uK)(),{label:"Cancel"});let i=await n.window.showQuickPick(t,{title:"Locating Repository",placeHolder:e?.customMessage??"Unable to locate a matching repository, please choose how to locate it"});return i?.action}async showOpenLocationPrompt(e){let t;let i=[{label:"Open in Current Window",action:"currentWindow"},{label:"Open in New Window",action:"newWindow"}];switch("workspace"!==e&&i.push({label:"Add Folder to Workspace",action:"addToWorkspace"}),e){case"clone":t="  •  Clone";break;case"folder":t="  •  Folder";break;case"workspace":t="  •  Workspace from File";break;case"current":t=""}i.push((0,iE.uK)(),{label:"Cancel"});let r=await n.window.showQuickPick(i,{title:`Locating Repository${t}`,placeHolder:`Please choose where to open the repository ${"clone"===e?"after cloning":e}`});return r?.action}async showFetchPrompt(){let e={label:"Fetch"};return await n.window.showQuickPick([e,(0,iE.uK)(),{label:"Cancel"}],{title:"Locating Link Target",placeHolder:"Unable to find the link target(s), would you like to fetch from the remote?"})===e}async showAddRemotePrompt(e,t){let i={label:"Add Remote"};if(await n.window.showQuickPick([i,{label:"Cancel"}],{title:"Locating Remote",placeHolder:`Unable to find remote for '${e}', would you like to a new remote?`})===i)return await n.window.showInputBox({prompt:"Enter a name for the remote",value:function(e){let t=e.split("/");if(!(t.length<3))return t[t.length-2]}(e),validateInput:e=>e?t.includes(e)?"A remote with that name already exists":void 0:"A name is required"})}async processDeepLink(e=ix.uW.DeepLinkEventFired,t=!0){let i="",r=e;if(r===ix.uW.DeepLinkCancelled&&this._context.state===ix.rq.Idle)return;let s=[],{targetType:o}=this._context;for(t&&queueMicrotask(()=>void n.window.withProgress({cancellable:!0,location:n.ProgressLocation.Notification,title:`Opening ${(0,ix.$)(o??ix.vk.Repository)} link...`},(e,t)=>(e.report({increment:0}),new Promise(i=>{t.onCancellationRequested(()=>{queueMicrotask(()=>this.processDeepLink(ix.uW.DeepLinkCancelled)),i()}),this._onDeepLinkProgressUpdated.event(({message:t,increment:r})=>{e.report({message:t,increment:r}),100===r&&i()})}))));;){this._context.state=ix.HZ[this._context.state][r];let{state:e,mainId:o,repo:l,url:h,remoteUrl:c,secondaryRemoteUrl:u,remote:d,secondaryRemote:p,repoPath:g,filePath:m,targetId:f,secondaryTargetId:w,targetSha:y,secondaryTargetSha:b,targetType:C,repoOpenLocation:R,repoOpenUri:S}=this._context;switch(this._onDeepLinkProgressUpdated.fire(ix.aN[e]),e){case ix.rq.Idle:r===ix.uW.DeepLinkErrored&&(n.window.showErrorMessage("Unable to resolve link"),P.Vy.warn(`Unable to resolve link - ${i}: ${h}`)),this.resetContext();return;case ix.rq.AccountCheck:if(null==C){r=ix.uW.DeepLinkErrored,i="No link type provided.";break}if(!ix.VZ.includes(C)){r=ix.uW.AccountCheckPassed;break}if(!await (0,i$.G5)(this.container,`Opening ${(0,ix.$)(C)} links is a Preview feature and requires an account.`,{source:"deeplink",detail:{action:"open",type:C,friendlyType:(0,ix.$)(C)}})){r=ix.uW.DeepLinkErrored,i="Account required to open link";break}r=ix.uW.AccountCheckPassed;break;case ix.rq.PlanCheck:if(null==C){r=ix.uW.DeepLinkErrored,i="No link type provided.";break}if(!ix.sE.includes(C)){r=ix.uW.PlanCheckPassed;break}if(!await (0,i$.KH)(this.container,`Opening ${(0,ix.$)(C)} links is a Pro feature.`,{source:"deeplink",detail:{action:"open",type:C,friendlyType:(0,ix.$)(C)}})){r=ix.uW.DeepLinkErrored,i="Paid plan required to open link";break}r=ix.uW.PlanCheckPassed;break;case ix.rq.TypeMatch:switch(C){case ix.vk.Draft:r=ix.uW.LinkIsDraftType;break;case ix.vk.Workspace:r=ix.uW.LinkIsWorkspaceType;break;default:r=ix.uW.LinkIsRepoType}break;case ix.rq.RepoMatch:case ix.rq.AddedRepoMatch:{let t;if(null!=l&&null!=S&&null!=R){r=ix.uW.RepoMatched;break}if(!o&&!c&&!g){r=ix.uW.DeepLinkErrored,i="No repository id, remote url or path was provided.";break}let n=o,a=c;null!=t&&(this._context.remoteUrl=t.remote?.url??void 0,a=t.remote?.url,this._context.mainId=t.initialCommitSha??void 0,n=t.initialCommitSha);let h="",u="";for(let e of(null!=a&&([,h,u]=(0,t0.BX)(a)),this.container.git.repositories)){if(null!=g&&(0,el.Fd)(e.path.toLowerCase())===(0,el.Fd)(g.toLowerCase())){this._context.repo=e,r=ix.uW.RepoMatched;break}if(null!=h&&null!=u){let t=await e.getRemotes({filter:e=>e.matches(h,u)});if(t.length>0){this._context.repo=e,this._context.remote=t[0],r=ix.uW.RepoMatched;break}}if(null!=n&&n!==t1.E&&await this.container.git.validateReference(e.path,n)){this._context.repo=e,r=ix.uW.RepoMatched;break}}if(!this._context.repo&&e===ix.rq.RepoMatch&&(s=await this.container.repositoryPathMapping.getLocalRepoPaths({remoteUrl:a})).length>0){for(let e of this.container.git.repositories)if(s.some(t=>(0,el.Fd)(e.path.toLowerCase())===(0,el.Fd)(t.toLowerCase()))){this._context.repo=e,r=ix.uW.RepoMatched;break}if(null==this._context.repo){r=ix.uW.RepoMatchedInLocalMapping;break}}this._context.repo||(e===ix.rq.RepoMatch?r=ix.uW.RepoMatchFailed:(r=ix.uW.DeepLinkErrored,i="No matching repository found."));break}case ix.rq.CloneOrAddRepo:{let e,t;if(!o&&!c&&!g){r=ix.uW.DeepLinkErrored,i="Missing repository id, remote url and path.";break}if(s.length>0){if(null==(e=await n.window.showQuickPick([...s,"Choose a different location"],{placeHolder:"Matching repository found. Choose a location to open it."}))){r=ix.uW.DeepLinkCancelled;break}"Choose a different location"!==e&&(this._context.repoOpenUri=n.Uri.file(e),t="folder")}if(null==t&&(t=await this.showOpenTypePrompt({customMessage:"Choose a different location"===e?"Please choose an option to open the repository":void 0})),!t){r=ix.uW.DeepLinkCancelled;break}let a=await this.showOpenLocationPrompt(t);if(!a||(this._context.repoOpenLocation=a,null==this._context.repoOpenUri&&(this._context.repoOpenUri=(await n.window.showOpenDialog({title:`Choose a ${"workspace"===t?"workspace":"folder"} to ${"clone"===t?"clone the repository to":"open the repository"}`,canSelectFiles:"workspace"===t,canSelectFolders:"workspace"!==t,canSelectMany:!1,..."workspace"===t&&{filters:{Workspaces:["code-workspace"]}}}))?.[0]),!this._context.repoOpenUri)){r=ix.uW.DeepLinkCancelled;break}if(null!=this._context.repoOpenUri&&null!=c&&"clone"===t){let e;try{e=await n.window.withProgress({location:n.ProgressLocation.Notification,title:`Cloning repository for link: ${this._context.url}}`},async()=>this.container.git.clone(c,this._context.repoOpenUri?.fsPath??""))}catch{r=ix.uW.DeepLinkErrored,i="Unable to clone repository";break}if(!e){r=ix.uW.DeepLinkErrored,i="Unable to clone repository";break}this._context.repoOpenUri=n.Uri.file(e)}let l=await this.container.git.getOrOpenRepository(this._context.repoOpenUri,{closeOnOpen:!0,detectNested:!1});null==l||(this._context.repo=l,"current"===t||"workspace"===t||s.includes(this._context.repoOpenUri.fsPath)||await this.container.repositoryPathMapping.writeLocalRepoPath({remoteUrl:c},l.uri.fsPath)),r=ix.uW.RepoAdded;break}case ix.rq.RemoteMatch:case ix.rq.EnsureRemoteMatch:if(g&&l&&!c&&!u){r=ix.uW.RemoteMatchUnneeded;break}if(!l||!c&&!u){r=ix.uW.DeepLinkErrored,i="Missing repository or remote url.";break}if(c&&!d){let e=await l.getRemotes({filter:e=>e.url===c});e.length>0&&(this._context.remote=e[0])}if(u&&!p){let e=await l.getRemotes({filter:e=>e.url===u});e.length>0&&(this._context.secondaryRemote=e[0])}c&&!this._context.remote||u&&!this._context.secondaryRemote?e===ix.rq.RemoteMatch?r=ix.uW.RemoteMatchFailed:(r=ix.uW.DeepLinkErrored,i="No matching remote found."):r=ix.uW.RemoteMatched;break;case ix.rq.AddRemote:{let e,t;if(!l||!c&&!u){r=ix.uW.DeepLinkErrored,i="Missing repository or remote url.";break}if(c&&!d&&(e=await this.showAddRemotePrompt(c,(await l.getRemotes()).map(e=>e.name)))){try{await l.addRemote(e,c,{fetch:!0})}catch{r=ix.uW.DeepLinkErrored,i="Failed to add remote.";break}if([this._context.remote]=await l.getRemotes({filter:e=>e.url===c}),!this._context.remote){r=ix.uW.DeepLinkErrored,i="Failed to add remote.";break}}if(u&&!p&&(t=await this.showAddRemotePrompt(u,(await l.getRemotes()).map(e=>e.name)))){try{await l.addRemote(t,u,{fetch:!0})}catch{r=ix.uW.DeepLinkErrored,i="Failed to add remote.";break}if([this._context.secondaryRemote]=await l.getRemotes({filter:e=>e.url===u}),!this._context.secondaryRemote){r=ix.uW.DeepLinkErrored,i="Failed to add remote.";break}}this._context.secondaryRemote&&!this._context.remote&&(this._context.remote=this._context.secondaryRemote),e||t?this._context.remote||(r=ix.uW.DeepLinkErrored,i="Failed to add remote."):r=ix.uW.DeepLinkCancelled,r=ix.uW.RemoteAdded;break}case ix.rq.TargetMatch:case ix.rq.FetchedTargetMatch:if(!l||!C){r=ix.uW.DeepLinkErrored,i="Missing repository or target type.";break}if(C===ix.vk.Repository){r=ix.uW.TargetMatched;break}if(C===ix.vk.Comparison)[this._context.targetSha,this._context.secondaryTargetSha]=await this.getShasForTargets()??[];else if(C===ix.vk.File&&null==f){r=ix.uW.TargetMatched;break}else this._context.targetSha=await this.getShasForTargets();if(null==this._context.targetSha||null==this._context.secondaryTargetSha&&C===ix.vk.Comparison){e===ix.rq.TargetMatch&&null!=d?r=ix.uW.TargetMatchFailed:(r=ix.uW.DeepLinkErrored,i=`No matching ${null==y?"target":"secondary target"} found.`);break}r=ix.uW.TargetMatched;break;case ix.rq.Fetch:if(!l||!d){r=ix.uW.DeepLinkErrored,i="Missing repository or remote.";break}if(!await this.showFetchPrompt()){r=ix.uW.DeepLinkCancelled;break}try{await l.fetch({remote:d.name,progress:!0})}catch{r=ix.uW.DeepLinkErrored,i="Error fetching remote.";break}if(p&&p.name!==d.name)try{await l.fetch({remote:p.name,progress:!0})}catch{}r=ix.uW.TargetFetched;break;case ix.rq.MaybeOpenRepo:null!=R&&null!=S?(r=ix.uW.RepoOpening,"addToWorkspace"===R&&(n.workspace.workspaceFolders?.length||0)>1||(await this.container.storage.store("deepLinks:pending",{url:this._context.url,repoPath:S.toString(),targetSha:this._context.targetSha,secondaryTargetSha:this._context.secondaryTargetSha,useProgress:t}),r=ix.uW.DeepLinkStored),(0,ed.OH)(S,{location:R})):r=ix.uW.RepoOpened;break;case ix.rq.RepoOpening:this._disposables.push((0,eE.Oo)(this.container.git.onDidChangeRepositories)(()=>{queueMicrotask(()=>this.processDeepLink(ix.uW.RepoOpened))}));return;case ix.rq.GoToTarget:if(C===ix.vk.Repository){r=this._context.action===ix.zB.Switch||this._context.action===ix.zB.SwitchToPullRequest||this._context.action===ix.zB.SwitchToAndSuggestPullRequest?ix.uW.OpenSwitch:ix.uW.OpenGraph;break}switch(C){case ix.vk.File:r=ix.uW.OpenFile;break;case ix.vk.Comparison:r=ix.uW.OpenComparison;break;default:r=this._context.action===ix.zB.Switch||this._context.action===ix.zB.SwitchToPullRequest||this._context.action===ix.zB.SwitchToAndSuggestPullRequest?ix.uW.OpenSwitch:ix.uW.OpenGraph}break;case ix.rq.OpenGraph:if(!l||!C){r=ix.uW.DeepLinkErrored,i="Missing repository or target type.";break}if(C===ix.vk.Repository){await (0,e2.RS)(a.Ts.ShowInCommitGraph,l),r=ix.uW.DeepLinkResolved;break}if(!y){r=ix.uW.DeepLinkErrored,i=`Cannot find target ${C} in repo.`;break}await (0,e2.RS)(a.Ts.ShowInCommitGraph,{ref:(0,v.kA)(y,l.path)}),r=ix.uW.DeepLinkResolved;break;case ix.rq.OpenComparison:if(!l){r=ix.uW.DeepLinkErrored,i="Missing repository.";break}if(null==f||null==w||null==y||null==b){r=ix.uW.DeepLinkErrored,i="Missing target or secondary target.";break}await this.container.searchAndCompareView.compare(l.path,""===w||(0,v.HH)(w)?w:{label:w,ref:b},""===f||(0,v.HH)(f)?f:{label:f,ref:y}),r=ix.uW.DeepLinkResolved;break;case ix.rq.OpenDraft:{if(!f){r=ix.uW.DeepLinkErrored,i="Missing cloud patch id.";break}let e=this._context.params?.get("type"),t=this._context.params?.get("prEntityId");null!=t&&(t=(0,L.Ey)(t).toString()),await (0,e2.RS)(a.Ts.OpenCloudPatch,{type:"suggested_pr_change"===e?"code_suggestion":"patch",id:f,patchId:w,prEntityId:t}),r=ix.uW.DeepLinkResolved;break}case ix.rq.OpenWorkspace:if(!o){r=ix.uW.DeepLinkErrored,i="Missing workspace id.";break}await this.container.workspacesView.revealWorkspaceNode(o,{select:!0,focus:!0,expand:!0}),r=ix.uW.DeepLinkResolved;break;case ix.rq.OpenFile:{let e,t;if(null==m||!l){r=ix.uW.DeepLinkErrored,i="Missing file path.";break}if(null!=w){let t=w.split("-");if(1===t.length){let i=parseInt(t[0]);isNaN(i)||(e=new n.Range(i<1?0:i-1,0,i,0))}else if(2===t.length){let i=parseInt(t[0]),r=parseInt(t[1]);isNaN(i)||isNaN(r)||(e=new n.Range(i<1?0:i-1,0,r,0))}}if(null==y)try{await (0,ed.Ol)(n.Uri.file(`${l.path}/${m}`),{preview:!1,selection:e,throwOnError:!0}),r=ix.uW.DeepLinkResolved;break}catch(e){r=ix.uW.DeepLinkErrored,i=`Unable to open file${e?.message?`: ${e.message}`:""}`;break}try{t=this.container.git.getRevisionUri(y,m,g??l.uri.fsPath)}catch{}if(null==t){r=ix.uW.DeepLinkErrored,i="Unable to get revision uri.";break}try{await (0,iI.vM)(t,{preview:!1,selection:e}),r=ix.uW.DeepLinkResolved;break}catch{r=ix.uW.DeepLinkErrored,i="Unable to open file.";break}}case ix.rq.SwitchToRef:{if(!l||!C||!f){r=ix.uW.DeepLinkErrored,i="Missing repository or target type.";break}let e=!1;if(C===ix.vk.Branch){let t=await l.getBranch(),i=await this.getBranch(f);null!=t&&null!=i&&t.getNameWithoutRemote()===i.getNameWithoutRemote()&&(e=!0)}if(!e){let e=await this.getTargetRef(f);if(null==e){r=ix.uW.DeepLinkErrored,i="Unable to find link target in the repository.";break}await (0,i_.b)({command:"switch",state:{repos:l,reference:e}})}(this._context.action===ix.zB.SwitchToPullRequest||this._context.action===ix.zB.SwitchToAndSuggestPullRequest)&&await (0,iO.$)({type:"wip",inReview:this._context.action===ix.zB.SwitchToAndSuggestPullRequest,repository:l,source:"launchpad"}),r=ix.uW.DeepLinkResolved;break}default:r=ix.uW.DeepLinkErrored,i="Unknown state."}}}async copyDeepLinkUrl(e,t,i,r){let s=await ("string"==typeof e?null!=t?this.generateDeepLinkUrl(e,t,i,r):this.generateDeepLinkUrl(e):this.generateDeepLinkUrl(e,t));await n.env.clipboard.writeText(s.toString())}async copyFileDeepLinkUrl(e,t,i,r,s){let o=await this.generateFileDeepLinkUr(e,t,i,r,s);await n.env.clipboard.writeText(o.toString())}async generateDeepLinkUrl(e,t,i,r){let s,o,a,l;let h=S.H.get("deepLinks.schemeOverride"),c=h?!0===h?n.env.uriScheme:h:"vscode",u="";if("dev"===this.container.env?u="dev.":"staging"===this.container.env&&(u="staging."),null==t&&"string"==typeof e){let t=new URL(`https://${u}gitkraken.dev/link/workspaces/${e}`);return t.searchParams.set("origin","gitlens"),t}let d="string"!=typeof e?e.repoPath:e,g=await this.container.git.getUniqueRepositoryId(d)??t1.E;if("string"!=typeof e)switch(e.refType){case"branch":s=ix.vk.Branch,o=e.remote?(0,p.km)(e.name):e.name;break;case"revision":s=ix.vk.Commit,o=e.ref;break;case"tag":s=ix.vk.Tag,o=e.name}null!=i&&null!=r&&(s=ix.vk.Comparison,o=i.label??i.ref,a=r.label??r.ref),l=s===ix.vk.Comparison?`/${s}/${a}...${o}`:null!=s&&s!==ix.vk.Repository?`/${s}/${o}`:"";let m=new URL(`${c}://${this.container.context.extension.id}/link/${ix.vk.Repository}/${g}${l}`);null!=t&&m.searchParams.set("url",t);let f=new URL(`https://${u}gitkraken.dev/link/${encodeURIComponent(Buffer.from(m.href).toString("base64"))}`);return f.searchParams.set("origin","gitlens"),f}async generateFileDeepLinkUr(e,t,i,r,s){let o=ix.vk.File,a=S.H.get("deepLinks.schemeOverride"),l=a?!0===a?n.env.uriScheme:a:"vscode",h="";"dev"===this.container.env?h="dev.":"staging"===this.container.env&&(h="staging.");let c=await this.container.git.getUniqueRepositoryId(e)??t1.E,u="";null!=r&&(1===r.length?u=`${r[0]}`:2===r.length&&(r[0]===r[1]?u=`${r[0]}`:r[0]<r[1]&&(u=`${r[0]}-${r[1]}`)));let d=new URL(`${l}://${this.container.context.extension.id}/link/${ix.vk.Repository}/${c}/${o}/${t}`);if(d.searchParams.set("url",i),""!==u&&d.searchParams.set("lines",u),null!=s)switch(s.refType){case"branch":case"tag":d.searchParams.set("ref",s.name);break;case"revision":d.searchParams.set("ref",s.ref)}let p=new URL(`https://${h}gitkraken.dev/link/${encodeURIComponent(Buffer.from(d.href).toString("base64"))}`);return p.searchParams.set("origin","gitlens"),p}};var iF=Object.defineProperty,iB=Object.getOwnPropertyDescriptor;let UriService=class UriService{constructor(e){this.container=e,this._disposable=n.window.registerUriHandler(this)}_disposable;_onDidReceiveAuthenticationUri=new n.EventEmitter;_onDidReceiveCloudIntegrationAuthenticationUri=new n.EventEmitter;get onDidReceiveAuthenticationUri(){return this._onDidReceiveAuthenticationUri.event}get onDidReceiveCloudIntegrationAuthenticationUri(){return this._onDidReceiveCloudIntegrationAuthenticationUri.event}_onDidReceiveUri=new n.EventEmitter;get onDidReceiveUri(){return this._onDidReceiveUri.event}dispose(){this._disposable.dispose()}handleUri(e){let[,t]=e.path.split("/");if(t===tC){this._onDidReceiveAuthenticationUri.fire(e);return}if(t===tY.Je){this._onDidReceiveCloudIntegrationAuthenticationUri.fire(e);return}this._onDidReceiveUri.fire(e)}};((e,t,i,r)=>{for(var s,n=r>1?void 0:r?iB(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&iF(t,i,n)})([(0,en.Rm)({args:{0:e=>e.with({query:""}).toString(!0)}})],UriService.prototype,"handleUri",1);var iL=i(9345),iU=Object.defineProperty,iW=Object.getOwnPropertyDescriptor;let RepositoriesSubscribeableNode=class RepositoriesSubscribeableNode extends iL.Y{splatted=!0;constructor(e){super("repositories",d.Bd,e)}async getSplattedChild(){return null==this.children&&await this.getChildren(),this.children?.length===1?this.children[0]:void 0}etag(){return(0,eu.L2)(this.view.container.git.etag,this.view.container.subscription.etag)}subscribe(){return n.Disposable.from((0,eE.HC)(this.view.container.git.onDidChangeRepositories,this.onRepositoriesChanged,this),(0,eE.HC)(this.view.container.subscription.onDidChange,this.onSubscriptionChanged,this))}onRepositoriesChanged(e){this.triggerChange(!0)}onSubscriptionChanged(e){e.current.plan!==e.previous.plan&&this.triggerChange(!0)}};((e,t,i,r)=>{for(var s,n=r>1?void 0:r?iW(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&iU(t,i,n)})([(0,en.Yz)()],RepositoriesSubscribeableNode.prototype,"subscribe",1);var iq=i(4118),iM=i(4160),iN=i(1051),iH=i(4178),iG=i(9573),iV=i(5677);let BranchTrackingStatusFilesNode=class BranchTrackingStatusFilesNode extends t5.eu{constructor(e,t,i,r,s){super("tracking-status-files",d.nk.fromRepoPath(r.repoPath),e,t),this.parent=t,this.branch=i,this.status=r,this.direction=s,this.updateContext({branch:i,branchStatus:r,branchStatusUpstreamType:s}),this._uniqueId=(0,t5.pF)(this.type,this.context)}get ref1(){return this.branch.ref}get ref2(){return this.status.upstream?.name}get repoPath(){return this.status.repoPath}async getFilesComparison(){let e=await this.getGroupedFiles();return{files:[...(0,eo.Tj)(e,([,e])=>e[e.length-1])],repoPath:this.repoPath,ref1:this.ref1,ref2:this.ref2,title:"ahead"===this.direction?`Changes to push to ${this.ref2}`:`Changes to pull from ${this.ref2}`}}async getGroupedFiles(){let e=await this.view.container.git.getLog(this.repoPath,{limit:0,ref:(0,v.Xn)(this.ref2,this.ref1,"behind"===this.direction?"...":"..")});if(null==e)return new Map;await Promise.allSettled((0,eo.Tj)((0,eo.pb)(e.commits.values(),e=>null==e.files),e=>e.ensureFullDetails()));let t=[...(0,eo.qI)(e.commits.values(),e=>e.files?.map(t=>({...t,commit:e}))??[])];return t.sort((e,t)=>t.commit.date.getTime()-e.commit.date.getTime()),(0,eo.Fi)(t,e=>e.path)}async getChildren(){let e=await this.getGroupedFiles(),t=[...(0,eo.Tj)(e.values(),e=>new iV.Z(this.view,this,e[e.length-1],this.repoPath,e.map(e=>e.commit),this.direction))];if("list"!==this.view.config.files.layout){let e=(0,e1.Ay)(t,e=>e.uri.relativePath.split("/"),(...e)=>(0,el.Fd)((0,el.HS)(...e)),this.view.config.files.compact);t=new iG.x(this.view,this,e,this.repoPath,"",void 0,!1).getChildren()}else t.sort((e,t)=>e.priority-t.priority||(0,L.wN)(e.label,t.label));return t}async getTreeItem(){let e=await this.view.container.git.getChangedFilesCount(this.repoPath,"behind"===this.direction?`${this.ref1}...${this.ref2}`:`${this.ref2}...`),t=e?.changedFiles??0,i=`${(0,L.td)("file",t)} changed`,r=new n.TreeItem(i,n.TreeItemCollapsibleState.Collapsed);return r.id=this.id,r.contextValue=t5.U0.BranchStatusFiles,r}};var iQ=i(4424),ij=i(9972),iz=i(8364),iY=Object.defineProperty,iK=Object.getOwnPropertyDescriptor,iJ=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?iK(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&iY(t,i,n),n};let BranchTrackingStatusNode=class BranchTrackingStatusNode extends t5.eu{constructor(e,t,i,r,s,n=!1,o){super("tracking-status",d.nk.fromRepoPath(r.repoPath),e,t),this.parent=t,this.branch=i,this.status=r,this.upstreamType=s,this.root=n,this.options=o,this.updateContext({branch:i,branchStatus:r,branchStatusUpstreamType:s,root:n}),this._uniqueId=(0,t5.pF)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}get repoPath(){return this.uri.repoPath}async getFilesComparison(){if("ahead"===this.upstreamType){let e=new BranchTrackingStatusFilesNode(this.view,this,this.branch,this.status,this.upstreamType),t=await e?.getFilesComparison();if(null==t)return;let i=this.options?.unpublishedCommits!=null?(0,eo.HV)(this.options.unpublishedCommits):void 0;if(null==i)return;let r=await this.view.container.git.resolveReference(this.repoPath,`${i}^`);return{...t,ref1:r,ref2:t.ref1,title:`Changes to push to ${t.ref2}`}}let e=(await this.getChildren()).find(e=>e.is("tracking-status-files"));return e?.getFilesComparison()}async getChildren(){let e;if("same"===this.upstreamType||"missing"===this.upstreamType||"none"===this.upstreamType)return[];let t=await this.getLog();if(null==t)return[];if("ahead"===this.upstreamType){let i=(e=[...t.commits.values()])[e.length-1];if(null==await i.getPreviousSha()){let t=await this.view.container.git.getLog(this.uri.repoPath,{limit:2,ref:i.sha});null!=t&&(e[e.length-1]=(0,eo.$1)(t.commits.values()))}}else e=t.commits.values();let i=[],r=!0;return!this.options?.showAheadCommits&&"ahead"===this.upstreamType&&this.status.upstream&&this.status.state.ahead>0?(r=!1,i.push(...await new BranchTrackingStatusFilesNode(this.view,this,this.branch,this.status,this.upstreamType).getChildren())):(i.push(...(0,iz.h)((0,eo.Tj)(e,e=>new iQ.e(this.view,this,e,"ahead"===this.upstreamType,this.branch)),this,1)),t.hasMore&&i.push(new ij.cb(this.view,this,i[i.length-1]))),r&&i.unshift(new BranchTrackingStatusFilesNode(this.view,this,this.branch,this.status,this.upstreamType)),i}async getTreeItem(){let e,t,i,r,s,o,a=0;if("missing"!==this.upstreamType&&"none"!==this.upstreamType){let e=this.view.container.git.getRepository(this.repoPath);a=await e?.getLastFetched()??0}function l(e){return`\`${this.branch.name}\` is ${(0,C.um)(this.status.upstream,this.status.state,{empty:this.status.upstream.missing?`missing upstream \`${this.status.upstream.name}\``:`up to date with \`${this.status.upstream.name}\`${e?.provider?.name?` on ${e.provider.name}`:""}`,expand:!0,icons:!0,separator:" and ",suffix:` \`${this.status.upstream.name}\`${e?.provider?.name?` on ${e.provider.name}`:""}`})}`}switch(this.upstreamType){case"ahead":{let a=await this.branch.getRemote();e=`Outgoing changes to ${a?.name??(0,p.Zq)(this.status.upstream.name)}`,t=(0,L.td)("commit",this.status.state.ahead),o=`${(0,L.td)("commit",this.status.state.ahead)} to push to \`${this.status.upstream.name}\`${a?.provider?.name?` on ${a?.provider.name}`:""}\\
${l.call(this,a)}`,i=n.TreeItemCollapsibleState.Collapsed,r=this.root?t5.U0.StatusAheadOfUpstream:t5.U0.BranchStatusAheadOfUpstream,s=new n.ThemeIcon("cloud-upload",new n.ThemeColor("gitlens.unpublishedChangesIconColor"));break}case"behind":{let a=await this.branch.getRemote();e=`Incoming changes from ${a?.name??(0,p.Zq)(this.status.upstream.name)}`,t=(0,L.td)("commit",this.status.state.behind),o=`${(0,L.td)("commit",this.status.state.behind)} to pull from \`${this.status.upstream.name}\`${a?.provider?.name?` on ${a.provider.name}`:""}\\
${l.call(this,a)}`,i=n.TreeItemCollapsibleState.Collapsed,r=this.root?t5.U0.StatusBehindUpstream:t5.U0.BranchStatusBehindUpstream,s=new n.ThemeIcon("cloud-download",new n.ThemeColor("gitlens.unpulledChangesIconColor"));break}case"same":{let h=await this.branch.getRemote();e=`Up to date with ${h?.name??(0,p.Zq)(this.status.upstream.name)}${h?.provider?.name?` on ${h.provider.name}`:""}`,t=a?`Last fetched ${(0,H.PI)(new Date(a))}`:"",o=l.call(this,h),i=n.TreeItemCollapsibleState.None,r=this.root?t5.U0.StatusSameAsUpstream:t5.U0.BranchStatusSameAsUpstream,s=new n.ThemeIcon("cloud");break}case"missing":{let a=await this.branch.getRemote();e=`Missing upstream branch${a?.provider?.name?` on ${a.provider.name}`:""}`,t=this.status.upstream.name,o=l.call(this,a),i=n.TreeItemCollapsibleState.None,r=this.root?t5.U0.StatusMissingUpstream:t5.U0.BranchStatusSameAsUpstream,s=new n.ThemeIcon("warning",new n.ThemeColor("gitlens.decorations.branchMissingUpstreamForegroundColor"));break}case"none":{let t=await this.view.container.git.getRemotesWithProviders(this.branch.repoPath),a=(0,y.zF)(t),l=a?.length?a[0].name:void 0;e=`Publish ${this.branch.name} to ${l??"a remote"}`,o=`\`${this.branch.name}\` hasn't been published to ${l??"a remote"}`,i=n.TreeItemCollapsibleState.None,r=this.root?t5.U0.StatusNoUpstream:t5.U0.BranchStatusNoUpstream,s=new n.ThemeIcon("cloud-upload",t.length?new n.ThemeColor("gitlens.unpublishedChangesIconColor"):void 0)}}let h=new n.TreeItem(e,i);h.id=this.id,h.contextValue=r,h.description=t,a&&(o+=`

Last fetched ${(0,H.PI)(new Date(a))}`),h.iconPath=s;let c=new n.MarkdownString(o,!0);return c.supportHtml=!0,c.isTrusted=!0,h.tooltip=c,h}refresh(e){e&&(this._log=void 0)}_log;async getLog(){if("same"!==this.upstreamType&&"none"!==this.upstreamType){if(null==this._log){let e="ahead"===this.upstreamType?(0,v.Xn)(this.status.upstream?.name,this.status.ref):(0,v.Xn)(this.status.ref,this.status.upstream?.name);this._log=await this.view.container.git.getLog(this.uri.repoPath,{limit:this.limit??this.view.config.defaultItemLimit,ref:e})}return this._log}}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await n.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());t?.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1)))}};iJ([(0,es.G)(),(0,en.Yz)()],BranchTrackingStatusNode.prototype,"refresh",1),iJ([(0,es.G)()],BranchTrackingStatusNode.prototype,"loadMore",1);var iZ=i(8875),iX=i(7587),i0=i(522),i1=i(1652),i2=i(4621),i3=Object.defineProperty,i4=Object.getOwnPropertyDescriptor,i8=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?i4(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&i3(t,i,n),n};let CompareBranchNode=class CompareBranchNode extends iL.Y{constructor(e,t,i,r,s,n=!1,o){super("compare-branch",e,t,i),this.parent=i,this.branch=r,this.showComparison=s,this.root=n,this.updateContext({branch:r,root:n,storedComparisonId:this.getStorageId()}),this._uniqueId=(0,t5.pF)(this.type,this.context),this.loadCompareWith(),null!=o&&this.setDefaultCompareWith(o)}_compareWith;etag(){return 0}get ahead(){return{ref1:this._compareWith?.ref||"HEAD",ref2:this.branch.ref}}get behind(){return{ref1:this.branch.ref,ref2:this._compareWith?.ref||"HEAD"}}_isFiltered;get filterByAuthors(){let e=this.getState("filterCommits"),t=!!e?.length;return null!=this._isFiltered&&this._isFiltered!==t&&this.updateContext({comparisonFiltered:t}),this._isFiltered=t,e}get repoPath(){return this.branch.repoPath}subscribe(){return(0,eE.HC)(this.view.onDidChangeNodesCheckedState,this.onNodesCheckedStateChanged,this)}onNodesCheckedStateChanged(e){let t=(0,i0.dt)(this.getStorageId());e.items.some(([e])=>e.id?.startsWith(t))&&this.storeCompareWith(!1)}async getChildren(){if(null==this._compareWith)return[];if(null==this.children){let e=this.ahead,t=this.behind,i=await this.view.container.git.getAheadBehindCommitCount(this.branch.repoPath,[(0,v.Xn)(t.ref1,t.ref2,"...")],{authors:this.filterByAuthors}),r=await this.view.container.git.getMergeBase(this.repoPath,t.ref1,t.ref2,{forkPoint:!0})??await this.view.container.git.getMergeBase(this.repoPath,t.ref1,t.ref2),s=[new i1.V(this.view,this,this.repoPath,"Behind",{query:this.getCommitsQuery((0,v.Xn)(t.ref1,t.ref2,"..")),comparison:t,direction:"behind",files:{ref1:this.compareWithWorkingTree?"":r??t.ref1,ref2:t.ref2,query:this.getBehindFilesQuery.bind(this)}},{description:(0,L.td)("commit",i?.behind??0),expand:!1}),new i1.V(this.view,this,this.repoPath,"Ahead",{query:this.getCommitsQuery((0,v.Xn)(e.ref1,this.compareWithWorkingTree?"":e.ref2,"..")),comparison:e,direction:"ahead",files:{ref1:r??e.ref1,ref2:this.compareWithWorkingTree?"":e.ref2,query:this.getAheadFilesQuery.bind(this)}},{description:(0,L.td)("commit",i?.ahead??0),expand:!1})];this.filterByAuthors?.length||s.push(new i2.o(this.view,this,this.repoPath,this._compareWith.ref||"HEAD",this.compareWithWorkingTree?"":this.branch.ref,this.getFilesQuery.bind(this),void 0,{expand:!1})),this.children=s}return this.children}getTreeItem(){let e,t,i;null==this._compareWith?(t=`Compare ${this.compareWithWorkingTree?"Working Tree":this.branch.name} with <branch, tag, or ref>`,e=n.TreeItemCollapsibleState.None,i=`Click to compare ${this.compareWithWorkingTree?"Working Tree":this.branch.name} with a branch, tag, or ref`):(t=`Compare ${this.compareWithWorkingTree?"Working Tree":this.branch.name} with ${this._compareWith.label??(0,v.pV)(this._compareWith.ref,{strings:{working:"Working Tree"}})}`,e=n.TreeItemCollapsibleState.Collapsed);let r=new n.TreeItem(t,e);return r.id=this.id,r.contextValue=`${t5.U0.CompareBranch}${this.branch.current?"+current":""}+${this.comparisonType}${null==this._compareWith?"":"+comparing"}${this.root?"+root":""}${this.filterByAuthors?.length?"+filtered":""}`,null==this._compareWith&&(r.command={title:`Compare ${this.branch.name}${this.compareWithWorkingTree?" (working)":""} with${a.EO.Ellipsis}`,command:"gitlens.views.editNode",arguments:[this]}),r.iconPath=new n.ThemeIcon("git-compare"),r.tooltip=i,r}async clear(){this._compareWith=void 0,await this.updateCompareWith(void 0),this.children=void 0,this.view.triggerNodeChange(this)}clearReviewed(){this.storeCompareWith(!0),this.triggerChange()}async edit(){await this.compareWith()}refresh(e){super.refresh(e),this.loadCompareWith()}async setComparisonType(e){null!=this._compareWith?await this.updateCompareWith({...this._compareWith,type:e,checkedFiles:void 0}):this.showComparison=e,this.children=void 0,this.view.triggerNodeChange(this)}async setDefaultCompareWith(e){null==this._compareWith&&await this.updateCompareWith(e)}get comparisonType(){return this._compareWith?.type??this.showComparison}get compareWithWorkingTree(){return"working"===this.comparisonType}async compareWith(){let e=await (0,iX.N)(this.branch.repoPath,`Compare ${this.branch.name}${this.compareWithWorkingTree?" (working)":""} with`,"Choose a reference (branch, tag, etc) to compare with",{allowRevisions:!0,picked:this.branch.ref,sort:{branches:{current:!0},tags:{}}});null==e||e instanceof iE.Fj||(await this.updateCompareWith({ref:e.ref,notation:void 0,type:this.comparisonType}),this.children=void 0,this.view.triggerNodeChange(this))}async getAheadFilesQuery(){let e=(0,v.Xn)(this._compareWith?.ref||"HEAD",this.branch.ref||"HEAD","..."),[t,i,r,s]=await Promise.allSettled([this.view.container.git.getDiffStatus(this.repoPath,e),this.compareWithWorkingTree?this.view.container.git.getDiffStatus(this.repoPath,"HEAD"):void 0,this.view.container.git.getChangedFilesCount(this.repoPath,e),this.compareWithWorkingTree?this.view.container.git.getChangedFilesCount(this.repoPath,"HEAD"):void 0]),n=(0,eh.Ro)(t)??[],o=(0,eh.Ro)(r);if(this.compareWithWorkingTree){let e=(0,eh.Ro)(i);if(null!=e){if(0===n.length)n=e;else for(let t of e){let e=n.findIndex(e=>e.path===t.path);-1!==e?n.splice(e,1,t):n.push(t)}}let t=(0,eh.Ro)(s);null!=t&&(o=null==o?t:{additions:o.additions+t.additions,deletions:o.deletions+t.deletions,changedFiles:n.length,approximated:!0})}return{label:`${(0,L.td)("file",n.length,{zero:"No"})} changed`,files:n,stats:o}}async getBehindFilesQuery(){let e=(0,v.Xn)(this.branch.ref,this._compareWith?.ref||"HEAD","..."),[t,i]=await Promise.allSettled([this.view.container.git.getDiffStatus(this.repoPath,e),this.view.container.git.getChangedFilesCount(this.repoPath,e)]),r=(0,eh.Ro)(t)??[];return{label:`${(0,L.td)("file",r.length,{zero:"No"})} changed`,files:r,stats:(0,eh.Ro)(i)}}getCommitsQuery(e){return(0,iZ.R6)(this.view.container,this.repoPath,e,this.filterByAuthors)}getFilesQuery(){let e=this.branch.ref,t=this._compareWith?.ref;return t?this.compareWithWorkingTree&&(e=""):(t=e,e=""),(0,iZ.i9)(this.view.container,this.repoPath,e,t)}getStorageId(){return`${this.branch.id}${this.branch.current?"+current":""}`}loadCompareWith(){let e=this.view.container.storage.getWorkspace("branch:comparisons"),t=this.getStorageId(),i=e?.[t];null!=i&&"string"==typeof i?this._compareWith={ref:i,notation:void 0,type:this.showComparison}:(this._compareWith=i,null!=i&&(0,i0.sV)(this.view,i.checkedFiles))}async storeCompareWith(e){let t=this.getStorageId();e&&(0,i0.pi)(this.view,t);let i=this.view.container.storage.getWorkspace("branch:comparisons");if(null==i){if(null==this._compareWith)return;i=Object.create(null)}if(null!=this._compareWith){let e=(0,i0.oI)(this.view,t);this._compareWith.checkedFiles=e,i[t]={...this._compareWith}}else{if(null==i[t])return;let{[t]:e,...r}=i;i=r}await this.view.container.storage.storeWorkspace("branch:comparisons",i)}async updateCompareWith(e){this._compareWith=e,await this.storeCompareWith(!0)}};i8([(0,en.Rm)()],CompareBranchNode.prototype,"clear",1),i8([(0,en.Rm)()],CompareBranchNode.prototype,"clearReviewed",1),i8([(0,en.Rm)()],CompareBranchNode.prototype,"edit",1),i8([(0,en.Yz)()],CompareBranchNode.prototype,"refresh",1),i8([(0,en.Rm)()],CompareBranchNode.prototype,"setComparisonType",1),i8([(0,en.Rm)()],CompareBranchNode.prototype,"setDefaultCompareWith",1);var i5=i(6861),i7=i(5329),i9=i(2441),i6=i(4414);let MergeConflictFileNode=class MergeConflictFileNode extends i7.u{constructor(e,t,i,r){super("conflict-file",d.nk.fromFile(i,r.repoPath,r.HEAD.ref),e,t,i),this.status=r}toClipboard(){return this.fileName}get baseUri(){return d.nk.fromFile(this.file,this.status.repoPath,this.status.mergeBase??"HEAD")}get fileName(){return this.file.path}getChildren(){return[new i9.N(this.view,this,this.status,this.file),new i6.a(this.view,this,this.status,this.file)]}getTreeItem(){let e=new n.TreeItem(this.label,n.TreeItemCollapsibleState.Collapsed);e.description=this.description,e.contextValue=`${t5.U0.File}+conflicted`;let t=i5.Z.fromTemplate(`\${file}\${ \u2022 changesDetail}\${\\\\
directory}\${

status}\${ (originalPath)} in Index (staged)`,this.file),i=new n.MarkdownString(t,!0);return i.isTrusted=!0,i.supportHtml=!0,e.tooltip=i,e.resourceUri=this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath),e.iconPath=n.ThemeIcon.File,e.command=this.getCommand(),this._label=void 0,this._description=void 0,e}_description;get description(){return null==this._description&&(this._description=i5.Z.fromTemplate(this.view.config.formats.files.description,this.file,{relativePath:this.relativePath})),this._description}_folderName;get folderName(){return null==this._folderName&&(this._folderName=(0,el.A3)(this.uri.relativePath)),this._folderName}_label;get label(){return null==this._label&&(this._label=i5.Z.fromTemplate(this.view.config.formats.files.label,this.file,{relativePath:this.relativePath})),this._label}get priority(){return 0}_relativePath;get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0,this._description=void 0}getCommand(){return(0,e2.Jl)("vscode.open","Open File",this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath),{preserveFocus:!0,preview:!0})}};let MergeConflictFilesNode=class MergeConflictFilesNode extends t5.eu{constructor(e,t,i,r){super("conflict-files",d.nk.fromRepoPath(i.repoPath),e,t),this.parent=t,this.status=i,this.conflicts=r}get repoPath(){return this.uri.repoPath}getChildren(){let e=this.conflicts.map(e=>new MergeConflictFileNode(this.view,this,e,this.status));if("list"!==this.view.config.files.layout){let t=(0,e1.Ay)(e,e=>e.uri.relativePath.split("/"),(...e)=>(0,el.Fd)((0,el.HS)(...e)),this.view.config.files.compact);e=new iG.x(this.view,this,t,this.repoPath,"",void 0).getChildren()}else e.sort((e,t)=>(0,L.wN)(e.label,t.label));return e}getTreeItem(){return new n.TreeItem((0,L.td)("conflict",this.conflicts.length),n.TreeItemCollapsibleState.Expanded)}};let MergeStatusNode=class MergeStatusNode extends t5.eu{constructor(e,t,i,r,s,n){super("merge-status",d.nk.fromRepoPath(r.repoPath),e,t),this.parent=t,this.branch=i,this.mergeStatus=r,this.status=s,this.root=n,this.updateContext({branch:i,root:n,status:"merging"}),this._uniqueId=(0,t5.pF)(this.type,this.context)}get repoPath(){return this.uri.repoPath}getChildren(){return this.status?.hasConflicts?[new MergeConflictFilesNode(this.view,this,this.mergeStatus,this.status.conflicts)]:[]}getTreeItem(){let e=this.status?.hasConflicts===!0,t=new n.TreeItem(`${e?"Resolve conflicts before merging":"Merging"} ${null!=this.mergeStatus.incoming?`${(0,v.M4)(this.mergeStatus.incoming,{expand:!1,icon:!1})} `:""}into ${(0,v.M4)(this.mergeStatus.current,{expand:!1,icon:!1})}`,e?n.TreeItemCollapsibleState.Expanded:n.TreeItemCollapsibleState.None);t.id=this.id,t.contextValue=t5.U0.Merge,t.description=e?(0,L.td)("conflict",this.status.conflicts.length):void 0,t.iconPath=e?new n.ThemeIcon("warning",new n.ThemeColor("gitlens.decorations.statusMergingOrRebasingConflictForegroundColor")):new n.ThemeIcon("warning",new n.ThemeColor("gitlens.decorations.statusMergingOrRebasingForegroundColor"));let i=new n.MarkdownString(`Merging ${null!=this.mergeStatus.incoming?(0,v.M4)(this.mergeStatus.incoming,{label:!1}):""}into ${(0,v.M4)(this.mergeStatus.current,{label:!1})}${e?`

Resolve ${(0,L.td)("conflict",this.status.conflicts.length)} before continuing`:""}`,!0);return i.supportHtml=!0,i.isTrusted=!0,t.tooltip=i,t.resourceUri=n.Uri.parse(`gitlens-view://status/merging${e?"/conflicts":""}`),t}};let RebaseCommitNode=class RebaseCommitNode extends iQ.e{async getTreeItem(){let e=new n.TreeItem(`Paused at commit ${this.commit.shortSha}`,this._options.expand?n.TreeItemCollapsibleState.Expanded:n.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=`${t5.U0.Commit}+rebase`,e.description=e_.c.fromTemplate("${message}",this.commit,{messageTruncateAtNewLine:!0}),e.iconPath=new n.ThemeIcon("debug-pause"),e}getTooltipTemplate(){return`Rebase paused at ${super.getTooltipTemplate()}`}};let RebaseStatusNode=class RebaseStatusNode extends t5.eu{constructor(e,t,i,r,s,n){super("rebase-status",d.nk.fromRepoPath(r.repoPath),e,t),this.parent=t,this.branch=i,this.rebaseStatus=r,this.status=s,this.root=n,this.updateContext({branch:i,root:n,status:"rebasing"}),this._uniqueId=(0,t5.pF)(this.type,this.context)}get repoPath(){return this.uri.repoPath}async getChildren(){let e=[],t=this.rebaseStatus.steps.current.commit;if(null!=t){let i=null!=t?await this.view.container.git.getCommit(this.rebaseStatus.repoPath,t.ref):void 0;null!=i&&e.push(new RebaseCommitNode(this.view,this,i))}return this.status?.hasConflicts&&e.push(new MergeConflictFilesNode(this.view,this,this.rebaseStatus,this.status.conflicts)),e}getTreeItem(){let e=this.rebaseStatus.steps.total>0,t=e&&null!=this.rebaseStatus.steps.current.commit,i=this.status?.hasConflicts===!0,r=new n.TreeItem(`${i?"Resolve conflicts to continue rebasing":e?"Rebasing":"Pending rebase of"} ${null!=this.rebaseStatus.incoming?(0,v.M4)(this.rebaseStatus.incoming,{expand:!1,icon:!1}):""} onto ${(0,v.M4)(this.rebaseStatus.current??this.rebaseStatus.onto,{expand:!1,icon:!1})}${e?` (${this.rebaseStatus.steps.current.number}/${this.rebaseStatus.steps.total})`:""}`,t?n.TreeItemCollapsibleState.Expanded:n.TreeItemCollapsibleState.None);r.id=this.id,r.contextValue=t5.U0.Rebase,r.description=i?(0,L.td)("conflict",this.status.conflicts.length):void 0,r.iconPath=i?new n.ThemeIcon("warning",new n.ThemeColor("gitlens.decorations.statusMergingOrRebasingConflictForegroundColor")):new n.ThemeIcon("warning",new n.ThemeColor("gitlens.decorations.statusMergingOrRebasingForegroundColor"));let s=new n.MarkdownString(`${e?"Rebasing":"Pending rebase of"} ${null!=this.rebaseStatus.incoming?(0,v.M4)(this.rebaseStatus.incoming,{label:!1}):""} onto ${(0,v.M4)(this.rebaseStatus.current??this.rebaseStatus.onto,{label:!1})}${e?`

Paused at step ${this.rebaseStatus.steps.current.number} of ${this.rebaseStatus.steps.total}${i?`\\
Resolve ${(0,L.td)("conflict",this.status.conflicts.length)} before continuing`:""}`:""}`,!0);return s.supportHtml=!0,s.isTrusted=!0,r.tooltip=s,r.resourceUri=n.Uri.parse(`gitlens-view://status/rebasing${i?"/conflicts":""}`),r}async openEditor(){let e=n.Uri.joinPath(this.uri,".git","rebase-merge","git-rebase-todo");await (0,e2.S4)("vscode.openWith",e,"gitlens.rebase",{preview:!1})}};var re=Object.defineProperty,rt=Object.getOwnPropertyDescriptor,ri=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?rt(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&re(t,i,n),n};let BranchNode=class BranchNode extends iH.t{constructor(e,t,i,r,s,n,o){super("branch",e,t,i),this.parent=i,this.repo=r,this.branch=s,this.root=n,this.updateContext({repository:r,branch:s,root:n}),this._uniqueId=(0,t5.pF)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this),this.options={expand:!1,limitCommits:!1,showAsCommits:!1,showComparison:!1,showCurrentOrOpened:!this.root,showStatus:!0,showTracking:!this.root,...o}}limit;options;splatted=!0;dispose(){super.dispose(),this.children=void 0}get id(){return this._uniqueId}toClipboard(){return this.branch.name}compacted=!1;get current(){return this.branch.current}get opened(){return this.context.openWorktreeBranches?.has(this.branch.name)??!1}get label(){if(this.options.showAsCommits)return"Commits";let e=this.branch.getNameWithoutRemote();return`${this.view.config.branches?.layout!=="tree"||this.compacted||this.root||this.current||this.opened||this.branch.detached||this.branch.starred?e:this.branch.getBasename()}${this.branch.rebasing?" (Rebasing)":""}`}get ref(){return this.branch}get treeHierarchy(){return this.root||this.current||this.opened||this.branch.detached||this.branch.starred?[this.branch.name]:this.branch.getNameWithoutRemote().split("/")}_children;get children(){return this._children}set children(e){this._children!==e&&((0,iN.lm)(this._children,e),this._children=e)}async getChildren(){if(null==this.children){let e,t,i=function(e){if(e?.refs?.base!=null||e?.refs?.head!=null)return{ref:e.refs.base.sha,label:`${e.refs.base.branch} (${(0,v.pV)(e.refs.base.sha)})`,notation:"...",type:"branch",checkedFiles:[]}},r=this.branch,s=0;if(this.view.config.pullRequests.enabled&&this.view.config.pullRequests.showForBranches&&(null!=r.upstream||r.remote)&&(0,er.SD)("gitlens:hasConnectedRemotes")&&void 0===(t=this.getState("pullRequest"))&&void 0===this.getState("pendingPullRequest")){e=(0,eh.v6)();let t=this.getAssociatedPullRequest(r,this.root?{include:["opened","merged"]}:void 0);queueMicrotask(async()=>{await e?.promise;let n=!1,o=setTimeout(()=>{n=!0,this.view.triggerNodeChange(this)},250),a=await t;if(clearTimeout(o),null!=a&&null!=this.children&&(this.children.splice(s,0,new t7.X(this.view,this,a,r)),a?.refs?.base!=null&&a?.refs?.head!=null)){let e=this.children.find(e=>e.is("compare-branch"));if(null!=e){let t=i(a);null!=t&&await e.setDefaultCompareWith(t)}}(n||null!=a)&&this.view.triggerNodeChange(this.root?this.parent??this:this)})}let[n,o,l,h,c,u]=await Promise.allSettled([this.getLog(),this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath,r.name),this.options.showStatus&&r.current?this.view.container.git.getStatusForRepo(this.uri.repoPath):void 0,this.options.showStatus&&r.current?this.view.container.git.getMergeStatus(this.uri.repoPath):void 0,this.options.showStatus?this.view.container.git.getRebaseStatus(this.uri.repoPath):void 0,r.remote?void 0:this.view.container.git.getBranchAheadRange(r).then(e=>e?this.view.container.git.getLogRefsOnly(this.uri.repoPath,{limit:0,ref:e,merges:this.options.showMergeCommits}):void 0)]),d=(0,eh.Ro)(n);if(null==d)return[new ij.S2(this.view,this,"No commits could be found.")];let p=[],g=(0,eh.Ro)(l),m=(0,eh.Ro)(h),f=(0,eh.Ro)(c),w=(0,eh.Ro)(u);if(null!=t&&p.push(new t7.X(this.view,this,t,r)),this.options.showStatus&&null!=m)p.push(new MergeStatusNode(this.view,this,r,m,g??await this.view.container.git.getStatusForRepo(this.uri.repoPath),this.root));else if(this.options.showStatus&&null!=f&&(r.current||r.name===f.incoming.name))p.push(new RebaseStatusNode(this.view,this,r,f,g??await this.view.container.git.getStatusForRepo(this.uri.repoPath),this.root));else if(this.options.showTracking){let e={ref:r.ref,repoPath:r.repoPath,state:r.state,upstream:r.upstream};null!=r.upstream?this.root&&r.upstream.missing?p.push(new BranchTrackingStatusNode(this.view,this,r,e,"missing",this.root)):!this.root||e.state.behind||e.state.ahead?(e.state.behind&&p.push(new BranchTrackingStatusNode(this.view,this,r,e,"behind",this.root)),e.state.ahead&&p.push(new BranchTrackingStatusNode(this.view,this,r,e,"ahead",this.root,{unpublishedCommits:w}))):p.push(new BranchTrackingStatusNode(this.view,this,r,e,"same",this.root)):r.detached||p.push(new BranchTrackingStatusNode(this.view,this,r,e,"none",this.root))}s=0,!1!==this.options.showComparison&&"remotes"!==this.view.type&&p.push(new CompareBranchNode(this.uri,this.view,this,r,this.options.showComparison,this.splatted,i(t))),0!==p.length&&p.push(new ij.S2(this.view,this,"",a.EO.Dash.repeat(2),""));let y=(0,eh.Ro)(o);p.push(...(0,iz.h)((0,eo.Tj)(d.commits.values(),e=>new iQ.e(this.view,this,e,w?.has(e.ref),r,y)),this)),d.hasMore&&p.push(new ij.cb(this.view,this,p[p.length-1],{getCount:()=>this.view.container.git.getCommitCount(r.repoPath,r.name)})),this.children=p,setTimeout(()=>e?.fulfill(),1)}return this.children}async getTreeItem(){let e,t;this.splatted=!1;let i=`${this.current?"Current branch\\\n":this.opened?"Current branch in an opened worktree\\\n":""}\`${this.branch.getNameWithoutRemote()}\`${this.branch.rebasing?" (Rebasing)":""}`,r=t5.U0.Branch;this.current&&(r+="+current"),this.branch.remote&&(r+="+remote"),this.branch.starred&&(r+="+starred"),null==this.branch.upstream||this.branch.upstream.missing||(r+="+tracking"),this.options.showAsCommits&&(r+="+commits"),this.repo.closed&&(r+="+closed");let s="";if(!this.branch.remote){if(null!=this.branch.upstream){let o=a.EO.Dash,l=await this.branch.getRemote();if(this.branch.upstream.missing)o=a.EO.Warning;else if(null!=l){let e,t;for(let{type:i}of l.urls)if("fetch"===i){if(e=!0,t)break}else if("push"===i&&(t=!0,e))break;e&&t?o=a.EO.ArrowsRightLeft:t?o=a.EO.ArrowRight:e&&(o=a.EO.ArrowLeft)}t=this.options.showAsCommits?`${this.branch.getTrackingStatus({suffix:(0,L.eV)(a.EO.Dot,1,1)})}${this.branch.getNameWithoutRemote()}${this.branch.rebasing?" (Rebasing)":""}${(0,L.eV)(o,2,2)}${this.branch.upstream.name}`:`${this.branch.getTrackingStatus({suffix:`${a.EO.Space} `})}${o}${a.EO.Space} ${this.branch.upstream.name}`,i+=` is ${this.branch.getTrackingStatus({empty:this.branch.upstream.missing?`missing upstream \`${this.branch.upstream.name}\``:`up to date with \`${this.branch.upstream.name}\`${l?.provider?.name?` on ${l.provider.name}`:""}`,expand:!0,icons:!0,separator:" and ",suffix:` \`${this.branch.upstream.name}\`${l?.provider?.name?` on ${l.provider.name}`:""}`})}`,(this.branch.state.ahead||this.branch.state.behind)&&(this.branch.state.ahead&&(r+="+ahead",e=new n.ThemeColor("gitlens.decorations.branchAheadForegroundColor"),s="-green"),this.branch.state.behind&&(r+="+behind",this.branch.state.ahead?(e=new n.ThemeColor("gitlens.decorations.branchDivergedForegroundColor"),s="-yellow"):(e=new n.ThemeColor("gitlens.decorations.branchBehindForegroundColor"),s="-red")))}else{let e=(0,y.zF)(await this.view.container.git.getRemotesWithProviders(this.branch.repoPath)),t=e?.length?e[0].name:void 0;i+=` hasn't been published to ${t??"a remote"}`}}null!=this.branch.date&&(t=`${t?`${t}${(0,L.eV)(a.EO.Dot,2,2)}`:""}${this.branch.formattedDate}`,i+=`

Last commit ${this.branch.formatDateFromNow()} (${this.branch.formatDate(this.view.container.BranchDateFormatting.dateFormat)})`),(i=new n.MarkdownString(i,!0)).supportHtml=!0,i.isTrusted=!0,this.branch.starred&&i.appendMarkdown("\\\n$(star-full) Favorited");let o=this.getState("pendingPullRequest");null!=o&&i.appendMarkdown(`

$(loading~spin) Loading associated pull request${a.EO.Ellipsis}`);let l=new n.TreeItem(this.label,this.options.expand?n.TreeItemCollapsibleState.Expanded:n.TreeItemCollapsibleState.Collapsed);l.id=this.id,l.contextValue=r,l.description=t,l.iconPath=null!=o?new n.ThemeIcon("loading~spin"):this.options.showAsCommits?new n.ThemeIcon("git-commit",e):{dark:this.view.container.context.asAbsolutePath(`images/dark/icon-branch${s}.svg`),light:this.view.container.context.asAbsolutePath(`images/light/icon-branch${s}.svg`)},l.tooltip=i;let h=new URLSearchParams;return h.set("status",await this.branch.getStatus()),this.options.showCurrentOrOpened&&(this.current?h.set("current","true"):this.opened&&h.set("opened","true")),l.resourceUri=n.Uri.parse(`gitlens-view://branch?${h.toString()}`),l}async star(){await this.branch.star(),this.view.refresh(!0)}async unstar(){await this.branch.unstar(),this.view.refresh(!0)}refresh(e){super.refresh?.(e),this.children=void 0,e&&(this._log=void 0,this.deleteState())}async getAssociatedPullRequest(e,t){let i=this.getState("pullRequest");if(void 0!==i)return Promise.resolve(i??void 0);let r=this.getState("pendingPullRequest");return null==r?(r=e.getAssociatedPullRequest(t),this.storeState("pendingPullRequest",r),i=await r,this.storeState("pullRequest",i??null),this.deleteState("pendingPullRequest"),i):r}_log;async getLog(){if(null==this._log){let e=this.limit??(this.root&&!this.options.limitCommits?this.view.config.pageItemLimit:this.view.config.defaultItemLimit);0!==e&&this.branch.state.ahead>e&&(e=Math.min(this.branch.state.ahead+1,2*e)),this._log=await this.view.container.git.getLog(this.uri.repoPath,{limit:e,ref:this.ref.ref,authors:this.options?.authors,merges:this.options?.showMergeCommits})}return this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await n.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());t?.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.children=void 0,this.triggerChange(!1)))}};ri([(0,en.Rm)()],BranchNode.prototype,"star",1),ri([(0,en.Rm)()],BranchNode.prototype,"unstar",1),ri([(0,es.G)()],BranchNode.prototype,"loadMore",1);let BranchOrTagFolderNode=class BranchOrTagFolderNode extends t5.eu{constructor(e,t,i,r,s,n,o,a=!1){super("branch-tag-folder",d.nk.fromRepoPath(s),e,t),this.parent=t,this.folderType=i,this.root=r,this.repoPath=s,this.folderName=n,this.relativePath=o,this._expand=a,this._uniqueId=(0,t5.pF)(`${this.type}+${i}+${o??n}`,this.context)}get id(){return this._uniqueId}toClipboard(){return this.folderName}getChildren(){if(void 0===this.root.descendants||void 0===this.root.children)return[];let e=[];for(let t of this.root.children.values()){if(void 0===t.value){let i=t.descendants?.some(e=>e.is("branch")&&(e.current||e.opened));e.push(new BranchOrTagFolderNode(this.view,this.folderName?this:this.parent,this.folderType,t,this.repoPath,t.name,t.relativePath,i));continue}t.value.parent=this.folderName?this:this.parent,e.push(t.value)}return e}getTreeItem(){let e=new n.TreeItem(this.label,this._expand?n.TreeItemCollapsibleState.Expanded:n.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=t5.U0.Folder,e.iconPath=n.ThemeIcon.Folder,e.tooltip=this.label,e}get label(){return this.folderName}};var rr=Object.defineProperty,rs=Object.getOwnPropertyDescriptor;let BranchesNode=class BranchesNode extends iM.l{constructor(e,t,i,r){super("branches",e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,t5.pF)(this.type,this.context)}get id(){return this._uniqueId}get repoPath(){return this.repo.path}async getChildren(){if(null==this.children){let e=await this.repo.getBranches({filter:e=>!e.remote,sort:{current:!1}});if(0===e.values.length)return[new ij.S2(this.view,this,"No branches could be found.")];let t=e.values.map(e=>new BranchNode(d.nk.fromRepoPath(this.uri.repoPath,e.ref),this.view,this,this.repo,e,!1,{showComparison:"repositories"===this.view.type?this.view.config.branches.showBranchComparison:this.view.config.showBranchComparison}));if("list"===this.view.config.branches.layout)return t;let i=(0,e1.Ay)(t,e=>e.treeHierarchy,(...e)=>e.join("/"),this.view.config.files.compact,e=>(e.compacted=!0,!0)),r=new BranchOrTagFolderNode(this.view,this,"branch",i,this.repo.path,"",void 0);this.children=r.getChildren()}return this.children}async getTreeItem(){let e=new n.TreeItem("Branches",n.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=t5.U0.Branches,await this.repo.hasRemotes()&&(e.contextValue+="+remotes"),this.repo.closed&&(e.contextValue+="+closed"),e.iconPath=new n.ThemeIcon("git-branch"),e}refresh(){super.refresh(!0)}};((e,t,i,r)=>{for(var s,n=r>1?void 0:r?rs(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&rr(t,i,n)})([(0,en.Yz)()],BranchesNode.prototype,"refresh",1);var rn=i(1885),ro=i(3708),ra=i(7531),rl=i(3161),rh=i(300),rc=i(2013),ru=i(8880),rd=i(304),rp=i(103),rg=i(8890),rm=Object.defineProperty,rf=Object.getOwnPropertyDescriptor,rw=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?rf(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&rm(t,i,n),n};function rv(e,t,i,r=!1){return(0,e2.Lb)(e,(...e)=>{if(r){let[s,n,...o]=e;if(s instanceof t5.eu&&Array.isArray(n)&&n[0]instanceof t5.eu){let e=n.filter(e=>e?.constructor===s.constructor);return"sequential"===r?(e.includes(s)||e.splice(0,0,s),(0,eu.An)(t,e.map(e=>[e,...o]),i)):t.apply(i,[s,e,...o])}}return t.apply(i,e)},i)}let ViewCommands=class ViewCommands{constructor(e){this.container=e,rv("gitlens.views.clearComparison",e=>this.clearComparison(e),this),rv("gitlens.views.clearReviewed",e=>this.clearReviewed(e),this),rv(a.Ts.ViewsCopy,(0,eu.OH)(ry,"text"),this,!0),rv(a.Ts.ViewsCopyAsMarkdown,(0,eu.OH)(ry,"markdown"),this,!0),rv(a.Ts.ViewsCopyUrl,rb,this),rv(`${a.Ts.ViewsCopyUrl}.multi`,rb,this,!0),rv(a.Ts.ViewsOpenUrl,rC,this),rv(`${a.Ts.ViewsOpenUrl}.multi`,rC,this,!0),rv("gitlens.views.collapseNode",()=>(0,e2.S4)("list.collapseAllToFocus"),this),rv("gitlens.views.dismissNode",e=>(0,t5.sr)(e.view)&&e.view.dismissNode(e),this),rv("gitlens.views.editNode",e=>(0,t5.jZ)(e)&&e.edit(),this),rv("gitlens.views.expandNode",e=>e.view.reveal(e,{select:!1,focus:!1,expand:3}),this),rv("gitlens.views.loadMoreChildren",e=>e.loadMore(),this),rv("gitlens.views.loadAllChildren",e=>e.loadAll(),this),rv("gitlens.views.refreshNode",(e,t)=>(null==t&&(0,t5.DQ)(e)&&(e.limit=void 0,e.view.resetNodeLastKnownLimit(e)),e.view.refreshNode(e,null==t||t)),this,"sequential"),rv("gitlens.views.setShowRelativeDateMarkersOn",()=>this.setShowRelativeDateMarkers(!0),this),rv("gitlens.views.setShowRelativeDateMarkersOff",()=>this.setShowRelativeDateMarkers(!1),this),rv("gitlens.views.fetch",this.fetch,this),rv("gitlens.views.publishBranch",this.publishBranch,this),rv("gitlens.views.publishRepository",this.publishRepository,this),rv("gitlens.views.pull",this.pull,this),rv("gitlens.views.push",this.push,this),rv("gitlens.views.pushWithForce",e=>this.push(e,!0),this),rv("gitlens.views.closeRepository",this.closeRepository,this),rv("gitlens.views.setAsDefault",this.setAsDefault,this),rv("gitlens.views.unsetAsDefault",this.unsetAsDefault,this),rv("gitlens.views.openInTerminal",this.openInTerminal,this),rv("gitlens.views.openInIntegratedTerminal",this.openInIntegratedTerminal,this),rv("gitlens.views.star",this.star,this),rv("gitlens.views.star.multi",this.star,this,"sequential"),rv("gitlens.views.unstar",this.unstar,this),rv("gitlens.views.unstar.multi",this.unstar,this,"sequential"),rv("gitlens.views.browseRepoAtRevision",this.browseRepoAtRevision,this),rv("gitlens.views.browseRepoAtRevisionInNewWindow",e=>this.browseRepoAtRevision(e,{openInNewWindow:!0}),this),rv("gitlens.views.browseRepoBeforeRevision",e=>this.browseRepoAtRevision(e,{before:!0}),this),rv("gitlens.views.browseRepoBeforeRevisionInNewWindow",e=>this.browseRepoAtRevision(e,{before:!0,openInNewWindow:!0}),this),rv("gitlens.views.addAuthors",this.addAuthors,this),rv("gitlens.views.addAuthor",this.addAuthor,this),rv("gitlens.views.addAuthor.multi",this.addAuthor,this,!0),rv("gitlens.views.openBranchOnRemote",e=>(0,e2.RS)(a.Ts.OpenBranchOnRemote,e),this),rv("gitlens.views.openBranchOnRemote.multi",e=>(0,e2.RS)(a.Ts.OpenBranchOnRemote,e),this,"sequential"),rv("gitlens.views.copyRemoteCommitUrl",(e,t)=>this.openCommitOnRemote(e,t,!0),this),rv("gitlens.views.copyRemoteCommitUrl.multi",(e,t)=>this.openCommitOnRemote(e,t,!0),this),rv("gitlens.views.openCommitOnRemote",(e,t)=>this.openCommitOnRemote(e,t),this),rv("gitlens.views.openCommitOnRemote.multi",(e,t)=>this.openCommitOnRemote(e,t),this),rv("gitlens.views.openChanges",this.openChanges,this),rv("gitlens.views.openChangesWithWorking",this.openChangesWithWorking,this),rv("gitlens.views.openPreviousChangesWithWorking",this.openPreviousChangesWithWorking,this),rv("gitlens.views.openFile",this.openFile,this),rv("gitlens.views.openFileRevision",this.openRevision,this),rv("gitlens.views.openChangedFiles",this.openFiles,this),rv("gitlens.views.openOnlyChangedFiles",this.openOnlyChangedFiles),rv("gitlens.views.openChangedFileDiffs",(e,t)=>this.openAllChanges(e,t),this),rv("gitlens.views.openChangedFileDiffsWithWorking",(e,t)=>this.openAllChangesWithWorking(e,t),this),rv("gitlens.views.openChangedFileDiffsIndividually",(e,t)=>this.openAllChanges(e,t,!0),this),rv("gitlens.views.openChangedFileDiffsWithWorkingIndividually",(e,t)=>this.openAllChangesWithWorking(e,t,!0),this),rv("gitlens.views.openChangedFileRevisions",this.openRevisions,this),rv("gitlens.views.applyChanges",this.applyChanges,this),rv("gitlens.views.highlightChanges",this.highlightChanges,this),rv("gitlens.views.highlightRevisionChanges",this.highlightRevisionChanges,this),rv("gitlens.views.restore",this.restore,this),rv("gitlens.views.switchToAnotherBranch",this.switch,this),rv("gitlens.views.switchToBranch",this.switchTo,this),rv("gitlens.views.switchToCommit",this.switchTo,this),rv("gitlens.views.switchToTag",this.switchTo,this),rv("gitlens.views.addRemote",this.addRemote,this),rv("gitlens.views.pruneRemote",this.pruneRemote,this),rv("gitlens.views.removeRemote",this.removeRemote,this),rv("gitlens.views.stageDirectory",this.stageDirectory,this),rv("gitlens.views.stageFile",this.stageFile,this),rv("gitlens.views.unstageDirectory",this.unstageDirectory,this),rv("gitlens.views.unstageFile",this.unstageFile,this),rv("gitlens.views.openChangedFileDiffsWithMergeBase",this.openChangedFileDiffsWithMergeBase,this),rv("gitlens.views.compareAncestryWithWorking",this.compareAncestryWithWorking,this),rv("gitlens.views.compareWithHead",this.compareHeadWith,this),rv("gitlens.views.compareWithMergeBase",this.compareWithMergeBase,this),rv("gitlens.views.compareWithUpstream",this.compareWithUpstream,this),rv("gitlens.views.compareWithSelected",this.compareWithSelected,this),rv("gitlens.views.selectForCompare",this.selectForCompare,this),rv("gitlens.views.compareFileWithSelected",this.compareFileWithSelected,this),rv("gitlens.views.selectFileForCompare",this.selectFileForCompare,this),rv("gitlens.views.compareWithWorking",this.compareWorkingWith,this),rv("gitlens.views.setBranchComparisonToWorking",e=>this.setBranchComparison(e,"working"),this),rv("gitlens.views.setBranchComparisonToBranch",e=>this.setBranchComparison(e,"branch"),this),rv("gitlens.views.cherryPick",this.cherryPick,this),rv("gitlens.views.cherryPick.multi",this.cherryPick,this,!0),rv("gitlens.views.title.createBranch",()=>this.createBranch()),rv("gitlens.views.createBranch",this.createBranch,this),rv("gitlens.views.deleteBranch",this.deleteBranch,this),rv("gitlens.views.deleteBranch.multi",this.deleteBranch,this,!0),rv("gitlens.views.renameBranch",this.renameBranch,this),rv("gitlens.views.stash.apply",this.applyStash,this),rv("gitlens.views.stash.delete",this.deleteStash,this),rv("gitlens.views.stash.delete.multi",this.deleteStash,this,!0),rv("gitlens.views.stash.rename",this.renameStash,this),rv("gitlens.views.title.createTag",()=>this.createTag()),rv("gitlens.views.createTag",this.createTag,this),rv("gitlens.views.deleteTag",this.deleteTag,this),rv("gitlens.views.deleteTag.multi",this.deleteTag,this,!0),rv("gitlens.views.mergeBranchInto",this.merge,this),rv("gitlens.views.pushToCommit",this.pushToCommit,this),rv("gitlens.views.rebaseOntoBranch",this.rebase,this),rv("gitlens.views.rebaseOntoUpstream",this.rebaseToRemote,this),rv("gitlens.views.rebaseOntoCommit",this.rebase,this),rv("gitlens.views.resetCommit",this.resetCommit,this),rv("gitlens.views.resetToCommit",this.resetToCommit,this),rv("gitlens.views.resetToTip",this.resetToTip,this),rv("gitlens.views.revert",this.revert,this),rv("gitlens.views.undoCommit",this.undoCommit,this),rv("gitlens.views.createPullRequest",this.createPullRequest,this),rv("gitlens.views.openPullRequest",this.openPullRequest,this),rv("gitlens.views.openPullRequestChanges",this.openPullRequestChanges,this),rv("gitlens.views.openPullRequestComparison",this.openPullRequestComparison,this),rv("gitlens.views.draft.open",this.openDraft,this),rv("gitlens.views.draft.openOnWeb",this.openDraftOnWeb,this),rv("gitlens.views.title.createWorktree",()=>this.createWorktree()),rv("gitlens.views.createWorktree",this.createWorktree,this),rv("gitlens.views.deleteWorktree",this.deleteWorktree,this),rv("gitlens.views.deleteWorktree.multi",this.deleteWorktree,this,!0),rv("gitlens.views.openWorktree",this.openWorktree,this),rv("gitlens.views.revealRepositoryInExplorer",this.revealRepositoryInExplorer,this),rv("gitlens.views.revealWorktreeInExplorer",this.revealWorktreeInExplorer,this),rv("gitlens.views.openWorktreeInNewWindow",e=>this.openWorktree(e,void 0,{location:"newWindow"}),this),rv("gitlens.views.openWorktreeInNewWindow.multi",(e,t)=>this.openWorktree(e,t,{location:"newWindow"}),this,!0),rv("gitlens.views.setResultsCommitsFilterAuthors",e=>this.setResultsCommitsFilter(e,!0),this),rv("gitlens.views.setResultsCommitsFilterOff",e=>this.setResultsCommitsFilter(e,!1),this)}addAuthors(e){return ro.s((0,t5.K2)(e))}addAuthor(e,t){if(!e?.is("contributor"))return Promise.resolve();let i=t?.length?t.map(e=>e.contributor):[e.contributor];return ro.s(e.repoPath,i.filter(e=>!e.current))}addRemote(e){return ra.WQ((0,t5.K2)(e))}applyChanges(e){return e.is("results-file")?iI.YF(e.file,(0,v.kA)(e.ref1,e.repoPath),(0,v.kA)(e.ref2,e.repoPath)):e instanceof iH.p&&null!=e.ref&&"HEAD"!==e.ref.ref?iI.YF(e.file,e.ref):Promise.resolve()}applyStash(e){return e.is("stash")?rh.Bb(e.repoPath,e.commit):Promise.resolve()}browseRepoAtRevision(e,t){return e instanceof iH.t||e instanceof iH.p?(0,i_.V)(e.uri,{before:t?.before,openInNewWindow:t?.openInNewWindow}):Promise.resolve()}cherryPick(e,t){if(!e.is("commit"))return Promise.resolve();let i=t?.length?t.map(e=>e.ref):[e.ref];return rl.$T(e.repoPath,i)}clearComparison(e){e.is("compare-branch")&&e.clear()}clearReviewed(e){let t;if(e.is("results-files")){if(null==(t=e.getParent()))return}else t=e;t.isAny("compare-branch","compare-results")&&t.clearReviewed()}closeRepository(e){e.isAny("repository","repo-folder")&&(e.repo.closed=!0)}async createBranch(e){let t=e instanceof iH.t||e instanceof iH.p?e?.ref:e?.is("tracking-status")?e.branch:void 0;return null==t&&(t=await this.container.git.getBranch(e?.repoPath??this.container.git.getBestRepository()?.uri)),rn.vt(e?.repoPath,t)}async createPullRequest(e){if(!e.isAny("branch","tracking-status"))return Promise.resolve();let t=await e.branch.getRemote();return(0,e2.ph)("createPullRequest",{repoPath:e.repoPath,remote:null!=t?{name:t.name,provider:null!=t.provider?{id:t.provider.id,name:t.provider.name,domain:t.provider.domain}:void 0,url:t.url}:void 0,branch:{name:e.branch.name,upstream:e.branch.upstream?.name,isRemote:e.branch.remote}})}async createTag(e){let t=e instanceof iH.t||e instanceof iH.p?e?.ref:e?.is("tracking-status")?e.branch:void 0;return null==t&&(t=await this.container.git.getBranch(e?.repoPath??this.container.git.getBestRepository()?.uri)),rc.vt(e?.repoPath,t)}async createWorktree(e){if(e?.is("worktrees")&&(e=void 0),null==e||e.is("branch"))return ru.vt(e?.repoPath,void 0,e?.ref)}deleteBranch(e,t){if(!e.is("branch"))return Promise.resolve();let i=t?.length?t.map(e=>e.branch):[e.branch];return rn.TF(e.repoPath,i)}deleteStash(e,t){if(!e.is("stash"))return Promise.resolve();let i=t?.length?t.map(e=>e.commit):[e.commit];return rh.gv(e.repoPath,i)}renameStash(e){return e.is("stash")?rh.$w(e.repoPath,e.commit):Promise.resolve()}deleteTag(e,t){if(!e.is("tag"))return Promise.resolve();let i=t?.length?t.map(e=>e.tag):[e.tag];return rc.TF(e.repoPath,i)}async deleteWorktree(e,t){if(!e.is("worktree"))return;let i=(t?.length?t.map(e=>e.worktree):[e.worktree]).filter(e=>!e.main&&!e.opened).map(e=>e.uri);return ru.TF(e.repoPath,i)}fetch(e){return e.isAny("repository","repo-folder")?rl.hd(e.repo):e.is("remote")?ra.hd(e.remote.repoPath,e.remote.name):e.isAny("branch","tracking-status")?rl.hd(e.repoPath,e.root?void 0:e.branch):Promise.resolve()}async highlightChanges(e){e.isAny("commit-file","stash-file","file-commit","results-file")&&(await this.openFile(e,{preserveFocus:!0,preview:!0}),await this.container.fileAnnotations.toggle(n.window.activeTextEditor,"changes",{sha:e.ref.ref},!0))}async highlightRevisionChanges(e){e.isAny("commit-file","stash-file","file-commit","results-file")&&(await this.openFile(e,{preserveFocus:!0,preview:!0}),await this.container.fileAnnotations.toggle(n.window.activeTextEditor,"changes",{sha:e.ref.ref,only:!0},!0))}merge(e){return e.isAny("branch","tag")?rl.h1(e.repoPath,e.is("branch")?e.branch:e.tag):Promise.resolve()}openInTerminal(e){return e.isAny("tracking-status","repository","repo-folder")?(0,e2.S4)("openInTerminal",n.Uri.file(e.repoPath)):Promise.resolve()}openInIntegratedTerminal(e){return e.isAny("tracking-status","repository","repo-folder")?(0,e2.S4)("openInIntegratedTerminal",n.Uri.file(e.repoPath)):Promise.resolve()}openPullRequest(e){return e.is("pullrequest")?(0,e2.ph)("openPullRequest",{repoPath:e.uri.repoPath,provider:{id:e.pullRequest.provider.id,name:e.pullRequest.provider.name,domain:e.pullRequest.provider.domain},pullRequest:{id:e.pullRequest.id,url:e.pullRequest.url}}):Promise.resolve()}async openPullRequestChanges(e){if(!e.is("pullrequest")||e.pullRequest.refs?.base==null||null==e.pullRequest.refs.head)return Promise.resolve();let t=await (0,rd.tI)(this.container,e.repoPath,e.pullRequest.refs);return iI.$5(this.container,{repoPath:t.repoPath,lhs:t.base.ref,rhs:t.head.ref},{title:`Changes in Pull Request #${e.pullRequest.id}`})}async openPullRequestComparison(e){if(!e.is("pullrequest")||e.pullRequest.refs?.base==null||null==e.pullRequest.refs.head)return Promise.resolve();let t=await (0,rd.tI)(this.container,e.repoPath,e.pullRequest.refs);return this.container.searchAndCompareView.compare(t.repoPath,t.head,t.base)}async openDraft(e){await (0,rp.X)({mode:"view",draft:e.draft})}async openDraftOnWeb(e){let t=this.container.drafts.generateWebUrl(e.draft);await (0,ed.CZ)(t)}async openWorktree(e,t,i){let r;if(e.is("worktree")){if(t?.length&&i?.location==="newWindow"){let e={folders:t.map(e=>({name:e.worktree.name,path:e.worktree.uri.fsPath})),settings:{}};r=n.Uri.file((0,eV.ZR)(`worktrees-${Date.now()}.code-workspace`)),await n.workspace.fs.writeFile(r,new TextEncoder().encode(JSON.stringify(e,null,2)))}else r=e.worktree.uri;(0,ed.OH)(r,i)}}pruneRemote(e){return e.is("remote")?ra.R3(e.remote.repoPath,e.remote.name):Promise.resolve()}async removeRemote(e){return e.is("remote")?ra.TF(e.remote.repoPath,e.remote.name):Promise.resolve()}publishBranch(e){return e.isAny("branch","tracking-status")?rl.VC(e.repoPath,void 0,e.branch):Promise.resolve()}publishRepository(e){return e.isAny("branch","tracking-status")?(0,e2.wS)("git.publish",n.Uri.file(e.repoPath)):Promise.resolve()}pull(e){return e.isAny("repository","repo-folder")?rl.a$(e.repo):e.isAny("branch","tracking-status")?rl.a$(e.repoPath,e.root?void 0:e.branch):Promise.resolve()}push(e,t){return e.isAny("repository","repo-folder")?rl.VC(e.repo,t):e.isAny("branch","tracking-status")?rl.VC(e.repoPath,t,e.root?void 0:e.branch):e.isAny("commit","file-commit")?e.isTip?rl.VC(e.repoPath,t):this.pushToCommit(e):Promise.resolve()}pushToCommit(e){return e.isAny("commit","file-commit")?rl.VC(e.repoPath,!1,e.commit):Promise.resolve()}rebase(e){return e.isAny("branch","commit","file-commit","tag")?rl.RU(e.repoPath,e.ref):Promise.resolve()}rebaseToRemote(e){if(!e.isAny("branch","tracking-status"))return Promise.resolve();let t=e.is("branch")?e.branch.upstream?.name:e.status.upstream?.name;return null==t?Promise.resolve():rl.RU(e.repoPath,(0,v.kA)(t,e.repoPath,{refType:"branch",name:t,remote:!0}))}renameBranch(e){return e.is("branch")?rn.$w(e.repoPath,e.branch):Promise.resolve()}resetCommit(e){return e.isAny("commit","file-commit")?rl.cL(e.repoPath,(0,v.kA)(`${e.ref.ref}^`,e.ref.repoPath,{refType:"revision",name:`${e.ref.name}^`,message:e.ref.message})):Promise.resolve()}resetToCommit(e){return e.isAny("commit","file-commit")?rl.cL(e.repoPath,e.ref):Promise.resolve()}resetToTip(e){return e.is("branch")?rl.cL(e.repoPath,(0,v.kA)(e.ref.ref,e.repoPath,{refType:"revision",name:e.ref.name})):Promise.resolve()}restore(e){return e instanceof iH.p?iI.VX(e.file,e.ref):Promise.resolve()}revealRepositoryInExplorer(e){if(e.is("repository"))return(0,ed.mP)(e.repo.uri)}revealWorktreeInExplorer(e){if(e.is("worktree"))return(0,ed.mP)(e.worktree.uri)}revert(e){return e.isAny("commit","file-commit")?rl.ru(e.repoPath,e.ref):Promise.resolve()}setAsDefault(e){return e.is("remote")?e.setAsDefault():Promise.resolve()}setBranchComparison(e,t){if(e.is("compare-branch"))return e.setComparisonType(t)}setShowRelativeDateMarkers(e){return S.H.updateEffective("views.showRelativeDateMarkers",e)}async stageFile(e){(e.isAny("commit-file","file-commit")||e.is("status-file"))&&(await this.container.git.stageFile(e.repoPath,e.file.path),e.triggerChange())}async stageDirectory(e){e.is("folder")&&e.relativePath&&(await this.container.git.stageDirectory(e.repoPath,e.relativePath),e.triggerChange())}star(e){return e.isAny("branch","repository","repo-folder")?e.star():Promise.resolve()}switch(e){return rl.S_((0,t5.K2)(e))}switchTo(e){return e instanceof iH.t?rl.S_(e.repoPath,e.is("branch")&&e.branch.current?void 0:e.ref):rl.S_((0,t5.K2)(e))}async undoCommit(e){e.isAny("commit","file-commit")&&await iI.MQ(this.container,e.ref)}unsetAsDefault(e){return e.is("remote")?e.setAsDefault(!1):Promise.resolve()}async unstageFile(e){e.isAny("commit-file","file-commit","status-file")&&(await this.container.git.unstageFile(e.repoPath,e.file.path),e.triggerChange())}async unstageDirectory(e){e.is("folder")&&e.relativePath&&(await this.container.git.unstageDirectory(e.repoPath,e.relativePath),e.triggerChange())}unstar(e){return e.isAny("branch","repository","repo-folder")?e.unstar():Promise.resolve()}compareHeadWith(e){return e instanceof iH.p?this.compareFileWith(e.repoPath,e.uri,e.ref.ref,void 0,"HEAD"):e instanceof iH.t?this.container.searchAndCompareView.compare(e.repoPath,"HEAD",e.ref):Promise.resolve()}async compareWithMergeBase(e){if(!e.is("branch"))return Promise.resolve();let t=await this.container.git.getBranch(e.repoPath);if(null==t)return;let i=await this.container.git.getMergeBase(e.repoPath,t.ref,e.ref.ref);if(null!=i)return this.container.searchAndCompareView.compare(e.repoPath,e.ref.ref,{ref:i,label:`${t.ref} (${(0,v.pV)(i)})`})}async openChangedFileDiffsWithMergeBase(e){if(!e.is("branch"))return Promise.resolve();let t=await this.container.git.getBranch(e.repoPath);if(null==t)return;let i=await this.container.git.getMergeBase(e.repoPath,t.ref,e.ref.ref);if(null!=i)return iI.$5(this.container,{repoPath:e.repoPath,lhs:i,rhs:e.ref.ref},{title:`Changes between ${t.ref} (${(0,v.pV)(i)}) ${a.EO.ArrowLeftRightLong} ${(0,v.pV)(e.ref.ref,{strings:{working:"Working Tree"}})}`})}compareWithUpstream(e){return e.is("branch")&&null!=e.branch.upstream?this.container.searchAndCompareView.compare(e.repoPath,e.ref,e.branch.upstream.name):Promise.resolve()}compareWorkingWith(e){return e instanceof iH.p?this.compareFileWith(e.repoPath,e.uri,e.ref.ref,void 0,""):e instanceof iH.t?this.container.searchAndCompareView.compare(e.repoPath,"",e.ref):Promise.resolve()}async compareAncestryWithWorking(e){if(!e.is("branch"))return;let t=await this.container.git.getBranch(e.repoPath);if(null==t)return;let i=await this.container.git.getMergeBase(e.repoPath,t.ref,e.ref.ref);if(null!=i)return this.container.searchAndCompareView.compare(e.repoPath,"",{ref:i,label:`${t.ref} (${(0,v.pV)(i)})`})}compareWithSelected(e){(e instanceof iH.t||e instanceof iH.p)&&this.container.searchAndCompareView.compareWithSelected(e.repoPath,e.ref)}selectForCompare(e){(e instanceof iH.t||e instanceof iH.p)&&this.container.searchAndCompareView.selectForCompare(e.repoPath,e.ref)}async compareFileWith(e,t,i,r,s){return null==r&&(r=await this.container.git.getWorkingUri(e,t)),(0,e2.RS)(a.Ts.DiffWith,{repoPath:e,lhs:{sha:i,uri:t},rhs:{sha:s,uri:r??t}})}compareFileWithSelected(e){if(null==this._selectedFile||!(e instanceof iH.p)||null==e.ref)return Promise.resolve();if(this._selectedFile.repoPath!==e.repoPath)return this.selectFileForCompare(e),Promise.resolve();let t=this._selectedFile;return this._selectedFile=void 0,(0,er.o)("gitlens:views:canCompare:file",!1),this.compareFileWith(t.repoPath,t.uri,t.ref,e.uri,e.ref.ref)}_selectedFile;selectFileForCompare(e){e instanceof iH.p&&null!=e.ref&&(this._selectedFile={ref:e.ref.ref,repoPath:e.repoPath,uri:e.uri},(0,er.o)("gitlens:views:canCompare:file",!0))}async openAllChanges(e,t,i){if(e.isAny("compare-results","results-files","tracking-status","tracking-status-files")){let r=await e.getFilesComparison();if(!r?.files.length)return;return null!=r.title&&(t={...t,title:r.title}),(i?iI.LH:iI.po)(r.files,{repoPath:r.repoPath,lhs:r.ref1,rhs:r.ref2},t)}if(e.isAny("commit","stash"))return(i?iI.LH:iI.po)(e.commit,t)}openCommitOnRemote(e,t,i){let r=t?.length?t.map(e=>e.ref):[e.ref];return(0,e2.RS)(a.Ts.OpenOnRemote,{repoPath:r[0].repoPath,resource:r.map(e=>({type:tX.J.Commit,sha:e.ref})),clipboard:i})}openChanges(e){if(e.is("conflict-file")){(0,e2.RS)(a.Ts.DiffWith,{lhs:{sha:e.status.HEAD.ref,uri:d.nk.fromFile(e.file,e.repoPath,void 0,!0)},rhs:{sha:"HEAD",uri:d.nk.fromFile(e.file,e.repoPath)},repoPath:e.repoPath,line:0,showOptions:{preserveFocus:!1,preview:!1}});return}if(!(e instanceof iH.p)&&!e.is("status-file"))return;let t=e.getCommand();if(t?.arguments!=null)switch(t.command){case a.Ts.DiffWith:{let[e]=t.arguments;e.showOptions.preview=!1,(0,e2.RS)(t.command,e);break}case a.Ts.DiffWithPrevious:{let[,e]=t.arguments;e.showOptions.preview=!1,(0,e2.Y0)(t.command,void 0,e);break}default:throw Error(`Unexpected command: ${t.command}`)}}async openAllChangesWithWorking(e,t,i){if(e.isAny("compare-results","results-files","tracking-status","tracking-status-files")){let r=await e.getFilesComparison();if(!r?.files.length)return;return(i?iI.Ce:iI.Gu)(r.files,{repoPath:r.repoPath,ref:r.ref1||r.ref2},t)}if(e.isAny("commit","stash"))return(i?iI.Ce:iI.Gu)(e.commit,t)}async openChangesWithWorking(e){if(e.is("status-file"))return(0,e2.Y0)(a.Ts.DiffWithWorking,void 0,{uri:e.uri,showOptions:{preserveFocus:!0,preview:!0}});if(e.is("conflict-file"))return(0,e2.Y0)(a.Ts.DiffWithWorking,void 0,{uri:e.baseUri,showOptions:{preserveFocus:!0,preview:!0}});if(e.is("file-commit")&&e.commit.file?.hasConflicts){let t=await e.getConflictBaseUri();if(null!=t)return(0,e2.Y0)(a.Ts.DiffWithWorking,void 0,{uri:t,showOptions:{preserveFocus:!0,preview:!0}})}return e instanceof iH.p?iI.DD(e.file,{repoPath:e.repoPath,ref:e.is("results-file")?e.ref2:e.ref.ref}):Promise.resolve()}async openPreviousChangesWithWorking(e){return e instanceof iH.p?iI.DD(e.file,{repoPath:e.repoPath,ref:e.is("results-file")?e.ref1:`${e.ref.ref}^`}):Promise.resolve()}openFile(e,t){return e instanceof iH.p||e.isAny("conflict-file","status-file","file-history","line-history")?iI.Tq(e.uri,{preserveFocus:!0,preview:!1,...t}):Promise.resolve()}async openFiles(e){if(e.isAny("compare-results","results-files","tracking-status","tracking-status-files")){let t=await e.getFilesComparison();if(!t?.files.length)return;return iI.Km(t.files,{repoPath:t.repoPath,ref:t.ref1||t.ref2})}if(e.isAny("commit","stash"))return iI.Km(e.commit)}async openOnlyChangedFiles(e){if(e.is("compare-results")||e.is("results-files")||e.is("tracking-status")||e.is("tracking-status-files")){let t=await e.getFilesComparison();if(!t?.files.length)return;return iI.E9(t.files)}if(e.isAny("commit","stash"))return iI.E9(e.commit)}async openRevision(e,t){if(!e.isAny("commit-file","file-commit","results-file","stash-file","conflict-file","status-file"))return Promise.resolve();let i=(t={showOptions:{preserveFocus:!0,preview:!1},...t}).revisionUri;return null==i&&(i=e.isAny("results-file","conflict-file")?this.container.git.getRevisionUri(e.uri):e.commit.file?.status==="D"?this.container.git.getRevisionUri(await e.commit.getPreviousSha()??m.nB,e.commit.file.path,e.commit.repoPath):this.container.git.getRevisionUri(e.uri)),iI.vM(i,t.showOptions??{preserveFocus:!0,preview:!1})}async openRevisions(e,t){if(e.isAny("compare-results","results-files","tracking-status","tracking-status-files")){let t=await e.getFilesComparison();if(!t?.files.length)return;return iI.m(t.files,{repoPath:t.repoPath,lhs:t.ref2,rhs:t.ref1})}if(e.isAny("commit","stash"))return iI.m(e.commit,t)}async setResultsCommitsFilter(e,t){if(!e?.isAny("compare-results","compare-branch"))return;let i=this.container.git.getRepository(e.repoPath);if(null!=i){if(t){let r=e.getState("filterCommits");if(null==r){let e=await this.container.git.getCurrentUser(i.uri);r=null!=e?[e]:void 0}let s=await (0,rg.W)(this.container,i,"Filter Commits",i.virtual?"Choose a contributor to show commits from":"Choose contributors to show commits from",{appendReposToTitle:!0,clearButton:!0,multiselect:!i.virtual,picked:e=>r?.some(t=>f.X6(e,t))??!1});if(null==s)return;0===s.length?(t=!1,e.deleteState("filterCommits")):e.storeState("filterCommits",s)}else e.deleteState("filterCommits");e.triggerChange(!0)}}};async function ry(e,t,i){if(0===(i=Array.isArray(i)?i:null!=t?[t]:[]).length)return;let r=(await (0,e1.lX)(i,t=>t.toClipboard?.(e),e=>!!e?.trim())).join("\n");await n.env.clipboard.writeText(r)}async function rb(e,t){let i=await rR(e,t);0!==i.length&&await n.env.clipboard.writeText(i.join("\n"))}async function rC(e,t){let i=await rR(e,t);if(0!==i.length){if(i.length>10){let e={title:"Open"};if(await n.window.showWarningMessage(`Are you sure you want to open ${i.length} URLs?`,{modal:!0},e,{title:"Cancel",isCloseAffordance:!0})!==e)return}for(let e of i)null!=e&&(0,ed.CZ)(e)}}function rR(e,t){return 0===(t=Array.isArray(t)?t:null!=e?[e]:[]).length?Promise.resolve([]):(0,e1.lX)(t,e=>e.getUrl?.(),e=>!!e?.trim())}rw([(0,en.Rm)()],ViewCommands.prototype,"addAuthors",1),rw([(0,en.Rm)()],ViewCommands.prototype,"addAuthor",1),rw([(0,en.Rm)()],ViewCommands.prototype,"addRemote",1),rw([(0,en.Rm)()],ViewCommands.prototype,"applyChanges",1),rw([(0,en.Rm)()],ViewCommands.prototype,"applyStash",1),rw([(0,en.Rm)()],ViewCommands.prototype,"browseRepoAtRevision",1),rw([(0,en.Rm)()],ViewCommands.prototype,"cherryPick",1),rw([(0,en.Rm)()],ViewCommands.prototype,"clearComparison",1),rw([(0,en.Rm)()],ViewCommands.prototype,"clearReviewed",1),rw([(0,en.Rm)()],ViewCommands.prototype,"closeRepository",1),rw([(0,en.Rm)()],ViewCommands.prototype,"createBranch",1),rw([(0,en.Rm)()],ViewCommands.prototype,"createPullRequest",1),rw([(0,en.Rm)()],ViewCommands.prototype,"createTag",1),rw([(0,en.Rm)()],ViewCommands.prototype,"createWorktree",1),rw([(0,en.Rm)()],ViewCommands.prototype,"deleteBranch",1),rw([(0,en.Rm)()],ViewCommands.prototype,"deleteStash",1),rw([(0,en.Rm)()],ViewCommands.prototype,"renameStash",1),rw([(0,en.Rm)()],ViewCommands.prototype,"deleteTag",1),rw([(0,en.Rm)()],ViewCommands.prototype,"deleteWorktree",1),rw([(0,en.Rm)()],ViewCommands.prototype,"fetch",1),rw([(0,en.Rm)()],ViewCommands.prototype,"highlightChanges",1),rw([(0,en.Rm)()],ViewCommands.prototype,"highlightRevisionChanges",1),rw([(0,en.Rm)()],ViewCommands.prototype,"merge",1),rw([(0,en.Rm)()],ViewCommands.prototype,"openInTerminal",1),rw([(0,en.Rm)()],ViewCommands.prototype,"openInIntegratedTerminal",1),rw([(0,en.Rm)()],ViewCommands.prototype,"openPullRequest",1),rw([(0,en.Rm)()],ViewCommands.prototype,"openPullRequestChanges",1),rw([(0,en.Rm)()],ViewCommands.prototype,"openPullRequestComparison",1),rw([(0,en.Rm)()],ViewCommands.prototype,"openDraft",1),rw([(0,en.Rm)()],ViewCommands.prototype,"openDraftOnWeb",1),rw([(0,en.Rm)()],ViewCommands.prototype,"openWorktree",1),rw([(0,en.Rm)()],ViewCommands.prototype,"pruneRemote",1),rw([(0,en.Rm)()],ViewCommands.prototype,"removeRemote",1),rw([(0,en.Rm)()],ViewCommands.prototype,"publishBranch",1),rw([(0,en.Rm)()],ViewCommands.prototype,"publishRepository",1),rw([(0,en.Rm)()],ViewCommands.prototype,"pull",1),rw([(0,en.Rm)()],ViewCommands.prototype,"push",1),rw([(0,en.Rm)()],ViewCommands.prototype,"pushToCommit",1),rw([(0,en.Rm)()],ViewCommands.prototype,"rebase",1),rw([(0,en.Rm)()],ViewCommands.prototype,"rebaseToRemote",1),rw([(0,en.Rm)()],ViewCommands.prototype,"renameBranch",1),rw([(0,en.Rm)()],ViewCommands.prototype,"resetCommit",1),rw([(0,en.Rm)()],ViewCommands.prototype,"resetToCommit",1),rw([(0,en.Rm)()],ViewCommands.prototype,"resetToTip",1),rw([(0,en.Rm)()],ViewCommands.prototype,"restore",1),rw([(0,en.Rm)()],ViewCommands.prototype,"revealRepositoryInExplorer",1),rw([(0,en.Rm)()],ViewCommands.prototype,"revealWorktreeInExplorer",1),rw([(0,en.Rm)()],ViewCommands.prototype,"revert",1),rw([(0,en.Rm)()],ViewCommands.prototype,"setAsDefault",1),rw([(0,en.Rm)()],ViewCommands.prototype,"setBranchComparison",1),rw([(0,en.Rm)()],ViewCommands.prototype,"setShowRelativeDateMarkers",1),rw([(0,en.Rm)()],ViewCommands.prototype,"stageFile",1),rw([(0,en.Rm)()],ViewCommands.prototype,"stageDirectory",1),rw([(0,en.Rm)()],ViewCommands.prototype,"star",1),rw([(0,en.Rm)()],ViewCommands.prototype,"switch",1),rw([(0,en.Rm)()],ViewCommands.prototype,"switchTo",1),rw([(0,en.Rm)()],ViewCommands.prototype,"undoCommit",1),rw([(0,en.Rm)()],ViewCommands.prototype,"unsetAsDefault",1),rw([(0,en.Rm)()],ViewCommands.prototype,"unstageFile",1),rw([(0,en.Rm)()],ViewCommands.prototype,"unstageDirectory",1),rw([(0,en.Rm)()],ViewCommands.prototype,"unstar",1),rw([(0,en.Rm)()],ViewCommands.prototype,"compareHeadWith",1),rw([(0,en.Rm)()],ViewCommands.prototype,"compareWithMergeBase",1),rw([(0,en.Rm)()],ViewCommands.prototype,"openChangedFileDiffsWithMergeBase",1),rw([(0,en.Rm)()],ViewCommands.prototype,"compareWithUpstream",1),rw([(0,en.Rm)()],ViewCommands.prototype,"compareWorkingWith",1),rw([(0,en.Rm)()],ViewCommands.prototype,"compareAncestryWithWorking",1),rw([(0,en.Rm)()],ViewCommands.prototype,"compareWithSelected",1),rw([(0,en.Rm)()],ViewCommands.prototype,"selectForCompare",1),rw([(0,en.Rm)()],ViewCommands.prototype,"compareFileWithSelected",1),rw([(0,en.Rm)()],ViewCommands.prototype,"selectFileForCompare",1),rw([(0,en.Rm)()],ViewCommands.prototype,"openAllChanges",1),rw([(0,en.Rm)()],ViewCommands.prototype,"openCommitOnRemote",1),rw([(0,en.Rm)()],ViewCommands.prototype,"openChanges",1),rw([(0,en.Rm)()],ViewCommands.prototype,"openAllChangesWithWorking",1),rw([(0,en.Rm)()],ViewCommands.prototype,"openChangesWithWorking",1),rw([(0,en.Rm)()],ViewCommands.prototype,"openPreviousChangesWithWorking",1),rw([(0,en.Rm)()],ViewCommands.prototype,"openFile",1),rw([(0,en.Rm)()],ViewCommands.prototype,"openFiles",1),rw([(0,en.Rm)()],ViewCommands.prototype,"openOnlyChangedFiles",1),rw([(0,en.Rm)()],ViewCommands.prototype,"openRevision",1),rw([(0,en.Rm)()],ViewCommands.prototype,"openRevisions",1),rw([(0,en.Rm)()],ViewCommands.prototype,"setResultsCommitsFilter",1);var rS=Object.defineProperty,rP=Object.getOwnPropertyDescriptor,rA=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?rP(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&rS(t,i,n),n};let BranchesRepositoryNode=class BranchesRepositoryNode extends iq.P{async getChildren(){return null==this.child&&(this.child=new BranchesNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(b.Z_.Config,b.Z_.Heads,b.Z_.Index,b.Z_.Remotes,b.Z_.RemoteProviders,b.Z_.Status,b.Z_.Unknown,b.Ti.Any)}};let BranchesViewNode=class BranchesViewNode extends RepositoriesSubscribeableNode{async getChildren(){if(null==this.children){let e,t;let i=this.view.container.git.openRepositories;if(S.H.get("views.collapseWorktreesWhenPossible")&&(i=[...(e=await (0,b.Y$)(i)).keys()]),0===i.length)return this.view.message=this.view.container.git.isDiscoveringRepositories?"Loading branches...":"No branches could be found.",[];this.view.message=void 0,e?.size&&(t=new Set,await Promise.allSettled([...e].map(async([e,i])=>{if(i.size)for(let r of(await e.getWorktrees())){if(null==r.branch||i.has(r.repoPath))return;t.add(r.branch?.name)}}))),this.updateContext({openWorktreeBranches:t?.size?t:void 0});let r=1===i.length;this.children=i.map(e=>new BranchesRepositoryNode(d.nk.fromRepoPath(e.path),this.view,this,e,r))}if(1===this.children.length){let[e]=this.children,t=await e.repo.getBranches({filter:e=>!e.remote});return 0===t.values.length?(this.view.message="No branches could be found.",this.view.title="Branches",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Branches (${t.values.length})`,e.getChildren())}return this.view.title="Branches",this.children}getTreeItem(){return new n.TreeItem("Branches",n.TreeItemCollapsibleState.Expanded)}};let BranchesView=class BranchesView extends iN.DN{configKey="branches";constructor(e){super(e,"branches","Branches","branchesView")}get canReveal(){return this.config.reveal||!S.H.get("views.repositories.showBranches")}get canSelectMany(){return this.container.prereleaseOrDebugging}getRoot(){return new BranchesViewNode(this)}registerCommands(){return this.container.viewCommands,[rv(this.getQualifiedCommand("copy"),()=>(0,e2.RS)(a.Ts.ViewsCopy,this.activeSelection,this.selection),this),rv(this.getQualifiedCommand("refresh"),()=>(this.container.git.resetCaches("branches"),this.refresh(!0)),this),rv(this.getQualifiedCommand("setLayoutToList"),()=>this.setLayout("list"),this),rv(this.getQualifiedCommand("setLayoutToTree"),()=>this.setLayout("tree"),this),rv(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),rv(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),rv(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),rv(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),rv(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this),rv(this.getQualifiedCommand("setShowBranchComparisonOn"),()=>this.setShowBranchComparison(!0),this),rv(this.getQualifiedCommand("setShowBranchComparisonOff"),()=>this.setShowBranchComparison(!1),this),rv(this.getQualifiedCommand("setShowBranchPullRequestOn"),()=>this.setShowBranchPullRequest(!0),this),rv(this.getQualifiedCommand("setShowBranchPullRequestOff"),()=>this.setShowBranchPullRequest(!1),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||S.H.changed(e,"defaultDateFormat")||S.H.changed(e,"defaultDateLocale")||S.H.changed(e,"defaultDateShortFormat")||S.H.changed(e,"defaultDateSource")||S.H.changed(e,"defaultDateStyle")||S.H.changed(e,"defaultGravatarsStyle")||S.H.changed(e,"defaultTimeFormat")||S.H.changed(e,"sortBranchesBy")||S.H.changed(e,"sortRepositoriesBy")||S.H.changed(e,"views.collapseWorktreesWhenPossible"))}findBranch(e,t){if(e.remote)return;let{repoPath:i}=e;return this.findNode(t=>t.branch?.ref===e.ref,{allowPaging:!0,maxDepth:4,canTraverse:e=>e instanceof BranchesViewNode||(e instanceof BranchesRepositoryNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i,token:t})}async findCommit(e,t){let{repoPath:i}=e,r=await this.container.git.getCommitBranches(e.repoPath,e.ref,void 0,(0,g.WM)(e)?{commitDate:e.committer.date}:void 0);if(0!==r.length)return this.findNode(t=>t.commit?.ref===e.ref,{allowPaging:!0,maxDepth:5,canTraverse:async t=>t instanceof BranchesViewNode||(t instanceof BranchesRepositoryNode||t instanceof BranchOrTagFolderNode?t.repoPath===i:!!(t instanceof BranchNode&&t.repoPath===i&&r.includes(t.branch.name))&&(await t.loadMore({until:e.ref}),!0)),token:t})}revealBranch(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing ${(0,v.M4)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findBranch(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealCommit(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing ${(0,v.M4)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findCommit(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof iq.P&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof BranchesViewNode||e instanceof iq.P});return void 0!==i&&await this.reveal(i,t),i}setLayout(e){return S.H.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return S.H.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return S.H.updateEffective(`views.${this.configKey}.avatars`,e)}setShowBranchComparison(e){return S.H.updateEffective(`views.${this.configKey}.showBranchComparison`,!!e&&"branch")}async setShowBranchPullRequest(e){await S.H.updateEffective(`views.${this.configKey}.pullRequests.showForBranches`,e),await S.H.updateEffective(`views.${this.configKey}.pullRequests.enabled`,e)}};rA([(0,es.G)(()=>"")],BranchesView.prototype,"revealBranch",1),rA([(0,es.G)(()=>"")],BranchesView.prototype,"revealCommit",1),rA([(0,es.G)(()=>"")],BranchesView.prototype,"revealRepository",1);var rk=Object.defineProperty,rD=Object.getOwnPropertyDescriptor,rT=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?rD(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&rk(t,i,n),n};let CommitsRepositoryNode=class CommitsRepositoryNode extends iq.P{async getChildren(){if(null==this.child){let e=await this.repo.getBranch();if(null==e)return this.view.message="No commits could be found.",[];this.view.message=void 0;let t=this.view.state.filterCommits.get(this.repo.id);this.child=new BranchNode(this.uri,this.view,this.splatted?this.parent??this:this,this.repo,e,!0,{expand:!0,limitCommits:!this.splatted,showComparison:this.view.config.showBranchComparison,showCurrentOrOpened:!1,showMergeCommits:!this.view.state.hideMergeCommits,showTracking:!0,authors:t})}return this.child.getChildren()}async refresh(e=!1){e?this.child=void 0:this.parent?.triggerChange(!1),await this.ensureSubscription()}async subscribe(){let e=await this.repo?.getLastFetched()??0,t=b.LN.getLastFetchedUpdateInterval(e);return 0!==e&&t>0?n.Disposable.from(await super.subscribe(),(0,eu.gC)(()=>{t!==b.LN.getLastFetchedUpdateInterval(e)&&this.resetSubscription(),this.splatted?this.view.triggerNodeChange(this.parent??this):this.view.triggerNodeChange(this)},t)):super.subscribe()}changed(e){return e.changed(b.Z_.Config,b.Z_.Heads,b.Z_.Index,b.Z_.Remotes,b.Z_.RemoteProviders,b.Z_.Status,b.Z_.Unknown,b.Ti.Any)}};rT([(0,es.G)(),(0,en.Yz)()],CommitsRepositoryNode.prototype,"refresh",1),rT([(0,en.Yz)()],CommitsRepositoryNode.prototype,"subscribe",1);let CommitsViewNode=class CommitsViewNode extends RepositoriesSubscribeableNode{async getChildren(){if(null==this.children){let e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message=this.view.container.git.isDiscoveringRepositories?"Loading commits...":"No commits could be found.",[];this.view.message=void 0;let t=1===e.length;this.children=e.map(e=>new CommitsRepositoryNode(d.nk.fromRepoPath(e.path),this.view,this,e,t,{showBranchAndLastFetched:!0}))}let e=S.H.get("plusFeatures.enabled")&&null==this.view.container.usage.get("graphView:shown")&&null==this.view.container.usage.get("graphWebview:shown")?new ij.RK(this.view,this,(0,e2.gu)(a.Ts.ShowGraph,"Show Commit Graph"),"Visualize commits on the Commit Graph",void 0,"Visualize commits on the Commit Graph",new n.ThemeIcon("gitlens-graph")):void 0;if(1===this.children.length){let[t]=this.children,i=await t.repo.getBranch();if(null!=i){let e=await t.repo.getLastFetched()??0,r=i.getTrackingStatus();this.view.description=`${r?`${r} ${a.EO.Dot} `:""}${i.name}${i.rebasing?" (Rebasing)":""}${e?` ${a.EO.Dot} Last fetched ${b.LN.formatLastFetched(e)}`:""}`}return null==e?t.getChildren():[e,...await t.getChildren()]}return null==e?this.children:[e,...this.children]}getTreeItem(){return new n.TreeItem("Commits",n.TreeItemCollapsibleState.Expanded)}};let CommitsView=class CommitsView extends iN.DN{configKey="commits";constructor(e){super(e,"commits","Commits","commitsView"),this.disposables.push(e.usage.onDidChange(this.onUsageChanged,this))}onUsageChanged(e){(null==e||"graphView:shown"===e.key||"graphWebview:shown"===e.key)&&this.refresh()}get canReveal(){return this.config.reveal||!S.H.get("views.repositories.showCommits")}get canSelectMany(){return this.container.prereleaseOrDebugging}_state={filterCommits:new Map};get state(){return this._state}getRoot(){return new CommitsViewNode(this)}registerCommands(){return this.container.viewCommands,[rv(this.getQualifiedCommand("copy"),()=>(0,e2.RS)(a.Ts.ViewsCopy,this.activeSelection,this.selection),this),rv(this.getQualifiedCommand("refresh"),()=>(this.container.git.resetCaches("branches","status","tags"),this.refresh(!0)),this),rv(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),rv(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),rv(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),rv(this.getQualifiedCommand("setCommitsFilterAuthors"),e=>this.setCommitsFilter(e,!0),this),rv(this.getQualifiedCommand("setCommitsFilterOff"),e=>this.setCommitsFilter(e,!1),this),rv(this.getQualifiedCommand("setShowMergeCommitsOn"),()=>this.setShowMergeCommits(!0),this),rv(this.getQualifiedCommand("setShowMergeCommitsOff"),()=>this.setShowMergeCommits(!1),this),rv(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),rv(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this),rv(this.getQualifiedCommand("setShowBranchComparisonOn"),()=>this.setShowBranchComparison(!0),this),rv(this.getQualifiedCommand("setShowBranchComparisonOff"),()=>this.setShowBranchComparison(!1),this),rv(this.getQualifiedCommand("setShowBranchPullRequestOn"),()=>this.setShowBranchPullRequest(!0),this),rv(this.getQualifiedCommand("setShowBranchPullRequestOff"),()=>this.setShowBranchPullRequest(!1),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||S.H.changed(e,"defaultDateFormat")||S.H.changed(e,"defaultDateLocale")||S.H.changed(e,"defaultDateShortFormat")||S.H.changed(e,"defaultDateSource")||S.H.changed(e,"defaultDateStyle")||S.H.changed(e,"defaultGravatarsStyle")||S.H.changed(e,"defaultTimeFormat")||S.H.changed(e,"plusFeatures.enabled")||S.H.changed(e,"sortRepositoriesBy"))}async findCommit(e,t){let{repoPath:i}=e,r=await this.container.git.getBranch(e.repoPath);if(null!=r&&(await this.container.git.getCommitBranches(e.repoPath,e.ref,r.name,{commitDate:(0,g.WM)(e)?e.committer.date:void 0})).length)return this.findNode(t=>t.commit?.ref===e.ref,{allowPaging:!0,maxDepth:2,canTraverse:async t=>{if(t instanceof CommitsViewNode){let i=await t.getSplattedChild?.();return i instanceof CommitsRepositoryNode&&(i=await i.getSplattedChild?.())instanceof BranchNode&&await i.loadMore({until:e.ref}),!0}if(t instanceof CommitsRepositoryNode&&t.repoPath===i){let i=await t.getSplattedChild?.();if(i instanceof BranchNode)return await i.loadMore({until:e.ref}),!0}return t instanceof BranchTrackingStatusNode&&t.repoPath===i},token:t})}async revealCommit(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing ${(0,v.M4)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findCommit(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof iq.P&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof CommitsViewNode||e instanceof iq.P});return void 0!==i&&await this.reveal(i,t),i}setFilesLayout(e){return S.H.updateEffective(`views.${this.configKey}.files.layout`,e)}async setCommitsFilter(e,t){let i;if(null!=e){if(e.is("repo-folder"))i=e.repo;else{let t=e;do if(t=t.getParent(),t?.is("repo-folder")){i=t.repo;break}while(null!=t)}}if(t){if(null==(i??=await (0,t9.t6)("Filter Commits","Choose a repository")))return;let e=this.state.filterCommits.get(i.id);if(null==e){let t=await this.container.git.getCurrentUser(i.uri);e=null!=t?[t]:void 0}let r=await (0,rg.W)(this.container,i,"Filter Commits",i.virtual?"Choose a contributor to show commits from":"Choose contributors to show commits from",{appendReposToTitle:!0,clearButton:!0,multiselect:!i.virtual,picked:t=>e?.some(e=>f.X6(t,e))??!1});if(null==r)return;0===r.length?(t=!1,this.state.filterCommits.delete(i.id)):this.state.filterCommits.set(i.id,r)}else null!=i?this.state.filterCommits.delete(i.id):this.state.filterCommits.clear();(0,er.o)("gitlens:views:commits:filtered",0!==this.state.filterCommits.size),this.refresh(!0)}setShowMergeCommits(e){(0,er.o)("gitlens:views:commits:hideMergeCommits",!e),this.state.hideMergeCommits=!e,this.refresh(!0)}setShowAvatars(e){return S.H.updateEffective(`views.${this.configKey}.avatars`,e)}setShowBranchComparison(e){return S.H.updateEffective(`views.${this.configKey}.showBranchComparison`,!!e&&"working")}async setShowBranchPullRequest(e){await S.H.updateEffective(`views.${this.configKey}.pullRequests.showForBranches`,e),await S.H.updateEffective(`views.${this.configKey}.pullRequests.enabled`,e)}};rT([(0,es.G)(()=>"")],CommitsView.prototype,"revealCommit",1),rT([(0,es.G)(()=>"")],CommitsView.prototype,"revealRepository",1);var r_=Object.defineProperty,rI=Object.getOwnPropertyDescriptor,r$=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?rI(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&r_(t,i,n),n};let ContributorNode=class ContributorNode extends t5.eu{constructor(e,t,i,r,s){super("contributor",e,t,i),this.parent=i,this.contributor=r,this.options=s,this.updateContext({contributor:r}),this._uniqueId=(0,t5.pF)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}toClipboard(e){let t=`${this.contributor.name}${this.contributor.email?` <${this.contributor.email}>`:""}`;return"markdown"===e&&this.contributor.email?`[${t}](mailto:${this.contributor.email})`:t}getUrl(){return this.contributor.email?`mailto:${this.contributor.email}`:""}get repoPath(){return this.contributor.repoPath}async getChildren(){let e=await this.getLog();if(null==e)return[new ij.S2(this.view,this,"No commits could be found.")];let t=await this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath),i=[...(0,iz.h)((0,eo.Tj)(e.commits.values(),e=>new iQ.e(this.view,this,e,void 0,void 0,t)),this)];return e.hasMore&&i.push(new ij.cb(this.view,this,i[i.length-1])),i}async getTreeItem(){let e,t;let i=this.options?.presence?.get(this.contributor.email),r=new n.TreeItem(this.contributor.current?`${this.contributor.label} (you)`:this.contributor.label,n.TreeItemCollapsibleState.Collapsed);if(r.id=this.id,r.contextValue=this.contributor.current?`${t5.U0.Contributor}+current`:t5.U0.Contributor,r.description=`${null!=i&&"offline"!==i.status?`${i.statusText} ${a.EO.Space}${a.EO.Dot}${a.EO.Space} `:""}${null!=this.contributor.date?`${this.contributor.formatDateFromNow()}, `:""}${(0,L.td)("commit",this.contributor.count)}`,this.view.config.avatars){let r=S.H.get("hovers.avatarSize");if(e=await this.contributor.getAvatarUri({defaultStyle:S.H.get("defaultGravatarsStyle"),size:r}),null!=i){let s=`${this.contributor.count?"You are":`${this.contributor.label} is`} ${"dnd"===i.status?"in ":""}${i.statusText.toLocaleLowerCase()}`;t=`![${s}](${e.toString(!0)}|width=${r},height=${r} "${s}")![${s}](${(0,eq.Sk)(i.status)} "${s}")`}else t=`![${this.contributor.label}](${e.toString(!0)}|width=${r},height=${r} "${this.contributor.label}")`}let s=new Intl.NumberFormat,o=null!=this.contributor.stats?`\\
${(0,L.td)("file",this.contributor.stats.files,{format:s.format})} changed, ${(0,L.td)("addition",this.contributor.stats.additions,{format:s.format})}, ${(0,L.td)("deletion",this.contributor.stats.deletions,{format:s.format})}`:"",l=this.contributor.email?`__[${this.contributor.name}](mailto:${this.contributor.email} "Email ${this.contributor.label} (${this.contributor.email})")__`:`__${this.contributor.label}__`,h=null!=this.contributor.date?`Last commit ${this.contributor.formatDateFromNow()} (${this.contributor.formatDate()})\\
`:"",c=new n.MarkdownString(`${null!=t?t:""} &nbsp;${l} 

${h}${(0,L.td)("commit",this.contributor.count,{format:s.format})}${o}`);return c.supportHtml=!0,c.isTrusted=!0,r.tooltip=c,r.iconPath=e,r}refresh(e){e&&(this._log=void 0)}_log;async getLog(){return null==this._log&&(this._log=await this.view.container.git.getLog(this.uri.repoPath,{all:this.options?.all,ref:this.options?.ref,limit:this.limit??this.view.config.defaultItemLimit,merges:this.options?.showMergeCommits,authors:[{name:this.contributor.name,email:this.contributor.email,username:this.contributor.username,id:this.contributor.id}]})),this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await n.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());t?.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1)))}};r$([(0,es.G)(),(0,en.Yz)()],ContributorNode.prototype,"refresh",1),r$([(0,es.G)()],ContributorNode.prototype,"loadMore",1);var rE=Object.defineProperty,rO=Object.getOwnPropertyDescriptor,rx=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?rO(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&rE(t,i,n),n};let ContributorsNode=class ContributorsNode extends iM.l{constructor(e,t,i,r,s){super("contributors",e,t,i),this.parent=i,this.repo=r,this.options=s,this.updateContext({repository:r}),this._uniqueId=(0,t5.pF)(this.type,this.context)}splatted=!0;get id(){return this._uniqueId}get repoPath(){return this.repo.path}async getChildren(){if(null==this.children){let e;let t=this.options?.all??S.H.get("views.contributors.showAllBranches");if(!t)try{let t=await this.view.container.git.getBranch(this.uri.repoPath);t?.upstream?.name==null||t.upstream.missing||(e="@{u}")}catch{}let i=this.options?.stats??S.H.get("views.contributors.showStatistics"),r=await this.repo.getContributors({all:t,merges:this.options?.showMergeCommits,ref:e,stats:i});if(0===r.length)return[new ij.S2(this.view,this,"No contributors could be found.")];(0,f.tB)(r);let s=this.view.container.vsls.enabled?await this.getPresenceMap(r):void 0;this.children=r.map(i=>new ContributorNode(this.uri,this.view,this,i,{all:t,ref:e,presence:s,showMergeCommits:this.options?.showMergeCommits}))}return this.children}getTreeItem(){this.splatted=!1;let e=new n.TreeItem("Contributors",n.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=t5.U0.Contributors,e.iconPath=new n.ThemeIcon("organization"),e}updateAvatar(e){if(null!=this.children)for(let t of this.children)t.contributor.email===e&&t.triggerChange()}refresh(){super.refresh(!0)}async getPresenceMap(e){let t=e.find(e=>e.current)?.email;if(null!=t)return this.view.container.vsls.getContactsPresence([t])}};rx([(0,en.Yz)()],ContributorsNode.prototype,"refresh",1),rx([(0,en.Yz)({args:!1})],ContributorsNode.prototype,"getPresenceMap",1);var rF=Object.defineProperty,rB=Object.getOwnPropertyDescriptor,rL=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?rB(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&rF(t,i,n),n};let ContributorsRepositoryNode=class ContributorsRepositoryNode extends iq.P{async getChildren(){return null==this.child&&(this.child=new ContributorsNode(this.uri,this.view,this,this.repo,{showMergeCommits:!this.view.state.hideMergeCommits})),this.child.getChildren()}async subscribe(){return n.Disposable.from(await super.subscribe(),(0,eq.A0)(e=>this.child?.updateAvatar(e.email)))}changed(e){return e.changed(b.Z_.Config,b.Z_.Heads,b.Z_.Remotes,b.Z_.Unknown,b.Ti.Any)}};rL([(0,en.Yz)()],ContributorsRepositoryNode.prototype,"subscribe",1);let ContributorsViewNode=class ContributorsViewNode extends RepositoriesSubscribeableNode{async getChildren(){if(null==this.children){let e=this.view.container.git.openRepositories;if(S.H.get("views.collapseWorktreesWhenPossible")&&S.H.get("views.contributors.showAllBranches")&&(e=[...(await (0,b.Y$)(e)).keys()]),0===e.length)return this.view.message=this.view.container.git.isDiscoveringRepositories?"Loading contributors...":"No contributors could be found.",[];this.view.message=void 0;let t=1===e.length;this.children=e.map(e=>new ContributorsRepositoryNode(d.nk.fromRepoPath(e.path),this.view,this,e,t))}if(1===this.children.length){let[e]=this.children,t=await e.getChildren();return 0===t.length?(this.view.message="No contributors could be found.",this.view.title="Contributors",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Contributors (${t.length})`,t)}return this.view.title="Contributors",this.children}getTreeItem(){return new n.TreeItem("Contributors",n.TreeItemCollapsibleState.Expanded)}};let ContributorsView=class ContributorsView extends iN.DN{configKey="contributors";constructor(e){super(e,"contributors","Contributors","contributorsView"),(0,er.o)("gitlens:views:contributors:hideMergeCommits",!0)}get canReveal(){return this.config.reveal||!S.H.get("views.repositories.showContributors")}get canSelectMany(){return this.container.prereleaseOrDebugging}_state={hideMergeCommits:!0};get state(){return this._state}getRoot(){return new ContributorsViewNode(this)}registerCommands(){return this.container.viewCommands,[rv(this.getQualifiedCommand("copy"),()=>(0,e2.RS)(a.Ts.ViewsCopy,this.activeSelection,this.selection),this),rv(this.getQualifiedCommand("refresh"),()=>(this.container.git.resetCaches("contributors"),this.refresh(!0)),this),rv(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),rv(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),rv(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),rv(this.getQualifiedCommand("setShowAllBranchesOn"),()=>this.setShowAllBranches(!0),this),rv(this.getQualifiedCommand("setShowAllBranchesOff"),()=>this.setShowAllBranches(!1),this),rv(this.getQualifiedCommand("setShowMergeCommitsOn"),()=>this.setShowMergeCommits(!0),this),rv(this.getQualifiedCommand("setShowMergeCommitsOff"),()=>this.setShowMergeCommits(!1),this),rv(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),rv(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this),rv(this.getQualifiedCommand("setShowStatisticsOn"),()=>this.setShowStatistics(!0),this),rv(this.getQualifiedCommand("setShowStatisticsOff"),()=>this.setShowStatistics(!1),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||S.H.changed(e,"defaultDateFormat")||S.H.changed(e,"defaultDateLocale")||S.H.changed(e,"defaultDateShortFormat")||S.H.changed(e,"defaultDateSource")||S.H.changed(e,"defaultDateStyle")||S.H.changed(e,"defaultGravatarsStyle")||S.H.changed(e,"defaultTimeFormat")||S.H.changed(e,"sortContributorsBy")||S.H.changed(e,"sortRepositoriesBy")||S.H.changed(e,"views.collapseWorktreesWhenPossible"))}findContributor(e,t){let{repoPath:i,username:r,email:s,name:n}=e;return this.findNode(e=>e instanceof ContributorNode&&e.contributor.username===r&&e.contributor.email===s&&e.contributor.name===n,{maxDepth:2,canTraverse:e=>e instanceof ContributorsViewNode||e instanceof ContributorsRepositoryNode&&e.repoPath===i,token:t})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof iq.P&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof ContributorsViewNode||e instanceof iq.P});return void 0!==i&&await this.reveal(i,t),i}async revealContributor(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing contributor '${e.name}' in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findContributor(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}setFilesLayout(e){return S.H.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAllBranches(e){return S.H.updateEffective(`views.${this.configKey}.showAllBranches`,e)}setShowMergeCommits(e){(0,er.o)("gitlens:views:contributors:hideMergeCommits",!e),this.state.hideMergeCommits=!e,this.refresh(!0)}setShowAvatars(e){return S.H.updateEffective(`views.${this.configKey}.avatars`,e)}setShowStatistics(e){return S.H.updateEffective(`views.${this.configKey}.showStatistics`,e)}};rL([(0,es.G)(()=>"")],ContributorsView.prototype,"revealRepository",1),rL([(0,es.G)(()=>"")],ContributorsView.prototype,"revealContributor",1);var rU=i(7142);let GroupingNode=class GroupingNode extends t5.eu{constructor(e,t,i,r=n.TreeItemCollapsibleState.Expanded,s,o,a,l){super("grouping",d.Bd,e),this.label=t,this.childrenOrFn=i,this.collapsibleState=r,this.description=s,this.tooltip=o,this.iconPath=a,this.contextValue=l}getChildren(){return"function"==typeof this.childrenOrFn?this.childrenOrFn():this.childrenOrFn}getTreeItem(){let e=new n.TreeItem(this.label,this.collapsibleState);return e.id=this.id,e.contextValue=this.contextValue??t5.U0.Grouping,e.description=this.description,e.tooltip=this.tooltip,e.iconPath=this.iconPath,e}};var rW=Object.defineProperty,rq=Object.getOwnPropertyDescriptor;let DraftsViewNode=class DraftsViewNode extends iM.l{constructor(e){super("drafts",d.Bd,e)}async getChildren(){if(null==this.children){let e=[];try{let t=await this.view.container.drafts.getDrafts();t?.sort((e,t)=>t.updatedAt.getTime()-e.updatedAt.getTime());let i=(0,eo.fA)(t,this.calcDraftGroupKey.bind(this),e=>new rU.e(this.uri,this.view,this,e)),r=i.get("mine"),s=i.get("shared");r?.length&&!s?.length?e.push(...r):(r?.length&&e.push(new GroupingNode(this.view,"Created by Me",r)),s?.length&&e.push(new GroupingNode(this.view,"Shared with Me",s)))}catch(e){if(!(e instanceof h.WT))throw e}this.children=e}return this.children}getTreeItem(){return new n.TreeItem("Drafts",n.TreeItemCollapsibleState.Expanded)}calcDraftGroupKey(e){return"suggested_pr_change"===e.type?"pr_suggestion":e.isMine?"mine":"shared"}};let DraftsView=class DraftsView extends iN.DN{configKey="drafts";_disposable;constructor(e){super(e,"drafts","Cloud Patches","draftsView"),this.description=a.WZ}dispose(){this._disposable?.dispose(),super.dispose()}getRoot(){return new DraftsViewNode(this)}onVisibilityChanged(e){null==this._disposable&&(this._disposable=n.Disposable.from(this.container.subscription.onDidChange(()=>this.refresh(!0),this))),super.onVisibilityChanged(e)}async show(e){if(await (0,tL.Z)())return super.show(e)}get canReveal(){return!1}registerCommands(){return this.container.viewCommands,[rv(this.getQualifiedCommand("info"),()=>(0,e2.RS)(a.Ts.OpenWalkthrough,{step:"code-collab",source:"cloud-patches",detail:"info"}),this),rv(this.getQualifiedCommand("copy"),()=>(0,e2.RS)(a.Ts.ViewsCopy,this.activeSelection,this.selection),this),rv(this.getQualifiedCommand("refresh"),()=>this.refresh(!0),this),rv(this.getQualifiedCommand("create"),async()=>{await (0,e2.RS)(a.Ts.CreateCloudPatch),this.ensureRoot().triggerChange(!0)},this),rv(this.getQualifiedCommand("delete"),async e=>{let t={title:"Delete"};await n.window.showInformationMessage(`Are you sure you want to delete Cloud Patch '${e.draft.title}'?`,{modal:!0},t,{title:"Cancel",isCloseAffordance:!0})===t&&(await this.container.drafts.deleteDraft(e.draft.id),e.getParent()?.triggerChange(!0))},this),rv(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),rv(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this)]}async findDraft(e,t){return this.findNode(t=>t.draft?.id===e.id,{allowPaging:!1,maxDepth:2,canTraverse:e=>e instanceof DraftsViewNode||e instanceof GroupingNode,token:t})}async revealDraft(e,t){let i=await this.findDraft(e);if(null!=i)return await this.ensureRevealNode(i,t),i}setShowAvatars(e){return S.H.updateEffective(`views.${this.configKey}.avatars`,e)}};((e,t,i,r)=>{for(var s,n=r>1?void 0:r?rq(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&rW(t,i,n)})([(0,es.G)(()=>"")],DraftsView.prototype,"revealDraft",1);var rM=i(9115),rN=Object.defineProperty,rH=Object.getOwnPropertyDescriptor,rG=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?rH(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&rN(t,i,n),n};let FileHistoryNode=class FileHistoryNode extends iL.Y{constructor(e,t,i,r,s){super("file-history",e,t,i),this.parent=i,this.folder=r,this.branch=s,null!=s&&this.updateContext({branch:s}),this._uniqueId=(0,t5.pF)(`${this.type}+${e.toString()}`,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;splatted=!0;get id(){return this._uniqueId}toClipboard(){return this.uri.fileName}async getChildren(){this.view.description=`${this.label}${this.parent instanceof FileHistoryTrackerNode&&!this.parent.followingEditor?" (pinned)":""}`;let e=[];if(null==this.uri.repoPath)return e;let t=null!=this.branch?await this.view.container.git.getBranchAheadRange(this.branch):void 0,[i,r,s,n,o]=await Promise.all([this.getLog(),null==this.uri.sha?this.view.container.git.getStatusForFiles(this.uri.repoPath,this.getPathOrGlob()):void 0,null==this.uri.sha?this.view.container.git.getCurrentUser(this.uri.repoPath):void 0,null!=this.branch?this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath,this.branch.name):void 0,t?this.view.container.git.getLogRefsOnly(this.uri.repoPath,{limit:0,ref:t}):void 0]);if(r?.length){if(this.folder){let t=(0,eo.Tj)((0,eo.pD)((0,eo.qI)(r,e=>e.getPseudoCommits(this.view.container,s)),e=>e.sha,(e,t)=>e.with({files:{files:[...e.files??(null!=e.file?[e.file]:[]),...t.files??(null!=t.file?[t.file]:[])]}})),e=>new iQ.e(this.view,this,e));e.push(...t)}else{let[t]=r,i=t.getPseudoCommits(this.view.container,s);i.length&&e.push(...i.map(e=>new rM.f(this.view,this,t,e)))}}return(null!=i&&(e.push(...(0,iz.h)((0,eo.x1)(i.commits.values(),e=>this.folder?new iQ.e(this.view,this,e,o?.has(e.ref),this.branch,void 0,{expand:!1}):null!=e.file?new rM.f(this.view,this,e.file,e,{branch:this.branch,getBranchAndTagTips:n,unpublished:o?.has(e.ref)}):void 0),this)),i.hasMore&&e.push(new ij.cb(this.view,this,e[e.length-1]))),0===e.length)?[new ij.S2(this.view,this,"No file history could be found.")]:e}getTreeItem(){this.splatted=!1;let e=this.label,t=new n.TreeItem(e,n.TreeItemCollapsibleState.Expanded);return t.contextValue=t5.U0.FileHistory,t.description=this.uri.directory,t.tooltip=`History of ${this.uri.fileName}
${this.uri.directory}/${null==this.uri.sha?"":`

${this.uri.sha}`}`,this.view.description=`${e}${this.parent instanceof FileHistoryTrackerNode&&!this.parent.followingEditor?" (pinned)":""}`,t}get label(){return this.folder&&""===this.uri.fileName?`${(0,el.P8)(this.uri.path)}${this.uri.sha?` ${this.uri.sha===m.nB?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}`:`${this.uri.fileName}${this.uri.sha?` ${this.uri.sha===m.nB?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}`}subscribe(){let e=this.view.container.git.getRepository(this.uri);if(null!=e)return n.Disposable.from((0,eE.HC)(e.onDidChange,this.onRepositoryChanged,this),(0,eE.HC)(e.onDidChangeFileSystem,this.onFileSystemChanged,this,[e.watchFileSystem()]),(0,eE.HC)(S.H.onDidChange,e=>{S.H.changed(e,"advanced.fileHistoryFollowsRenames")&&this.view.resetNodeLastKnownLimit(this)},this))}etag(){return Date.now()}onRepositoryChanged(e){e.changed(b.Z_.Index,b.Z_.Heads,b.Z_.Remotes,b.Z_.RemoteProviders,b.Z_.Status,b.Z_.Unknown,b.Ti.Any)&&(P.Vy.debug(`FileHistoryNode.onRepositoryChanged(${e.toString()}); triggering node refresh`),this.triggerChange(!0))}onFileSystemChanged(e){if(this.folder){if(!e.uris.some(e=>e.fsPath.startsWith(this.uri.fsPath)))return}else if(!e.uris.some(e=>e.toString()===this.uri.toString()))return;P.Vy.debug(`FileHistoryNode.onFileSystemChanged(${this.uri.toString(!0)}); triggering node refresh`),this.triggerChange(!0)}refresh(e){e&&(this._log=void 0)}_log;async getLog(){return null==this._log&&(this._log=await this.view.container.git.getLogForFile(this.uri.repoPath,this.getPathOrGlob(),{limit:this.limit??this.view.config.pageItemLimit,ref:this.uri.sha})),this._log}getPathOrGlob(){return this.folder?n.Uri.joinPath(this.uri,"*"):this.uri}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await n.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());t?.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1,this.splatted)))}};rG([(0,en.Yz)()],FileHistoryNode.prototype,"subscribe",1),rG([(0,es.G)(),(0,en.Yz)()],FileHistoryNode.prototype,"refresh",1),rG([(0,G.B)()],FileHistoryNode.prototype,"getPathOrGlob",1),rG([(0,es.G)()],FileHistoryNode.prototype,"loadMore",1);var rV=Object.defineProperty,rQ=Object.getOwnPropertyDescriptor,rj=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?rQ(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&rV(t,i,n),n};let FileHistoryTrackerNode=class FileHistoryTrackerNode extends iL.Y{_base;splatted=!0;constructor(e){super("file-history-tracker",d.Bd,e)}dispose(){super.dispose(),this.child=void 0}_child;get child(){return this._child}set child(e){this._child!==e&&(this._child?.dispose(),this._child=e)}async getChildren(){if(null==this.child){let e;if(!this.hasUri)return this.view.description=void 0,this.view.message="There are no editors open that can provide file history information.",[];this.view.message=void 0;let t={...this.uri,repoPath:this.uri.repoPath,sha:this._base??this.uri.sha},i=new d.nk(this.uri,t),r=!1;try{((await n.workspace.fs.stat(this.uri)).type&n.FileType.Directory)===n.FileType.Directory&&(r=!0)}catch{}this.view.title=r?"Folder History":"File History",t.sha&&"HEAD"!==t.sha?(0,v.HH)(t.sha)||({values:[e]}=await this.view.container.git.getBranches(this.uri.repoPath,{filter:e=>e.name===t.sha})):e=await this.view.container.git.getBranch(this.uri.repoPath),this.child=new FileHistoryNode(i,this.view,this,r,e)}return this.child.getChildren()}getTreeItem(){this.splatted=!1;let e=new n.TreeItem("File History",n.TreeItemCollapsibleState.Expanded);return e.contextValue=t5.U0.ActiveFileHistory,e}get followingEditor(){return this.canSubscribe}get hasUri(){return this._uri!=d.Bd&&null!=this._uri.repoPath}async changeBase(){let e=await (0,iX.N)(this.uri.repoPath,"Change File History Base","Choose a reference to set as the new base",{allowRevisions:!0,picked:this._base,sort:{branches:{current:!0},tags:{}}});if(null!=e){if((0,v.gC)(e)){let t=await this.view.container.git.getBranch(this.uri.repoPath);this._base=t?.name===e.name?void 0:e.ref}else this._base=e.ref;null!=this.child&&(this.setUri(),await this.triggerChange())}}async refresh(e=!1){let t;let i=(0,ea.dQ)();if(!this.canSubscribe)return!1;e&&(null!=this._uri&&this._uri!==d.Bd&&await this.view.container.documentTracker.resetCache(this._uri,"log"),this.reset());let r=n.window.activeTextEditor;if(null==r||!this.view.container.git.isTrackable(r.document.uri))return!!(!this.hasUri||this.view.container.git.isTrackable(this.uri)&&n.window.visibleTextEditors.some(e=>e.document?.uri.path===this.uri.path))||(this.reset(),(0,ea.TT)(i,`, uri=${P.Vy.toLoggable(this._uri)}`),!1);if(r.document.uri.path===this.uri.path)return(0,ea.TT)(i,`, uri=${P.Vy.toLoggable(this._uri)}`),!0;let s=await d.nk.fromUri(r.document.uri);if(null!=s.sha){let e=await this.view.container.git.getWorkingUri(s.repoPath,s);null!=e&&(t=e)}return!!(this.hasUri&&te.Y.equals(t??s,this.uri))||(null!=t&&(s=await d.nk.fromUri(t)),null==s.repoPath?this.reset():(this.setUri(s),this.child=void 0),(0,ea.TT)(i,`, uri=${P.Vy.toLoggable(this._uri)}`),!1)}reset(){this.setUri(),this.child=void 0}setEditorFollowing(e){e&&this.setUri(),this.canSubscribe=e,e||this.triggerChange()}async showHistoryForUri(e){this.setUri(e),await this.triggerChange()}subscribe(){return n.Disposable.from((0,eE.HC)(n.window.onDidChangeActiveTextEditor,(0,eu.sg)(this.onActiveEditorChanged,250),this))}etag(){return 0}_triggerChangeDebounced;onActiveEditorChanged(e){if(null==e&&(0,ed.QK)(this._uri)){null==this._triggerChangeDebounced&&(this._triggerChangeDebounced=(0,eu.sg)(()=>this.triggerChange(),1500)),this._triggerChangeDebounced();return}this.triggerChange()}setUri(e){this._uri=e??d.Bd,(0,er.o)("gitlens:views:fileHistory:canPin",this.hasUri)}};rj([(0,es.G)(),(0,en.Rm)()],FileHistoryTrackerNode.prototype,"changeBase",1),rj([(0,es.G)(),(0,en.Yz)({exit:!0})],FileHistoryTrackerNode.prototype,"refresh",1),rj([(0,en.Rm)()],FileHistoryTrackerNode.prototype,"setEditorFollowing",1),rj([(0,en.Rm)()],FileHistoryTrackerNode.prototype,"showHistoryForUri",1),rj([(0,en.Yz)()],FileHistoryTrackerNode.prototype,"subscribe",1),rj([(0,en.Yz)({args:!1})],FileHistoryTrackerNode.prototype,"onActiveEditorChanged",1);var rz=Object.defineProperty,rY=Object.getOwnPropertyDescriptor,rK=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?rY(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&rz(t,i,n),n};let LineHistoryNode=class LineHistoryNode extends iL.Y{constructor(e,t,i,r,s,n){super("line-history",e,t,i),this.parent=i,this.branch=r,this.selection=s,this.editorContents=n,null!=r&&this.updateContext({branch:r}),this._uniqueId=(0,t5.pF)(`${this.type}+${e.toString()}+[${s.start.line},${s.start.character}-${s.end.line},${s.end.character}]`,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;splatted=!0;get id(){return this._uniqueId}toClipboard(){return this.uri.fileName}async getChildren(){this.view.description=`${this.label}${this.parent instanceof LineHistoryTrackerNode&&!this.parent.followingEditor?" (pinned)":""}`;let e=[];if(null==this.uri.repoPath)return e;let t=this.selection,i=null!=this.branch?await this.view.container.git.getBranchAheadRange(this.branch):void 0,[r,s,o,a]=await Promise.all([this.getLog(t),null==this.uri.sha||(0,v._k)(this.uri.sha)?this.editorContents?await this.view.container.git.getBlameForRangeContents(this.uri,t,this.editorContents):await this.view.container.git.getBlameForRange(this.uri,t):void 0,null!=this.branch?this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath,this.branch.name):void 0,i?this.view.container.git.getLogRefsOnly(this.uri.repoPath,{limit:0,ref:i}):void 0]);if(null!=s)for(let i of s.commits.values()){if(!i.isUncommitted)continue;let r=s.lines[0],o=s.lines[s.lines.length-1],a=t.active.line===r.line-1;t=new n.Selection((a?o:r).originalLine-1,t.anchor.character,(a?r:o).originalLine-1,t.active.character);let l=await this.view.container.git.getStatusForFile(this.uri.repoPath,this.uri);if(null!=l){let r={conflictStatus:l?.conflictStatus,path:i.file?.path??"",indexStatus:l?.indexStatus,originalPath:i.file?.originalPath,repoPath:this.uri.repoPath,status:l?.status??w.NO.Modified,workingTreeStatus:l?.workingTreeStatus},s=await this.view.container.git.getCurrentUser(this.uri.repoPath),n=l?.getPseudoCommits(this.view.container,s);if(null!=n)for(let i of n.reverse())e.unshift(new rM.f(this.view,this,r,i,{selection:t}))}break}return(null!=r&&(e.push(...(0,iz.h)((0,eo.x1)(r.commits.values(),e=>null!=e.file?new rM.f(this.view,this,e.file,e,{branch:this.branch,getBranchAndTagTips:o,selection:t,unpublished:a?.has(e.ref)}):void 0),this)),r.hasMore&&e.push(new ij.cb(this.view,this,e[e.length-1]))),0===e.length)?[new ij.S2(this.view,this,"No line history could be found.")]:e}getTreeItem(){this.splatted=!1;let e=this.label,t=new n.TreeItem(e,n.TreeItemCollapsibleState.Expanded);return t.contextValue=t5.U0.LineHistory,t.description=this.uri.directory,t.tooltip=`History of ${this.uri.fileName}${this.lines}
${this.uri.directory}/${null==this.uri.sha?"":`

${this.uri.sha}`}`,this.view.description=`${e}${this.parent instanceof LineHistoryTrackerNode&&!this.parent.followingEditor?" (pinned)":""}`,t}get label(){return`${this.uri.fileName}${this.lines}${this.uri.sha?` ${this.uri.sha===m.nB?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}`}get lines(){return this.selection.isSingleLine?`:${this.selection.start.line+1}`:`:${this.selection.start.line+1}-${this.selection.end.line+1}`}subscribe(){let e=this.view.container.git.getRepository(this.uri);if(null!=e)return n.Disposable.from((0,eE.HC)(e.onDidChange,this.onRepositoryChanged,this),(0,eE.HC)(e.onDidChangeFileSystem,this.onFileSystemChanged,this,[e.watchFileSystem()]))}etag(){return Date.now()}onRepositoryChanged(e){e.changed(b.Z_.Index,b.Z_.Heads,b.Z_.Remotes,b.Z_.RemoteProviders,b.Z_.Status,b.Z_.Unknown,b.Ti.Any)&&(P.Vy.debug(`LineHistoryNode.onRepositoryChanged(${e.toString()}); triggering node refresh`),this.triggerChange(!0))}onFileSystemChanged(e){e.uris.some(e=>e.toString()===this.uri.toString())&&(P.Vy.debug(`LineHistoryNode.onFileSystemChanged(${this.uri.toString(!0)}); triggering node refresh`),this.triggerChange(!0))}refresh(e){e&&(this._log=void 0)}_log;async getLog(e){return null==this._log&&(this._log=await this.view.container.git.getLogForFile(this.uri.repoPath,this.uri,{all:!1,limit:this.limit??this.view.config.pageItemLimit,range:e??this.selection,ref:this.uri.sha,renames:!1})),this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await n.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());t?.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1,this.splatted)))}};rK([(0,G.B)()],LineHistoryNode.prototype,"lines",1),rK([(0,en.Yz)()],LineHistoryNode.prototype,"subscribe",1),rK([(0,es.G)(),(0,en.Yz)()],LineHistoryNode.prototype,"refresh",1),rK([(0,es.G)()],LineHistoryNode.prototype,"loadMore",1);var rJ=Object.defineProperty,rZ=Object.getOwnPropertyDescriptor,rX=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?rZ(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&rJ(t,i,n),n};let LineHistoryTrackerNode=class LineHistoryTrackerNode extends iL.Y{_base;_editorContents;_selection;splatted=!0;constructor(e){super("line-history-tracker",d.Bd,e)}dispose(){super.dispose(),this.child=void 0}_child;get child(){return this._child}set child(e){this._child!==e&&(this._child?.dispose(),this._child=e)}async getChildren(){if(null==this.child){let e;if(!this.hasUri)return this.view.description=void 0,this.view.message="There are no editors open that can provide line history information.",[];if(null==this._selection)return this.view.description=void 0,this.view.message="There was no selection provided for line history.",this.view.description=`${this.uri.fileName}${this.uri.sha?` ${this.uri.sha===m.nB?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}${this.followingEditor?"":" (pinned)"}`,[];this.view.message=void 0;let t={...this.uri,repoPath:this.uri.repoPath,sha:this.uri.sha??this._base},i=new d.nk(this.uri,t);t.sha&&"HEAD"!==t.sha?(0,v.HH)(t.sha)||({values:[e]}=await this.view.container.git.getBranches(this.uri.repoPath,{filter:e=>e.name===t.sha})):e=await this.view.container.git.getBranch(this.uri.repoPath),this.child=new LineHistoryNode(i,this.view,this,e,this._selection,this._editorContents)}return this.child.getChildren()}getTreeItem(){this.splatted=!1;let e=new n.TreeItem("Line History",n.TreeItemCollapsibleState.Expanded);return e.contextValue=t5.U0.ActiveLineHistory,this.ensureSubscription(),e}get followingEditor(){return this.canSubscribe}get hasUri(){return this._uri!=d.Bd&&null!=this._uri.repoPath}async changeBase(){let e=await (0,iX.N)(this.uri.repoPath,"Change Line History Base","Choose a reference to set as the new base",{allowRevisions:!0,picked:this._base,sort:{branches:{current:!0},tags:{}}});if(null!=e){if((0,v.gC)(e)){let t=await this.view.container.git.getBranch(this.uri.repoPath);this._base=t?.name===e.name?void 0:e.ref}else this._base=e.ref;null!=this.child&&(this.setUri(),await this.triggerChange())}}async refresh(e=!1){let t=(0,ea.dQ)();if(!this.canSubscribe)return!1;e&&(null!=this._uri&&this._uri!==d.Bd&&await this.view.container.documentTracker.resetCache(this._uri,"log"),this.reset());let i=n.window.activeTextEditor;if(null==i||!this.view.container.git.isTrackable(i.document.uri))return!!(!this.hasUri||this.view.container.git.isTrackable(this.uri)&&n.window.visibleTextEditors.some(e=>e.document?.uri.path===this.uri.path))||(this.reset(),(0,ea.TT)(t,`, uri=${P.Vy.toLoggable(this._uri)}`),!1);if(i.document.uri.path===this.uri.path&&null!=this._selection&&i.selection.isEqual(this._selection))return(0,ea.TT)(t,`, uri=${P.Vy.toLoggable(this._uri)}`),!0;let r=await d.nk.fromUri(i.document.uri);return!!(this.hasUri&&te.Y.equals(r,this.uri)&&null!=this._selection&&i.selection.isEqual(this._selection))||(null==r.repoPath?this.reset():(this.setUri(r),this._editorContents=i.document.isDirty?i.document.getText():void 0,this._selection=i.selection,this.child=void 0),(0,ea.TT)(t,`, uri=${P.Vy.toLoggable(this._uri)}`),!1)}reset(){this.setUri(),this._editorContents=void 0,this._selection=void 0,this.child=void 0}setEditorFollowing(e){this.canSubscribe=e}subscribe(){if(this.view.container.lineTracker.subscribed(this))return;let e=(0,eu.sg)(this.onActiveLinesChanged.bind(this),250);return this.view.container.lineTracker.subscribe(this,(0,eE.HC)(this.view.container.lineTracker.onDidChangeActiveLines,t=>{t.pending||e(t)},this))}etag(){return 0}onActiveLinesChanged(e){this.triggerChange()}setUri(e){this._uri=e??d.Bd,(0,er.o)("gitlens:views:fileHistory:canPin",this.hasUri)}};rX([(0,es.G)(),(0,en.Rm)()],LineHistoryTrackerNode.prototype,"changeBase",1),rX([(0,es.G)(),(0,en.Yz)({exit:!0})],LineHistoryTrackerNode.prototype,"refresh",1),rX([(0,en.Rm)()],LineHistoryTrackerNode.prototype,"setEditorFollowing",1),rX([(0,en.Yz)()],LineHistoryTrackerNode.prototype,"subscribe",1),rX([(0,en.Yz)({args:{0:e=>`editor=${e.editor?.document.uri.toString(!0)}, selections=${e.selections?.map(e=>`[${e.anchor}-${e.active}]`).join(",")}, pending=${!!e.pending}, reason=${e.reason}`}})],LineHistoryTrackerNode.prototype,"onActiveLinesChanged",1);let r0=" (pinned)";let FileHistoryView=class FileHistoryView extends iN.DN{configKey="fileHistory";_followCursor=!1;_followEditor=!0;constructor(e){super(e,"fileHistory","File History","fileHistoryView"),(0,er.o)("gitlens:views:fileHistory:cursorFollowing",this._followCursor),(0,er.o)("gitlens:views:fileHistory:editorFollowing",this._followEditor)}get canSelectMany(){return this.container.prereleaseOrDebugging}get showCollapseAll(){return!1}getRoot(){return this._followCursor?new LineHistoryTrackerNode(this):new FileHistoryTrackerNode(this)}registerCommands(){return this.container.viewCommands,[rv(this.getQualifiedCommand("copy"),()=>(0,e2.RS)(a.Ts.ViewsCopy,this.activeSelection,this.selection),this),rv(this.getQualifiedCommand("refresh"),()=>this.refresh(!0),this),rv(this.getQualifiedCommand("changeBase"),()=>this.changeBase(),this),rv(this.getQualifiedCommand("setCursorFollowingOn"),()=>this.setCursorFollowing(!0),this),rv(this.getQualifiedCommand("setCursorFollowingOff"),()=>this.setCursorFollowing(!1),this),rv(this.getQualifiedCommand("setEditorFollowingOn"),()=>this.setEditorFollowing(!0),this),rv(this.getQualifiedCommand("setEditorFollowingOff"),()=>this.setEditorFollowing(!1),this),rv(this.getQualifiedCommand("setRenameFollowingOn"),()=>this.setRenameFollowing(!0),this),rv(this.getQualifiedCommand("setRenameFollowingOff"),()=>this.setRenameFollowing(!1),this),rv(this.getQualifiedCommand("setShowAllBranchesOn"),()=>this.setShowAllBranches(!0),this),rv(this.getQualifiedCommand("setShowAllBranchesOff"),()=>this.setShowAllBranches(!1),this),rv(this.getQualifiedCommand("setShowMergeCommitsOn"),()=>this.setShowMergeCommits(!0),this),rv(this.getQualifiedCommand("setShowMergeCommitsOff"),()=>this.setShowMergeCommits(!1),this),rv(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),rv(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||S.H.changed(e,"defaultDateFormat")||S.H.changed(e,"defaultDateLocale")||S.H.changed(e,"defaultDateShortFormat")||S.H.changed(e,"defaultDateSource")||S.H.changed(e,"defaultDateStyle")||S.H.changed(e,"defaultGravatarsStyle")||S.H.changed(e,"defaultTimeFormat")||S.H.changed(e,"advanced.fileHistoryFollowsRenames")||S.H.changed(e,"advanced.fileHistoryShowAllBranches")||S.H.changed(e,"advanced.fileHistoryShowMergeCommits"))}async showHistoryForUri(e){this.setCursorFollowing(!1);let t=this.ensureRoot(!0);return t instanceof FileHistoryTrackerNode&&(await t.showHistoryForUri(e),this.setEditorFollowing(!1)),this.show()}changeBase(){this.root?.changeBase()}setCursorFollowing(e){let t=!this._followEditor&&this.root?.hasUri?this.root.uri:void 0;this._followCursor=e,(0,er.o)("gitlens:views:fileHistory:cursorFollowing",e),this.title=this._followCursor?"Line History":"File History";let i=this.ensureRoot(!0);null!=t&&i.setUri(t),i.setEditorFollowing(this._followEditor),i.ensureSubscription(),this.refresh(!0)}setEditorFollowing(e){let t=this.ensureRoot();t.hasUri&&(this._followEditor=e,(0,er.o)("gitlens:views:fileHistory:editorFollowing",e),t.setEditorFollowing(e),this.description?.endsWith(r0)?e&&(this.description=this.description.substr(0,this.description.length-r0.length)):e||null==this.description||(this.description+=r0),e&&(t.ensureSubscription(),this.refresh(!0)))}setRenameFollowing(e){return S.H.updateEffective("advanced.fileHistoryFollowsRenames",e)}setShowAllBranches(e){return S.H.updateEffective("advanced.fileHistoryShowAllBranches",e)}setShowMergeCommits(e){return S.H.updateEffective("advanced.fileHistoryShowMergeCommits",e)}setShowAvatars(e){return S.H.updateEffective(`views.${this.configKey}.avatars`,e)}};let r1=" (pinned)";let LineHistoryView=class LineHistoryView extends iN.DN{configKey="lineHistory";constructor(e){super(e,"lineHistory","Line History","lineHistoryView"),(0,er.o)("gitlens:views:lineHistory:editorFollowing",!0)}get canSelectMany(){return this.container.prereleaseOrDebugging}get showCollapseAll(){return!1}getRoot(){return new LineHistoryTrackerNode(this)}registerCommands(){return this.container.viewCommands,[rv(this.getQualifiedCommand("copy"),()=>(0,e2.RS)(a.Ts.ViewsCopy,this.activeSelection,this.selection),this),rv(this.getQualifiedCommand("refresh"),()=>this.refresh(!0),this),rv(this.getQualifiedCommand("changeBase"),()=>this.changeBase(),this),rv(this.getQualifiedCommand("setEditorFollowingOn"),()=>this.setEditorFollowing(!0),this),rv(this.getQualifiedCommand("setEditorFollowingOff"),()=>this.setEditorFollowing(!1),this),rv(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),rv(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||S.H.changed(e,"defaultDateFormat")||S.H.changed(e,"defaultDateLocale")||S.H.changed(e,"defaultDateShortFormat")||S.H.changed(e,"defaultDateSource")||S.H.changed(e,"defaultDateStyle")||S.H.changed(e,"defaultGravatarsStyle")||S.H.changed(e,"defaultTimeFormat"))}changeBase(){this.root?.changeBase()}setEditorFollowing(e){let t=this.ensureRoot();t.hasUri&&((0,er.o)("gitlens:views:lineHistory:editorFollowing",e),this.root?.setEditorFollowing(e),this.description?.endsWith(r1)?e&&(this.description=this.description.substr(0,this.description.length-r1.length)):e||null==this.description||(this.description+=r1),e&&(t.ensureSubscription(),this.refresh(!0)))}setShowAvatars(e){return S.H.updateEffective(`views.${this.configKey}.avatars`,e)}};let PullRequestViewNode=class PullRequestViewNode extends t5.eu{child;constructor(e){super("pullrequest",d.Bd,e)}getChildren(){return null!=this.child?[this.child]:[]}getTreeItem(){return new n.TreeItem("Pull Request",n.TreeItemCollapsibleState.Expanded)}async setPullRequest(e,t){null!=e?(this.child=new t7.X(this.view,this,e,t,{expand:!0}),this.view.description=`${e.repository.owner}/${e.repository.repo}#${e.id}`,(0,er.o)("gitlens:views:pullRequest:visible",!0)):(this.child=void 0,this.view.description=void 0,(0,er.o)("gitlens:views:pullRequest:visible",!1)),await this.triggerChange()}};let PullRequestView=class PullRequestView extends iN.DN{configKey="pullRequest";constructor(e){super(e,"pullRequest","Pull Request","commitsView")}get canReveal(){return!1}get canSelectMany(){return!1}get showCollapseAll(){return!1}close(){this.setVisible(!1)}async showPullRequest(e,t){null!=e?(this.description=`${e.repository.owner}/${e.repository.repo}#${e.id}`,this.setVisible(!0)):(this.description=void 0,this.setVisible(!1)),await this.ensureRoot().setPullRequest(e,t),null!=e&&await this.show()}setVisible(e){(0,er.o)("gitlens:views:pullRequest:visible",e)}getRoot(){return new PullRequestViewNode(this)}registerCommands(){return this.container.viewCommands,[rv(this.getQualifiedCommand("copy"),()=>(0,e2.RS)(a.Ts.ViewsCopy,this.activeSelection,this.selection),this),rv(this.getQualifiedCommand("refresh"),()=>this.refresh(!0),this),rv(this.getQualifiedCommand("close"),()=>this.close(),this),rv(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),rv(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),rv(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),rv(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),rv(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||S.H.changed(e,"defaultDateFormat")||S.H.changed(e,"defaultDateLocale")||S.H.changed(e,"defaultDateShortFormat")||S.H.changed(e,"defaultDateSource")||S.H.changed(e,"defaultDateStyle")||S.H.changed(e,"defaultGravatarsStyle")||S.H.changed(e,"defaultTimeFormat")||S.H.changed(e,"plusFeatures.enabled"))}setFilesLayout(e){return S.H.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return S.H.updateEffective(`views.${this.configKey}.avatars`,e)}};var r2=Object.defineProperty,r3=Object.getOwnPropertyDescriptor;let RemoteNode=class RemoteNode extends t5.eu{constructor(e,t,i,r,s){super("remote",e,t,i),this.parent=i,this.repo=r,this.remote=s,this.updateContext({repository:r,remote:s}),this._uniqueId=(0,t5.pF)(this.type,this.context)}get id(){return this._uniqueId}toClipboard(){return this.remote.name}get repoPath(){return this.repo.path}async getChildren(){let e=await this.repo.getBranches({filter:e=>e.remote&&e.name.startsWith(this.remote.name),sort:!0});if(0===e.values.length)return[new ij.S2(this.view,this,"No branches could be found.")];let t=e.values.map(e=>new BranchNode(d.nk.fromRepoPath(this.uri.repoPath,e.ref),this.view,this,this.repo,e,!1,{showComparison:!1,showTracking:!1}));if("list"===this.view.config.branches.layout)return t;let i=(0,e1.Ay)(t,e=>e.treeHierarchy,(...e)=>e.join("/"),this.view.config.files.compact,e=>(e.compacted=!0,!0));return new BranchOrTagFolderNode(this.view,this,"remote-branch",i,this.repo.path,"",void 0).getChildren()}async getTreeItem(){let e=new n.TreeItem(this.remote.name,n.TreeItemCollapsibleState.Collapsed);if(e.id=this.id,e.description=(0,y.Qw)(this.remote),null!=this.remote.provider){let{provider:t}=this.remote;if(e.iconPath=null!=t.avatarUri&&this.view.config.avatars?t.avatarUri:"remote"===t.icon?new n.ThemeIcon("cloud"):{dark:this.view.container.context.asAbsolutePath(`images/dark/icon-${t.icon}.svg`),light:this.view.container.context.asAbsolutePath(`images/light/icon-${t.icon}.svg`)},this.remote.hasIntegration()){let i=await this.view.container.integrations.getByRemote(this.remote),r=i?.maybeConnected??await i?.isConnected();e.contextValue=`${t5.U0.Remote}${r?"+connected":"+disconnected"}`,e.tooltip=`${this.remote.name} (${t.name} ${a.EO.Dash} ${r?"connected":"not connected"})
${t.displayPath}
`}else e.contextValue=t5.U0.Remote,e.tooltip=`${this.remote.name} (${t.name})
${t.displayPath}
`}else e.contextValue=t5.U0.Remote,e.iconPath=new n.ThemeIcon("cloud"),e.tooltip=`${this.remote.name} (${this.remote.domain})
${this.remote.path}
`;for(let{type:t,url:i}of(this.remote.default&&(e.contextValue+="+default",e.resourceUri=n.Uri.parse("gitlens-view://remote/default")),this.remote.urls))e.tooltip+=`
${i} (${t})`;return e}async setAsDefault(e=!0){await this.remote.setAsDefault(e),this.triggerChange()}};((e,t,i,r)=>{for(var s,n=r>1?void 0:r?r3(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&r2(t,i,n)})([(0,en.Rm)()],RemoteNode.prototype,"setAsDefault",1);var r4=Object.defineProperty,r8=Object.getOwnPropertyDescriptor;let RemotesNode=class RemotesNode extends iM.l{constructor(e,t,i,r){super("remotes",e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,t5.pF)(this.type,this.context)}get id(){return this._uniqueId}get repoPath(){return this.repo.path}async getChildren(){if(null==this.children){let e=await this.repo.getRemotes({sort:!0});if(0===e.length)return[new ij.S2(this.view,this,"No remotes could be found")];this.children=e.map(e=>new RemoteNode(this.uri,this.view,this,this.repo,e))}return this.children}getTreeItem(){let e=new n.TreeItem("Remotes",n.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=t5.U0.Remotes,e.iconPath=new n.ThemeIcon("cloud"),e}refresh(){super.refresh(!0)}};((e,t,i,r)=>{for(var s,n=r>1?void 0:r?r8(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&r4(t,i,n)})([(0,en.Yz)()],RemotesNode.prototype,"refresh",1);var r5=Object.defineProperty,r7=Object.getOwnPropertyDescriptor,r9=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?r7(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&r5(t,i,n),n};let ReflogRecordNode=class ReflogRecordNode extends t5.eu{constructor(e,t,i){super("reflog-record",d.nk.fromRepoPath(i.repoPath),e,t),this.record=i,this.updateContext({reflog:i}),this._uniqueId=(0,t5.pF)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}async getChildren(){let e=await this.getLog();if(void 0===e)return[new ij.S2(this.view,this,"No commits could be found.")];let t=[...(0,eo.Tj)(e.commits.values(),e=>new iQ.e(this.view,this,e))];return e.hasMore&&t.push(new ij.cb(this.view,this,t[t.length-1])),t}getTreeItem(){let e=new n.TreeItem(`${this.record.command}${this.record.commandArgs?` ${this.record.commandArgs}`:""}`,n.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.description=`${0===this.record.HEAD.length?"":`${this.record.HEAD} ${a.EO.Space}${a.EO.Dot}${a.EO.Space} `}${this.record.formattedDate}`,e.contextValue=t5.U0.ReflogRecord,e.tooltip=`${0===this.record.HEAD.length?"":`${this.record.HEAD}
`}${this.record.command}${this.record.commandArgs?` ${this.record.commandArgs}`:""}${this.record.details?` (${this.record.details})`:""}
${this.record.formatDateFromNow()} (${this.record.formatDate()})
${this.record.previousShortSha} ${a.EO.Space}${a.EO.ArrowRight}${a.EO.Space} ${this.record.shortSha}`,e}refresh(e){e&&(this._log=void 0)}_log;async getLog(){if(void 0===this._log){let e=`${this.record.previousSha}..${this.record.sha}`;this._log=await this.view.container.git.getLog(this.uri.repoPath,{limit:this.limit??this.view.config.defaultItemLimit,ref:e})}return this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await n.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());t?.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1)))}};r9([(0,es.G)(),(0,en.Yz)()],ReflogRecordNode.prototype,"refresh",1),r9([(0,es.G)()],ReflogRecordNode.prototype,"loadMore",1);var r6=Object.defineProperty,se=Object.getOwnPropertyDescriptor;let ReflogNode=class ReflogNode extends iM.l{constructor(e,t,i,r){super("reflog",e,t,i),this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,t5.pF)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}async getChildren(){if(void 0===this.children){let e=[],t=await this.getReflog();if(void 0===t||0===t.records.length)return[new ij.S2(this.view,this,"No activity could be found.")];e.push(...t.records.map(e=>new ReflogRecordNode(this.view,this,e))),t.hasMore&&e.push(new ij.cb(this.view,this,e[e.length-1])),this.children=e}return this.children}getTreeItem(){let e=new n.TreeItem("Incoming Activity",n.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=t5.U0.Reflog,e.description="experimental",e.iconPath={dark:this.view.container.context.asAbsolutePath("images/dark/icon-activity.svg"),light:this.view.container.context.asAbsolutePath("images/light/icon-activity.svg")},e}refresh(e){super.refresh(!0),e&&(this._reflog=void 0)}_reflog;async getReflog(){return void 0===this._reflog&&(this._reflog=await this.view.container.git.getIncomingActivity(this.repo.path,{all:!0,limit:this.limit??this.view.config.defaultItemLimit})),this._reflog}get hasMore(){return this._reflog?.hasMore??!0}async loadMore(e){let t=await this.getReflog();t?.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._reflog!==t&&(this._reflog=t,this.limit=t?.count,this.triggerChange(!1)))}};((e,t,i,r)=>{for(var s,n=r>1?void 0:r?se(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&r6(t,i,n)})([(0,en.Yz)()],ReflogNode.prototype,"refresh",1);var st=i(5179),si=Object.defineProperty,sr=Object.getOwnPropertyDescriptor;let StashesNode=class StashesNode extends iM.l{constructor(e,t,i,r){super("stashes",e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,t5.pF)(this.type,this.context)}get id(){return this._uniqueId}get repoPath(){return this.repo.path}async getChildren(){if(null==this.children){let e=await this.repo.getStash();if(null==e)return[new ij.S2(this.view,this,"No stashes could be found.")];this.children=[...(0,eo.Tj)(e.commits.values(),e=>new st.m(this.view,this,e))]}return this.children}getTreeItem(){let e=new n.TreeItem("Stashes",n.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=t5.U0.Stashes,e.iconPath=new n.ThemeIcon("gitlens-stashes"),e}refresh(){super.refresh(!0)}};((e,t,i,r)=>{for(var s,n=r>1?void 0:r?sr(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&si(t,i,n)})([(0,en.Yz)()],StashesNode.prototype,"refresh",1);let StatusFilesNode=class StatusFilesNode extends t5.eu{constructor(e,t,i,r){super("status-files",d.nk.fromRepoPath(i.repoPath),e,t),this.parent=t,this.status=i,this.range=r,this._uniqueId=(0,t5.pF)(this.type,this.context)}get id(){return this._uniqueId}get repoPath(){return this.status.repoPath}async getChildren(){let e,t=[],i=this.repoPath;null!=this.range&&null!=(e=await this.view.container.git.getLog(i,{limit:0,ref:this.range}))&&(await Promise.allSettled((0,eo.Tj)((0,eo.pb)(e.commits.values(),e=>null==e.files),e=>e.ensureFullDetails())),t=[...(0,eo.qI)(e.commits.values(),e=>e.files?.map(t=>({...t,commit:e}))??[])]),("worktrees"===this.view.type||this.view.config.includeWorkingTree)&&0!==this.status.files.length&&t.unshift(...(0,eo.qI)(this.status.files,e=>(0,eo.Tj)(e.getPseudoCommits(this.view.container,void 0),t=>this.getFileWithPseudoCommit(e,t)))),t.sort((e,t)=>t.commit.date.getTime()-e.commit.date.getTime());let r=Object.values((0,eo.$z)(t,e=>e.path)).map(e=>new iV.Z(this.view,this,e[e.length-1],i,e.map(e=>e.commit),"working"));if("list"!==this.view.config.files.layout){let e=(0,e1.Ay)(r,e=>e.uri.relativePath.split("/"),(...e)=>(0,el.Fd)((0,el.HS)(...e)),this.view.config.files.compact);r=new iG.x(this.view,this,e,i,"",void 0,!0).getChildren()}else r.sort((e,t)=>e.priority-t.priority||(0,L.wN)(e.label,t.label));return r}async getTreeItem(){let e="worktrees"===this.view.type||this.view.config.includeWorkingTree?this.status.files.length:0;if(null!=this.range&&null!=this.status.upstream&&this.status.state.ahead>0){if(e>0){let t=await this.view.container.git.getDiffStatus(this.repoPath,`${this.status.upstream?.name}...`);if(null!=t){let i=new Set;for(let e of this.status.files)i.add(e.path);for(let e of t)i.add(e.path);e=i.size}}else{let t=await this.view.container.git.getChangedFilesCount(this.repoPath,`${this.status.upstream?.name}...`);null!=t?e+=t.changedFiles:e=-1}}let t=-1===e?"?? files changed":`${(0,L.td)("file",e)} changed`,i=new n.TreeItem(t,n.TreeItemCollapsibleState.Collapsed);return i.description="working tree",i.id=this.id,i.contextValue=t5.U0.StatusFiles,i.iconPath={dark:this.view.container.context.asAbsolutePath("images/dark/icon-diff.svg"),light:this.view.container.context.asAbsolutePath("images/light/icon-diff.svg")},i}getFileWithPseudoCommit(e,t){return{status:e.status,repoPath:e.repoPath,indexStatus:e.indexStatus,workingTreeStatus:e.workingTreeStatus,path:e.path,originalPath:e.originalPath,commit:t}}};var ss=Object.defineProperty,sn=Object.getOwnPropertyDescriptor,so=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?sn(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&ss(t,i,n),n};let TagNode=class TagNode extends iH.t{constructor(e,t,i,r){super("tag",e,t,i),this.parent=i,this.tag=r,this.updateContext({tag:r}),this._uniqueId=(0,t5.pF)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}toClipboard(){return this.tag.name}get label(){return"tree"===this.view.config.branches.layout?this.tag.getBasename():this.tag.name}get ref(){return this.tag}async getChildren(){let e=await this.getLog();if(null==e)return[new ij.S2(this.view,this,"No commits could be found.")];let t=await this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath,this.tag.name),i=[...(0,iz.h)((0,eo.Tj)(e.commits.values(),e=>new iQ.e(this.view,this,e,void 0,void 0,t)),this)];return e.hasMore&&i.push(new ij.cb(this.view,this,i[i.length-1],{getCount:()=>this.view.container.git.getCommitCount(this.tag.repoPath,this.tag.name)})),i}getTreeItem(){let e=new n.TreeItem(this.label,n.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=t5.U0.Tag,e.description=(0,l.E)(this.tag.message),e.tooltip=`${this.tag.name}${(0,L.eV)(a.EO.Dash,2,2)}${(0,v.pV)(this.tag.sha,{force:!0})}${null!=this.tag.date?`
${this.tag.formatDateFromNow()} (${this.tag.formatDate(this.view.container.TagDateFormatting.dateFormat)})`:""}

${(0,l.E)(this.tag.message)}${null!=this.tag.commitDate&&this.tag.date!==this.tag.commitDate?`
${this.tag.formatCommitDateFromNow()} (${this.tag.formatCommitDate(this.view.container.TagDateFormatting.dateFormat)})`:""}`,e}refresh(e){e&&(this._log=void 0)}_log;async getLog(){return null==this._log&&(this._log=await this.view.container.git.getLog(this.uri.repoPath,{limit:this.limit??this.view.config.defaultItemLimit,ref:this.tag.name})),this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await n.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());t?.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1)))}};so([(0,es.G)(),(0,en.Yz)()],TagNode.prototype,"refresh",1),so([(0,es.G)()],TagNode.prototype,"loadMore",1);var sa=Object.defineProperty,sl=Object.getOwnPropertyDescriptor;let TagsNode=class TagsNode extends iM.l{constructor(e,t,i,r){super("tags",e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,t5.pF)(this.type,this.context)}get id(){return this._uniqueId}get repoPath(){return this.repo.path}async getChildren(){if(null==this.children){let e=await this.repo.getTags({sort:!0});if(0===e.values.length)return[new ij.S2(this.view,this,"No tags could be found.")];let t=e.values.map(e=>new TagNode(d.nk.fromRepoPath(this.uri.repoPath,e.ref),this.view,this,e));if("list"===this.view.config.branches.layout)return t;let i=(0,e1.Ay)(t,e=>e.tag.name.split("/"),(...e)=>e.join("/"),this.view.config.files.compact),r=new BranchOrTagFolderNode(this.view,this,"tag",i,this.repo.path,"",void 0);this.children=r.getChildren()}return this.children}getTreeItem(){let e=new n.TreeItem("Tags",n.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=t5.U0.Tags,e.iconPath=new n.ThemeIcon("tag"),e}refresh(){super.refresh(!0)}};((e,t,i,r)=>{for(var s,n=r>1?void 0:r?sl(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&sa(t,i,n)})([(0,en.Yz)()],TagsNode.prototype,"refresh",1);var sh=i(3607);let UncommittedFileNode=class UncommittedFileNode extends i7.u{constructor(e,t,i,r){super("uncommitted-file",d.nk.fromFile(r,i),e,t,r)}toClipboard(){return this.path}get path(){return this.file.path}getChildren(){return[]}getTreeItem(){let e=new n.TreeItem(this.label,n.TreeItemCollapsibleState.None);e.contextValue=t5.U0.File,e.description=this.description,e.resourceUri=this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath);let t=(0,w.OG)(this.file.status);return e.iconPath={dark:this.view.container.context.asAbsolutePath((0,el.HS)("images","dark",t)),light:this.view.container.context.asAbsolutePath((0,el.HS)("images","light",t))},e.tooltip=i5.Z.fromTemplate(`\${file}
\${directory}/

\${status}\${ (originalPath)}`,this.file),e.command=this.getCommand(),this._label=void 0,this._description=void 0,e}_description;get description(){return null==this._description&&(this._description=i5.Z.fromTemplate(this.view.config.formats.files.description,{...this.file},{relativePath:this.relativePath})),this._description}_folderName;get folderName(){return null==this._folderName&&(this._folderName=(0,el.pD)(this.uri.relativePath)),this._folderName}_label;get label(){return null==this._label&&(this._label=i5.Z.fromTemplate("${file}",{...this.file},{relativePath:this.relativePath})),this._label}get priority(){return 0}_relativePath;get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0,this._description=void 0}getCommand(){let e={uri:d.nk.fromFile(this.file,this.repoPath),line:0,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes with Previous Revision",command:a.Ts.DiffWithPrevious,arguments:[void 0,e]}}};let UncommittedFilesNode=class UncommittedFilesNode extends t5.eu{constructor(e,t,i,r){super("uncommitted-files",d.nk.fromRepoPath(i.repoPath),e,t),this.parent=t,this.status=i,this.range=r,this._uniqueId=(0,t5.pF)(this.type,this.context)}get id(){return this._uniqueId}get repoPath(){return this.status.repoPath}getChildren(){let e=this.repoPath,t=[...(0,eo.qI)(this.status.files,e=>e.getPseudoCommits(this.view.container,void 0).map(t=>({status:e.status,repoPath:e.repoPath,indexStatus:e.indexStatus,workingTreeStatus:e.workingTreeStatus,path:e.path,originalPath:e.originalPath,commit:t})))];t.sort((e,t)=>t.commit.date.getTime()-e.commit.date.getTime());let i=Object.values((0,eo.$z)(t,e=>e.path)).map(t=>new UncommittedFileNode(this.view,this,e,t[t.length-1]));if("list"!==this.view.config.files.layout){let t=(0,e1.Ay)(i,e=>e.uri.relativePath.split("/"),(...e)=>(0,el.Fd)((0,el.HS)(...e)),this.view.config.files.compact);i=new iG.x(this.view,this,t,e,"",void 0,!0).getChildren()}else i.sort((e,t)=>e.priority-t.priority||e.label.localeCompare(t.label,void 0,{numeric:!0,sensitivity:"base"}));return i}getTreeItem(){let e=new n.TreeItem("Uncommitted changes",n.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=t5.U0.UncommittedFiles,e.iconPath=new n.ThemeIcon("folder"),e}};var sc=Object.defineProperty,su=Object.getOwnPropertyDescriptor,sd=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?su(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&sc(t,i,n),n};let WorktreeNode=class WorktreeNode extends iM.l{constructor(e,t,i,r,s){super("worktree",e,t,i),this.parent=i,this.worktree=r,this.worktreeStatus=s,this.updateContext({worktree:r}),this._uniqueId=(0,t5.pF)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;_branch;get id(){return this._uniqueId}toClipboard(){return this.worktree.uri.fsPath}get repoPath(){return this.uri.repoPath}async getChildren(){if(null==this.children){let e,t;let i=this._branch;if(null!=i&&this.view.config.pullRequests.enabled&&this.view.config.pullRequests.showForBranches&&(null!=i.upstream||i.remote)&&(0,er.SD)("gitlens:hasConnectedRemotes")&&void 0===(t=this.getState("pullRequest"))&&void 0===this.getState("pendingPullRequest")){e=(0,eh.v6)();let t=this.getAssociatedPullRequest(i,{include:["opened","merged"]});queueMicrotask(async()=>{await e?.promise;let r=!1,s=setTimeout(()=>{r=!0,this.view.triggerNodeChange(this)},250),n=await t;clearTimeout(s),null!=n&&null!=this.children&&this.children.splice(0,0,new t7.X(this.view,this,n,i)),(r||null!=n)&&this.view.triggerNodeChange(this)})}let[r,s,n]=await Promise.allSettled([this.getLog(),this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath),null==i||i.remote?void 0:this.view.container.git.getBranchAheadRange(i).then(e=>e?this.view.container.git.getLogRefsOnly(this.uri.repoPath,{limit:0,ref:e}):void 0)]),o=(0,eh.Ro)(r);if(null==o)return[new ij.S2(this.view,this,"No commits could be found.")];let a=[];null!=i&&null!=t&&a.push(new t7.X(this.view,this,t,i)),null!=i&&!1!==this.view.config.showBranchComparison&&a.push(new CompareBranchNode(this.uri,this.view,this,i,this.view.config.showBranchComparison,this.splatted));let l=(0,eh.Ro)(n),h=(0,eh.Ro)(s);a.push(...(0,iz.h)((0,eo.Tj)(o.commits.values(),e=>new iQ.e(this.view,this,e,l?.has(e.ref),i,h)),this)),o.hasMore&&a.push(new ij.cb(this.view,this,a[a.length-1])),this.worktreeStatus?.status?.hasChanges&&a.unshift(new UncommittedFilesNode(this.view,this,this.worktreeStatus.status,void 0)),this.children=a,e?.fulfill()}return this.children}async getTreeItem(){let e;this.splatted=!1;let t="",i=new n.MarkdownString("",!0),r=!1,s=this.worktree.main||this.worktree.opened?`${(0,L.eV)(a.EO.Dash,2,2)} ${this.worktree.main?`_Main${this.worktree.opened?", Active_":"_"}`:this.worktree.opened?"_Active_":""} `:"",o=this.worktreeStatus?.status;switch(this.worktree.type){case"bare":e=new n.ThemeIcon("folder"),i.appendMarkdown(`${this.worktree.main?"$(pass) ":""}Bare Worktree${s}\\
\`${this.worktree.friendlyPath}\``);break;case"branch":{let{branch:l}=this.worktree;if(this._branch=l,i.appendMarkdown(`${this.worktree.main?"$(pass) ":""}Worktree for Branch $(git-branch) ${l?.getNameWithoutRemote()??l?.name}${s}\\
\`${this.worktree.friendlyPath}\``),e=new n.ThemeIcon("git-branch"),null!=o&&(r=o.hasChanges,i.appendMarkdown(`

${o.getFormattedDiffStatus({prefix:"Has Uncommitted Changes\\\n",empty:"No Uncommitted Changes",expand:!0})}`)),null!=l&&(i.appendMarkdown(`

Branch $(git-branch) ${l.getNameWithoutRemote()}`),!l.remote)){if(null!=l.upstream){let e=a.EO.Dash,r=await l.getRemote();if(l.upstream.missing)e=a.EO.Warning;else if(null!=r){let t,i;for(let{type:e}of r.urls)if("fetch"===e){if(t=!0,i)break}else if("push"===e&&(i=!0,t))break;t&&i?e=a.EO.ArrowsRightLeft:i?e=a.EO.ArrowRight:t&&(e=a.EO.ArrowLeft)}t=`${l.getTrackingStatus({empty:(0,L.eV)(e,0,2),suffix:(0,L.eV)(e,2,2)})}${l.upstream.name}`,i.appendMarkdown(` is ${l.getTrackingStatus({empty:l.upstream.missing?`missing upstream $(git-branch) ${l.upstream.name}`:`up to date with $(git-branch)  ${l.upstream.name}${r?.provider?.name?` on ${r.provider.name}`:""}`,expand:!0,icons:!0,separator:", ",suffix:` $(git-branch) ${l.upstream.name}${r?.provider?.name?` on ${r.provider.name}`:""}`})}`)}else{let e=(0,y.lb)(await this.view.container.git.getRemotesWithProviders(l.repoPath));i.appendMarkdown(` hasn't been published to ${e??"a remote"}`)}}break}case"detached":e=new n.ThemeIcon("git-commit"),i.appendMarkdown(`${this.worktree.main?"$(pass) ":""}Detached Worktree at $(git-commit) ${(0,v.pV)(this.worktree.sha)}${s}\\
\`${this.worktree.friendlyPath}\``),null!=o&&(r=o.hasChanges,i.appendMarkdown(`

${o.getFormattedDiffStatus({prefix:"Has Uncommitted Changes",empty:"No Uncommitted Changes",expand:!0})}`))}let l=this.getState("pendingPullRequest");null!=l&&i.appendMarkdown(`

$(loading~spin) Loading associated pull request${a.EO.Ellipsis}`);let h=this.worktreeStatus?.missing??!1;h&&i.appendMarkdown(`

${a.EO.Warning} Unable to locate worktree path`);let c=new n.TreeItem(this.worktree.name,n.TreeItemCollapsibleState.Collapsed);return c.id=this.id,c.description=t,c.contextValue=`${t5.U0.Worktree}${this.worktree.main?"+main":""}${this.worktree.opened?"+active":""}`,c.iconPath=null!=l?new n.ThemeIcon("loading~spin"):this.worktree.opened?new n.ThemeIcon("check"):e,c.tooltip=i,c.resourceUri=h?n.Uri.parse("gitlens-view://worktree/missing"):r?n.Uri.parse("gitlens-view://worktree/changes"):void 0,c}refresh(e){super.refresh(!0),e&&(this._log=void 0,this.deleteState())}async getAssociatedPullRequest(e,t){let i=this.getState("pullRequest");if(void 0!==i)return Promise.resolve(i??void 0);let r=this.getState("pendingPullRequest");return null==r?(r=e.getAssociatedPullRequest(t),this.storeState("pendingPullRequest",r),i=await r,this.storeState("pullRequest",i??null),this.deleteState("pendingPullRequest"),i):r}_log;async getLog(){return null==this._log&&(this._log=await this.view.container.git.getLog(this.uri.repoPath,{ref:this.worktree.sha,limit:this.limit??this.view.config.defaultItemLimit})),this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await n.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());t?.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.children=void 0,this.triggerChange(!1)))}};sd([(0,en.Yz)()],WorktreeNode.prototype,"refresh",1),sd([(0,es.G)()],WorktreeNode.prototype,"loadMore",1);var sp=Object.defineProperty,sg=Object.getOwnPropertyDescriptor;let WorktreesNode=class WorktreesNode extends iM.l{constructor(e,t,i,r){super("worktrees",e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,t5.pF)(this.type,this.context)}get id(){return this._uniqueId}get repoPath(){return this.repo.path}async getChildren(){if(null==this.children){if(!(await this.repo.access(c.k.Worktrees)).allowed)return[];let e=await this.repo.getWorktrees();if(0===e.length)return[new ij.S2(this.view,this,"No worktrees could be found.")];this.children=await (0,e1.lX)((0,sh.xG)(e),async e=>{let t;let i=!1;try{t=await e.getStatus()}catch(t){P.Vy.error(t,`Worktree status failed: ${e.uri.toString(!0)}`),i=!0}return new WorktreeNode(this.uri,this.view,this,e,{status:t,missing:i})})}return this.children}async getTreeItem(){let e=await this.repo.access(c.k.Worktrees),t=new n.TreeItem("Worktrees",e.allowed?n.TreeItemCollapsibleState.Collapsed:n.TreeItemCollapsibleState.None);return t.id=this.id,t.contextValue=t5.U0.Worktrees,t.description=e.allowed?void 0:` ${a.EO.Warning}  Requires a trial or paid plan for use on privately-hosted repos`,t.iconPath=new n.ThemeIcon("folder-opened"),t}refresh(){super.refresh(!0)}};((e,t,i,r)=>{for(var s,n=r>1?void 0:r?sg(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&sp(t,i,n)})([(0,en.Yz)()],WorktreesNode.prototype,"refresh",1);var sm=Object.defineProperty,sf=Object.getOwnPropertyDescriptor,sw=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?sf(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&sm(t,i,n),n};let RepositoryNode=class RepositoryNode extends iL.Y{constructor(e,t,i,r,s){super("repository",e,t,i),this.repo=r,this.updateContext({...s,repository:this.repo}),this._uniqueId=(0,t5.pF)(this.type,this.context),this._status=this.repo.getStatus()}_status;get id(){return this._uniqueId}toClipboard(){return this.repo.path}get repoPath(){return this.repo.path}get workspace(){return this.context.workspace}get wsRepositoryDescriptor(){return this.context.wsRepositoryDescriptor}async getChildren(){if(void 0===this.children){let e=[],t=await this._status;if(null!=t){let i=new p.Zr(this.view.container,t.repoPath,t.branch,!1,!0,void 0,t.sha,t.upstream,t.state.ahead,t.state.behind,t.detached,t.rebasing),[r,s]=await Promise.all([this.view.container.git.getMergeStatus(t.repoPath),this.view.container.git.getRebaseStatus(t.repoPath)]);null!=r?e.push(new MergeStatusNode(this.view,this,i,r,t,!0)):null!=s?e.push(new RebaseStatusNode(this.view,this,i,s,t,!0)):this.view.config.showUpstreamStatus&&(t.upstream?t.state.behind||t.state.ahead?(t.state.behind&&e.push(new BranchTrackingStatusNode(this.view,this,i,t,"behind",!0)),t.state.ahead&&e.push(new BranchTrackingStatusNode(this.view,this,i,t,"ahead",!0,{showAheadCommits:!0}))):e.push(new BranchTrackingStatusNode(this.view,this,i,t,"same",!0)):t.detached||e.push(new BranchTrackingStatusNode(this.view,this,i,t,"none",!0))),this.view.config.includeWorkingTree&&0!==t.files.length&&e.push(new StatusFilesNode(this.view,this,t,void 0)),!1!==this.view.config.showBranchComparison&&e.push(new CompareBranchNode(this.uri,this.view,this,i,this.view.config.showBranchComparison,!0)),0===e.length||this.view.config.compact||e.push(new ij.S2(this.view,this,"",a.EO.Dash.repeat(2),"")),this.view.config.showCommits&&e.push(new BranchNode(this.uri,this.view,this,this.repo,i,!0,{showAsCommits:!0,showComparison:!1,showCurrentOrOpened:!1,showStatus:!1,showTracking:!1}))}this.view.config.showBranches&&e.push(new BranchesNode(this.uri,this.view,this,this.repo)),this.view.config.showRemotes&&e.push(new RemotesNode(this.uri,this.view,this,this.repo)),this.view.config.showStashes&&await this.repo.supports(c.O.Stashes)&&e.push(new StashesNode(this.uri,this.view,this,this.repo)),this.view.config.showTags&&e.push(new TagsNode(this.uri,this.view,this,this.repo)),this.view.config.showWorktrees&&await this.repo.supports(c.O.Worktrees)&&e.push(new WorktreesNode(this.uri,this.view,this,this.repo)),this.view.config.showContributors&&e.push(new ContributorsNode(this.uri,this.view,this,this.repo)),this.view.config.showIncomingActivity&&!this.repo.provider.virtual&&e.push(new ReflogNode(this.uri,this.view,this,this.repo)),this.children=e}return this.children}async getTreeItem(){let e;let t=this.repo.formattedName??this.uri.repoPath??"",i=await this.repo?.getLastFetched()??0,r=`${this.repo.formattedName??this.uri.repoPath??""}${i?`${(0,L.eV)(a.EO.Dash,2,2)}Last fetched ${b.LN.formatLastFetched(i,!1)}`:""}${this.repo.formattedName?`\\
${this.uri.repoPath}`:""}`,s="",{workspace:o}=this.context,l=t5.U0.Repository;this.repo.starred&&(l+="+starred"),null!=o&&(l+="+workspace","cloud"===o.type?l+="+cloud":"local"===o.type&&(l+="+local"));let h="",c="";this.repo.closed?(l+="+closed",h=""):h="-solid",this.repo.virtual&&(l+="+virtual",h="-cloud");let u=await this._status;if(null!=u){let t;r+=`

Current branch $(git-branch) ${u.branch}${u.rebasing?" (Rebasing)":""}`,this.view.config.includeWorkingTree&&0!==u.files.length&&(s=u.getFormattedDiffStatus({compact:!0,prefix:(0,L.eV)(a.EO.Dot,1,1)}));let i=u.getUpstreamStatus({suffix:(0,L.eV)(a.EO.Dot,1,1)});if(e=`${i}${u.branch}${u.rebasing?" (Rebasing)":""}${s}`,null!=u.upstream){let e=(0,y.zF)(await this.view.container.git.getRemotesWithProviders(u.repoPath));t=e?.length?e[0].name:void 0}else{let e=await u.getRemote();t=e?.provider?.name}null!=u.upstream&&(r+=` is ${u.getUpstreamStatus({empty:`up to date with $(git-branch) ${u.upstream.name}${t?` on ${t}`:""}`,expand:!0,icons:!0,separator:", ",suffix:` $(git-branch) ${u.upstream.name}${t?` on ${t}`:""}`})}`,u.state.behind&&(l+="+behind",c="-red"),u.state.ahead&&(l+="+ahead",c=u.state.behind?"-yellow":"-green")),s&&(r+=`

Working tree has uncommitted changes${u.getFormattedDiffStatus({expand:!0,prefix:"\n",separator:"\n"})}`,c="-blue")}null!=o&&(r+=`

Repository is ${this.repo.closed?"not ":""}open in the current window`);let d=new n.TreeItem(t,null!=o||"workspaces"===this.view.type?n.TreeItemCollapsibleState.Collapsed:n.TreeItemCollapsibleState.Expanded);d.id=this.id,d.contextValue=l,d.description=`${e??""}${i?`${(0,L.eV)(a.EO.Dot,1,1)}Last fetched ${b.LN.formatLastFetched(i)}`:""}`,d.iconPath={dark:this.view.container.context.asAbsolutePath(`images/dark/icon-repo${h}${c}.svg`),light:this.view.container.context.asAbsolutePath(`images/light/icon-repo${h}${c}.svg`)},null==o||this.repo.closed||(d.resourceUri=n.Uri.parse("gitlens-view://workspaces/repository/open"));let p=new n.MarkdownString(r,!0);return p.supportHtml=!0,p.isTrusted=!0,d.tooltip=p,d}fetch(e={}){return this.repo.fetch(e)}pull(e={}){return this.repo.pull(e)}push(e={}){return this.repo.push(e)}async refresh(e=!1){super.refresh(e),e&&(this._status=this.repo.getStatus()),await this.ensureSubscription()}async star(){await this.repo.star(),this.parent.triggerChange()}async unstar(){await this.repo.unstar(),this.parent.triggerChange()}async subscribe(){let e=await this.repo?.getLastFetched()??0,t=[(0,eE.HC)(this.repo.onDidChange,this.onRepositoryChanged,this)],i=b.LN.getLastFetchedUpdateInterval(e);return 0!==e&&i>0&&t.push((0,eu.gC)(()=>{i!==b.LN.getLastFetchedUpdateInterval(e)&&this.resetSubscription(),this.splatted?this.view.triggerNodeChange(this.parent??this):this.view.triggerNodeChange(this)},i)),this.view.config.includeWorkingTree&&t.push((0,eE.HC)(this.repo.onDidChangeFileSystem,this.onFileSystemChanged,this,[this.repo.watchFileSystem()])),n.Disposable.from(...t)}etag(){return this.repo.etag}async onFileSystemChanged(e){if(this._status=this.repo.getStatus(),void 0!==this.children){let e=await this._status,t=this.children.findIndex(e=>"status-files"===e.type);if(void 0!==e&&(e.state.ahead||0!==e.files.length)){let i=1;-1===t&&(t=(0,e1.Kl)(this.children,e=>"tracking-status"===e.type||"branch"===e.type),i=0,t++),this.children.splice(t,i,new StatusFilesNode(this.view,this,e,void 0))}else -1!==t&&this.children.splice(t,1)}this.triggerChange(!1)}onRepositoryChanged(e){if(e.changed(b.Z_.Closed,b.Ti.Any)){this.dispose();return}if(null==this.children||e.changed(b.Z_.Config,b.Z_.Index,b.Z_.Heads,b.Z_.Opened,b.Z_.Status,b.Z_.Unknown,b.Ti.Any)){this.triggerChange(!0);return}if(e.changed(b.Z_.Remotes,b.Z_.RemoteProviders,b.Ti.Any)){let e=this.children.find(e=>"remotes"===e.type);null!=e&&this.view.triggerNodeChange(e)}if(e.changed(b.Z_.Stash,b.Ti.Any)){let e=this.children.find(e=>"stashes"===e.type);null!=e&&this.view.triggerNodeChange(e)}if(e.changed(b.Z_.Tags,b.Ti.Any)){let e=this.children.find(e=>"tags"===e.type);null!=e&&this.view.triggerNodeChange(e)}}};sw([(0,en.Rm)()],RepositoryNode.prototype,"fetch",1),sw([(0,en.Rm)()],RepositoryNode.prototype,"pull",1),sw([(0,en.Rm)()],RepositoryNode.prototype,"push",1),sw([(0,es.G)(),(0,en.Yz)()],RepositoryNode.prototype,"refresh",1),sw([(0,en.Rm)()],RepositoryNode.prototype,"star",1),sw([(0,en.Rm)()],RepositoryNode.prototype,"unstar",1),sw([(0,en.Yz)()],RepositoryNode.prototype,"subscribe",1),sw([(0,en.Yz)({args:{0:e=>`{ repository: ${e.repository?.name??""}, uris(${e.uris.length}): [${e.uris.slice(0,1).map(e=>e.fsPath).join(", ")}${e.uris.length>1?", ...":""}] }`}})],RepositoryNode.prototype,"onFileSystemChanged",1),sw([(0,en.Yz)({args:{0:e=>e.toString()}})],RepositoryNode.prototype,"onRepositoryChanged",1);var sv=Object.defineProperty,sy=Object.getOwnPropertyDescriptor,sb=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?sy(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&sv(t,i,n),n};let RemotesRepositoryNode=class RemotesRepositoryNode extends iq.P{async getChildren(){return null==this.child&&(this.child=new RemotesNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(b.Z_.Config,b.Z_.Remotes,b.Z_.RemoteProviders,b.Z_.Unknown,b.Ti.Any)}};let RemotesViewNode=class RemotesViewNode extends RepositoriesSubscribeableNode{async getChildren(){if(null==this.children){let e=this.view.container.git.openRepositories;if(S.H.get("views.collapseWorktreesWhenPossible")&&(e=[...(await (0,b.Y$)(e)).keys()]),0===e.length)return this.view.message=this.view.container.git.isDiscoveringRepositories?"Loading remotes...":"No remotes could be found.",[];this.view.message=void 0;let t=1===e.length;this.children=e.map(e=>new RemotesRepositoryNode(d.nk.fromRepoPath(e.path),this.view,this,e,t))}if(1===this.children.length){let[e]=this.children,t=await e.repo.getRemotes();return 0===t.length?(this.view.message="No remotes could be found.",this.view.title="Remotes",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Remotes (${t.length})`,e.getChildren())}return this.view.title="Remotes",this.children}getTreeItem(){return new n.TreeItem("Remotes",n.TreeItemCollapsibleState.Expanded)}};let RemotesView=class RemotesView extends iN.DN{configKey="remotes";constructor(e){super(e,"remotes","Remotes","remotesView")}get canReveal(){return this.config.reveal||!S.H.get("views.repositories.showRemotes")}get canSelectMany(){return this.container.prereleaseOrDebugging}getRoot(){return new RemotesViewNode(this)}registerCommands(){return this.container.viewCommands,[rv(this.getQualifiedCommand("copy"),()=>(0,e2.RS)(a.Ts.ViewsCopy,this.activeSelection,this.selection),this),rv(this.getQualifiedCommand("refresh"),()=>(this.container.git.resetCaches("branches","remotes"),this.refresh(!0)),this),rv(this.getQualifiedCommand("setLayoutToList"),()=>this.setLayout("list"),this),rv(this.getQualifiedCommand("setLayoutToTree"),()=>this.setLayout("tree"),this),rv(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),rv(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),rv(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),rv(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),rv(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this),rv(this.getQualifiedCommand("setShowBranchPullRequestOn"),()=>this.setShowBranchPullRequest(!0),this),rv(this.getQualifiedCommand("setShowBranchPullRequestOff"),()=>this.setShowBranchPullRequest(!1),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||S.H.changed(e,"defaultDateFormat")||S.H.changed(e,"defaultDateLocale")||S.H.changed(e,"defaultDateShortFormat")||S.H.changed(e,"defaultDateSource")||S.H.changed(e,"defaultDateStyle")||S.H.changed(e,"defaultGravatarsStyle")||S.H.changed(e,"defaultTimeFormat")||S.H.changed(e,"integrations.enabled")||S.H.changed(e,"sortBranchesBy")||S.H.changed(e,"sortRepositoriesBy")||S.H.changed(e,"views.collapseWorktreesWhenPossible"))}findBranch(e,t){if(!e.remote)return;let{repoPath:i}=e;return this.findNode(t=>t.branch?.ref===e.ref,{allowPaging:!0,maxDepth:5,canTraverse:t=>t instanceof RemotesViewNode||(t instanceof RemotesRepositoryNode||t instanceof BranchOrTagFolderNode?t.repoPath===i:t instanceof RemoteNode&&t.repoPath===i&&t.remote.name===(0,p.Zq)(e.name)),token:t})}async findCommit(e,t){let{repoPath:i}=e,r=await this.container.git.getCommitBranches(e.repoPath,e.ref,void 0,(0,g.WM)(e)?{commitDate:e.committer.date,remotes:!0}:{remotes:!0});if(0===r.length)return;let s=r.map(e=>e.split("/",1)[0]);return this.findNode(t=>t.commit?.ref===e.ref,{allowPaging:!0,maxDepth:6,canTraverse:e=>e instanceof RemotesViewNode||(e instanceof RemotesRepositoryNode||e instanceof BranchOrTagFolderNode?e.repoPath===i:e instanceof RemoteNode?e.repoPath===i&&s.includes(e.remote.name):e instanceof BranchNode?e.repoPath===i&&r.includes(e.branch.name):(e instanceof RepositoryNode||e instanceof RemotesNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i),token:t})}findRemote(e,t){let{repoPath:i}=e;return this.findNode(t=>t.remote?.name===e.name,{allowPaging:!0,maxDepth:2,canTraverse:e=>e instanceof RemotesViewNode||e instanceof RemotesRepositoryNode&&e.repoPath===i,token:t})}revealBranch(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing ${(0,v.M4)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findBranch(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealCommit(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing ${(0,v.M4)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findCommit(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}revealRemote(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing remote '${e.name}' in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findRemote(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof iq.P&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof RemotesViewNode||e instanceof iq.P});return void 0!==i&&await this.reveal(i,t),i}setLayout(e){return S.H.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return S.H.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return S.H.updateEffective(`views.${this.configKey}.avatars`,e)}async setShowBranchPullRequest(e){await S.H.updateEffective(`views.${this.configKey}.pullRequests.showForBranches`,e),await S.H.updateEffective(`views.${this.configKey}.pullRequests.enabled`,e)}};sb([(0,es.G)(()=>"")],RemotesView.prototype,"revealBranch",1),sb([(0,es.G)(()=>"")],RemotesView.prototype,"revealCommit",1),sb([(0,es.G)(()=>"")],RemotesView.prototype,"revealRemote",1),sb([(0,es.G)(()=>"")],RemotesView.prototype,"revealRepository",1);var sC=Object.defineProperty,sR=Object.getOwnPropertyDescriptor,sS=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?sR(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&sC(t,i,n),n};let RepositoriesNode=class RepositoriesNode extends iL.Y{constructor(e){super("repositories",d.Bd,e)}getChildren(){if(null==this.children){let e=this.view.container.git.openRepositories;if(0===e.length)return[new ij.S2(this.view,this,"No repositories could be found.")];this.children=e.map(e=>new RepositoryNode(d.nk.fromRepoPath(e.path),this.view,this,e))}return this.children}getTreeItem(){let e="workspaces"===this.view.type,t=e&&null!=this.view.container.workspaces.currentWorkspaceId,i=t&&null!=this.view.container.workspaces.currentWorkspace,r=new n.TreeItem(e?"Current Window":"Repositories",e?n.TreeItemCollapsibleState.Collapsed:n.TreeItemCollapsibleState.Expanded);e&&(r.description=n.workspace.name??n.workspace.workspaceFolders?.[0]?.name??"");let s=t5.U0.Repositories;return e&&(s+="+workspaces"),t&&(s+="+linked"),i&&(s+="+current",r.resourceUri=n.Uri.parse("gitlens-view://workspaces/workspace/current")),r.contextValue=s,r}async refresh(e=!1){let t=null!=this.children;if(super.refresh(e),!t)return;if(e){await this.unsubscribe(),this.ensureSubscription();return}let i=this.view.container.git.openRepositories;if(0===i.length&&(null==this.children||0===this.children.length))return;if(0===i.length){this.children=[new ij.S2(this.view,this,"No repositories could be found.")];return}let r=[];for(let e of i){let t=e.id,i=this.children.find(e=>e.repo.id===t);null!=i?(r.push(i),i.refresh()):r.push(new RepositoryNode(d.nk.fromRepoPath(e.path),this.view,this,e))}this.children=r,this.ensureSubscription()}subscribe(){let e=[(0,eE.HC)(this.view.container.git.onDidChangeRepositories,this.onRepositoriesChanged,this)];return"gitlens.views.repositories"===this.view.id&&this.view.config.autoReveal&&e.push((0,eE.HC)(n.window.onDidChangeActiveTextEditor,(0,eu.sg)(this.onActiveEditorChanged,500),this)),n.Disposable.from(...e)}etag(){return(0,eu.L2)(this.view.container.git.etag,this.view.container.subscription.etag)}onActiveEditorChanged(e){if(null!=e&&null!=this.children&&1!==this.children.length)try{let t=e.document.uri,i=this.children.find(e=>e instanceof RepositoryNode&&e.repo.containsUri(t));if(null==i)return;let r=0===this.view.selection.length?void 0:this.view.selection[0];for(;null!=r;){if(r===i)return;r=r.getParent()}this.view.reveal(i,{expand:!0})}catch(e){P.Vy.error(e)}}onRepositoriesChanged(e){this.triggerChange(!0)}};sS([(0,es.G)(),(0,en.Yz)()],RepositoriesNode.prototype,"refresh",1),sS([(0,en.Yz)()],RepositoriesNode.prototype,"subscribe",1),sS([(0,en.Yz)({args:!1})],RepositoriesNode.prototype,"onActiveEditorChanged",1),sS([(0,en.Yz)()],RepositoriesNode.prototype,"onRepositoriesChanged",1);var sP=Object.defineProperty,sA=Object.getOwnPropertyDescriptor,sk=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?sA(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&sP(t,i,n),n};let RepositoriesView=class RepositoriesView extends iN.DN{configKey="repositories";constructor(e){super(e,"repositories","Repositories","repositoriesView")}_onDidChangeAutoRefresh=new n.EventEmitter;get onDidChangeAutoRefresh(){return this._onDidChangeAutoRefresh.event}getRoot(){return new RepositoriesNode(this)}registerCommands(){return this.container.viewCommands,[rv(this.getQualifiedCommand("copy"),()=>(0,e2.RS)(a.Ts.ViewsCopy,this.activeSelection,this.selection),this),rv(this.getQualifiedCommand("refresh"),()=>(this.container.git.resetCaches("branches","contributors","remotes","stashes","status","tags"),this.refresh(!0)),this),rv(this.getQualifiedCommand("setBranchesLayoutToList"),()=>this.setBranchesLayout("list"),this),rv(this.getQualifiedCommand("setBranchesLayoutToTree"),()=>this.setBranchesLayout("tree"),this),rv(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),rv(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),rv(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),rv(this.getQualifiedCommand("setAutoRefreshToOn"),()=>this.setAutoRefresh(S.H.get("views.repositories.autoRefresh"),!0),this),rv(this.getQualifiedCommand("setAutoRefreshToOff"),()=>this.setAutoRefresh(S.H.get("views.repositories.autoRefresh"),!1),this),rv(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),rv(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this),rv(this.getQualifiedCommand("setShowBranchComparisonOn"),()=>this.setShowBranchComparison(!0),this),rv(this.getQualifiedCommand("setShowBranchComparisonOff"),()=>this.setShowBranchComparison(!1),this),rv(this.getQualifiedCommand("setBranchesShowBranchComparisonOn"),()=>this.setBranchShowBranchComparison(!0),this),rv(this.getQualifiedCommand("setBranchesShowBranchComparisonOff"),()=>this.setBranchShowBranchComparison(!1),this),rv(this.getQualifiedCommand("setShowBranchesOn"),()=>this.toggleSection("showBranches",!0),this),rv(this.getQualifiedCommand("setShowBranchesOff"),()=>this.toggleSection("showBranches",!1),this),rv(this.getQualifiedCommand("setShowCommitsOn"),()=>this.toggleSection("showCommits",!0),this),rv(this.getQualifiedCommand("setShowCommitsOff"),()=>this.toggleSection("showCommits",!1),this),rv(this.getQualifiedCommand("setShowContributorsOn"),()=>this.toggleSection("showContributors",!0),this),rv(this.getQualifiedCommand("setShowContributorsOff"),()=>this.toggleSection("showContributors",!1),this),rv(this.getQualifiedCommand("setShowRemotesOn"),()=>this.toggleSection("showRemotes",!0),this),rv(this.getQualifiedCommand("setShowRemotesOff"),()=>this.toggleSection("showRemotes",!1),this),rv(this.getQualifiedCommand("setShowStashesOn"),()=>this.toggleSection("showStashes",!0),this),rv(this.getQualifiedCommand("setShowStashesOff"),()=>this.toggleSection("showStashes",!1),this),rv(this.getQualifiedCommand("setShowTagsOn"),()=>this.toggleSection("showTags",!0),this),rv(this.getQualifiedCommand("setShowTagsOff"),()=>this.toggleSection("showTags",!1),this),rv(this.getQualifiedCommand("setShowWorktreesOn"),()=>this.toggleSection("showWorktrees",!0),this),rv(this.getQualifiedCommand("setShowWorktreesOff"),()=>this.toggleSection("showWorktrees",!1),this),rv(this.getQualifiedCommand("setShowUpstreamStatusOn"),()=>this.toggleSection("showUpstreamStatus",!0),this),rv(this.getQualifiedCommand("setShowUpstreamStatusOff"),()=>this.toggleSection("showUpstreamStatus",!1),this),rv(this.getQualifiedCommand("setShowSectionOff"),e=>this.toggleSectionByNode(e,!1),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||S.H.changed(e,"defaultDateFormat")||S.H.changed(e,"defaultDateLocale")||S.H.changed(e,"defaultDateShortFormat")||S.H.changed(e,"defaultDateSource")||S.H.changed(e,"defaultDateStyle")||S.H.changed(e,"defaultGravatarsStyle")||S.H.changed(e,"defaultTimeFormat")||S.H.changed(e,"sortBranchesBy")||S.H.changed(e,"sortContributorsBy")||S.H.changed(e,"sortTagsBy")||S.H.changed(e,"sortRepositoriesBy"))}onConfigurationChanged(e){S.H.changed(e,`views.${this.configKey}.autoRefresh`)&&this.setAutoRefresh(S.H.get("views.repositories.autoRefresh")),super.onConfigurationChanged(e)}get autoRefresh(){return this.config.autoRefresh&&this.container.storage.getWorkspace("views:repositories:autoRefresh",!0)}findBranch(e,t){let{repoPath:i}=e;return e.remote?this.findNode(t=>t.branch?.ref===e.ref,{allowPaging:!0,maxDepth:6,canTraverse:t=>t instanceof RepositoriesNode||(t instanceof RemoteNode?t.repoPath===i&&e.remote&&t.remote.name===(0,p.Zq)(e.name):(t instanceof RepositoryNode||t instanceof BranchesNode||t instanceof RemotesNode||t instanceof BranchOrTagFolderNode)&&t.repoPath===i),token:t}):this.findNode(t=>t.branch?.ref===e.ref,{allowPaging:!0,maxDepth:5,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof BranchesNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i,token:t})}async findCommit(e,t){let{repoPath:i}=e,r=await this.container.git.getCommitBranches(e.repoPath,e.ref,void 0,(0,g.WM)(e)?{commitDate:e.committer.date}:void 0);if(0!==r.length)return this.findNode(t=>t.commit?.ref===e.ref,{allowPaging:!0,maxDepth:6,canTraverse:async t=>t instanceof RepositoriesNode||(t instanceof RepositoryNode||t instanceof BranchesNode||t instanceof BranchOrTagFolderNode?t.repoPath===i:!!(t instanceof BranchNode&&t.repoPath===i&&r.includes(t.branch.name))&&(await t.loadMore({until:e.ref}),!0)),token:t});if(0===(r=await this.container.git.getCommitBranches(e.repoPath,e.ref,void 0,(0,g.WM)(e)?{commitDate:e.committer.date,remotes:!0}:{remotes:!0})).length)return;let s=r.map(e=>e.split("/",1)[0]);return this.findNode(t=>t.commit?.ref===e.ref,{allowPaging:!0,maxDepth:8,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RemoteNode?e.repoPath===i&&s.includes(e.remote.name):e instanceof BranchNode?e.repoPath===i&&r.includes(e.branch.name):(e instanceof RepositoryNode||e instanceof RemotesNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i),token:t})}findContributor(e,t){let{repoPath:i,username:r,email:s,name:n}=e;return this.findNode(e=>e instanceof ContributorNode&&e.contributor.username===r&&e.contributor.email===s&&e.contributor.name===n,{maxDepth:2,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof ContributorsNode)&&e.repoPath===i,token:t})}findRemote(e,t){let{repoPath:i}=e;return this.findNode(t=>t.remote?.name===e.name,{allowPaging:!0,maxDepth:2,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof RemotesNode)&&e.repoPath===i,token:t})}findStash(e,t){let{repoPath:i}=e;return this.findNode(t=>t.commit?.ref===e.ref,{maxDepth:3,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof StashesNode)&&e.repoPath===i,token:t})}findTag(e,t){let{repoPath:i}=e;return this.findNode(t=>t.tag?.ref===e.ref,{allowPaging:!0,maxDepth:5,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof TagsNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i,token:t})}findWorktree(e,t){let{repoPath:i,uri:r}=e,s=r.toString();return this.findNode(t=>t instanceof WorktreeNode&&e.uri.toString()===s,{maxDepth:2,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof WorktreesNode)&&e.repoPath===i,token:t})}revealBranch(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing ${(0,v.M4)(e,{icon:!1,quoted:!0})} in the Repositories view...`,cancellable:!0},async(i,r)=>{let s=await this.findBranch(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealBranches(e,t){let i=await this.findNode(t=>t instanceof BranchesNode&&t.repoPath===e,{maxDepth:2,canTraverse:t=>t instanceof RepositoriesNode||t instanceof RepositoryNode&&t.repoPath===e});return void 0!==i&&await this.reveal(i,t),i}async revealCommit(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing ${(0,v.M4)(e,{icon:!1,quoted:!0})} in the Repositories view...`,cancellable:!0},async(i,r)=>{let s=await this.findCommit(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealContributor(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing contributor '${e.name} in the Repositories view...`,cancellable:!0},async(i,r)=>{let s=await this.findContributor(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}revealRemote(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing remote '${e.name}' in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findRemote(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof RepositoryNode&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof RepositoriesNode});return void 0!==i&&await this.reveal(i,t),i}async revealStash(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing ${(0,v.M4)(e,{icon:!1,quoted:!0})} in the Repositories view...`,cancellable:!0},async(i,r)=>{let s=await this.findStash(e,r);return void 0!==s&&await this.reveal(s,t),s})}async revealStashes(e,t){let i=await this.findNode(t=>t instanceof StashesNode&&t.repoPath===e,{maxDepth:2,canTraverse:t=>t instanceof RepositoriesNode||t instanceof RepositoryNode&&t.repoPath===e});return void 0!==i&&await this.reveal(i,t),i}revealTag(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing ${(0,v.M4)(e,{icon:!1,quoted:!0})} in the Repositories view...`,cancellable:!0},async(i,r)=>{let s=await this.findTag(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealTags(e,t){let i=await this.findNode(t=>t instanceof TagsNode&&t.repoPath===e,{maxDepth:2,canTraverse:t=>t instanceof RepositoriesNode||t instanceof RepositoryNode&&t.repoPath===e});return void 0!==i&&await this.reveal(i,t),i}revealWorktree(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing worktree '${e.name}' in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findWorktree(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealWorktrees(e,t){let i=await this.findNode(t=>t instanceof WorktreesNode&&t.repoPath===e,{maxDepth:2,canTraverse:t=>t instanceof RepositoriesNode||t instanceof RepositoryNode&&t.repoPath===e});return void 0!==i&&await this.reveal(i,t),i}async setAutoRefresh(e,t){e&&(void 0===t?t=this.container.storage.getWorkspace("views:repositories:autoRefresh",!0):await this.container.storage.storeWorkspace("views:repositories:autoRefresh",t)),(0,er.o)("gitlens:views:repositories:autoRefresh",e&&t),this._onDidChangeAutoRefresh.fire()}setBranchesLayout(e){return S.H.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return S.H.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return S.H.updateEffective(`views.${this.configKey}.avatars`,e)}setShowBranchComparison(e){return S.H.updateEffective(`views.${this.configKey}.showBranchComparison`,!!e&&"working")}setBranchShowBranchComparison(e){return S.H.updateEffective(`views.${this.configKey}.branches.showBranchComparison`,!!e&&"branch")}toggleSection(e,t){return S.H.updateEffective(`views.${this.configKey}.${e}`,t)}toggleSectionByNode(e,t){return e instanceof BranchesNode?S.H.updateEffective(`views.${this.configKey}.showBranches`,t):e instanceof BranchNode?S.H.updateEffective(`views.${this.configKey}.showCommits`,t):e instanceof BranchTrackingStatusNode?S.H.updateEffective(`views.${this.configKey}.showUpstreamStatus`,t):e instanceof CompareBranchNode?this.setShowBranchComparison(t):e instanceof ContributorsNode?S.H.updateEffective(`views.${this.configKey}.showContributors`,t):e instanceof ReflogNode?S.H.updateEffective(`views.${this.configKey}.showIncomingActivity`,t):e instanceof RemotesNode?S.H.updateEffective(`views.${this.configKey}.showRemotes`,t):e instanceof StashesNode?S.H.updateEffective(`views.${this.configKey}.showStashes`,t):e instanceof TagsNode?S.H.updateEffective(`views.${this.configKey}.showTags`,t):e instanceof WorktreesNode?S.H.updateEffective(`views.${this.configKey}.showWorktrees`,t):Promise.resolve()}};sk([(0,es.G)(()=>"")],RepositoriesView.prototype,"revealBranch",1),sk([(0,es.G)(()=>"")],RepositoriesView.prototype,"revealBranches",1),sk([(0,es.G)(()=>"")],RepositoriesView.prototype,"revealCommit",1),sk([(0,es.G)(()=>"")],RepositoriesView.prototype,"revealContributor",1),sk([(0,es.G)(()=>"")],RepositoriesView.prototype,"revealRemote",1),sk([(0,es.G)(()=>"")],RepositoriesView.prototype,"revealRepository",1),sk([(0,es.G)(()=>"")],RepositoriesView.prototype,"revealStash",1),sk([(0,es.G)(()=>"")],RepositoriesView.prototype,"revealStashes",1),sk([(0,es.G)(()=>"")],RepositoriesView.prototype,"revealTag",1),sk([(0,es.G)(()=>"")],RepositoriesView.prototype,"revealTags",1),sk([(0,es.G)(()=>"")],RepositoriesView.prototype,"revealWorktree",1),sk([(0,es.G)(()=>"")],RepositoriesView.prototype,"revealWorktrees",1);let ComparePickerNode=class ComparePickerNode extends t5.eu{constructor(e,t,i){super("compare-picker",d.Bd,e,t),this.selectedRef=i}order=Date.now();getChildren(){return[]}getTreeItem(){let e,t;let i=this.selectedRef,r=i?.repoPath;if(void 0!==r&&this.view.container.git.repositoryCount>1){let t=this.view.container.git.getRepository(r);e=t?.formattedName??r}return null==i?((t=new n.TreeItem("Compare <branch, tag, or ref> with <branch, tag, or ref>",n.TreeItemCollapsibleState.None)).contextValue=t5.U0.ComparePicker,t.description=e,t.tooltip=`Click to select or enter a reference for compare${a.EO.Ellipsis}`,t.command={title:`Compare${a.EO.Ellipsis}`,command:this.view.getQualifiedCommand("selectForCompare")}):((t=new n.TreeItem(`Compare ${i.label} with <branch, tag, or ref>`,n.TreeItemCollapsibleState.None)).contextValue=t5.U0.ComparePickerWithRef,t.description=e,t.tooltip=`Click to compare ${i.label} with${a.EO.Ellipsis}`,t.command={title:`Compare ${i.label} with${a.EO.Ellipsis}`,command:this.view.getQualifiedCommand("compareWithSelected")}),t}};var sD=i(8547),sT=Object.defineProperty,s_=Object.getOwnPropertyDescriptor,sI=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?s_(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&sT(t,i,n),n};let SearchAndCompareViewNode=class SearchAndCompareViewNode extends t5.eu{splatted=!0;comparePicker;constructor(e){super("search-compare",d.Bd,e)}dispose(){super.dispose(),(0,iN.lm)(this._children)}_children;get children(){if(null==this._children){let e=[],t=this.view.getStoredNodes();0!==t.length&&e.push(...t),(0,iN.lm)(this._children,e),this._children=e}return this._children}set children(e){this.children!==e&&((0,iN.lm)(this.children,e),this._children=e)}getChildren(){let e=this.children;return 0===e.length?[]:e.sort((e,t)=>t.order-e.order)}getTreeItem(){this.splatted=!1;let e=new n.TreeItem("SearchAndCompare",n.TreeItemCollapsibleState.Expanded);return e.contextValue=t5.U0.SearchAndCompare,e}addOrReplace(e){let t=[...this.children];t.includes(e)||(t.push(e),this.children=t,this.view.triggerNodeChange())}async clear(){0!==this.children.length&&(this.removeComparePicker(!0),this.children=[],await this.view.clearStorage(),this.view.triggerNodeChange())}dismiss(e){if(e===this.comparePicker){this.removeComparePicker();return}(e instanceof i0.ip||e instanceof sD.X)&&e.dismiss();let t=[...this.children];if(0===t.length)return;let i=t.indexOf(e);-1!==i&&(t.splice(i,1),this.children=t,this.view.triggerNodeChange())}async refresh(e=!1){let t=this.children;if(0===t.length)return;let i=[...(0,e1.x1)(t,t=>{let i=t.refresh?.(e);return(0,eh.yL)(i)?i:void 0})];await Promise.allSettled(i)}async compareWithSelected(e,t){let i=this.comparePicker?.selectedRef;if(null!=i){if(null==e)e=i.repoPath;else if(e!==i.repoPath){this.selectForCompare(e,t);return}if(null==t){let r=await (0,iX.N)(e,`Compare ${this.getRefName(i.ref)} with`,"Choose a reference (branch, tag, etc) to compare with",{allowRevisions:!0,picked:"string"==typeof i.ref?i.ref:i.ref.ref,include:iX.m.BranchesAndTags|iX.m.HEAD,sort:{branches:{current:!0}}});if(null==r){null!=this.comparePicker&&(await this.view.show(),await this.view.reveal(this.comparePicker,{focus:!0,select:!0}));return}t=r.ref}this.removeComparePicker(),await this.view.compare(e,i.ref,t)}}async selectForCompare(e,t,i){let r;if(null==e&&(e=(await t9.t6("Compare"))?.path),null==e)return;this.removeComparePicker(!0);let s=i?.prompt??!1;if(null==t){let i=await (0,iX.N)(e,"Compare","Choose a reference (branch, tag, etc) to compare",{allowRevisions:{ranges:!0},include:iX.m.All,sort:{branches:{current:!0},tags:{}}});if(null==i){await this.triggerChange();return}if(t=i.ref,(0,v.p8)(t)){let e=(0,v.dx)(t);null!=e&&(t=e.ref1||"HEAD",r=e.ref2||"HEAD")}s=!0}this.comparePicker=new ComparePickerNode(this.view,this,{label:this.getRefName(t),repoPath:e,ref:t});let n=[...this.children];n.unshift(this.comparePicker),this.children=n,(0,er.o)("gitlens:views:canCompare",!0),await this.triggerChange(),await this.view.reveal(this.comparePicker,{focus:!1,select:!0}),s&&await this.compareWithSelected(e,r)}getRefName(e){return"string"==typeof e?(0,v.pV)(e,{strings:{working:"Working Tree"}}):e.label??(0,v.pV)(e.ref)}removeComparePicker(e=!1){if((0,er.o)("gitlens:views:canCompare",!1),null!=this.comparePicker){let t=[...this.children],i=t.indexOf(this.comparePicker);-1===i||(t.splice(i,1),this.children=t,e||this.triggerChange()),this.comparePicker=void 0}}};sI([(0,en.Rm)()],SearchAndCompareViewNode.prototype,"clear",1),sI([(0,en.Rm)({args:{0:e=>e.toString()}})],SearchAndCompareViewNode.prototype,"dismiss",1),sI([(0,es.G)(),(0,en.Yz)()],SearchAndCompareViewNode.prototype,"refresh",1);let SearchAndCompareView=class SearchAndCompareView extends iN.DN{configKey="searchAndCompare";constructor(e){super(e,"searchAndCompare","Search & Compare","searchAndCompareView")}get canSelectMany(){return this.container.prereleaseOrDebugging}getRoot(){return new SearchAndCompareViewNode(this)}registerCommands(){return this.container.viewCommands,[rv(this.getQualifiedCommand("clear"),()=>void this.clear(),this),rv(this.getQualifiedCommand("copy"),()=>(0,e2.RS)(a.Ts.ViewsCopy,this.activeSelection,this.selection),this),rv(this.getQualifiedCommand("refresh"),()=>this.refresh(!0),this),rv(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),rv(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),rv(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),rv(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),rv(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this),rv(this.getQualifiedCommand("swapComparison"),this.swapComparison,this),rv(this.getQualifiedCommand("selectForCompare"),()=>this.selectForCompare()),rv(this.getQualifiedCommand("compareWithSelected"),this.compareWithSelected,this),rv(this.getQualifiedCommand("setFilesFilterOnLeft"),e=>this.setFilesFilter(e,i2.U.Left),this),rv(this.getQualifiedCommand("setFilesFilterOnRight"),e=>this.setFilesFilter(e,i2.U.Right),this),rv(this.getQualifiedCommand("setFilesFilterOff"),e=>this.setFilesFilter(e,void 0),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||S.H.changed(e,"defaultDateFormat")||S.H.changed(e,"defaultDateLocale")||S.H.changed(e,"defaultDateShortFormat")||S.H.changed(e,"defaultDateSource")||S.H.changed(e,"defaultDateStyle")||S.H.changed(e,"defaultGravatarsStyle")||S.H.changed(e,"defaultTimeFormat"))}clear(){return this.root?.clear()}dismissNode(e){null!=this.root&&(e instanceof ComparePickerNode||e instanceof i0.ip||e instanceof sD.X)&&this.root.dismiss(e)}compare(e,t,i,r){return this.addResultsNode(()=>new i0.ip(this,this.ensureRoot(),e,"string"==typeof t?{ref:t}:t,"string"==typeof i?{ref:i}:i),r?.reveal!==!1&&void 0)}compareWithSelected(e,t){this.ensureRoot().compareWithSelected(e,t)}selectForCompare(e,t,i){this.ensureRoot().selectForCompare(e,t,i)}async search(e,t,{label:i,reveal:r},s,n){this.visible||await this.show();let o={label:`Search results ${"string"==typeof i?i:i.label}`,queryLabel:i};if(null!=n){await n.edit({pattern:t,labels:o,log:s});return}await this.addResultsNode(()=>new sD.X(this,this.root,e,t,o,s),r)}getStoredNodes(){let e=this.container.storage.getWorkspace("views:searchAndCompare:pinned");if(null==e)return[];let t=this.ensureRoot();return Object.entries(e).sort(([,e],[,t])=>(t.timestamp??0)-(e.timestamp??0)).map(([,e])=>"comparison"===e.type?((0,i0.sV)(this,e.checkedFiles),new i0.ip(this,t,e.path,{label:e.ref1.label,ref:e.ref1.ref??e.ref1.name??e.ref1.sha},{label:e.ref2.label,ref:e.ref2.ref??e.ref2.name??e.ref2.sha},e.timestamp)):new sD.X(this,t,e.path,(0,ei.V8)(e.search),e.labels,void 0,e.timestamp))}clearStorage(){return this.container.storage.deleteWorkspace("views:searchAndCompare:pinned")}async updateStorage(e,t,i=!1){let r=this.container.storage.getWorkspace("views:searchAndCompare:pinned");r=(0,t$.Y8)(r,e,t),await this.container.storage.storeWorkspace("views:searchAndCompare:pinned",r),i||this.triggerNodeChange(this.ensureRoot())}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof iq.P&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof SearchAndCompareViewNode||e instanceof iq.P});return void 0!==i&&await this.reveal(i,t),i}async addResultsNode(e,t={expand:!0,focus:!0,select:!0}){this.visible||!1===t||await this.show();let i=this.ensureRoot(),r=e();return i.addOrReplace(r),!1!==t&&queueMicrotask(()=>this.reveal(r,t)),r}setFilesLayout(e){return S.H.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return S.H.updateEffective(`views.${this.configKey}.avatars`,e)}setFilesFilter(e,t){e instanceof i2.o&&(e.filter=t)}swapComparison(e){if(e instanceof i0.ip)return e.swap()}};sI([(0,es.G)(()=>"")],SearchAndCompareView.prototype,"revealRepository",1);var s$=Object.defineProperty,sE=Object.getOwnPropertyDescriptor,sO=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?sE(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&s$(t,i,n),n};let StashesRepositoryNode=class StashesRepositoryNode extends iq.P{async getChildren(){return null==this.child&&(this.child=new StashesNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(b.Z_.Stash,b.Z_.Unknown,b.Ti.Any)}};let StashesViewNode=class StashesViewNode extends RepositoriesSubscribeableNode{async getChildren(){if(null==this.children){let e=this.view.container.git.openRepositories;if(S.H.get("views.collapseWorktreesWhenPossible")&&(e=[...(await (0,b.Y$)(e)).keys()]),0===e.length)return this.view.message=this.view.container.git.isDiscoveringRepositories?"Loading stashes...":"No stashes could be found.",[];this.view.message=void 0;let t=1===e.length;this.children=e.map(e=>new StashesRepositoryNode(d.nk.fromRepoPath(e.path),this.view,this,e,t))}if(1===this.children.length){let[e]=this.children,t=await e.repo.getStash();return null==t||0===t.commits.size?(this.view.message="No stashes could be found.",this.view.title="Stashes",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Stashes (${t.commits.size})`,e.getChildren())}return this.view.title="Stashes",this.children}getTreeItem(){return new n.TreeItem("Stashes",n.TreeItemCollapsibleState.Expanded)}};let StashesView=class StashesView extends iN.DN{configKey="stashes";constructor(e){super(e,"stashes","Stashes","stashesView")}get canReveal(){return this.config.reveal||!S.H.get("views.repositories.showStashes")}get canSelectMany(){return this.container.prereleaseOrDebugging}getRoot(){return new StashesViewNode(this)}registerCommands(){return this.container.viewCommands,[rv(this.getQualifiedCommand("copy"),()=>(0,e2.RS)(a.Ts.ViewsCopy,this.activeSelection,this.selection),this),rv(this.getQualifiedCommand("refresh"),()=>(this.container.git.resetCaches("stashes"),this.refresh(!0)),this),rv(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),rv(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),rv(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||S.H.changed(e,"defaultDateFormat")||S.H.changed(e,"defaultDateLocale")||S.H.changed(e,"defaultDateShortFormat")||S.H.changed(e,"defaultDateSource")||S.H.changed(e,"defaultDateStyle")||S.H.changed(e,"defaultGravatarsStyle")||S.H.changed(e,"defaultTimeFormat")||S.H.changed(e,"sortRepositoriesBy")||S.H.changed(e,"views.collapseWorktreesWhenPossible"))}findStash(e,t){let{repoPath:i}=e;return this.findNode(t=>t.commit?.ref===e.ref,{maxDepth:2,canTraverse:e=>e instanceof StashesViewNode||e instanceof StashesRepositoryNode&&e.repoPath===i,token:t})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof iq.P&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof StashesViewNode||e instanceof iq.P});return void 0!==i&&await this.reveal(i,t),i}async revealStash(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing ${(0,v.M4)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findStash(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}setFilesLayout(e){return S.H.updateEffective(`views.${this.configKey}.files.layout`,e)}};sO([(0,es.G)(()=>"")],StashesView.prototype,"revealRepository",1),sO([(0,es.G)(()=>"")],StashesView.prototype,"revealStash",1);var sx=Object.defineProperty,sF=Object.getOwnPropertyDescriptor,sB=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?sF(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&sx(t,i,n),n};let TagsRepositoryNode=class TagsRepositoryNode extends iq.P{async getChildren(){return null==this.child&&(this.child=new TagsNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(b.Z_.Tags,b.Z_.Unknown,b.Ti.Any)}};let TagsViewNode=class TagsViewNode extends RepositoriesSubscribeableNode{async getChildren(){if(null==this.children){let e=this.view.container.git.openRepositories;if(S.H.get("views.collapseWorktreesWhenPossible")&&(e=[...(await (0,b.Y$)(e)).keys()]),0===e.length)return this.view.message=this.view.container.git.isDiscoveringRepositories?"Loading tags...":"No tags could be found.",[];this.view.message=void 0;let t=1===e.length;this.children=e.map(e=>new TagsRepositoryNode(d.nk.fromRepoPath(e.path),this.view,this,e,t))}if(1===this.children.length){let[e]=this.children,t=await e.repo.getTags();return 0===t.values.length?(this.view.message="No tags could be found.",this.view.title="Tags",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Tags (${t.values.length})`,e.getChildren())}return this.view.title="Tags",this.children}getTreeItem(){return new n.TreeItem("Tags",n.TreeItemCollapsibleState.Expanded)}};let TagsView=class TagsView extends iN.DN{configKey="tags";constructor(e){super(e,"tags","Tags","tagsView")}get canReveal(){return this.config.reveal||!S.H.get("views.repositories.showTags")}get canSelectMany(){return this.container.prereleaseOrDebugging}getRoot(){return new TagsViewNode(this)}registerCommands(){return this.container.viewCommands,[rv(this.getQualifiedCommand("copy"),()=>(0,e2.RS)(a.Ts.ViewsCopy,this.activeSelection,this.selection),this),rv(this.getQualifiedCommand("refresh"),()=>(this.container.git.resetCaches("tags"),this.refresh(!0)),this),rv(this.getQualifiedCommand("setLayoutToList"),()=>this.setLayout("list"),this),rv(this.getQualifiedCommand("setLayoutToTree"),()=>this.setLayout("tree"),this),rv(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),rv(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),rv(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),rv(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),rv(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||S.H.changed(e,"defaultDateFormat")||S.H.changed(e,"defaultDateLocale")||S.H.changed(e,"defaultDateShortFormat")||S.H.changed(e,"defaultDateSource")||S.H.changed(e,"defaultDateStyle")||S.H.changed(e,"defaultGravatarsStyle")||S.H.changed(e,"defaultTimeFormat")||S.H.changed(e,"sortTagsBy")||S.H.changed(e,"sortRepositoriesBy")||S.H.changed(e,"views.collapseWorktreesWhenPossible"))}findTag(e,t){let{repoPath:i}=e;return this.findNode(t=>t.tag?.ref===e.ref,{allowPaging:!0,maxDepth:2,canTraverse:e=>e instanceof TagsViewNode||(e instanceof TagsRepositoryNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i,token:t})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof iq.P&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof TagsViewNode||e instanceof iq.P});return void 0!==i&&await this.reveal(i,t),i}revealTag(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing ${(0,v.M4)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findTag(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}setLayout(e){return S.H.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return S.H.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return S.H.updateEffective(`views.${this.configKey}.avatars`,e)}};sB([(0,es.G)(()=>"")],TagsView.prototype,"revealRepository",1),sB([(0,es.G)(()=>"")],TagsView.prototype,"revealTag",1);var sL=i(1488);let ViewFileDecorationProvider=class ViewFileDecorationProvider{_onDidChange=new n.EventEmitter;get onDidChange(){return this._onDidChange.event}disposable;constructor(){this.disposable=n.Disposable.from(n.window.registerFileDecorationProvider({provideFileDecoration:(e,t)=>{if("gitlens-view"===e.scheme)switch(e.authority){case"branch":return this.provideBranchDecoration(e,t);case"remote":return this.provideRemoteDefaultDecoration(e,t);case"status":return this.provideStatusDecoration(e,t);case"workspaces":return this.provideWorkspaceDecoration(e,t);default:return}}}),n.window.registerFileDecorationProvider(this))}dispose(){this.disposable.dispose()}provideWorkspaceDecoration(e,t){let[,i,r]=e.path.split("/");if("repository"===i){if("open"===r)return{badge:"●",color:new n.ThemeColor("gitlens.decorations.workspaceRepoOpenForegroundColor"),tooltip:""};if("missing"===r)return{badge:"?",color:new n.ThemeColor("gitlens.decorations.workspaceRepoMissingForegroundColor"),tooltip:""}}if("workspace"===i&&"current"===r)return{badge:"●",color:new n.ThemeColor("gitlens.decorations.workspaceCurrentForegroundColor"),tooltip:""}}provideFileDecoration(e,t){if(e.scheme===a.xB.Git){let t=(0,sL.o)(e);t?.decoration!=null&&(e=n.Uri.parse(t?.decoration))}if("gitlens-view"===e.scheme)switch(e.authority){case"branch":return this.provideBranchStatusDecoration(e,t);case"commit-file":return this.provideCommitFileStatusDecoration(e,t)}}provideCommitFileStatusDecoration(e,t){let[,,i]=e.path.split("/");switch(i){case"!":return{badge:"I",color:new n.ThemeColor("gitlens.decorations.ignoredForegroundColor"),tooltip:"Ignored"};case"?":return{badge:"U",color:new n.ThemeColor("gitlens.decorations.untrackedForegroundColor"),tooltip:"Untracked"};case"A":return{badge:"A",color:new n.ThemeColor("gitlens.decorations.addedForegroundColor"),tooltip:"Added"};case"C":return{badge:"C",color:new n.ThemeColor("gitlens.decorations.copiedForegroundColor"),tooltip:"Copied"};case"D":return{badge:"D",color:new n.ThemeColor("gitlens.decorations.deletedForegroundColor"),tooltip:"Deleted"};case"M":return{badge:"M",tooltip:"Modified"};case"R":return{badge:"R",color:new n.ThemeColor("gitlens.decorations.renamedForegroundColor"),tooltip:"Renamed"};default:return}}provideBranchStatusDecoration(e,t){switch(new URLSearchParams(e.query).get("status")){case"ahead":return{badge:"▲",color:new n.ThemeColor("gitlens.decorations.branchAheadForegroundColor"),tooltip:"Ahead"};case"behind":return{badge:"▼",color:new n.ThemeColor("gitlens.decorations.branchBehindForegroundColor"),tooltip:"Behind"};case"diverged":return{badge:"▼▲",color:new n.ThemeColor("gitlens.decorations.branchDivergedForegroundColor"),tooltip:"Diverged"};case"missingUpstream":return{badge:"!",color:new n.ThemeColor("gitlens.decorations.branchMissingUpstreamForegroundColor"),tooltip:"Missing Upstream"};case"upToDate":return{badge:"",color:new n.ThemeColor("gitlens.decorations.branchUpToDateForegroundColor"),tooltip:"Up to Date"};case"unpublished":return{badge:"▲+",color:new n.ThemeColor("gitlens.decorations.branchUnpublishedForegroundColor"),tooltip:"Unpublished"};default:return}}provideBranchDecoration(e,t){let i;let r=new URLSearchParams(e.query),s=!!r.get("current"),o=!!r.get("opened"),l=r.get("status");if(s||o){switch(l){case"ahead":i=new n.ThemeColor("gitlens.decorations.branchAheadForegroundColor");break;case"behind":i=new n.ThemeColor("gitlens.decorations.branchBehindForegroundColor");break;case"diverged":i=new n.ThemeColor("gitlens.decorations.branchDivergedForegroundColor");break;case"upToDate":i=new n.ThemeColor("gitlens.decorations.branchUpToDateForegroundColor");break;case"unpublished":i=new n.ThemeColor("gitlens.decorations.branchUnpublishedForegroundColor")}return{badge:a.EO.Check,color:i,tooltip:s?"Current Branch":"Opened Worktree Branch"}}}provideRemoteDefaultDecoration(e,t){let[,i]=e.path.split("/");if(i)return{badge:a.EO.Check,tooltip:"Default Remote"}}provideStatusDecoration(e,t){let[,i,r]=e.path.split("/");switch(i){case"rebasing":case"merging":if(r)return{badge:"!",color:new n.ThemeColor("gitlens.decorations.statusMergingOrRebasingConflictForegroundColor")};return{color:new n.ThemeColor("gitlens.decorations.statusMergingOrRebasingForegroundColor")};default:return}}};let WorkspaceMissingRepositoryNode=class WorkspaceMissingRepositoryNode extends t5.eu{constructor(e,t,i,r){super("workspace-missing-repository",d.Bd,e,t),this.workspace=i,this.wsRepositoryDescriptor=r,this.updateContext({wsRepositoryDescriptor:r}),this._uniqueId=(0,t5.pF)(this.type,this.context)}get id(){return this._uniqueId}toClipboard(){return this.name}get name(){return this.wsRepositoryDescriptor.name}get workspaceId(){return this.wsRepositoryDescriptor.workspaceId}getChildren(){return[]}getTreeItem(){let e=new n.TreeItem(this.name,n.TreeItemCollapsibleState.None);return e.id=this.id,e.description="missing",e.tooltip=new n.MarkdownString(`${this.name}

Repository could not be found`),e.contextValue=t5.U0.WorkspaceMissingRepository,e.iconPath=new n.ThemeIcon("question",new n.ThemeColor("gitlens.decorations.workspaceRepoMissingForegroundColor")),e.resourceUri=n.Uri.parse("gitlens-view://workspaces/repository/missing"),e}};var sU=Object.defineProperty,sW=Object.getOwnPropertyDescriptor;let WorkspaceNode=class WorkspaceNode extends iL.Y{constructor(e,t,i,r){super("workspace",e,t,i),this.parent=i,this.workspace=r,this.updateContext({workspace:r}),this._uniqueId=(0,t5.pF)(this.type,this.context)}get id(){return this._uniqueId}toClipboard(){return this.workspace.name}async getChildren(){if(null==this.children){let e=[];try{let t=await this.workspace.getRepositoryDescriptors();if(!t?.length)return e.push(new ij.RK(this.view,this,(0,e2.gu)("gitlens.views.workspaces.addRepos","Add Repositories...",this),"No repositories")),this.children=e,this.children;let i=await this.workspace.getRepositoriesByName({force:!0});for(let r of t){let t=i.get(r.name)?.repository;if(!t){e.push(new WorkspaceMissingRepositoryNode(this.view,this,this.workspace,r));continue}e.push(new RepositoryNode(d.nk.fromRepoPath(t.path),this.view,this,t,this.getNewContext({wsRepositoryDescriptor:r})))}}catch(e){return this.children=void 0,[new ij.S2(this.view,this,"Failed to load repositories")]}this.children=e}return this.children}async getTreeItem(){let e=new n.TreeItem(this.workspace.name,n.TreeItemCollapsibleState.Collapsed),t="cloud"===this.workspace.type,i=t5.U0.Workspace;e.resourceUri=void 0;let r=[];return t?i+="+cloud":i+="+local",this.workspace.current&&(i+="+current",r.push("current"),e.resourceUri=n.Uri.parse("gitlens-view://workspaces/workspace/current")),null!=this.workspace.localPath&&(i+="+hasPath"),(await this.workspace.getRepositoryDescriptors())?.length===0&&(i+="+empty"),e.id=this.id,e.contextValue=i,e.iconPath=new n.ThemeIcon("cloud"==this.workspace.type?"cloud":"folder"),e.tooltip=`${this.workspace.name}
${t?`Cloud Workspace ${this.workspace.shared?"(Shared)":""}`:"Local Workspace"}${t&&null!=this.workspace.provider?`
Provider: ${this.workspace.provider}`:""}`,t&&null!=this.workspace.organizationId&&r.push("shared"),e.description=r.join(", "),e}etag(){return this.view.container.git.etag}subscribe(){return n.Disposable.from((0,eE.HC)(this.view.container.git.onDidChangeRepositories,this.onRepositoriesChanged,this))}onRepositoriesChanged(e){this.triggerChange(!0)}};((e,t,i,r)=>{for(var s,n=r>1?void 0:r?sW(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&sU(t,i,n)})([(0,en.Yz)()],WorkspaceNode.prototype,"subscribe",1);var sq=Object.defineProperty,sM=Object.getOwnPropertyDescriptor;let WorkspacesViewNode=class WorkspacesViewNode extends t5.eu{constructor(e){super("workspaces-view",d.Bd,e)}_children;async getChildren(){if(null==this._children){let e=[],{cloudWorkspaces:t,cloudWorkspaceInfo:i,localWorkspaces:r,localWorkspaceInfo:s}=await this.view.container.workspaces.getWorkspaces();if(t.length||r.length){for(let i of(e.push(new RepositoriesNode(this.view)),t))e.push(new WorkspaceNode(this.uri,this.view,this,i));for(let t of(null!=i&&e.push(new ij.S2(this.view,this,i)),r))e.push(new WorkspaceNode(this.uri,this.view,this,t));0===t.length&&null==i&&e.push(new ij.S2(this.view,this,"No cloud workspaces found.")),null!=s&&e.push(new ij.S2(this.view,this,s))}this._children=e}return this._children}getTreeItem(){return new n.TreeItem("Workspaces",n.TreeItemCollapsibleState.Expanded)}refresh(){null!=this._children&&((0,iN.lm)(this._children),this._children=void 0)}};((e,t,i,r)=>{for(var s,n=r>1?void 0:r?sM(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&sq(t,i,n)})([(0,es.G)(),(0,en.Yz)()],WorkspacesViewNode.prototype,"refresh",1);let WorkspacesView=class WorkspacesView extends iN.DN{configKey="workspaces";_disposable;constructor(e){super(e,"workspaces","Workspaces","workspacesView"),this.description=a.WZ,this.disposables.push(e.workspaces.onDidResetWorkspaces(()=>void this.refresh(!0)))}dispose(){this._disposable?.dispose(),super.dispose()}getRoot(){return new WorkspacesViewNode(this)}async show(e){if(await (0,tL.Z)())return super.show(e)}async findWorkspaceNode(e,t){return this.findNode(t=>t.workspace?.id===e,{allowPaging:!1,maxDepth:2,canTraverse:e=>e instanceof WorkspacesViewNode,token:t})}async revealWorkspaceNode(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing workspace ${e} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findWorkspaceNode(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}registerCommands(){return this.container.viewCommands,[rv(this.getQualifiedCommand("info"),()=>(0,ed.CZ)(a.DS.workspaces),this),rv(this.getQualifiedCommand("copy"),()=>(0,e2.RS)(a.Ts.ViewsCopy,this.activeSelection,this.selection),this),rv(this.getQualifiedCommand("refresh"),()=>{this.container.workspaces.resetWorkspaces()},this),rv(this.getQualifiedCommand("addRepos"),async e=>{await this.container.workspaces.addCloudWorkspaceRepos(e.workspace.id),e.getParent()?.triggerChange(!0)}),rv(this.getQualifiedCommand("addReposFromLinked"),async e=>{await this.container.workspaces.addMissingCurrentWorkspaceRepos({force:!0}),e.getParent()?.triggerChange(!0)}),rv(this.getQualifiedCommand("convert"),async e=>{let t=[];for(let i of e.getChildren())i instanceof RepositoryNode&&t.push(i.repo);0!==t.length&&(await this.container.workspaces.createCloudWorkspace({repos:t}),this.ensureRoot().triggerChange(!0))},this),rv(this.getQualifiedCommand("create"),async()=>{await this.container.workspaces.createCloudWorkspace(),this.ensureRoot().triggerChange(!0)},this),rv(this.getQualifiedCommand("createLocal"),async e=>{await this.container.workspaces.saveAsCodeWorkspaceFile(e.workspace.id),this.ensureRoot().triggerChange(!0)},this),rv(this.getQualifiedCommand("openLocal"),async e=>{await this.container.workspaces.openCodeWorkspaceFile(e.workspace.id,{location:"currentWindow"}),this.ensureRoot().triggerChange(!0)},this),rv(this.getQualifiedCommand("openLocalNewWindow"),async e=>{await this.container.workspaces.openCodeWorkspaceFile(e.workspace.id,{location:"newWindow"})},this),rv(this.getQualifiedCommand("changeAutoAddSetting"),async()=>{await this.container.workspaces.chooseCodeWorkspaceAutoAddSetting({current:!0})},this),rv(this.getQualifiedCommand("delete"),async e=>{await this.container.workspaces.deleteCloudWorkspace(e.workspace.id),e.getParent()?.triggerChange(!0)},this),rv(this.getQualifiedCommand("locateAllRepos"),async e=>{"cloud"===e.workspace.type&&(await n.window.withProgress({location:n.ProgressLocation.Notification,title:`Locating Repositories for '${e.workspace.name}'...`,cancellable:!0},(t,i)=>this.container.workspaces.locateAllCloudWorkspaceRepos(e.workspace.id,i)),e.triggerChange(!0))},this),rv(this.getQualifiedCommand("repo.locate"),async e=>{let t=e.wsRepositoryDescriptor;null!=t&&e.workspace?.id!=null&&(await this.container.workspaces.locateWorkspaceRepo(e.workspace.id,t),e.getParent()?.triggerChange(!0))},this),rv(this.getQualifiedCommand("repo.openInNewWindow"),e=>{let t=e.getParent();null!=t&&t instanceof WorkspaceNode&&(0,ed.OH)(e.repo.uri,{location:"newWindow"})},this),rv(this.getQualifiedCommand("repo.open"),e=>{let t=e.getParent();null!=t&&t instanceof WorkspaceNode&&(0,ed.OH)(e.repo.uri,{location:"currentWindow"})},this),rv(this.getQualifiedCommand("repo.addToWindow"),e=>{let t=e.getParent();null!=t&&t instanceof WorkspaceNode&&(0,ed.OH)(e.repo.uri,{location:"addToWorkspace"})},this),rv(this.getQualifiedCommand("repo.remove"),async e=>{let t=e.wsRepositoryDescriptor;t?.id!=null&&e.workspace?.id!=null&&(await this.container.workspaces.removeCloudWorkspaceRepo(e.workspace.id,t),e.getParent()?.getParent()?.triggerChange(!0))})]}};var sN=Object.defineProperty,sH=Object.getOwnPropertyDescriptor,sG=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?sH(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&sN(t,i,n),n};let WorktreesRepositoryNode=class WorktreesRepositoryNode extends iq.P{getChildren(){return null==this.child&&(this.child=new WorktreesNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(b.Z_.Config,b.Z_.Worktrees,b.Z_.Unknown,b.Ti.Any)}};let WorktreesViewNode=class WorktreesViewNode extends RepositoriesSubscribeableNode{async getChildren(){if(!1===(await this.view.container.git.access(c.k.Worktrees)).allowed)return[];if(null==this.children){let e=this.view.container.git.openRepositories;if(S.H.get("views.collapseWorktreesWhenPossible")&&(e=[...(await (0,b.Y$)(e)).keys()]),0===e.length)return this.view.message=this.view.container.git.isDiscoveringRepositories?"Loading worktrees...":"No worktrees could be found.",[];this.view.message=void 0;let t=1===e.length;this.children=e.map(e=>new WorktreesRepositoryNode(d.nk.fromRepoPath(e.path),this.view,this,e,t))}if(1===this.children.length){let[e]=this.children,t=await e.getChildren();return t.length<=1?(this.view.message=void 0,this.view.title="Worktrees",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Worktrees (${t.length})`,t)}return this.view.title="Worktrees",this.children}getTreeItem(){return new n.TreeItem("Worktrees",n.TreeItemCollapsibleState.Expanded)}};let WorktreesView=class WorktreesView extends iN.DN{configKey="worktrees";constructor(e){super(e,"worktrees","Worktrees","worktreesView"),this.disposables.push(n.window.registerFileDecorationProvider({provideFileDecoration:(e,t)=>{if("gitlens-view"!==e.scheme||"worktree"!==e.authority)return;let[,i]=e.path.split("/");switch(i){case"changes":return{badge:"●",color:new n.ThemeColor("gitlens.decorations.worktreeHasUncommittedChangesForegroundColor"),tooltip:"Has Uncommitted Changes"};case"missing":return{badge:a.EO.Warning,color:new n.ThemeColor("gitlens.decorations.worktreeMissingForegroundColor"),tooltip:""};default:return}}})),this.description=a.lD}get canReveal(){return this.config.reveal||!S.H.get("views.repositories.showWorktrees")}get canSelectMany(){return this.container.prereleaseOrDebugging}async show(e){if(await (0,tL.Z)())return super.show(e)}getRoot(){return new WorktreesViewNode(this)}registerCommands(){return this.container.viewCommands,[rv(this.getQualifiedCommand("copy"),()=>(0,e2.RS)(a.Ts.ViewsCopy,this.activeSelection,this.selection),this),rv(this.getQualifiedCommand("refresh"),async()=>(this.container.git.resetCaches("worktrees"),this.refresh(!0)),this),rv(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),rv(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),rv(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),rv(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),rv(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this),rv(this.getQualifiedCommand("setShowBranchComparisonOn"),()=>this.setShowBranchComparison(!0),this),rv(this.getQualifiedCommand("setShowBranchComparisonOff"),()=>this.setShowBranchComparison(!1),this),rv(this.getQualifiedCommand("setShowBranchPullRequestOn"),()=>this.setShowBranchPullRequest(!0),this),rv(this.getQualifiedCommand("setShowBranchPullRequestOff"),()=>this.setShowBranchPullRequest(!1),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||S.H.changed(e,"defaultDateFormat")||S.H.changed(e,"defaultDateLocale")||S.H.changed(e,"defaultDateShortFormat")||S.H.changed(e,"defaultDateSource")||S.H.changed(e,"defaultDateStyle")||S.H.changed(e,"defaultGravatarsStyle")||S.H.changed(e,"defaultTimeFormat")||S.H.changed(e,"sortRepositoriesBy")||S.H.changed(e,"views.collapseWorktreesWhenPossible"))}findWorktree(e,t){let{repoPath:i,uri:r}=e,s=r.toString();return this.findNode(t=>t instanceof WorktreeNode&&e.uri.toString()===s,{maxDepth:2,canTraverse:e=>e instanceof WorktreesViewNode||e instanceof WorktreesRepositoryNode&&e.repoPath===i,token:t})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof iq.P&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof WorktreesViewNode||e instanceof iq.P});return void 0!==i&&await this.reveal(i,t),i}revealWorktree(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing worktree '${e.name}' in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findWorktree(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}setFilesLayout(e){return S.H.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return S.H.updateEffective(`views.${this.configKey}.avatars`,e)}setShowBranchComparison(e){return S.H.updateEffective(`views.${this.configKey}.showBranchComparison`,!!e&&"branch")}async setShowBranchPullRequest(e){await S.H.updateEffective(`views.${this.configKey}.pullRequests.showForBranches`,e),await S.H.updateEffective(`views.${this.configKey}.pullRequests.enabled`,e)}};sG([(0,es.G)(()=>"")],WorktreesView.prototype,"revealRepository",1),sG([(0,es.G)(()=>"")],WorktreesView.prototype,"revealWorktree",1);let RequestType=class RequestType{constructor(e){this.name=e}};let sV=new RequestType("git"),sQ=new RequestType("git/logStreamTo"),sj=new RequestType("repositories/inFolder");var sz=Object.defineProperty,sY=Object.getOwnPropertyDescriptor,sK=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?sY(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&sz(t,i,n),n};let sJ=()=>!0,sZ=new Map([["blame",sJ],["branch",e=>"--contains"===e[1]],["cat-file",sJ],["check-mailmap",sJ],["check-ref-format",sJ],["config",e=>"--get"===e[1]||"--get-regex"===e[1]],["diff",sJ],["difftool",sJ],["for-each-ref",sJ],["log",sJ],["ls-files",sJ],["ls-tree",sJ],["merge-base",sJ],["remote",e=>"-v"===e[1]||"get-url"===e[1]],["rev-list",sJ],["rev-parse",sJ],["show",sJ],["show-ref",sJ],["stash",e=>"list"===e[1]],["status",sJ],["symbolic-ref",sJ],["tag",e=>"-l"===e[1]],["worktree",e=>"list"===e[1]]]),sX=/^[/|\\]/,s0=class _VslsHostService{constructor(e,t,i){this._api=e,this._service=t,this.container=i,t.onDidChangeIsServiceAvailable(this.onAvailabilityChanged.bind(this)),this._disposable=n.Disposable.from(n.workspace.onDidChangeWorkspaceFolders(this.onWorkspaceFoldersChanged,this)),this.onRequest(sV,this.onGitCommandRequest.bind(this)),this.onRequest(sQ,this.onGitLogStreamToCommandRequest.bind(this)),this.onRequest(sj,this.onGetRepositoriesForUriRequest.bind(this)),this.onWorkspaceFoldersChanged()}static ServiceId="proxy";static async share(e,t){let i=await e.shareService(this.ServiceId);if(null==i)throw Error("Failed to share host service");return new _VslsHostService(e,i,t)}_disposable;_localPathsRegex;_localToSharedPaths=new Map;_sharedPathsRegex;_sharedToLocalPaths=new Map;dispose(){this._disposable.dispose(),this._api.unshareService(_VslsHostService.ServiceId)}onRequest(e,t){this._service.onRequest(e.name,function(e,i){let r;for(let t of e)if("object"==typeof t&&"__type"in t){r=t;break}return t(r??e[0],i)})}onAvailabilityChanged(e){}onWorkspaceFoldersChanged(e){let t,i;if(null==n.workspace.workspaceFolders||0===n.workspace.workspaceFolders.length)return;let r=(0,ea.dQ)();for(let e of(this._localToSharedPaths.clear(),this._sharedToLocalPaths.clear(),n.workspace.workspaceFolders))t=(0,el.Fd)(e.uri.fsPath),i=(0,el.Fd)(this.convertLocalUriToShared(e.uri).toString()),P.Vy.debug(r,`shared='${i}' \u2194 local='${t}'`),this._localToSharedPaths.set(t,i),this._sharedToLocalPaths.set(i,t);let s=(0,eo.fj)(this._sharedToLocalPaths.values(),"|");s=s.replace(/(\/|\\)/g,"[\\\\/|\\\\]"),this._localPathsRegex=RegExp(`(${s})`,"gi");let o=(0,eo.fj)(this._localToSharedPaths.values(),"|");o=o.replace(/(\/|\\)/g,"[\\\\/|\\\\]"),this._sharedPathsRegex=RegExp(`^(${o})`,"i")}async onGitCommandRequest(e,t){let i=sZ.get(e.args[0]);if(!i?.(e.args))throw Error(`Git ${e.args[0]} command is not allowed`);let{options:r,args:s}=e,[n,o]=this.convertGitCommandCwd(r.cwd);r.cwd=n;let a=await function(e,...t){return Promise.resolve("")}(0,...this.convertGitCommandArgs(s,o));return"string"==typeof a?(null!=this._localPathsRegex&&a.length>0&&(a=a.replace(this._localPathsRegex,(e,t)=>{let i=this._localToSharedPaths.get((0,el.Fd)(t));return null!=i?i:t})),{data:a}):{data:a.toString("binary"),isBuffer:!0}}async onGitLogStreamToCommandRequest(e,t){let{options:i,args:r}=e,[s,n]=this.convertGitCommandCwd(e.repoPath),[o,a]=await function(e,t,i,r,...s){return Promise.resolve([[""],0])}(0,e.sha,e.limit,0,...this.convertGitCommandArgs(r,n));return null!=this._localPathsRegex&&o.length>0&&(o=o.map(e=>e.replace(this._localPathsRegex,(e,t)=>{let i=this._localToSharedPaths.get((0,el.Fd)(t));return null!=i?i:t}))),{data:o,count:a}}async onGetRepositoriesForUriRequest(e,t){let i=[],r=this.convertSharedUriToLocal(n.Uri.parse(e.folderUri,!0)),s=this.container.git.getRepository(r);if(null!=s){let e=this.convertLocalUriToShared(s.uri);i.push({folderUri:e.toString(),root:s.root,closed:s.closed})}return{repositories:i}}convertLocalUriToShared(e){let t=(0,ea.dQ)(),i=this._api.convertLocalUriToShared(e);P.Vy.debug(t,`LiveShare.convertLocalUriToShared(${e.toString(!0)}) returned ${i.toString(!0)}`);let r=e.path,s=i.path;if(i.authority.length>0&&(s=`/${i.authority}${s}`),RegExp(`${r}$`,"i").test(s)){if(s.length===r.length){let t=n.workspace.getWorkspaceFolder(e);i=i.with({authority:"",path:`/~${t.index}`})}else i=i.with({authority:"",path:s.substr(0,s.length-r.length)})}else if(!s.startsWith("/~")){let t=n.workspace.getWorkspaceFolder(e);i=i.with({authority:"",path:`/~${t.index}${s}`})}return i}convertGitCommandCwd(e){let t=!1;if(null!=e&&e.length>0&&null!=this._sharedToLocalPaths){if(this._sharedPathsRegex?.test(e))e=(0,el.Fd)(e).replace(this._sharedPathsRegex,(e,i)=>{t||(t="/~0"===i);let r=this._sharedToLocalPaths.get(i);return null!=r?r:i});else if(sX.test(e)){let i=this._sharedToLocalPaths.get("vsls:/~0");null!=i&&(t=!0,e=(0,el.Fd)(this.container.git.getAbsoluteUri(e,i).fsPath))}}return[e,t]}convertGitCommandArgs(e,t){let i=!1,r=-1;for(let s of e){if(r++,"--"===s){i=!0;continue}i&&"string"==typeof s&&(t&&sX.test(s[0])&&e.splice(r,1,s.substr(1)),this._sharedPathsRegex?.test(s)&&e.splice(r,1,(0,el.Fd)(s).replace(this._sharedPathsRegex,(e,t)=>{let i=this._sharedToLocalPaths.get(t);return null!=i?i:t})))}return e}convertSharedUriToLocal(e){(0,el.VN)(e.path)&&(e=e.with({path:`${e.path}/`}));let t=this._api.convertSharedUriToLocal(e),i=t.path,r=e.path;return i.endsWith(r)&&(i=i.substr(0,i.length-r.length)),47===i.charCodeAt(i.length-1)&&(i=i.slice(0,-1)),t.with({path:i})}};sK([(0,en.Rm)()],s0.prototype,"onAvailabilityChanged",1),sK([(0,en.Yz)()],s0.prototype,"onWorkspaceFoldersChanged",1),sK([(0,en.Rm)()],s0.prototype,"onGitCommandRequest",1),sK([(0,en.Rm)()],s0.prototype,"onGitLogStreamToCommandRequest",1),sK([(0,en.Rm)()],s0.prototype,"onGetRepositoriesForUriRequest",1),sK([(0,en.Yz)({exit:!0})],s0.prototype,"convertLocalUriToShared",1),sK([(0,en.Rm)()],s0,"share",1);var s1=Object.defineProperty,s2=Object.getOwnPropertyDescriptor,s3=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?s2(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&s1(t,i,n),n};let s4=class _VslsGuestService{constructor(e,t,i){this._api=e,this._service=t,this.container=i,t.onDidChangeIsServiceAvailable(this.onAvailabilityChanged.bind(this)),this.onAvailabilityChanged(t.isServiceAvailable)}static async connect(e,t){let i=(0,ea.dQ)();try{let i=await e.getSharedService(s0.ServiceId);if(null==i)throw Error("Failed to connect to host service");return new _VslsGuestService(e,i,t)}catch(e){P.Vy.error(e,i);return}}dispose(){}onAvailabilityChanged(e){if(e){this.container.git.setEnabledContext(!0);return}this.container.git.setEnabledContext(!1),n.window.showWarningMessage("GitLens features will be unavailable. Unable to connect to the host GitLens service. The host may have disabled GitLens guest access or may not have GitLens installed.")}async git(e,...t){let i=await this.sendRequest(sV,{__type:"gitlens",options:e,args:t});return i.isBuffer?Buffer.from(i.data,"binary"):i.data}async gitLogStreamTo(e,t,i,r,...s){let n=await this.sendRequest(sQ,{__type:"gitlens",repoPath:e,sha:t,limit:i,options:r,args:s});return[n.data,n.count]}async getRepositoriesForUri(e){return(await this.sendRequest(sj,{__type:"gitlens",folderUri:e.toString()})).repositories}sendRequest(e,t,i){return this._service.request(e.name,[t],i)}};s3([(0,en.Rm)()],s4.prototype,"onAvailabilityChanged",1),s3([(0,en.Rm)()],s4.prototype,"git",1),s3([(0,en.Rm)()],s4.prototype,"gitLogStreamTo",1),s3([(0,en.Rm)()],s4.prototype,"getRepositoriesForUri",1),s3([(0,en.Yz)()],s4.prototype,"sendRequest",1),s3([(0,en.Rm)()],s4,"connect",1);var s8=Object.defineProperty,s5=Object.getOwnPropertyDescriptor,s7=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?s5(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&s8(t,i,n),n};function s9(e){switch(e){case"available":return{status:"online",statusText:"Available"};case"away":return{status:"away",statusText:"Away"};case"busy":return{status:"busy",statusText:"Busy"};case"doNotDisturb":return{status:"dnd",statusText:"DND"};default:return{status:"offline",statusText:"Offline"}}}let VslsController=class VslsController{constructor(e){this.container=e,this._ready=(0,eh.v6)(),this._disposable=n.Disposable.from((0,eE.Oo)(e.onReady)(this.onReady,this),S.H.onDidChange(this.onConfigurationChanged,this))}_api;_disposable;_guest;_host;_ready;dispose(){this._ready.fulfill(),this._disposable.dispose(),this._host?.dispose(),this._guest?.dispose()}onReady(){this.initialize()}async initialize(){if(!this.enabled){(0,er.o)("gitlens:vsls",!1);return}n.workspace.workspaceFolders?.some(e=>e.uri.scheme===a.xB.Vsls)&&this.setReadonly(!0);try{this._api=this.getLiveShareApi();let e=await this._api;if(null==e){(0,er.o)("gitlens:vsls",!1),this._ready.fulfill();return}(0,er.o)("gitlens:vsls",!0),this._disposable=n.Disposable.from(this._disposable,e.onDidChangeSession(t=>this.onLiveShareSessionChanged(e,t),this)),this.onLiveShareSessionChanged(e,{session:e.session})}catch(e){P.Vy.error(e)}}onConfigurationChanged(e){S.H.changed(e,"liveshare.enabled")&&this.initialize()}async onLiveShareSessionChanged(e,t){switch(this._host?.dispose(),this._host=void 0,this._guest?.dispose(),this._guest=void 0,t.session.role){case 1:this.setReadonly(!1),(0,er.o)("gitlens:vsls","host"),S.H.get("liveshare.allowGuestAccess")&&(this._host=await s0.share(e,this.container)),this._ready.fulfill();break;case 2:this.setReadonly(!0),(0,er.o)("gitlens:vsls","guest"),this._guest=await s4.connect(e,this.container),this._ready.fulfill();break;default:this.setReadonly(!1),(0,er.o)("gitlens:vsls",!0),this._ready.pending||(this._ready=(0,eh.v6)())}}async getLiveShareApi(){try{let e=n.extensions.getExtension("ms-vsliveshare.vsliveshare");if(null!=e){let t=e.isActive?e.exports:await e.activate();return await t.getApi("1.0.4753")??void 0}}catch(e){P.Vy.error(e)}}_readonly=!1;get readonly(){return this._readonly}setReadonly(e){this._readonly=e,(0,er.o)("gitlens:readonly",!!e||void 0)}get enabled(){return S.H.get("liveshare.enabled")}async guest(){return null!=this._guest||await this._ready.promise,this._guest}async getContact(e){if(null==e)return;let t=await this._api;if(null!=t)return(await t.getContacts([e])).contacts[e]}async getContacts(e){let t=await this._api;if(null!=t)return Object.values((await t.getContacts(e)).contacts)}async getContactPresence(e){let t=await this.getContact(e);if(null!=t)return s9(t.status)}async getContactsPresence(e){let t=await this.getContacts(e);if(null!=t)return new Map(Object.values(t).map(e=>[e.email,s9(e.status)]))}async invite(e){if(null==e)return;let t=await this.getContact(e);if(null!=t)return t.invite()}async startSession(){let e=await this._api;if(null!=e)return e.share()}};s7([(0,en.Yz)()],VslsController.prototype,"getContact",1),s7([(0,en.Yz)({args:{0:e=>e.length}})],VslsController.prototype,"getContacts",1),s7([(0,en.Yz)()],VslsController.prototype,"getContactPresence",1),s7([(0,en.Yz)({args:{0:e=>e.length}})],VslsController.prototype,"getContactsPresence",1);var s6=i(8458),ne=i(3536),nt=i(6330),ni=i(3355),nr=i(7565);let ns="rebase",nn=new ni.Q2(ns,"abort"),no=new ni.Q2(ns,"disable"),na=new ni.Q2(ns,"search"),nl=new ni.Q2(ns,"start"),nh=new ni.Q2(ns,"switch"),nc=new ni.Q2(ns,"reorder"),nu=new ni.Q2(ns,"change/entry"),nd=new ni.Q2(ns,"move/entry"),np=new ni.Q2(ns,"selection/update"),ng=new ni.C1(ns,"didChange");var nm=Object.defineProperty,nf=Object.getOwnPropertyDescriptor,nw=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?nf(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&nm(t,i,n),n};let nv=1073741824-1,ny=new TextDecoder("utf8"),nb=(0,nt.N)(),nC=(0,nt.N)(),nR=/^\s?#\s?Rebase\s([0-9a-f]+)(?:..([0-9a-f]+))?\sonto\s([0-9a-f]+)\s.*$/im,nS=/^\s?(p|pick|r|reword|e|edit|s|squash|f|fixup|d|drop)\s([0-9a-f]+?)\s(.*)$/gm,nP=new Map([["p","pick"],["pick","pick"],["r","reword"],["reword","reword"],["e","edit"],["edit","edit"],["s","squash"],["squash","squash"],["f","fixup"],["fixup","fixup"],["d","drop"],["drop","drop"]]);let RebaseEditorProvider=class RebaseEditorProvider{constructor(e){this.container=e,this._disposable=n.Disposable.from(n.window.registerCustomEditorProvider("gitlens.rebase",this,{supportsMultipleEditorsPerDocument:!1,webviewOptions:{enableFindWidget:!0,retainContextWhenHidden:!0}})),this.ascending="asc"===S.H.get("rebaseEditor.ordering")}_disposable;ascending=!1;dispose(){this._disposable.dispose()}get contextKeyPrefix(){return"gitlens:webview:rebase"}get enabled(){let e=S.H.inspectCore("workbench.editorAssociations")?.globalValue;if(null==e||0===e.length)return!0;if(Array.isArray(e)){let t=e.find(e=>"git-rebase-todo"===e.filenamePattern);return null==t||"gitlens.rebase"===t.viewType}let t=e["git-rebase-todo"];return null==t||"gitlens.rebase"===t}_disableAfterNextUse=!1;async enableForNextUse(){this.enabled||(await this.setEnabled(!0),this._disableAfterNextUse=!0)}async setEnabled(e){this._disableAfterNextUse=!1;let t=S.H.inspectCore("workbench.editorAssociations"),i=t?.globalValue;if(Array.isArray(i)&&(i=i.reduce((e,t)=>(e[t.filenamePattern]=t.viewType,e),Object.create(null))),null==i){if(e)return;i={"git-rebase-todo":"default"}}else i["git-rebase-todo"]=e?"gitlens.rebase":"default";await S.H.updateAny("workbench.editorAssociations",i,n.ConfigurationTarget.Global)}async resolveCustomTextEditor(e,t,i){this.container.usage.track("rebaseEditor:shown");let r=(0,el.Fd)(n.Uri.joinPath(e.uri,"..","..","..").fsPath),s=this.container.git.getRepository(r),o=[],a={dispose:()=>void n.Disposable.from(...o).dispose(),id:nC.next(),subscriptions:o,document:e,panel:t,repoPath:s?.path??r,firstSelection:!0};o.push(t.onDidDispose(()=>{(0,nr.Do)(this.contextKeyPrefix),n.Disposable.from(...o).dispose()}),t.onDidChangeViewState(e=>this.onViewStateChanged(a,e)),t.webview.onDidReceiveMessage(e=>this.onMessageReceived(a,e)),n.workspace.onDidChangeTextDocument(t=>{0!==t.contentChanges.length&&t.document.uri.toString()===e.uri.toString()&&this.updateState(a,!0)}),n.workspace.onDidSaveTextDocument(t=>{t.uri.toString()===e.uri.toString()&&this.updateState(a,!0)})),null!=s&&o.push(s.onDidChange(e=>{e.changed(b.Z_.Rebase,b.Ti.Any)&&this.updateState(a)})),t.webview.options={enableCommandUris:!0,enableScripts:!0},t.webview.html=await this.getHtml(a),this._disableAfterNextUse&&(this._disableAfterNextUse=!1,this.setEnabled(!1))}onViewFocusChanged(e){(0,nr.WJ)(this.contextKeyPrefix)}onViewStateChanged(e,t){t.webviewPanel.visible?(0,nr.WJ)(this.contextKeyPrefix):(0,nr.Do)(this.contextKeyPrefix),e.pendingChange&&this.updateState(e)}async parseState(e){if(void 0===e.branchName){let t=await this.container.git.getBranch(e.repoPath);e.branchName=t?.name??null}return await nk(this.container,e,this.ascending)}async postMessage(e,t){try{let i=await e.panel.webview.postMessage(t);return e.pendingChange=!i,i}catch(t){return P.Vy.error(t),e.pendingChange=!0,!1}}onMessageReceived(e,t){switch(!0){case ni.pY.is(t):this.onViewFocusChanged(t.params);break;case nn.is(t):this.abort(e);break;case no.is(t):this.disable(e);break;case na.is(t):(0,e2.S4)("editor.action.webvieweditor.showFind");break;case nl.is(t):this.rebase(e);break;case nh.is(t):this.switchToText(e);break;case nc.is(t):this.swapOrdering(t.params,e);break;case nu.is(t):this.onEntryChanged(e,t.params);break;case nd.is(t):this.onEntryMoved(e,t.params);break;case np.is(t):this.onSelectionChanged(e,t.params)}}async onEntryChanged(e,t){let i=nD(e.document),r=i.find(e=>e.sha===t.sha);if(null==r)return;let s=e.document.positionAt(r.index),o=e.document.validateRange(new n.Range(new n.Position(s.line,0),new n.Position(s.line,nv))),a=t.action,l=new n.WorkspaceEdit,h=[...i];h.splice(i.indexOf(r),1,{...r,action:t.action});let c=!1;for(let e of h)"squash"===e.action||"fixup"===e.action?c=!0:c&&"drop"!==e.action&&(c=!1);if(c){let t=h[h.length-1];if(r.sha===t.sha)a="pick";else{let i=e.document.positionAt(t.index),r=e.document.validateRange(new n.Range(new n.Position(i.line,0),new n.Position(i.line,nv)));l.replace(e.document.uri,r,`pick ${t.sha} ${t.message}`)}}l.replace(e.document.uri,o,`${a} ${r.sha} ${r.message}`),await n.workspace.applyEdit(l)}async onEntryMoved(e,t){let i;let r=nD(e.document),s=r.find(e=>e.sha===t.sha);if(null==s)return;let o=r.findIndex(e=>e.sha===t.sha);if(t.relative){if(-1===t.to&&0===o||1===t.to&&o===r.length-1)return;i=o+t.to}else{if(o===t.to)return;i=t.to}let a=r[i],l=e.document.positionAt(a.index).line;i<o&&l++;let h=e.document.positionAt(s.index),c=e.document.validateRange(new n.Range(new n.Position(h.line,0),new n.Position(h.line+1,0))),u=[...r];u.splice(o,1),u.splice(i,0,s);let d=!1;for(let e of u)"squash"===e.action||"fixup"===e.action?d=!0:d&&"drop"!==e.action&&(d=!1);let p=new n.WorkspaceEdit,g=s.action;if(d){let t=u[u.length-1];if(s.sha===t.sha)g="pick";else{let i=e.document.positionAt(t.index),r=e.document.validateRange(new n.Range(new n.Position(i.line,0),new n.Position(i.line,nv)));p.replace(e.document.uri,r,`pick ${t.sha} ${t.message}`)}}p.delete(e.document.uri,c),p.insert(e.document.uri,new n.Position(l,0),`${g} ${s.sha} ${s.message}
`),await n.workspace.applyEdit(p)}onSelectionChanged(e,t){null==e.fireSelectionChangedDebounced&&(e.fireSelectionChangedDebounced=(0,eu.sg)(this.fireSelectionChanged.bind(this),250)),e.fireSelectionChangedDebounced(e,t.sha)}fireSelectionChanged(e,t){if(null==t)return;let i=S.H.get("rebaseEditor.showDetailsView");t=e.commits?.find(e=>e.sha.startsWith(t))?.sha??t,this.container.events.fire("commit:selected",{commit:(0,v.kA)(t,e.repoPath,{refType:"revision"}),interaction:"passive",preserveFocus:!0,preserveVisibility:e.firstSelection?!1===i:"selection"!==i},{source:"gitlens.rebase"}),e.firstSelection=!1}updateState(e,t=!1){if(t){e.notifyDidChangeStateDebounced?.cancel(),this.notifyDidChangeState(e);return}null==e.notifyDidChangeStateDebounced&&(e.notifyDidChangeStateDebounced=(0,eu.sg)(this.notifyDidChangeState.bind(this),250)),e.notifyDidChangeStateDebounced(e)}async notifyDidChangeState(e){if(!e.panel.visible){e.pendingChange=!0;return}let t=await this.parseState(e);this.postMessage(e,{id:`host:${nb.next()}`,scope:ng.scope,method:ng.method,params:{state:t}})}async abort(e){e.dispose();let t=new n.WorkspaceEdit;t.replace(e.document.uri,new n.Range(0,0,e.document.lineCount,0),""),await n.workspace.applyEdit(t),await e.document.save(),e.panel.dispose()}async disable(e){await this.abort(e),await this.setEnabled(!1)}async rebase(e){e.dispose(),await e.document.save(),e.panel.dispose()}swapOrdering(e,t){this.ascending=e.ascending??!1,S.H.updateEffective("rebaseEditor.ordering",this.ascending?"asc":"desc"),this.updateState(t,!0)}switchToText(e){(0,ne.hU)(),(0,e2.S4)("vscode.open",e.document.uri,{override:!1,preview:!1})}async getHtml(e){let t=n.Uri.joinPath(this.container.context.extensionUri,"dist","webviews"),i=n.Uri.joinPath(t,"rebase.html"),[r,s]=await Promise.all([n.workspace.fs.readFile(i),this.parseState(e)]);return(0,nr.Dv)(ny.decode(r),"gitlens.rebase",void 0,e.panel.webview.cspSource,(0,tw.m9)(),e.panel.webview.asWebviewUri(this.container.context.extensionUri).toString(),e.panel.webview.asWebviewUri(t).toString(),"editor",s)}};async function nA(e,t,i,r){t.commits=[],t.authors=new Map;let s=await e.git.richSearchCommits(t.repoPath,{query:`${i?`#:${i} `:""}${(0,eo.fj)((0,eo.Tj)(r,e=>`#:${e.sha}`)," ")}`},{limit:0});if(null!=s){for(let e of s.commits.values())if(t.commits.push(e),t.authors.has(e.author.name)||t.authors.set(e.author.name,{author:e.author.name,avatarUrl:(await e.getAvatarUri()).toString(!0),email:e.author.email}),!t.authors.has(e.committer.name)){let i=await e.committer.getAvatarUri(e);t.authors.set(e.committer.name,{author:e.committer.name,avatarUrl:i.toString(!0),email:e.committer.email})}}}async function nk(e,t,i){let r;let s=t.document.getText(),n=nD(s),[,,,o]=nR.exec(s)??["","",""];(null==t.authors||null==t.commits)&&await nA(e,t,o,n);let a=S.H.get("defaultDateFormat"),h=s6.L.getMarkdownCommandArgs("${commit}",t.repoPath),c=o?t.commits?.find(e=>e.sha.startsWith(o)):void 0;for(let e of n)null!=(r=t.commits?.find(t=>t.sha.startsWith(e.sha)))&&(r.sha===c?.sha&&(o=""),e.commit={sha:r.sha,author:r.author.name,committer:r.committer.name,date:r.formatDate(a),dateFromNow:r.formatDateFromNow(),message:(0,l.E)(r.message??r.summary)});return{webviewId:"gitlens.rebase",webviewInstanceId:void 0,timestamp:Date.now(),branch:t.branchName??"",onto:o?{sha:o,commit:null!=c?{sha:c.sha,author:c.author.name,committer:c.committer.name,date:c.formatDate(a),dateFromNow:c.formatDateFromNow(),message:(0,l.E)(c.message||"root")}:void 0}:void 0,entries:n,authors:null!=t.authors?Object.fromEntries(t.authors):{},commands:{commit:h},ascending:i}}function nD(e){let t,i,r,s;let n="string"==typeof e?e:e.getText(),o=[];for(;null!=(t=nS.exec(n));)[,i,r,s]=t,o.push({index:t.index,action:nP.get(i)??"pick",sha:` ${r}`.substr(1),message:null==s||0===s.length?"":` ${s}`.substr(1)});return o.reverse()}nw([(0,en.Yz)({args:{0:e=>e.uri.toString(!0)}})],RebaseEditorProvider.prototype,"resolveCustomTextEditor",1),nw([(0,en.Yz)({args:{0:e=>`focused=${e.focused}, inputFocused=${e.inputFocused}`}})],RebaseEditorProvider.prototype,"onViewFocusChanged",1),nw([(0,en.Yz)({args:{0:e=>`${e.id}:${e.document.uri.toString(!0)}`,1:e=>`active=${e.webviewPanel.active}, visible=${e.webviewPanel.visible}`}})],RebaseEditorProvider.prototype,"onViewStateChanged",1),nw([(0,en.Yz)({args:{0:e=>`${e.id}:${e.document.uri.toString(!0)}`}})],RebaseEditorProvider.prototype,"updateState",1),nw([(0,en.Yz)({args:{0:e=>`${e.id}:${e.document.uri.toString(!0)}`}})],RebaseEditorProvider.prototype,"notifyDidChangeState",1),nw([(0,en.Rm)({args:!1})],RebaseEditorProvider.prototype,"abort",1),nw([(0,en.Rm)({args:!1})],RebaseEditorProvider.prototype,"disable",1),nw([(0,en.Rm)({args:!1})],RebaseEditorProvider.prototype,"rebase",1),nw([(0,en.Rm)({args:!1})],RebaseEditorProvider.prototype,"swapOrdering",1),nw([(0,en.Rm)({args:!1})],RebaseEditorProvider.prototype,"switchToText",1);var nT=i(1500),n_=Object.defineProperty,nI=Object.getOwnPropertyDescriptor,n$=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?nI(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&n_(t,i,n),n};let nE=class _Container{static #e;static #t=new Proxy({},{get:function(e,t){if(null!=_Container.#e)return _Container.#e[t];if("config"===t)return S.H.getAll();throw Error("Container is not initialized")}});static create(e,t,i,r,s){if(null!=_Container.#e)throw Error("Container is already initialized");return _Container.#e=new _Container(e,t,i,r,s),_Container.#e}static get instance(){return _Container.#e??_Container.#t}_onReady=new n.EventEmitter;get onReady(){return this._onReady.event}BranchDateFormatting={dateFormat:void 0,dateStyle:void 0,reset:()=>{this.BranchDateFormatting.dateFormat=S.H.get("defaultDateFormat"),this.BranchDateFormatting.dateStyle=S.H.get("defaultDateStyle")}};CommitDateFormatting={dateFormat:null,dateSource:"authored",dateStyle:"relative",reset:()=>{this.CommitDateFormatting.dateFormat=S.H.get("defaultDateFormat"),this.CommitDateFormatting.dateSource=S.H.get("defaultDateSource"),this.CommitDateFormatting.dateStyle=S.H.get("defaultDateStyle")}};CommitShaFormatting={length:7,reset:()=>{this.CommitShaFormatting.length=Math.max(5,S.H.get("advanced.abbreviatedShaLength"))}};PullRequestDateFormatting={dateFormat:null,dateStyle:"relative",reset:()=>{this.PullRequestDateFormatting.dateFormat=S.H.get("defaultDateFormat"),this.PullRequestDateFormatting.dateStyle=S.H.get("defaultDateStyle")}};TagDateFormatting={dateFormat:null,dateStyle:"relative",reset:()=>{this.TagDateFormatting.dateFormat=S.H.get("defaultDateFormat"),this.TagDateFormatting.dateStyle=S.H.get("defaultDateStyle")}};_connection;_disposables;_terminalLinks;_webviews;_focusIndicator;constructor(e,t,r,s,o){var l,h;this._context=e,this._prerelease=r,this._version=s,this.ensureModeApplied(),this._disposables=[this._storage=t,this._telemetry=new TelemetryService(this),this._usage=new UsageTracker(this,t),S.H.onDidChangeAny(this.onAnyConfigurationChanged,this)],this._disposables.push(this._connection=new ServerConnection(this)),this._disposables.push(this._accountAuthentication=new AccountAuthenticationProvider(this,this._connection)),this._disposables.push(this._subscription=new SubscriptionService(this,this._connection,o)),this._disposables.push(this._organizations=new OrganizationService(this,this._connection)),this._disposables.push(this._git=new GitProviderService(this)),this._disposables.push(new GitFileSystemProvider(this)),this._disposables.push(this._uri=new UriService(this)),this._disposables.push(this._deepLinks=new DeepLinkService(this)),this._disposables.push(this._actionRunners=new eW.qr(this)),this._disposables.push(this._documentTracker=new GitDocumentTracker(this)),this._disposables.push(this._lineTracker=new LineTracker(this,this._documentTracker)),this._disposables.push(this._keyboard=new Keyboard),this._disposables.push(this._vsls=new VslsController(this)),this._disposables.push(this._eventBus=new EventBus),this._disposables.push(this._focusProvider=new tf.uZ(this)),this._disposables.push(this._fileAnnotationController=new eT.o(this)),this._disposables.push(this._lineAnnotationController=new LineAnnotationController(this)),this._disposables.push(this._lineHoverController=new LineHoverController(this)),this._disposables.push(this._statusBarController=new StatusBarController(this)),this._disposables.push(this._codeLensController=new GitCodeLensController(this)),this._disposables.push(this._webviews=new nT.x(this));let c=this._webviews.registerWebviewPanel({id:a.Ts.ShowGraphPage,options:{preserveInstance:!0}},{id:"gitlens.graph",fileName:"graph.html",iconPath:"images/gitlens-icon.png",title:"Commit Graph",contextKeyPrefix:"gitlens:webview:graph",trackingFeature:"graphWebview",plusFeature:!0,column:n.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!0,enableFindWidget:!1},allowMultipleInstances:S.H.get("graph.allowMultiple")},async(e,t)=>{let{GraphWebviewProvider:r}=await Promise.resolve().then(i.bind(i,7573));return new r(e,t)});this._disposables.push(c),this._disposables.push((l=this,n.Disposable.from((0,e2.Lb)(a.Ts.ShowGraph,(...e)=>{let t;let[i]=e;if((0,t8.Y6)(i)){if(null!=i.rootUri){let e=l.git.getRepository(i.rootUri);null!=e&&(t=e)}e=[]}else i instanceof t5.eu&&(i.is("repo-folder")&&(t=i.repo),e=[]);return null!=t?(0,e2.RS)(a.Ts.ShowInCommitGraph,t):"panel"===S.H.get("graph.layout")?(0,e2.RS)(a.Ts.ShowGraphView,...e):(0,e2.RS)(a.Ts.ShowGraphPage,void 0,...e)}),(0,e2.Lb)(`${c.id}.switchToEditorLayout`,async()=>{await S.H.updateEffective("graph.layout","editor"),queueMicrotask(()=>void(0,e2.RS)(a.Ts.ShowGraphPage))}),(0,e2.Lb)(`${c.id}.switchToPanelLayout`,async()=>{await S.H.updateEffective("graph.layout","panel"),queueMicrotask(async()=>{await (0,e2.S4)("gitlens.views.graph.resetViewLocation"),await (0,e2.S4)("gitlens.views.graphDetails.resetViewLocation"),(0,e2.RS)(a.Ts.ShowGraphView)})}),(0,e2.Lb)(a.Ts.ToggleGraph,(...e)=>{(0,er.SD)("gitlens:webviewView:graph:visible")?(0,e2.S4)("workbench.action.closePanel"):(0,e2.RS)(a.Ts.ShowGraphView,...e)}),(0,e2.Lb)(a.Ts.ToggleMaximizedGraph,(...e)=>{(0,er.SD)("gitlens:webviewView:graph:visible")||(0,e2.RS)(a.Ts.ShowGraphView,...e),(0,e2.S4)("workbench.action.toggleMaximizedPanel")}),(0,e2.Lb)(a.Ts.ShowInCommitGraph,e=>{if(e instanceof t7.X){if(null==e.ref)return;e={ref:e.ref}}let t="preserveFocus"in e&&(e.preserveFocus??!1);if("panel"===S.H.get("graph.layout")){if(!l.graphView.visible){let i=c.getBestInstance({preserveFocus:t},e);if(null!=i){i.show({preserveFocus:t},e);return}}l.graphView.show({preserveFocus:t},e)}else c.show({preserveFocus:t},e)}),(0,e2.Lb)(a.Ts.ShowInCommitGraphView,e=>{if(e instanceof t7.X){if(null==e.ref)return;e={ref:e.ref}}let t="preserveFocus"in e&&(e.preserveFocus??!1);l.graphView.show({preserveFocus:t},e)}),(0,e2.Lb)(`${c.id}.refresh`,()=>void c.getActiveInstance()?.refresh(!0)),(0,e2.Lb)(`${c.id}.split`,()=>void c.splitActiveInstance({preserveInstance:!1,column:n.ViewColumn.Beside}))))),this._disposables.push(this._graphView=this._webviews.registerWebviewView({id:"gitlens.views.graph",fileName:"graph.html",title:"Commit Graph",contextKeyPrefix:"gitlens:webviewView:graph",trackingFeature:"graphView",plusFeature:!0,webviewHostOptions:{retainContextWhenHidden:!0}},async(e,t)=>{let{GraphWebviewProvider:r}=await Promise.resolve().then(i.bind(i,7573));return new r(e,t)})),this._disposables.push(new GraphStatusBarController(this));let u=this._webviews.registerWebviewPanel({id:a.Ts.ShowFocusPage,options:{preserveInstance:!0}},{id:"gitlens.focus",fileName:"focus.html",iconPath:"images/gitlens-icon.png",title:"GitLens Launchpad",contextKeyPrefix:"gitlens:webview:focus",trackingFeature:"focusWebview",plusFeature:!0,column:n.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!0,enableFindWidget:!0},allowMultipleInstances:S.H.get("launchpad.allowMultiple")},async(e,t)=>{let{FocusWebviewProvider:r}=await Promise.resolve().then(i.bind(i,1070));return new r(e,t)});this._disposables.push(u),this._disposables.push(n.Disposable.from((0,e2.Lb)("gitlens.launchpad.refresh",()=>void u.getActiveInstance()?.refresh(!0)),(0,e2.Lb)("gitlens.launchpad.split",()=>void u.splitActiveInstance({preserveInstance:!1,column:n.ViewColumn.Beside}))));let d=this._webviews.registerWebviewPanel({id:a.Ts.ShowTimelinePage,options:{preserveInstance:!0}},{id:"gitlens.timeline",fileName:"timeline.html",iconPath:"images/gitlens-icon.png",title:"Visual File History",contextKeyPrefix:"gitlens:webview:timeline",trackingFeature:"timelineWebview",plusFeature:!0,column:n.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!1,enableFindWidget:!1},allowMultipleInstances:S.H.get("visualHistory.allowMultiple")},async(e,t)=>{let{TimelineWebviewProvider:r}=await Promise.resolve().then(i.bind(i,9525));return new r(e,t)});this._disposables.push(d),this._disposables.push(n.Disposable.from((0,e2.Lb)(a.Ts.ShowInTimeline,(...e)=>void d.show(void 0,...e)),(0,e2.Lb)(`${d.id}.refresh`,()=>void d.getActiveInstance()?.refresh(!0)),(0,e2.Lb)(`${d.id}.split`,()=>void d.splitActiveInstance({preserveInstance:!1,column:n.ViewColumn.Beside})))),this._disposables.push(this._timelineView=this._webviews.registerWebviewView({id:"gitlens.views.timeline",fileName:"timeline.html",title:"Visual File History",contextKeyPrefix:"gitlens:webviewView:timeline",trackingFeature:"timelineView",plusFeature:!0,webviewHostOptions:{retainContextWhenHidden:!1}},async(e,t)=>{let{TimelineWebviewProvider:r}=await Promise.resolve().then(i.bind(i,9525));return new r(e,t)})),this._disposables.push(this._rebaseEditor=new RebaseEditorProvider(this));let p=this._webviews.registerWebviewPanel({id:a.Ts.ShowSettingsPage},{id:"gitlens.settings",fileName:"settings.html",iconPath:"images/gitlens-icon.png",title:"GitLens Settings",contextKeyPrefix:"gitlens:webview:settings",trackingFeature:"settingsWebview",plusFeature:!1,column:n.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!1,enableFindWidget:!0}},async(e,t)=>{let{SettingsWebviewProvider:r}=await Promise.resolve().then(i.bind(i,9765));return new r(e,t)});this._disposables.push(p),this._disposables.push(n.Disposable.from(...[a.Ts.ShowSettingsPageAndJumpToFileAnnotations,a.Ts.ShowSettingsPageAndJumpToBranchesView,a.Ts.ShowSettingsPageAndJumpToCommitsView,a.Ts.ShowSettingsPageAndJumpToContributorsView,a.Ts.ShowSettingsPageAndJumpToFileHistoryView,a.Ts.ShowSettingsPageAndJumpToLineHistoryView,a.Ts.ShowSettingsPageAndJumpToRemotesView,a.Ts.ShowSettingsPageAndJumpToRepositoriesView,a.Ts.ShowSettingsPageAndJumpToSearchAndCompareView,a.Ts.ShowSettingsPageAndJumpToStashesView,a.Ts.ShowSettingsPageAndJumpToTagsView,a.Ts.ShowSettingsPageAndJumpToWorkTreesView,a.Ts.ShowSettingsPageAndJumpToViews,a.Ts.ShowSettingsPageAndJumpToCommitGraph,a.Ts.ShowSettingsPageAndJumpToAutolinks].map(e=>{let t;let i=/.*?!(.*)/.exec(e);return null!=i&&([,t]=i),(0,e2.Lb)(e,()=>void p.show(void 0,...t?[t]:[]))}))),this._disposables.push(this._webviews.registerWebviewPanel({id:a.Ts.ShowWelcomePage},{id:"gitlens.welcome",fileName:"welcome.html",iconPath:"images/gitlens-icon.png",title:"Welcome to GitLens",contextKeyPrefix:"gitlens:webview:welcome",trackingFeature:"welcomeWebview",plusFeature:!1,column:n.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!1,enableFindWidget:!0}},async(e,t)=>{let{WelcomeWebviewProvider:r}=await Promise.resolve().then(i.bind(i,700));return new r(e,t)})),this._disposables.push(new ViewFileDecorationProvider),this._disposables.push(this._repositoriesView=new RepositoriesView(this)),this._disposables.push(this._commitDetailsView=this._webviews.registerWebviewView({id:"gitlens.views.commitDetails",fileName:"commitDetails.html",title:"Inspect",contextKeyPrefix:"gitlens:webviewView:commitDetails",trackingFeature:"commitDetailsView",plusFeature:!1,webviewHostOptions:{retainContextWhenHidden:!1}},async(e,t)=>{let{CommitDetailsWebviewProvider:r}=await Promise.resolve().then(i.bind(i,8299));return new r(e,t,{attachedTo:"default"})}));let g=this._webviews.registerWebviewPanel({id:a.Ts.ShowPatchDetailsPage,options:{preserveInstance:!0}},{id:"gitlens.patchDetails",fileName:"patchDetails.html",iconPath:"images/gitlens-icon.png",title:"Patch",contextKeyPrefix:"gitlens:webview:patchDetails",trackingFeature:"patchDetailsWebview",plusFeature:!0,column:n.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!1,enableFindWidget:!1},allowMultipleInstances:!0},async(e,t)=>{let{PatchDetailsWebviewProvider:r}=await Promise.resolve().then(i.bind(i,7823));return new r(e,t)});this._disposables.push(g),this._disposables.push(this._patchDetailsView=this._webviews.registerWebviewView({id:"gitlens.views.patchDetails",fileName:"patchDetails.html",title:"Patch",contextKeyPrefix:"gitlens:webviewView:patchDetails",trackingFeature:"patchDetailsView",plusFeature:!0,webviewHostOptions:{retainContextWhenHidden:!1}},async(e,t)=>{let{PatchDetailsWebviewProvider:r}=await Promise.resolve().then(i.bind(i,7823));return new r(e,t)},async(...e)=>{if("editor"===S.H.get("cloudPatches.experimental.layout")){await (0,er.o)("gitlens:views:patchDetails:mode",void 0),(0,e2.RS)(a.Ts.ShowPatchDetailsPage,void 0,...e);return}let t=e[0];null!=t&&await (0,er.o)("gitlens:views:patchDetails:mode","state"in t?t.state.mode:t.mode)})),this._disposables.push(this._graphDetailsView=this._webviews.registerWebviewView({id:"gitlens.views.graphDetails",fileName:"commitDetails.html",title:"Commit Graph Inspect",contextKeyPrefix:"gitlens:webviewView:graphDetails",trackingFeature:"graphDetailsView",plusFeature:!1,webviewHostOptions:{retainContextWhenHidden:!1}},async(e,t)=>{let{CommitDetailsWebviewProvider:r}=await Promise.resolve().then(i.bind(i,8299));return new r(e,t,{attachedTo:"graph"})})),this._disposables.push(this._commitsView=new CommitsView(this)),this._disposables.push(this._pullRequestView=new PullRequestView(this)),this._disposables.push(this._fileHistoryView=new FileHistoryView(this)),this._disposables.push(this._lineHistoryView=new LineHistoryView(this)),this._disposables.push(this._branchesView=new BranchesView(this)),this._disposables.push(this._remotesView=new RemotesView(this)),this._disposables.push(this._stashesView=new StashesView(this)),this._disposables.push(this._tagsView=new TagsView(this)),this._disposables.push(this._worktreesView=new WorktreesView(this)),this._disposables.push(this._contributorsView=new ContributorsView(this)),this._disposables.push(this._searchAndCompareView=new SearchAndCompareView(this)),this._disposables.push(this._draftsView=new DraftsView(this)),this._disposables.push(this._workspacesView=new WorkspacesView(this)),this._disposables.push(this._homeView=this._webviews.registerWebviewView({id:"gitlens.views.home",fileName:"home.html",title:"Home",contextKeyPrefix:"gitlens:webviewView:home",trackingFeature:"homeView",plusFeature:!1,webviewHostOptions:{retainContextWhenHidden:!1}},async(e,t)=>{let{HomeWebviewProvider:r}=await Promise.resolve().then(i.bind(i,9887));return new r(e,t)})),this._disposables.push(this._accountView=this._webviews.registerWebviewView({id:"gitlens.views.account",fileName:"account.html",title:"GitKraken Account",contextKeyPrefix:"gitlens:webviewView:account",trackingFeature:"accountView",plusFeature:!1,webviewHostOptions:{retainContextWhenHidden:!1}},async(e,t)=>{let{AccountWebviewProvider:r}=await Promise.resolve().then(i.bind(i,9542));return new r(e,t)})),S.H.get("launchpad.indicator.enabled")&&this._disposables.push(this._focusIndicator=new FocusIndicator(this,this._focusProvider)),S.H.get("terminalLinks.enabled")&&this._disposables.push(this._terminalLinks=new GitTerminalLinkProvider(this)),this._disposables.push(S.H.onDidChange(e=>{S.H.changed(e,"terminalLinks.enabled")&&(this._terminalLinks?.dispose(),this._terminalLinks=void 0,S.H.get("terminalLinks.enabled")&&this._disposables.push(this._terminalLinks=new GitTerminalLinkProvider(this))),S.H.changed(e,"launchpad.indicator.enabled")&&(this._focusIndicator?.dispose(),this._focusIndicator=void 0,S.H.get("launchpad.indicator.enabled")&&this._disposables.push(this._focusIndicator=new FocusIndicator(this,this._focusProvider)))})),e.subscriptions.push({dispose:()=>this._disposables.reverse().forEach(e=>void e.dispose())}),h=this,null!=il()&&setTimeout(()=>h.workspaces.addMissingCurrentWorkspaceRepos(),1e4)}deactivate(){this._deactivating=!0}_deactivating=!1;get deactivating(){return this._deactivating}_ready=!1;async ready(){if(this._ready)throw Error("Container is already ready");this._ready=!0,await this.registerGitProviders(),queueMicrotask(()=>this._onReady.fire())}async registerGitProviders(){for(let e of(await ek(this)))this._disposables.push(this._git.register(e.descriptor.id,e));this._git.registrationComplete()}onAnyConfigurationChanged(e){S.H.changedAny(e,a.Od)&&(this._mode=void 0,S.H.changed(e,"outputLevel")&&(P.Vy.logLevel=(0,eN.Wn)(S.H.get("outputLevel"))),S.H.changed(e,"defaultGravatarsStyle")&&(0,eq.Qw)(S.H.get("defaultGravatarsStyle")),S.H.changed(e,"mode")&&this.ensureModeApplied())}_accountAuthentication;get accountAuthentication(){return this._accountAuthentication}_accountView;get accountView(){return this._accountView}_actionRunners;get actionRunners(){return this._actionRunners}_ai;get ai(){if(null==this._ai){async function e(){try{let e=new(await Promise.resolve().then(i.bind(i,915))).AIProviderService(this);return this._disposables.push(e),e}catch(e){P.Vy.error(e);return}}this._ai=e.call(this)}return this._ai}_autolinks;get autolinks(){return null==this._autolinks&&this._disposables.push(this._autolinks=new eD.R$(this)),this._autolinks}_branchesView;get branchesView(){return this._branchesView}_cache;get cache(){return null==this._cache&&this._disposables.push(this._cache=new CacheProvider(this)),this._cache}_cloudIntegrations;get cloudIntegrations(){if(null==this._cloudIntegrations){async function e(){try{return new(await Promise.resolve().then(i.bind(i,4500))).CloudIntegrationService(this,this._connection)}catch(e){P.Vy.error(e);return}}this._cloudIntegrations=e.call(this)}return this._cloudIntegrations}_drafts;get drafts(){return null==this._drafts&&this._disposables.push(this._drafts=new DraftService(this,this._connection)),this._drafts}_repositoryIdentity;get repositoryIdentity(){return null==this._repositoryIdentity&&this._disposables.push(this._repositoryIdentity=new RepositoryIdentityService(this,this._connection)),this._repositoryIdentity}_draftsView;get draftsView(){return this._draftsView}_codeLensController;get codeLens(){return this._codeLensController}_commitsView;get commitsView(){return this._commitsView}_commitDetailsView;get commitDetailsView(){return this._commitDetailsView}_context;get context(){return this._context}_contributorsView;get contributorsView(){return this._contributorsView}get debugging(){return this._context.extensionMode===n.ExtensionMode.Development}_deepLinks;get deepLinks(){return this._deepLinks}_documentTracker;get documentTracker(){return this._documentTracker}_enrichments;get enrichments(){return null==this._enrichments&&this._disposables.push(this._enrichments=new tm.d(this,new ServerConnection(this))),this._enrichments}get env(){if(this.prereleaseOrDebugging){let e=S.H.getAny("gitkraken.env");if("dev"===e)return"dev";if("staging"===e)return"staging"}return"production"}_eventBus;get events(){return this._eventBus}_fileAnnotationController;get fileAnnotations(){return this._fileAnnotationController}_fileHistoryView;get fileHistoryView(){return this._fileHistoryView}_focusProvider;get focus(){return this._focusProvider}_git;get git(){return this._git}_github;get github(){if(null==this._github){async function e(){try{let e=new(await Promise.resolve().then(i.bind(i,6088))).GitHubApi(this);return this._disposables.push(e),e}catch(e){P.Vy.error(e);return}}this._github=e.call(this)}return this._github}_gitlab;get gitlab(){if(null==this._gitlab){async function e(){try{let e=new(await Promise.resolve().then(i.bind(i,69))).GitLabApi(this);return this._disposables.push(e),e}catch(e){P.Vy.error(e);return}}this._gitlab=e.call(this)}return this._gitlab}_graphDetailsView;get graphDetailsView(){return this._graphDetailsView}_graphView;get graphView(){return this._graphView}_homeView;get homeView(){return this._homeView}get id(){return this._context.extension.id}_integrationAuthentication;get integrationAuthentication(){return null==this._integrationAuthentication&&this._disposables.push(this._integrationAuthentication=new IntegrationAuthenticationService(this,this._connection)),this._integrationAuthentication}_integrations;get integrations(){return null==this._integrations&&this._disposables.push(this._integrations=new IntegrationService(this,this._connection)),this._integrations}_keyboard;get keyboard(){return this._keyboard}_lineAnnotationController;get lineAnnotations(){return this._lineAnnotationController}_lineHistoryView;get lineHistoryView(){return this._lineHistoryView}_lineHoverController;get lineHovers(){return this._lineHoverController}_lineTracker;get lineTracker(){return this._lineTracker}_mode;get mode(){return null==this._mode&&(this._mode=S.H.get("modes")?.[S.H.get("mode.active")]),this._mode}_organizations;get organizations(){return this._organizations}_patchDetailsView;get patchDetailsView(){return this._patchDetailsView}_prerelease;get prerelease(){return this._prerelease}get prereleaseOrDebugging(){return this._prerelease||this.debugging}_pullRequestView;get pullRequestView(){return this._pullRequestView}_rebaseEditor;get rebaseEditor(){return this._rebaseEditor}_remotesView;get remotesView(){return this._remotesView}_repositoriesView;get repositoriesView(){return this._repositoriesView}_repositoryPathMapping;get repositoryPathMapping(){return null==this._repositoryPathMapping&&this._disposables.push(this._repositoryPathMapping=new RepositoryWebPathMappingProvider(this)),this._repositoryPathMapping}_searchAndCompareView;get searchAndCompareView(){return this._searchAndCompareView}_stashesView;get stashesView(){return this._stashesView}_statusBarController;get statusBar(){return this._statusBarController}_storage;get storage(){return this._storage}_subscription;get subscription(){return this._subscription}_tagsView;get tagsView(){return this._tagsView}_telemetry;get telemetry(){return this._telemetry}_timelineView;get timelineView(){return this._timelineView}_uri;get uri(){return this._uri}_usage;get usage(){return this._usage}_version;get version(){return this._version}_viewCommands;get viewCommands(){return null==this._viewCommands&&(this._viewCommands=new ViewCommands(this)),this._viewCommands}_vsls;get vsls(){return this._vsls}_workspaces;get workspaces(){return null==this._workspaces&&this._disposables.push(this._workspaces=new WorkspacesService(this,this._connection)),this._workspaces}_workspacesView;get workspacesView(){return this._workspacesView}_worktreesView;get worktreesView(){return this._worktreesView}ensureModeApplied(){let e=this.mode;if(null==e){S.H.clearOverrides();return}if(null!=e.annotations){let t;switch(e.annotations){case"blame":t=a.Ts.ToggleFileBlame;break;case"changes":t=a.Ts.ToggleFileChanges;break;case"heatmap":t=a.Ts.ToggleFileHeatmap}if(null!=t){let i={type:e.annotations,on:!0};setTimeout(e2.RS,50,t,i)}}S.H.applyOverrides({get:(t,i)=>{if(null!=e.annotations){if(S.H.matches(`${e.annotations}.toggleMode`,t,i))return i="window";if(S.H.matches(e.annotations,t,i))return i.toggleMode="window",i}for(let r of["codeLens","currentLine","hovers","statusBar"])if(null!=e[r]){if(S.H.matches(`${r}.enabled`,t,i)){i=e[r];break}if(S.H.matches(r,t,i)){i.enabled=e[r];break}}return i},getAll:t=>(null!=e.annotations&&(t[e.annotations].toggleMode="window"),null!=e.codeLens&&(t.codeLens.enabled=e.codeLens),null!=e.currentLine&&(t.currentLine.enabled=e.currentLine),null!=e.hovers&&(t.hovers.enabled=e.hovers),null!=e.statusBar&&(t.statusBar.enabled=e.statusBar),t),onDidChange:e=>{if(!S.H.changed(e,["mode","modes"]))return e;let t=e.affectsConfiguration;return{...e,affectsConfiguration:(e,i)=>!!/^gitlens\.(?:modes?|blame|changes|heatmap|codeLens|currentLine|hovers|statusBar)\b/.test(e)||t(e,i)}}})}};n$([(0,en.Rm)()],nE.prototype,"registerGitProviders",1),n$([(0,G.B)()],nE.prototype,"debugging",1),n$([(0,G.B)()],nE.prototype,"env",1),n$([(0,G.B)()],nE.prototype,"id",1),n$([(0,G.B)()],nE.prototype,"prereleaseOrDebugging",1);let nO=nE;function nx(e){return e instanceof nO}},6580:(e,t,i)=>{let r;i.d(t,{E:()=>o});var s=i(7279);let n=/(^|\s):([-+_a-z0-9]+):($|\s)/g;function o(e){return null==r&&(r=JSON.parse((0,s.EO)(""))),e.replace(n,(e,t,i,s)=>r[i]?`${t}${r[i]}${s}`:e)}},5838:(e,t,i)=>{i.d(t,{E:()=>o,K:()=>n});let{fromCharCode:r}=String,s=new TextEncoder;function n(e){let t="string"==typeof e?s.encode(e):e,i="";for(let e=0,{length:s}=t;e<s;e++)i+=r(t[e]);return globalThis.btoa(i)}function o(e){let t=globalThis.atob(e),i=t.length,r=new Uint8Array(i);for(let e=0;e<i;e++)r[e]=t.charCodeAt(e);return r}},9032:(e,t,i)=>{i.d(t,{m9:()=>a,Fx:()=>l,uR:()=>h});var r=i(5838);function s(e,t){let[i,r,s,n]=e;i+=(r&s|~r&n)+t[0]-680876936|0,n+=((i=(i<<7|i>>>25)+r|0)&r|~i&s)+t[1]-389564586|0,s+=((n=(n<<12|n>>>20)+i|0)&i|~n&r)+t[2]+606105819|0,r+=((s=(s<<17|s>>>15)+n|0)&n|~s&i)+t[3]-1044525330|0,i+=((r=(r<<22|r>>>10)+s|0)&s|~r&n)+t[4]-176418897|0,n+=((i=(i<<7|i>>>25)+r|0)&r|~i&s)+t[5]+1200080426|0,s+=((n=(n<<12|n>>>20)+i|0)&i|~n&r)+t[6]-1473231341|0,r+=((s=(s<<17|s>>>15)+n|0)&n|~s&i)+t[7]-45705983|0,i+=((r=(r<<22|r>>>10)+s|0)&s|~r&n)+t[8]+1770035416|0,n+=((i=(i<<7|i>>>25)+r|0)&r|~i&s)+t[9]-1958414417|0,s+=((n=(n<<12|n>>>20)+i|0)&i|~n&r)+t[10]-42063|0,r+=((s=(s<<17|s>>>15)+n|0)&n|~s&i)+t[11]-1990404162|0,i+=((r=(r<<22|r>>>10)+s|0)&s|~r&n)+t[12]+1804603682|0,n+=((i=(i<<7|i>>>25)+r|0)&r|~i&s)+t[13]-40341101|0,s+=((n=(n<<12|n>>>20)+i|0)&i|~n&r)+t[14]-1502002290|0,r+=((s=(s<<17|s>>>15)+n|0)&n|~s&i)+t[15]+1236535329|0,i+=((r=(r<<22|r>>>10)+s|0)&n|s&~n)+t[1]-165796510|0,n+=((i=(i<<5|i>>>27)+r|0)&s|r&~s)+t[6]-1069501632|0,s+=((n=(n<<9|n>>>23)+i|0)&r|i&~r)+t[11]+643717713|0,r+=((s=(s<<14|s>>>18)+n|0)&i|n&~i)+t[0]-373897302|0,i+=((r=(r<<20|r>>>12)+s|0)&n|s&~n)+t[5]-701558691|0,n+=((i=(i<<5|i>>>27)+r|0)&s|r&~s)+t[10]+38016083|0,s+=((n=(n<<9|n>>>23)+i|0)&r|i&~r)+t[15]-660478335|0,r+=((s=(s<<14|s>>>18)+n|0)&i|n&~i)+t[4]-405537848|0,i+=((r=(r<<20|r>>>12)+s|0)&n|s&~n)+t[9]+568446438|0,n+=((i=(i<<5|i>>>27)+r|0)&s|r&~s)+t[14]-1019803690|0,s+=((n=(n<<9|n>>>23)+i|0)&r|i&~r)+t[3]-187363961|0,r+=((s=(s<<14|s>>>18)+n|0)&i|n&~i)+t[8]+1163531501|0,i+=((r=(r<<20|r>>>12)+s|0)&n|s&~n)+t[13]-1444681467|0,n+=((i=(i<<5|i>>>27)+r|0)&s|r&~s)+t[2]-51403784|0,s+=((n=(n<<9|n>>>23)+i|0)&r|i&~r)+t[7]+1735328473|0,r+=((s=(s<<14|s>>>18)+n|0)&i|n&~i)+t[12]-1926607734|0,i+=((r=(r<<20|r>>>12)+s|0)^s^n)+t[5]-378558|0,n+=((i=(i<<4|i>>>28)+r|0)^r^s)+t[8]-2022574463|0,s+=((n=(n<<11|n>>>21)+i|0)^i^r)+t[11]+1839030562|0,r+=((s=(s<<16|s>>>16)+n|0)^n^i)+t[14]-35309556|0,i+=((r=(r<<23|r>>>9)+s|0)^s^n)+t[1]-1530992060|0,n+=((i=(i<<4|i>>>28)+r|0)^r^s)+t[4]+1272893353|0,s+=((n=(n<<11|n>>>21)+i|0)^i^r)+t[7]-155497632|0,r+=((s=(s<<16|s>>>16)+n|0)^n^i)+t[10]-1094730640|0,i+=((r=(r<<23|r>>>9)+s|0)^s^n)+t[13]+681279174|0,n+=((i=(i<<4|i>>>28)+r|0)^r^s)+t[0]-358537222|0,s+=((n=(n<<11|n>>>21)+i|0)^i^r)+t[3]-722521979|0,r+=((s=(s<<16|s>>>16)+n|0)^n^i)+t[6]+76029189|0,i+=((r=(r<<23|r>>>9)+s|0)^s^n)+t[9]-640364487|0,n+=((i=(i<<4|i>>>28)+r|0)^r^s)+t[12]-421815835|0,s+=((n=(n<<11|n>>>21)+i|0)^i^r)+t[15]+530742520|0,r+=((s=(s<<16|s>>>16)+n|0)^n^i)+t[2]-995338651|0,r=(r<<23|r>>>9)+s|0,i+=(s^(r|~n))+t[0]-198630844|0,i=(i<<6|i>>>26)+r|0,n+=(r^(i|~s))+t[7]+1126891415|0,n=(n<<10|n>>>22)+i|0,s+=(i^(n|~r))+t[14]-1416354905|0,s=(s<<15|s>>>17)+n|0,r+=(n^(s|~i))+t[5]-57434055|0,r=(r<<21|r>>>11)+s|0,i+=(s^(r|~n))+t[12]+1700485571|0,i=(i<<6|i>>>26)+r|0,n+=(r^(i|~s))+t[3]-1894986606|0,n=(n<<10|n>>>22)+i|0,s+=(i^(n|~r))+t[10]-1051523|0,s=(s<<15|s>>>17)+n|0,r+=(n^(s|~i))+t[1]-2054922799|0,r=(r<<21|r>>>11)+s|0,i+=(s^(r|~n))+t[8]+1873313359|0,i=(i<<6|i>>>26)+r|0,n+=(r^(i|~s))+t[15]-30611744|0,n=(n<<10|n>>>22)+i|0,s+=(i^(n|~r))+t[6]-1560198380|0,s=(s<<15|s>>>17)+n|0,r+=(n^(s|~i))+t[13]+1309151649|0,r=(r<<21|r>>>11)+s|0,i+=(s^(r|~n))+t[4]-145523070|0,i=(i<<6|i>>>26)+r|0,n+=(r^(i|~s))+t[11]-1120210379|0,n=(n<<10|n>>>22)+i|0,s+=(i^(n|~r))+t[2]+718787259|0,s=(s<<15|s>>>17)+n|0,r+=(n^(s|~i))+t[9]-343485551|0,r=(r<<21|r>>>11)+s|0,e[0]=i+e[0]|0,e[1]=r+e[1]|0,e[2]=s+e[2]|0,e[3]=n+e[3]|0}let n=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"];function o(e){let t="";for(let i=0;i<4;i+=1)t+=n[e>>8*i+4&15]+n[e>>8*i&15];return t}function a(){return(0,r.K)(globalThis.crypto.getRandomValues(new Uint8Array(16)))}function l(e,t="hex"){return function(e,t="hex"){let i=(function(e){let t;let i=e.length,r=[1732584193,-271733879,-1732584194,271733878];for(t=64;t<=i;t+=64)s(r,function(e){let t=[];for(let i=0;i<64;i+=4)t[i>>2]=e.charCodeAt(i)+(e.charCodeAt(i+1)<<8)+(e.charCodeAt(i+2)<<16)+(e.charCodeAt(i+3)<<24);return t}(e.substring(t-64,t)));let n=(e=e.substring(t-64)).length,o=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(t=0;t<n;t+=1)o[t>>2]|=e.charCodeAt(t)<<(t%4<<3);if(o[t>>2]|=128<<(t%4<<3),t>55)for(s(r,o),t=0;t<16;t+=1)o[t]=0;let a=(8*i).toString(16).match(/(.*?)(.{0,8})$/),l=parseInt(a[2],16),h=parseInt(a[1],16)||0;return o[14]=l,o[15]=h,s(r,o),r})(e).map(o).join("");return"hex"===t?i:btoa(function(e){let t=[],i=e.length;for(let r=0;r<i-1;r+=2)t.push(parseInt(e.substr(r,2),16));return String.fromCharCode.apply(String,t)}(i))}(e,t)}function h(){return globalThis.crypto.randomUUID()}},7609:(e,t,i)=>{i.d(t,{Ff:()=>n,cQ:()=>s,hd:()=>r});let r=globalThis.fetch;function s(e){}async function n(e,t){return t()}},1364:(e,t,i)=>{i.d(t,{l:()=>o,n:()=>a});let r=new TextDecoder,s=new TextEncoder,n=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];function o(e){let t=s.encode(e),i=Array(t.length);for(let e=0;e<t.length;++e)i[e]=n[t[e]];return i.join("")}function a(e){let t=e.match(/(\w{2})/g);if(null===t)return"";let i=new Uint8Array(t.map(e=>parseInt(e,16)));return r.decode(i)}},9262:(e,t,i)=>{function r(e){let t=.001*performance.now(),i=Math.floor(t),r=Math.floor(t%1*1e9);return void 0!==e&&(i-=e[0],(r-=e[1])<0&&(i--,r+=1e9)),[i,r]}i.d(t,{k:()=>r})},3794:(e,t,i)=>{i.d(t,{HZ:()=>r,ZR:()=>c,j9:()=>o,uF:()=>l,uo:()=>h});let r=!0,s=navigator?.userAgentData?.platform,n=navigator.userAgent,o="Linux"===s||n.indexOf("Linux")>=0,a="macOS"===s||n.indexOf("Macintosh")>=0,l="Windows"===s||n.indexOf("Windows")>=0;function h(){return l?"web-windows":a?"web-macOS":o?"web-linux":"web"}function c(e){return e}},8803:(e,t,i)=>{i.d(t,{AL:()=>CancellationError,Iz:()=>ProviderRequestClientError,ND:()=>ProviderNotFoundError,QI:()=>ProviderFetchError,R:()=>a,Uk:()=>AccessDeniedError,WT:()=>AuthenticationRequiredError,ax:()=>l,dU:()=>ExtensionNotFoundError,g3:()=>ProviderRequestNotFoundError,gK:()=>OpenVirtualRepositoryError,pf:()=>AccountValidationError,qc:()=>ProviderRequestRateLimitError,v3:()=>AuthenticationError});var r,s,n=i(1398),o=i(4293);let AccessDeniedError=class AccessDeniedError extends Error{subscription;required;constructor(e,t){super(e.account?.verified===!1?"Email verification required":null!=t&&(0,o.zx)(t)?"Paid plan required":"Plan required"),this.subscription=e,this.required=t,Error.captureStackTrace?.(this,AccessDeniedError)}};let AccountValidationError=class AccountValidationError extends Error{original;statusCode;statusText;constructor(e,t,i,r){super(e+=`; status=${i}: ${r}`),this.original=t,this.statusCode=i,this.statusText=r,Error.captureStackTrace?.(this,AccountValidationError)}};var a=((r=a||{})[r.UserDidNotConsent=1]="UserDidNotConsent",r[r.Unauthorized=2]="Unauthorized",r[r.Forbidden=3]="Forbidden",r);let AuthenticationError=class AuthenticationError extends Error{id;original;reason;constructor(e,t,i){let r,s;if(null==t)r=`Unable to get required authentication session for '${e}'`;else if("string"==typeof t)r=t,s=void 0;else switch(s=t){case 1:r=`'${e}' authentication is required for this operation`;break;case 2:r=`Your '${e}' credentials are either invalid or expired`;break;case 3:r=`Your '${e}' credentials do not have the required access`}super(r),this.id=e,this.original=i,this.reason=s,Error.captureStackTrace?.(this,AuthenticationError)}};let AuthenticationRequiredError=class AuthenticationRequiredError extends Error{constructor(){super("Authentication required"),Error.captureStackTrace?.(this,AuthenticationRequiredError)}};let CancellationError=class CancellationError extends n.CancellationError{constructor(e){super(),this.original=e,Error.captureStackTrace?.(this,CancellationError)}};let ExtensionNotFoundError=class ExtensionNotFoundError extends Error{constructor(e,t){super(`Unable to find the ${t} extension (${e}). Please ensure it is installed and enabled.`),this.extensionId=e,this.extensionName=t,Error.captureStackTrace?.(this,ExtensionNotFoundError)}};var l=((s=l||{})[s.RemoteHubApiNotFound=1]="RemoteHubApiNotFound",s[s.NotAGitHubRepository=2]="NotAGitHubRepository",s[s.GitHubAuthenticationNotFound=3]="GitHubAuthenticationNotFound",s[s.GitHubAuthenticationDenied=4]="GitHubAuthenticationDenied",s);let OpenVirtualRepositoryError=class OpenVirtualRepositoryError extends Error{original;reason;repoPath;constructor(e,t,i){let r,s;if(null==t)r=`Unable to open the virtual repository: ${e}`;else if("string"==typeof t)r=t,s=void 0;else switch(s=t,r=`Unable to open the virtual repository: ${e}; `,s){case 1:r+="Unable to get required api from the GitHub Repositories extension. Please ensure that the GitHub Repositories extension is installed and enabled";break;case 2:r+="Only GitHub repositories are supported currently";break;case 3:r+="Unable to get required GitHub authentication";break;case 4:r+="GitHub authentication is required"}super(r),this.original=i,this.reason=s,this.repoPath=e,Error.captureStackTrace?.(this,OpenVirtualRepositoryError)}};let ProviderFetchError=class ProviderFetchError extends Error{constructor(e,t,i){super(`${e} request failed: ${t.ok?"":`(${t.status}) ${t.statusText}. `}${i?.length?i[0].message:""}`),this.response=t,Error.captureStackTrace?.(this,ProviderFetchError)}get status(){return this.response.status}get statusText(){return this.response.statusText}};let ProviderNotFoundError=class ProviderNotFoundError extends Error{constructor(e){super(`No provider registered for '${null==e?String(e):"string"==typeof e?e:e.toString(!0)}'`),Error.captureStackTrace?.(this,ProviderNotFoundError)}};let ProviderRequestClientError=class ProviderRequestClientError extends Error{constructor(e){super(e.message),this.original=e,Error.captureStackTrace?.(this,ProviderRequestClientError)}};let ProviderRequestNotFoundError=class ProviderRequestNotFoundError extends Error{constructor(e){super(e.message),this.original=e,Error.captureStackTrace?.(this,ProviderRequestNotFoundError)}};let ProviderRequestRateLimitError=class ProviderRequestRateLimitError extends Error{constructor(e,t,i){super(e.message),this.original=e,this.token=t,this.resetAt=i,Error.captureStackTrace?.(this,ProviderRequestRateLimitError)}}},4703:(e,t,i)=>{i.d(t,{O:()=>n,k:()=>o});var r,s,n=((r=n||{}).Stashes="stashes",r.Timeline="timeline",r.Worktrees="worktrees",r.StashOnlyStaged="stashOnlyStaged",r.ForceIfIncludes="forceIfIncludes",r),o=((s=o||{}).Timeline="timeline",s.Worktrees="worktrees",s.Graph="graph",s.Focus="focus",s)},6090:(e,t,i)=>{i.d(t,{V:()=>a,b:()=>o});var r=i(3807),s=i(7899),n=i(3131);async function o(e){let t=(0,n.v6)();return await (0,s.RS)(r.Ts.GitCommands,{...e,completion:t}),t.promise}async function a(e,t){await (0,s.Y0)(r.Ts.BrowseRepoAtRevision,void 0,{uri:e,before:t?.before,openInNewWindow:t?.openInNewWindow})}},1885:(e,t,i)=>{i.d(t,{$w:()=>a,TF:()=>o,_c:()=>l,vt:()=>n});var r=i(2972),s=i(6090);function n(e,t,i){return(0,s.b)({command:"branch",state:{subcommand:"create",repo:e,reference:t,name:i}})}function o(e,t){return(0,s.b)({command:"branch",state:{subcommand:"delete",repo:e,references:t}})}function a(e,t,i){return(0,s.b)({command:"branch",state:{subcommand:"rename",repo:e,reference:t,name:i}})}async function l(e,t){let i=e.remote?r.m.instance.remotesView:r.m.instance.branchesView,s=i.canReveal?await i.revealBranch(e,t):await r.m.instance.repositoriesView.revealBranch(e,t);return null==s&&i.show({preserveFocus:!t?.focus}),s}},9432:(e,t,i)=>{i.d(t,{$5:()=>T,Ce:()=>P,DD:()=>D,E9:()=>G,G4:()=>q,Gu:()=>S,JX:()=>M,Kg:()=>E,Km:()=>B,LH:()=>b,MQ:()=>V,Rv:()=>k,Tq:()=>O,Uf:()=>R,VX:()=>U,YF:()=>f,YS:()=>I,_c:()=>W,cs:()=>$,eU:()=>v,eX:()=>A,gV:()=>F,m:()=>L,nA:()=>_,po:()=>y,tl:()=>N,uT:()=>w,vM:()=>x,wq:()=>H});var r=i(1398),s=i(3807),n=i(2972),o=i(5622),a=i(7899),l=i(4832),h=i(2471),c=i(7931),u=i(5287),d=i(5313),p=i(5248),g=i(6645),m=i(8875);async function f(e,t,i){let s=!1,o=t.ref,a=i?.ref;if("string"!=typeof e){if("?"===e.status)o=`${o}^3`,s=!0;else if("A"===e.status)s=!0;else if("D"===e.status){let i=c.nk.fromFile(e,t.repoPath);try{await r.workspace.fs.stat(i)}catch{s=!0,a=o,o=`${o}^`}}}if(s){let i=c.nk.fromFile(e,t.repoPath);await n.m.instance.git.applyChangesToWorkingFile(i,o,a),await O(i,{preserveFocus:!0,preview:!1})}else await O(e,t,{preserveFocus:!0,preview:!1}),await n.m.instance.git.applyChangesToWorkingFile(c.nk.fromFile(e,t.repoPath,o),o,a)}async function w(e){await r.env.clipboard.writeText(e.ref)}async function v(e){let t;if((0,u.WM)(e))null==(t=e).message&&await t.ensureFullDetails();else if(null==(t=await n.m.instance.git.getCommit(e.repoPath,e.ref)))return;let i=t.message??t.summary;await r.env.clipboard.writeText(i)}async function y(e,t,i){return(0,u.WM)(e)?l.H.get("views.openChangesInMultiDiffEditor")?C(e,t):b(e,t):l.H.get("views.openChangesInMultiDiffEditor")?C(e,t,i):b(e,t,i)}async function b(e,t,i){let{files:r,refs:s,options:n}=await z(e,t,i);if(await Q(r,{message:`Are you sure you want to open the changes for each of the ${r.length} files?`,confirmButton:"Open Changes",threshold:10}))for(let e of(n={preserveFocus:!0,preview:!1,...n},r))await A(e,s,n)}async function C(e,t,i){let o;if(!l.H.getCore("multiDiffEditor.experimental.enabled")){r.window.showErrorMessage("Enable the multi-diff editor by setting 'multiDiffEditor.experimental.enabled' to use this command");return}null!=i&&({title:o,...i}=i);let{commit:a,files:u,refs:d,options:p}=await z(e,t,i);if(null==o&&(o=null!=a?`Changes in ${(0,g.pV)(d.rhs,{strings:{working:"Working Tree"}})}`:`Changes between ${(0,g.pV)(d.lhs,{strings:{working:"Working Tree"}})} ${s.EO.ArrowLeftRightLong} ${(0,g.pV)(d.rhs,{strings:{working:"Working Tree"}})}`),!await Q(u,{message:`Are you sure you want to view the changes for all ${u.length} files?`,confirmButton:"View All Changes",threshold:50}))return;let{git:m}=n.m.instance,f=[];for(let e of u){let t="D"===e.status?void 0:await m.getBestRevisionUri(d.repoPath,e.path,d.rhs);null!=t&&""===d.rhs&&(t=await m.getWorkingUri(d.repoPath,t));let i="A"===e.status?void 0:await m.getBestRevisionUri(d.repoPath,e.originalPath??e.path,d.lhs),r=("D"===e.status?i:t)??c.nk.fromFile(e,d.repoPath);f.push({uri:r,lhs:i,rhs:t})}await (0,h.RZ)(f,o,p)}async function R(e,t){let{files:i}=await j(e,t);if(await Q(i,{message:`Are you sure you want to externally open the changes for each of the ${i.length} files?`,confirmButton:"Open Changes",threshold:10}))for(let e of i)k(e,t)}async function S(e,t,i){return(0,u.WM)(e)?l.H.get("views.openChangesInMultiDiffEditor")?C(e,t):P(e,t):l.H.get("views.openChangesInMultiDiffEditor")?C(e,{repoPath:t.repoPath,lhs:t.ref,rhs:""},i):P(e,t,i)}async function P(e,t,i){let{files:r,ref:s,options:n}=await j(e,t,i);if(await Q(r,{message:`Are you sure you want to open the changes for each of the ${r.length} files?`,confirmButton:"Open Changes",threshold:10}))for(let e of(n={preserveFocus:!0,preview:!1,...n},r))await D(e,s,n)}async function A(e,t,i){let r=(0,u.WM)(t);if("string"==typeof e){if(!r)throw Error("Invalid arguments");let i=await t.findFile(e);if(null==i)throw Error("Invalid arguments");e=i}else if(!r&&""===t.rhs)return D(e,{repoPath:t.repoPath,ref:t.lhs},i);if(i={preserveFocus:!0,preview:!1,...i},"A"===e.status&&r){let r=await t.getCommitForFile(e);(0,a.RS)(s.Ts.DiffWithPrevious,{commit:r,showOptions:i});return}let n=r?{repoPath:t.repoPath,rhs:t.sha,lhs:t.unresolvedPreviousSha}:t,o=c.nk.fromFile(e,n.repoPath),l="R"===e.status||"C"===e.status?c.nk.fromFile(e,n.repoPath,n.lhs,!0):o;await (0,a.RS)(s.Ts.DiffWith,{repoPath:n.repoPath,lhs:{uri:l,sha:n.lhs,title:i?.lhsTitle},rhs:{uri:o,sha:n.rhs,title:i?.rhsTitle},showOptions:i})}async function k(e,t,i){if("string"==typeof e){if(!(0,u.WM)(t))throw Error("Invalid arguments");let i=await t.findFile(e);if(null==i)throw Error("Invalid arguments");e=i}return n.m.instance.git.openDiffTool(t.repoPath,c.nk.fromFile(e,e.repoPath??t.repoPath),{ref1:(0,g._k)(t.ref)?"":`${t.ref}^`,ref2:(0,g._k)(t.ref)?"":t.ref,staged:(0,g.KH)(t.ref)||null!=e.indexStatus,tool:i})}async function D(e,t,i){let r;if("string"==typeof e){if(!(0,u.WM)(t))throw Error("Invalid arguments");let i=await t.findFile(e);if(null==i)throw Error("Invalid arguments");e=i}"D"!==e.status&&(r=(0,u.WM)(t)?{repoPath:t.repoPath,ref:t.sha}:t,i={preserveFocus:!0,preview:!1,...i},await (0,a.Y0)(s.Ts.DiffWithWorking,void 0,{uri:c.nk.fromFile(e,r.repoPath,r.ref),showOptions:i,lhsTitle:i?.lhsTitle}))}async function T(e,t,i){t.lhs=t.lhs||"HEAD",t.rhs=t.rhs||"HEAD";let{files:r}=await (0,m.Hn)(e,t.repoPath,(0,g.Xn)(t.lhs,t.rhs,"..."),""===t.rhs);await C(r??[],t,i)}async function _(e,t,i,r){return n.m.instance.git.openDirectoryCompare(e,t,i,r)}async function I(e){return _(e.repoPath,e.ref,`${e.ref}^`)}async function $(e){return _(e.repoPath,e.ref,void 0)}async function E(e,t,i){let o;let{git:a}=n.m.instance;if(""===t.lhs)throw Error("Cannot get files for comparisons of a ref with working tree");o=""===t.rhs?t.lhs:`${t.lhs}..${t.rhs}`;let l=a.getRelativePath(e,t.repoPath),h=await a.getDiffStatus(t.repoPath,o,void 0,{path:l});if(null==h){r.window.showWarningMessage(`No changes in '${l}' between ${(0,g.pV)(t.lhs,{strings:{working:"Working Tree"}})} ${s.EO.ArrowLeftRightLong} ${(0,g.pV)(t.rhs,{strings:{working:"Working Tree"}})}`);return}let c=`Changes in ${l} between ${(0,g.pV)(t.lhs,{strings:{working:"Working Tree"}})} ${s.EO.ArrowLeftRightLong} ${(0,g.pV)(t.rhs,{strings:{working:"Working Tree"}})}`;return C(h,t,{...i,title:c})}async function O(e,t,i){let n;if(e instanceof r.Uri)n=e,i=t;else if(n=c.nk.fromFile(e,t.repoPath,t.ref),"string"!=typeof e&&"?"===e.status)return;i={preserveFocus:!0,preview:!1,...i},await (0,a.Y0)(s.Ts.OpenWorkingFile,void 0,{uri:n,showOptions:i})}async function x(e,t,i){let s,a;if(e instanceof r.Uri){if((0,u.WM)(t))throw Error("Invalid arguments");s=e,i=t}else{let i;if(!(0,u.WM)(t))throw Error("Invalid arguments");if("string"==typeof e){let r=await t.findFile(e);if(null==r)throw Error("Invalid arguments");i=r}else i=e;s=n.m.instance.git.getRevisionUri("D"===i.status?await t.getPreviousSha()??d.nB:t.sha,i,t.repoPath)}let{annotationType:l,line:p,...m}={preserveFocus:!0,preview:!1,...i};null!=p&&0!==p&&(m.selection=new r.Range(p,0,p,0));let f=await c.nk.fromUri(s);try{a=await (0,h.Ol)(s,{throwOnError:!0,...m})}catch(t){if(!t?.message?.includes("Unable to resolve nonexistent file")){r.window.showErrorMessage(`Unable to open '${f.relativePath}' in revision '${f.sha}'`);return}let e=await (0,o.G)(n.m.instance,(0,g.kA)(f.sha,f.repoPath),{ignoreFocusOut:!0,initialPath:f.relativePath,title:`Open File at Revision \u2022 Unable to open '${f.relativePath}'`,placeholder:"Choose a file revision to open",keyboard:{keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{await (0,h.Ol)(t,{...m,preserveFocus:!0,preview:!0})}}});if(null==e)return;a=await (0,h.Ol)(e,m)}null!=l&&null!=a&&await n.m.instance.fileAnnotations.show(a,l,{selection:{line:p}})}async function F(e,t){let i;if(e instanceof r.Uri)i=e;else{if(null==t)throw Error("Invalid arguments");if(i=c.nk.fromFile(e,t.repoPath,t.ref),"string"!=typeof e&&"?"===e.status)return}await (0,a.RS)(s.Ts.OpenFileOnRemote,i,{sha:t?.ref})}async function B(e,t,i){let{files:r,ref:s,options:o}=await j(e,t,i);if(!await Q(r,{message:`Are you sure you want to open each of the ${r.length} files?`,confirmButton:"Open Files",threshold:10}))return;let a=(await Promise.all(r.map(e=>n.m.instance.git.getWorkingUri(s.repoPath,c.nk.fromFile(e,s.repoPath,s.ref))))).filter(e=>!!e);(0,h.JR)(a,o)}async function L(e,t,i){let{files:r,refs:s,options:o}=await z(e,t,i);await Q(r,{message:`Are you sure you want to open each of the ${r.length} file revisions?`,confirmButton:"Open Revisions",threshold:10})&&(0,h.JR)(r.map(e=>n.m.instance.git.getRevisionUri("D"===e.status?s.lhs:s.rhs,e,s.repoPath)),o)}async function U(e,t){let i,s;if("string"==typeof e)i=e,s=t.ref;else if(i=e.path,"D"===e.status){let i=c.nk.fromFile(e,t.repoPath);try{await r.workspace.fs.stat(i),s=`${t.ref}^`}catch{s=t.ref}}else s="?"===e.status?`${t.ref}^3`:t.ref;await n.m.instance.git.checkout(t.repoPath,s,{path:i})}async function W(e,t){let i=[n.m.instance.commitsView,n.m.instance.branchesView,n.m.instance.remotesView];for(let r of i){let i=r.canReveal?await r.revealCommit(e,t):await n.m.instance.repositoriesView.revealCommit(e,t);if(null!=i)return i}i[0].show({preserveFocus:!t?.focus})}async function q(e,t){let i;if(null==t){await (0,a.RS)(s.Ts.ShowQuickCommit,{commit:e});return}i=t instanceof r.Uri?t:c.nk.fromFile(t,e.repoPath,e.ref),await (0,a.RS)(s.Ts.ShowQuickCommitFile,i,{sha:e.sha})}function M(e,t){let{preserveFocus:i,...r}={...t,commit:e};return n.m.instance.commitDetailsView.show({preserveFocus:i},r)}function N(e,t){let{preserveFocus:i,...r}={...t,commit:e};return n.m.instance.graphDetailsView.show({preserveFocus:i},r)}async function H(e,t){await (0,a.RS)(s.Ts.ShowInCommitGraph,{ref:(0,g.rd)(e),preserveFocus:t?.preserveFocus})}async function G(e){let t;(0,u.WM)(e)?(null==e.files&&await e.ensureFullDetails(),t=e.files??[]):t=e.map(e=>new p.lY(e.repoPath,e.path,e.status,e.originalPath)),await Q(t,{message:`Are you sure you want to open each of the ${t.length} files?`,confirmButton:"Open Files",threshold:10})&&await (0,a.RS)(s.Ts.OpenOnlyChangedFiles,{uris:t.filter(e=>"D"!==e.status).map(e=>e.uri)})}async function V(e,t){let i=await e.git.getOrOpenScmRepository(t.repoPath),s=await i?.getCommit("HEAD");if(s?.hash!==t.ref){r.window.showWarningMessage(`Commit ${(0,g.M4)(t,{capitalize:!0,icon:!1})} cannot be undone, because it is no longer the most recent commit.`);return}let n=await e.git.getStatusForRepo(t.repoPath);if(n?.files.length){let e={title:"Undo Commit"};if(await r.window.showWarningMessage(`You have uncommitted changes in the working tree.

Do you still want to undo ${(0,g.M4)(t,{capitalize:!1,icon:!1})}?`,{modal:!0},e,{title:"Cancel",isCloseAffordance:!0})!==e)return}await (0,a.wS)("git.undoCommit",t.repoPath)}async function Q(e,t){if(e.length<=t.threshold)return!0;let i={title:t.confirmButton??"Open"},s={title:t.cancelButton??"Cancel",isCloseAffordance:!0};return await r.window.showWarningMessage(t.message,{modal:!0},i,s)===i}async function j(e,t,i){return(0,u.WM)(e)?(null==e.files&&await e.ensureFullDetails(),{commit:e,files:e.files??[],options:t,ref:{repoPath:e.repoPath,ref:e.sha}}):{files:e,options:i,ref:t}}async function z(e,t,i){return(0,u.WM)(e)?(null==e.files&&await e.ensureFullDetails(),{commit:e,files:e.files??[],options:t,refs:{repoPath:e.repoPath,rhs:e.sha,lhs:e.resolvedPreviousSha??await e.getPreviousSha()??e.unresolvedPreviousSha}}):{files:e,options:i,refs:t}}},3708:(e,t,i)=>{i.d(t,{_:()=>o,s:()=>n});var r=i(2972),s=i(6090);function n(e,t){return(0,s.b)({command:"co-authors",state:{repo:e,contributors:t}})}async function o(e,t){let i=r.m.instance.contributorsView,s=i.canReveal?await i.revealContributor(e,t):await r.m.instance.repositoriesView.revealContributor(e,t);return null==s&&i.show({preserveFocus:!t?.focus}),s}},7531:(e,t,i)=>{i.d(t,{R3:()=>a,TF:()=>l,WQ:()=>n,_c:()=>h,hd:()=>o});var r=i(2972),s=i(6090);function n(e,t,i,r){return(0,s.b)({command:"remote",confirm:r?.confirm,state:{repo:e,subcommand:"add",name:t,url:i,flags:r?.fetch?["-f"]:void 0,reveal:r?.reveal}})}async function o(e,t){if("string"==typeof e){let t=r.m.instance.git.getRepository(e);if(null==t)return;e=t}await e.fetch({remote:t})}async function a(e,t){return(0,s.b)({command:"remote",state:{repo:e,subcommand:"prune",remote:t}})}async function l(e,t){return(0,s.b)({command:"remote",state:{repo:e,subcommand:"remove",remote:t}})}async function h(e,t){let i=r.m.instance.remotesView,s=null!=e?i.canReveal?await i.revealRemote(e,t):await r.m.instance.repositoriesView.revealRemote(e,t):void 0;return null==s&&i.show({preserveFocus:!t?.focus}),s}},3161:(e,t,i)=>{i.d(t,{$T:()=>n,RU:()=>c,S_:()=>p,VC:()=>h,_c:()=>g,a$:()=>l,cL:()=>u,h1:()=>a,hd:()=>o,ru:()=>d});var r=i(2972),s=i(6090);function n(e,t){return(0,s.b)({command:"cherry-pick",state:{repo:e,references:t}})}function o(e,t){return(0,s.b)({command:"fetch",state:{repos:e,reference:t}})}function a(e,t){return(0,s.b)({command:"merge",state:{repo:e,reference:t}})}function l(e,t){return(0,s.b)({command:"pull",state:{repos:e,reference:t}})}function h(e,t,i){return(0,s.b)({command:"push",state:{repos:e,flags:t?["--force"]:[],reference:i}})}function c(e,t,i=!0){return(0,s.b)({command:"rebase",state:{repo:e,reference:t,flags:i?["--interactive"]:[]}})}function u(e,t,i){return(0,s.b)({command:"reset",confirm:null==i||i.includes("--hard"),state:{repo:e,reference:t,flags:i}})}function d(e,t){return(0,s.b)({command:"revert",state:{repo:e,references:t}})}function p(e,t,i){return(0,s.b)({command:"switch",state:{repos:e,reference:t},confirm:i})}async function g(e,t,i){let s=t?.canReveal?await t.revealRepository(e,i):await r.m.instance.repositoriesView.revealRepository(e,i);return null==s&&(t??r.m.instance.repositoriesView).show({preserveFocus:!i?.focus}),s}},300:(e,t,i)=>{i.d(t,{$w:()=>a,Bb:()=>n,JX:()=>u,VC:()=>h,_c:()=>c,gv:()=>o,uY:()=>l});var r=i(2972),s=i(6090);function n(e,t){return(0,s.b)({command:"stash",state:{subcommand:"apply",repo:e,reference:t}})}function o(e,t){return(0,s.b)({command:"stash",state:{subcommand:"drop",repo:e,references:t}})}function a(e,t,i){return(0,s.b)({command:"stash",state:{subcommand:"rename",repo:e,reference:t,message:i}})}function l(e,t){return(0,s.b)({command:"stash",state:{subcommand:"pop",repo:e,reference:t}})}function h(e,t,i,r=!1,n=!1,o=!1,a){return(0,s.b)({command:"stash",state:{subcommand:"push",repo:e,uris:t,onlyStagedUris:a,message:i,flags:[...r?["--include-untracked"]:[],...n?["--keep-index"]:[],...o?["--staged"]:[]]}})}async function c(e,t){let i=r.m.instance.stashesView,s=i.canReveal?await i.revealStash(e,t):await r.m.instance.repositoriesView.revealStash(e,t);return null==s&&i.show({preserveFocus:!t?.focus}),s}function u(e,t){let{preserveFocus:i,...s}={...t,commit:e};return r.m.instance.commitDetailsView.show({preserveFocus:i},s)}},2013:(e,t,i)=>{i.d(t,{TF:()=>o,_c:()=>a,vt:()=>n});var r=i(2972),s=i(6090);function n(e,t,i){return(0,s.b)({command:"tag",state:{subcommand:"create",repo:e,reference:t,name:i}})}function o(e,t){return(0,s.b)({command:"tag",state:{subcommand:"delete",repo:e,references:t}})}async function a(e,t){let i=r.m.instance.tagsView,s=i.canReveal?await i.revealTag(e,t):await r.m.instance.repositoriesView.revealTag(e,t);return null==s&&i.show({preserveFocus:!t?.focus}),s}},8880:(e,t,i)=>{i.d(t,{F8:()=>u,PB:()=>a,TF:()=>h,VO:()=>d,_c:()=>c,ho:()=>l,vt:()=>o});var r=i(2972),s=i(3131),n=i(6090);async function o(e,t,i,r){let o=(0,s.v6)();if(await (0,n.b)({command:"worktree",state:{subcommand:"create",repo:e,uri:t,reference:i,addRemote:r?.addRemote,createBranch:r?.createBranch,flags:r?.createBranch?["-b"]:void 0,result:o,reveal:r?.reveal}}),!o.pending)return o.promise;o.cancel()}function a(e,t,i){return(0,n.b)({command:"worktree",state:{subcommand:"copy-changes",repo:t,worktree:i,changes:{type:e}}})}function l(e,t){return(0,n.b)({command:"worktree",state:{subcommand:"open",repo:e.repoPath,worktree:e,flags:u(t?.location),openOnly:t?.openOnly}})}function h(e,t){return(0,n.b)({command:"worktree",state:{subcommand:"delete",repo:e,uris:t}})}async function c(e,t){let i=r.m.instance.worktreesView,s=null!=e?i.canReveal?await i.revealWorktree(e,t):await r.m.instance.repositoriesView.revealWorktree(e,t):void 0;return null==s&&i.show({preserveFocus:!t?.focus}),s}function u(e){if(null!=e)switch(e){case"newWindow":return["--new-window"];case"addToWorkspace":return["--add-to-workspace"];default:return[]}}function d(e){if(null!=e)return e.includes("--new-window")?"newWindow":e.includes("--add-to-workspace")?"addToWorkspace":"currentWindow"}},1310:(e,t,i)=>{i.d(t,{C6:()=>g,Do:()=>GitSearchError,N$:()=>WorktreeDeleteError,O7:()=>y,Oo:()=>StashPushError,Uz:()=>StashApplyError,W:()=>p,a_:()=>d,iX:()=>WorktreeCreateError,ol:()=>ApplyPatchCommitError,z2:()=>b});let GitSearchError=class GitSearchError extends Error{constructor(e){super(e.message),this.original=e,Error.captureStackTrace?.(this,GitSearchError)}};var r,s,n,o,a,l,h,c,u,d=((r=d||{})[r.StashFailed=0]="StashFailed",r[r.CreateWorktreeFailed=1]="CreateWorktreeFailed",r[r.ApplyFailed=2]="ApplyFailed",r[r.ApplyAbortedWouldOverwrite=3]="ApplyAbortedWouldOverwrite",r[r.AppliedWithConflicts=4]="AppliedWithConflicts",r);let ApplyPatchCommitError=class ApplyPatchCommitError extends Error{static is(e,t){return e instanceof ApplyPatchCommitError&&(null==t||e.reason===t)}original;reason;constructor(e,t,i){super(t||="Unable to apply patch"),this.original=i,this.reason=e,Error.captureStackTrace?.(this,ApplyPatchCommitError)}};var p=((s=p||{})[s.WorkingChanges=0]="WorkingChanges",s);let StashApplyError=class StashApplyError extends Error{static is(e,t){return e instanceof StashApplyError&&(null==t||e.reason===t)}original;reason;constructor(e,t){let i,r;null==e?i="Unable to apply stash":"string"==typeof e?(i=e,r=void 0):(r=e,i="Unable to apply stash. Your working tree changes would be overwritten. Please commit or stash your changes before trying again"),super(i),this.original=t,this.reason=r,Error.captureStackTrace?.(this,StashApplyError)}};var g=((n=g||{})[n.ConflictingStagedAndUnstagedLines=0]="ConflictingStagedAndUnstagedLines",n[n.NothingToSave=1]="NothingToSave",n);let StashPushError=class StashPushError extends Error{static is(e,t){return e instanceof StashPushError&&(null==t||e.reason===t)}original;reason;constructor(e,t){let i,r;if(null==e)i="Unable to stash";else if("string"==typeof e)i=e,r=void 0;else switch(r=e){case 0:i="Changes were stashed, but the working tree cannot be updated because at least one file has staged and unstaged changes on the same line(s)";break;case 1:i="No files to stash";break;default:i="Unable to stash"}super(i),this.original=t,this.reason=r,Error.captureStackTrace?.(this,StashApplyError)}};var m=((o=m||{})[o.RemoteAhead=0]="RemoteAhead",o[o.TipBehind=1]="TipBehind",o[o.PushRejected=2]="PushRejected",o[o.PushRejectedWithLease=3]="PushRejectedWithLease",o[o.PushRejectedWithLeaseIfIncludes=4]="PushRejectedWithLeaseIfIncludes",o[o.PermissionDenied=5]="PermissionDenied",o[o.RemoteConnection=6]="RemoteConnection",o[o.NoUpstream=7]="NoUpstream",o[o.Other=8]="Other",o),f=((a=f||{})[a.Conflict=0]="Conflict",a[a.GitIdentity=1]="GitIdentity",a[a.RemoteConnection=2]="RemoteConnection",a[a.UnstagedChanges=3]="UnstagedChanges",a[a.UnmergedFiles=4]="UnmergedFiles",a[a.UncommittedChanges=5]="UncommittedChanges",a[a.OverwrittenChanges=6]="OverwrittenChanges",a[a.RefLocked=7]="RefLocked",a[a.RebaseMultipleBranches=8]="RebaseMultipleBranches",a[a.TagConflict=9]="TagConflict",a[a.Other=10]="Other",a),w=((l=w||{})[l.NoFastForward=0]="NoFastForward",l[l.NoRemote=1]="NoRemote",l[l.RemoteConnection=2]="RemoteConnection",l[l.Other=3]="Other",l),v=((h=v||{})[h.Conflicts=0]="Conflicts",h[h.AbortedWouldOverwrite=1]="AbortedWouldOverwrite",h[h.Other=2]="Other",h),y=((c=y||{})[c.AlreadyCheckedOut=0]="AlreadyCheckedOut",c[c.AlreadyExists=1]="AlreadyExists",c);let WorktreeCreateError=class WorktreeCreateError extends Error{static is(e,t){return e instanceof WorktreeCreateError&&(null==t||e.reason===t)}original;reason;constructor(e,t){let i,r;if(null==e)i="Unable to create worktree";else if("string"==typeof e)i=e,r=void 0;else switch(r=e){case 0:i="Unable to create worktree because it is already checked out";break;case 1:i="Unable to create worktree because it already exists"}super(i),this.original=t,this.reason=r,Error.captureStackTrace?.(this,WorktreeCreateError)}};var b=((u=b||{})[u.HasChanges=0]="HasChanges",u[u.MainWorkingTree=1]="MainWorkingTree",u);let WorktreeDeleteError=class WorktreeDeleteError extends Error{static is(e,t){return e instanceof WorktreeDeleteError&&(null==t||e.reason===t)}original;reason;constructor(e,t){let i,r;if(null==e)i="Unable to delete worktree";else if("string"==typeof e)i=e,r=void 0;else switch(r=e){case 0:i="Unable to delete worktree because there are uncommitted changes";break;case 1:i="Unable to delete worktree because it is a main working tree"}super(i),this.original=t,this.reason=r,Error.captureStackTrace?.(this,WorktreeDeleteError)}}},236:(e,t,i)=>{i.d(t,{c:()=>CommitFormatter});var r=i(5176),s=i(3900),n=i(7622),o=i(8911),a=i(5283),l=i(5745),h=i(8458),c=i(7746),u=i(3807),d=i(2972),p=i(6580),g=i(4379),m=i(4832),f=i(4026),w=i(3131),v=i(7279),y=i(5287),b=i(5313),C=i(8559),R=i(304),S=i(6645),P=i(7788),A=i(4407);let CommitFormatter=class CommitFormatter extends A.Z{reset(e,t){super.reset(e,t),null==this._options.outputFormat&&(this._options.outputFormat="plaintext")}get _authorDate(){return this._item.author.formatDate(this._options.dateFormat)}get _authorDateAgo(){return this._item.author.fromNow()}get _authorDateAgoShort(){return this._item.author.fromNow(!0)}get _committerDate(){return this._item.committer.formatDate(this._options.dateFormat)}get _committerDateAgo(){return this._item.committer.fromNow()}get _committerDateAgoShort(){return this._item.committer.fromNow(!0)}get _date(){return this._item.formatDate(this._options.dateFormat)}get _dateAgo(){return this._item.formatDateFromNow()}get _dateAgoShort(){return this._item.formatDateFromNow(!0)}get _pullRequestDate(){let{pullRequest:e}=this._options;return null!=e&&(0,R.r0)(e)?e.formatDate(this._options.dateFormat)??"":""}get _pullRequestDateAgo(){let{pullRequest:e}=this._options;return null!=e&&(0,R.r0)(e)?e.formatDateFromNow()??"":""}get _pullRequestDateOrAgo(){return"absolute"===(null!=this._options.dateStyle?this._options.dateStyle:m.H.get("defaultDateStyle"))?this._pullRequestDate:this._pullRequestDateAgo}get ago(){return this._padOrTruncate(this._dateAgo,this._options.tokenOptions.ago)}get agoOrDate(){let e=null!=this._options.dateStyle?this._options.dateStyle:m.H.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._date:this._dateAgo,this._options.tokenOptions.agoOrDate)}get agoOrDateShort(){let e=null!=this._options.dateStyle?this._options.dateStyle:m.H.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._date:this._dateAgoShort,this._options.tokenOptions.agoOrDateShort)}get author(){let{name:e,email:t}=this._item.author,i=this._padOrTruncate(e,this._options.tokenOptions.author);switch(this._options.outputFormat){case"markdown":return`[${i}](${t?`mailto:${t} "Email ${e} (${t})"`:`# "${e}"`})`;case"html":return e=(0,v.yz)(e),t=(0,v.yz)(t),`<a ${t?`href="mailto:${t}" title="Email ${e} (${t})"`:`href="#" title="${e}"`})${this._options.htmlFormat?.classes?.author?` class="${this._options.htmlFormat.classes.author}"`:""}>${i}</a>`;default:return i}}get authorAgo(){return this._padOrTruncate(this._authorDateAgo,this._options.tokenOptions.authorAgo)}get authorAgoOrDate(){let e=null!=this._options.dateStyle?this._options.dateStyle:m.H.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._authorDate:this._authorDateAgo,this._options.tokenOptions.authorAgoOrDate)}get authorAgoOrDateShort(){let e=null!=this._options.dateStyle?this._options.dateStyle:m.H.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._authorDate:this._authorDateAgoShort,this._options.tokenOptions.authorAgoOrDateShort)}get authorDate(){return this._padOrTruncate(this._authorDate,this._options.tokenOptions.authorDate)}get authorNotYou(){let{name:e,email:t}=this._item.author;if("You"===e)return this._padOrTruncate("",this._options.tokenOptions.authorNotYou);let i=this._padOrTruncate(e,this._options.tokenOptions.authorNotYou);switch(this._options.outputFormat){case"markdown":return`[${i}](${t?`mailto:${t} "Email ${e} (${t})"`:`# "${e}"`})`;case"html":return e=(0,v.yz)(e),t=(0,v.yz)(t),`<a ${t?`href="mailto:${t}" title="Email ${e} (${t})"`:`href="#" title="${e}"`})${this._options.htmlFormat?.classes?.author?` class="${this._options.htmlFormat.classes.author}"`:""}>${i}</a>`;default:return i}}get avatar(){let{outputFormat:e}=this._options;if("plaintext"===e||!m.H.get("hovers.avatars"))return this._padOrTruncate("",this._options.tokenOptions.avatar);let{name:t}=this._item.author,i=this._options.presence;if(null!=i){let r=`${t} ${"You"===t?"are":"is"} ${"dnd"===i.status?"in ":""}${i.statusText.toLocaleLowerCase()}`;return"html"===e&&(r=(0,v.yz)(r)),this._getAvatar(e,r,this._options.avatarSize).then(t=>this._padOrTruncate(`${t}${this._getPresence(e,i,r)}`,this._options.tokenOptions.avatar))}return"html"===e&&(t=(0,v.yz)(t)),this._getAvatar(e,t,this._options.avatarSize)}async _getAvatar(e,t,i){i=i??m.H.get("hovers.avatarSize");let r=this._item.getAvatarUri({defaultStyle:m.H.get("defaultGravatarsStyle"),size:i}),s=(await r).toString(!0);return this._padOrTruncate("html"===e?`<img src="${s}" alt="title)" title="${t}" width="${i}" height="${i}"${this._options.htmlFormat?.classes?.avatar?` class="${this._options.htmlFormat.classes.avatar}"`:""} />`:`![${t}](${s}|width=${i},height=${i} "${t}")`,this._options.tokenOptions.avatar)}_getPresence(e,t,i){return"html"===e?`<img src="${(0,r.Sk)(t.status)}" alt="${i}" title="${i}"${this._options.htmlFormat?.classes?.avatarPresence?` class="${this._options.htmlFormat.classes.avatarPresence}"`:""}/>`:`![${i}](${(0,r.Sk)(t.status)} "${i}")`}get changes(){return this._padOrTruncate((0,y.WM)(this._item)?this._item.formatStats():"",this._options.tokenOptions.changes)}get changesDetail(){return this._padOrTruncate((0,y.WM)(this._item)?this._item.formatStats({expand:!0,separator:", "}):"",this._options.tokenOptions.changesDetail)}get changesShort(){return this._padOrTruncate((0,y.WM)(this._item)?this._item.formatStats({compact:!0,separator:""}):"",this._options.tokenOptions.changesShort)}get commands(){let e;if("plaintext"===this._options.outputFormat||"html"===this._options.outputFormat)return this._padOrTruncate("",this._options.tokenOptions.commands);if(this._item.isUncommitted){let{previousLineComparisonUris:e}=this._options;return e?.previous!=null?`[\`${this._padOrTruncate((0,S.pV)((0,S.KH)(e.current.sha)?e.current.sha:b.SU),this._options.tokenOptions.commands)}\`](${h.L.getMarkdownCommandArgs(this._item.sha,this._item.repoPath)} "Open Details") &nbsp;[$(chevron-left)$(compare-changes)](${n.T.getMarkdownCommandArgs({lhs:{sha:e.previous.sha??"",uri:e.previous.documentUri()},rhs:{sha:e.current.sha??"",uri:e.current.documentUri()},repoPath:this._item.repoPath,line:this._options.editor?.line})} "Open Changes with Previous Revision") &nbsp;[$(versions)](${a.E.getMarkdownCommandArgs(d.m.instance.git.getRevisionUri(e.previous),"blame",this._options.editor?.line)} "Open Blame Prior to this Change")`:`[\`${this._padOrTruncate((0,S.pV)(this._item.isUncommittedStaged?b.id:b.SU),this._options.tokenOptions.commands)}\`](${h.L.getMarkdownCommandArgs(this._item.sha,this._item.repoPath)} "Open Details")`}let t=" &nbsp;&nbsp;|&nbsp;&nbsp; ";if(e=`---

[\`$(git-commit) ${this.id}\`](${h.L.getMarkdownCommandArgs(this._item.sha,this._item.repoPath)} "Open Details") &nbsp;[$(chevron-left)$(compare-changes)](${n.T.getMarkdownCommandArgs(this._item,this._options.editor?.line)} "Open Changes with Previous Revision")`,null!=this._item.file&&null!=this._item.unresolvedPreviousSha){let t=d.m.instance.git.getRevisionUri(this._item.unresolvedPreviousSha,this._item.file.originalPath??this._item.file?.path,this._item.repoPath);e+=` &nbsp;[$(versions)](${a.E.getMarkdownCommandArgs(t,"blame",this._options.editor?.line)} "Open Blame Prior to this Change")`}e+=` &nbsp;[$(search)](${s.uB.getMarkdownCommandArgsCore(u.Ts.RevealCommitInView,{repoPath:this._item.repoPath,sha:this._item.sha,revealInView:!0})} "Reveal in Side Bar")`,(0,g.L)()&&(e+=` &nbsp;[$(gitlens-graph)](${s.uB.getMarkdownCommandArgsCore(u.Ts.ShowInCommitGraph,{ref:(0,S.rd)(this._item,{excludeMessage:!0})})} "Open in Commit Graph")`);let{pullRequest:i,remotes:r}=this._options;if(r?.length){let t=(0,P.zF)(r);e+=` &nbsp;[$(globe)](${o.y.getMarkdownCommandArgs(this._item.sha)} "Open Commit on ${t?.length?t[0].name:"Remote"}")`}if(null!=i)(0,R.r0)(i)?e+=`${t}[$(git-pull-request) PR #${i.id}](${k("openPullRequest",{repoPath:this._item.repoPath,provider:{id:i.provider.id,name:i.provider.name,domain:i.provider.domain},pullRequest:{id:i.id,url:i.url}})} "Open Pull Request \\#${i.id}${1==d.m.instance.actionRunners.count("openPullRequest")?` on ${i.provider.name}`:"..."}
${u.EO.Dash.repeat(2)}
${(0,v.FV)(i.title).replace(/"/g,'\\"')}
${i.state}, ${i.formatDateFromNow()}")`:(0,w.yL)(i)&&(e+=`${t}[$(git-pull-request) PR $(loading~spin)](command:${u.Ts.RefreshHover} "Searching for a Pull Request (if any) that introduced this commit...")`);else if(null!=r){let[i]=r;i?.hasIntegration()&&!i.maybeIntegrationConnected&&m.H.get("integrations.enabled")&&(e+=`${t}[$(plug) Connect to ${i?.provider.name}${u.EO.Ellipsis}](${l.d.getMarkdownCommandArgs(i)} "Connect to ${i.provider.name} to enable the display of the Pull Request (if any) that introduced this commit")`)}if(d.m.instance.actionRunners.count("hover.commands")>0){let{name:i,email:r}=this._item.author;e+=`${t}[$(organization) Team${u.EO.SpaceThinnest}${u.EO.Ellipsis}](${k("hover.commands",{repoPath:this._item.repoPath,commit:{sha:this._item.sha,author:{name:i,email:r,presence:this._options.presence}},file:null!=this._options.editor?{uri:this._options.editor?.uri.toString(),line:this._options.editor?.line}:void 0})} "Show Team Actions")`}let p=this._item.getGitUri();return e+=`${t}[$(ellipsis)](${c.N.getMarkdownCommandArgs(null!=p?{revisionUri:d.m.instance.git.getRevisionUri(p).toString(!0)}:{commit:this._item})} "Show More Actions")`,this._padOrTruncate(e,this._options.tokenOptions.commands)}get committerAgo(){return this._padOrTruncate(this._committerDateAgo,this._options.tokenOptions.committerAgo)}get committerAgoOrDate(){let e=null!=this._options.dateStyle?this._options.dateStyle:m.H.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._committerDate:this._committerDateAgo,this._options.tokenOptions.committerAgoOrDate)}get committerAgoOrDateShort(){let e=null!=this._options.dateStyle?this._options.dateStyle:m.H.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._committerDate:this._committerDateAgoShort,this._options.tokenOptions.committerAgoOrDateShort)}get committerDate(){return this._padOrTruncate(this._committerDate,this._options.tokenOptions.committerDate)}get date(){return this._padOrTruncate(this._date,this._options.tokenOptions.date)}get email(){let{email:e}=this._item.author;return this._padOrTruncate(e??"",this._options.tokenOptions.email)}get footnotes(){let{outputFormat:e}=this._options;return this._padOrTruncate(null==this._options.footnotes||0===this._options.footnotes.size?"":(0,f.fj)((0,f.Tj)(this._options.footnotes,([t,i])=>"plaintext"===e?`${(0,v.VU)(t)} ${i}`:i),"html"===e?"<br \\>":"markdown"===e?"\\\n":"\n"),this._options.tokenOptions.footnotes)}get id(){let e=this._padOrTruncate(this._item.shortSha??"",this._options.tokenOptions.id);return"plaintext"!==this._options.outputFormat&&this._options.unpublished?`<span style="color:#35b15e;"${this._options.htmlFormat?.classes?.id?` class="${this._options.htmlFormat.classes.id}"`:""}>${e} (unpublished)</span>`:e}get link(){let e;switch(this._options.outputFormat){case"markdown":{let t=this._padOrTruncate(this._item.shortSha??"",this._options.tokenOptions.id);e=`[\`$(git-commit) ${t}\`](${h.L.getMarkdownCommandArgs(this._item.sha,this._item.repoPath)} "Open Details")`;break}case"html":{let t=this._padOrTruncate(this._item.shortSha??"",this._options.tokenOptions.id);e=`<a href="${h.L.getMarkdownCommandArgs(this._item.sha,this._item.repoPath)}" title="Open Details"${this._options.htmlFormat?.classes?.link?` class="${this._options.htmlFormat.classes.link}"`:""}><span class="codicon codicon-git-commit"></span>${t}</a>`;break}default:return this.id}return this._padOrTruncate(e,this._options.tokenOptions.link)}get message(){let{outputFormat:e}=this._options;if(this._item.isUncommitted){let t=this._item.file?.hasConflicts??!1,i=this._item.isUncommittedStaged||(this._options.previousLineComparisonUris?.current?.isUncommittedStaged??!1),r=`${t?"Merge":i?"Staged":"Uncommitted"} changes`;switch(e){case"html":r=`<span ${this._options.htmlFormat?.classes?.message?`class="${this._options.htmlFormat.classes.message}"`:""}>${r}</span>`;break;case"markdown":r=`
> ${r}`}return this._padOrTruncate(r,this._options.tokenOptions.message)}let t=(this._options.messageTruncateAtNewLine?this._item.summary:this._item.message??this._item.summary).trim().replace(/\r?\n/g,"\n");switch(t=(0,p.E)(t),t=this._padOrTruncate(t,this._options.tokenOptions.message),"plaintext"!==e&&(t=(0,v.yz)(t)),"markdown"===e&&(t=(0,v.FV)(t,{quoted:!0})),this._options.messageAutolinks&&(t=d.m.instance.autolinks.linkify(t,e,this._options.remotes,this._options.enrichedAutolinks,null==this._options.pullRequest||(0,w.yL)(this._options.pullRequest)?void 0:new Set([this._options.pullRequest.id]),this._options.footnotes)),null!=this._options.messageIndent&&"plaintext"===e&&(t=t.replace(/^/gm,u.EO.Space.repeat(this._options.messageIndent))),e){case"html":return`<span ${this._options.htmlFormat?.classes?.id?`class="${this._options.htmlFormat.classes.id}"`:""}>${t}</span>`;case"markdown":return`
> ${t}`;default:return t}}get pullRequest(){let e;let{pullRequest:t}=this._options;if(null==t||"html"===this._options.outputFormat)return this._padOrTruncate("",this._options.tokenOptions.pullRequest);if((0,R.r0)(t)){if("markdown"===this._options.outputFormat){if(e=`PR [**#${t.id}**](${k("openPullRequest",{repoPath:this._item.repoPath,provider:{id:t.provider.id,name:t.provider.name,domain:t.provider.domain},pullRequest:{id:t.id,url:t.url}})} "Open Pull Request \\#${t.id}${1==d.m.instance.actionRunners.count("openPullRequest")?` on ${t.provider.name}`:"..."}
${u.EO.Dash.repeat(2)}
${(0,v.FV)(t.title).replace(/"/g,'\\"')}
${t.state}, ${t.formatDateFromNow()}")`,null!=this._options.footnotes){let e=(0,v.FV)(t.title).replace(/"/g,'\\"').trim(),i=this._options.footnotes.size+1;this._options.footnotes.set(i,`${(0,C.xu)(t)} [**${e}**](${t.url} "Open Pull Request \\#${t.id} on ${t.provider.name}")\\
${u.EO.Space.repeat(4)} #${t.id} ${t.state} ${t.formatDateFromNow()}`)}}else if(null!=this._options.footnotes){let i=this._options.footnotes.size+1;this._options.footnotes.set(i,`PR #${t.id}: ${t.title}  ${u.EO.Dot}  ${t.state}, ${t.formatDateFromNow()}`),e=`PR #${t.id}${(0,v.VU)(i)}`}else e=`PR #${t.id}`}else{if(!(0,w.yL)(t))return this._padOrTruncate("",this._options.tokenOptions.pullRequest);e="markdown"===this._options.outputFormat?`[PR $(loading~spin)](command:${u.Ts.RefreshHover} "Searching for a Pull Request (if any) that introduced this commit...")`:this._options?.pullRequestPendingMessage??""}return this._padOrTruncate(e,this._options.tokenOptions.pullRequest)}get pullRequestAgo(){return this._padOrTruncate(this._pullRequestDateAgo,this._options.tokenOptions.pullRequestAgo)}get pullRequestAgoOrDate(){return this._padOrTruncate(this._pullRequestDateOrAgo,this._options.tokenOptions.pullRequestAgoOrDate)}get pullRequestDate(){return this._padOrTruncate(this._pullRequestDate,this._options.tokenOptions.pullRequestDate)}get pullRequestState(){let{pullRequest:e}=this._options;return this._padOrTruncate(null!=e&&(0,R.r0)(e)?e.state??"":"",this._options.tokenOptions.pullRequestState)}get sha(){return this._padOrTruncate(this._item.shortSha??"",this._options.tokenOptions.sha)}get stashName(){return this._padOrTruncate(this._item.stashName??"",this._options.tokenOptions.stashName)}get stashNumber(){return this._padOrTruncate(this._item.number??"",this._options.tokenOptions.stashNumber)}get stashOnRef(){return this._padOrTruncate(this._item.stashOnRef??"",this._options.tokenOptions.stashOnRef)}get tips(){let e=this._options.getBranchAndTagTips?.(this._item.sha,{icons:"markdown"===this._options.outputFormat});return null!=e&&"plaintext"!==this._options.outputFormat&&(e=e.split(", ").map(e=>`<span style="color:#ffffff;background-color:#1d76db;"${this._options.htmlFormat?.classes?.tips?` class="${this._options.htmlFormat.classes.tips}"`:""}>&nbsp;&nbsp;${e}&nbsp;&nbsp;</span>`).join(u.EO.Space.repeat(3))),this._padOrTruncate(e??"",this._options.tokenOptions.tips)}static fromTemplate(e,t,i){if((null==i||"string"==typeof i)&&(i={dateFormat:i}),CommitFormatter.has(e,"footnotes")&&null==i.footnotes&&(i.footnotes=new Map),CommitFormatter.has(e,"avatar")&&i?.outputFormat)throw Error("Invalid template token 'avatar' used in non-async call");return super.fromTemplateCore(this,e,t,i)}static fromTemplateAsync(e,t,i){return CommitFormatter.has(e,"footnotes")&&((null==i||"string"==typeof i)&&(i={dateFormat:i}),null==i.footnotes&&(i.footnotes=new Map)),super.fromTemplateCoreAsync(this,e,t,i)}static has(e,...t){return super.has(e,...t)}};function k(e,t){return s.uB.getMarkdownCommandArgsCore(`${u.Ts.ActionPrefix}${e}`,{...t,type:e})}},4407:(e,t,i)=>{i.d(t,{Z:()=>Formatter});var r=i(7279);let s=new Map,n=/ /g,o={collapseWhitespace:!1,padDirection:"left",prefix:void 0,suffix:void 0,truncateTo:void 0};let Formatter=class Formatter{_item;_options;constructor(e,t){this.reset(e,t)}reset(e,t){this._item=e,this.collapsableWhitespace=0,(null!=t||null==this._options)&&(null==t&&(t={}),null==t.dateFormat&&(t.dateFormat="MMMM Do, YYYY h:mma"),null==t.tokenOptions&&(t.tokenOptions={}),this._options=t)}collapsableWhitespace=0;_padOrTruncate(e,t){if(null==e||0===e.length)return e;if(0===(t??=o).truncateTo)return`${t.prefix?t.prefix.trimEnd():""}${t.suffix?t.suffix.trimStart():""}`;t.prefix&&(e=`${t.prefix}${e}`);let i=t.suffix?(0,r.RG)(t.suffix):0,s=t.truncateTo;if(null==s)return this.collapsableWhitespace=0,t.suffix?`${e}${t.suffix}`:e;s+=this.collapsableWhitespace,this.collapsableWhitespace=0;let n=(0,r.vJ)(e,s,i+1);if(n.truncated)return`${e.slice(0,n.index)}${n.ellipsed?"…":""}${t.suffix??""}`;let a=n.width;return(t.suffix&&(e+=t.suffix,a+=i),a===s)?e:(t.collapseWhitespace&&(this.collapsableWhitespace=s-a),"left"===t.padDirection)?e.padStart(s," "):t.collapseWhitespace?e:e.padEnd(s," ")}static _formatter=void 0;static fromTemplateCore(e,t,i,s){let o;if(t=t.replace(n," "),e instanceof Formatter)return(0,r.GW)(t,e);if(null==(o=null==s||"string"==typeof s?{dateFormat:s}:s).tokenOptions){let e=(0,r.Vx)(t).reduce((e,t)=>(e[t.key]=t.options,e),Object.create(null));o.tokenOptions=e}return null==this._formatter?this._formatter=new e(i,o):this._formatter.reset(i,o),(0,r.GW)(t,this._formatter)}static fromTemplateCoreAsync(e,t,i,s){let o;if(t=t.replace(n," "),e instanceof Formatter)return(0,r.Ow)(t,e);if(null==(o=null==s||"string"==typeof s?{dateFormat:s}:s).tokenOptions){let e=(0,r.Vx)(t).reduce((e,t)=>(e[t.key]=t.options,e),Object.create(null));o.tokenOptions=e}return null==this._formatter?this._formatter=new e(i,o):this._formatter.reset(i,o),(0,r.Ow)(t,this._formatter)}static has(e,...t){let i=1===t.length?t[0]:`(${t.join("|")})`,r=s.get(i);return null==r&&(r=RegExp(`\\b${i}\\b`),s.set(i,r)),r.test(e)}}},6861:(e,t,i)=>{i.d(t,{Z:()=>StatusFileFormatter});var r=i(3807),s=i(4911),n=i(5248),o=i(4407);let StatusFileFormatter=class StatusFileFormatter extends o.Z{get directory(){let e=(0,n.C0)(this._item,!1,this._options.relativePath);return this._padOrTruncate(e,this._options.tokenOptions.directory)}get file(){let e=(0,s.P8)(this._item.path);return this._padOrTruncate(e,this._options.tokenOptions.file)}get filePath(){let e=(0,n.CB)(this._item,{relativeTo:this._options.relativePath,truncateTo:this._options.tokenOptions.filePath?.truncateTo});return this._padOrTruncate(e,this._options.tokenOptions.filePath)}get originalPath(){let e=(0,n.Hk)(this._item,this._options.relativePath);return this._padOrTruncate(e,this._options.tokenOptions.originalPath)}get path(){let e=(0,n.WI)(this._item,this._options.relativePath);return this._padOrTruncate(e,this._options.tokenOptions.path)}get status(){let e=(0,n.m5)(this._item.status);return this._padOrTruncate(e,this._options.tokenOptions.status)}get working(){let e="";return e=null!=this._item.workingTreeStatus&&null!=this._item.indexStatus?`${r.EO.Pencil}${r.EO.Space}${r.EO.SpaceThinnest}${r.EO.Check}`:null!=this._item.workingTreeStatus?`${r.EO.Pencil}${r.EO.SpaceThin}${r.EO.SpaceThinnest}${r.EO.EnDash}${r.EO.Space}`:null!=this._item.indexStatus?`${r.EO.Space}${r.EO.EnDash}${r.EO.Space.repeat(2)}${r.EO.Check}`:"",this._padOrTruncate(e,this._options.tokenOptions.working)}get changes(){return this._padOrTruncate((0,n.Hz)(this._item)?this._item.formatStats():"",this._options.tokenOptions.changes)}get changesDetail(){return this._padOrTruncate((0,n.Hz)(this._item)?this._item.formatStats({expand:!0,separator:", "}):"",this._options.tokenOptions.changesDetail)}get changesShort(){return this._padOrTruncate((0,n.Hz)(this._item)?this._item.formatStats({compact:!0,separator:""}):"",this._options.tokenOptions.changesShort)}static fromTemplate(e,t,i){return super.fromTemplateCore(this,e,t,i)}}},7931:(e,t,i)=>{i.d(t,{Bd:()=>C,V3:()=>S,nk:()=>b,t5:()=>R});var r=i(1398),s=i(1364),n=i(1488),o=i(3807),a=i(2972),l=i(1994),h=i(8180),c=i(3533),u=i(520),d=i(4911),p=i(2471),g=i(5313),m=i(6645),f=Object.defineProperty,w=Object.getOwnPropertyDescriptor,v=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?w(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&f(t,i,n),n};let y=class _GitUri extends r.Uri{repoPath;sha;constructor(e,t){let i;if(null==e){super({scheme:"unknown"});return}if(e.scheme===o.xB.GitLens){let i=e.path,r=S(e.authority);null==r.uncPath||i.startsWith(r.uncPath)||(i=`${r.uncPath}${e.path}`),super({scheme:e.scheme,authority:e.authority,path:i,query:e.query,fragment:e.fragment}),this.repoPath=r.repoPath;let s=r.ref;null!=t&&"string"!=typeof t&&(s=t.sha),(!(0,m._k)(s)||(0,m.KH)(s))&&(this.sha=s);return}if((0,p.QK)(e)){super(e);let[,i,r]=e.path.split("/",3);this.repoPath=e.with({path:`/${i}/${r}`}).toString();let n=function(e){let t;let[i,r]=e.authority.split("+");if(r)try{t=JSON.parse((0,s.n)(r))}catch{}return{scheme:i,metadata:t}}(e),o=n.metadata?.ref?.id;null!=t&&"string"!=typeof t&&(o=t.sha),o&&(!(0,m._k)(o)||(0,m.KH)(o))&&(this.sha=o);return}if(void 0===t){super(e);return}if("string"==typeof t){super(e),this.repoPath=t;return}let r=e.authority,n=(0,d.Fd)(a.m.instance.git.getAbsoluteUri(t.fileName??e.fsPath,t.repoPath).fsPath);if(47===n.charCodeAt(0)&&47===n.charCodeAt(1)){let e=n.indexOf("/",2);-1===e?(r=n.substring(2),n="/"):(r=n.substring(2,e),n=n.substring(e)||"/")}switch(e.scheme){case"https":case"http":case"file":i=n?47!==n.charCodeAt(0)?`/${n}`:n:"/";break;default:i=47!==n.charCodeAt(0)?`/${n}`:n}super({scheme:e.scheme,authority:r,path:i,query:e.query,fragment:e.fragment}),this.repoPath=t.repoPath,(!(0,m._k)(t.sha)||(0,m.KH)(t.sha))&&(this.sha=t.sha)}get directory(){return(0,d.A3)(this.relativePath)}get fileName(){return(0,d.P8)(this.relativePath)}get isUncommitted(){return(0,m._k)(this.sha)}get isUncommittedStaged(){return(0,m.KH)(this.sha)}get relativePath(){return(0,d.Uf)((0,d.Sp)(this.fsPath),this.repoPath)[0]}get shortSha(){return(0,m.pV)(this.sha)}documentUri(){return r.Uri.from({scheme:this.scheme,authority:this.authority,path:this.path,query:this.query,fragment:this.fragment})}equals(e){return!!l.Y.equals(this,e)&&this.sha===(R(e)?e.sha:void 0)}getFormattedFileName(e){return(0,u.j)(this.fsPath,{...e,fileOnly:!0})}toFileUri(){return a.m.instance.git.getAbsoluteUri(this.fsPath,this.repoPath)}static fromFile(e,t,i,r=!1){let s=a.m.instance.git.getAbsoluteUri("string"==typeof e?e:r&&e.originalPath||e.path,t);return i?new _GitUri(s,{repoPath:t,sha:"string"!=typeof e&&"?"===e.status?`${i}^3`:i}):new _GitUri(s,t)}static fromRepoPath(e,t){return t?new _GitUri(a.m.instance.git.getAbsoluteUri(e,e),{repoPath:e,sha:t}):new _GitUri(a.m.instance.git.getAbsoluteUri(e,e),e)}static fromRevisionUri(e){return new _GitUri(e)}static async fromUri(e){if(R(e))return e;if(!a.m.instance.git.isTrackable(e)||e.scheme===o.xB.GitLens)return new _GitUri(e);if(e.scheme===o.xB.Git){let t=(0,n.o)(e);if(t?.path){let i;let s=await a.m.instance.git.getOrOpenRepository(r.Uri.file(t.path));if(null==s)throw Error(`Unable to find repository for uri=${r.Uri.file(t.path).toString(!0)}`);switch(t.ref){case"":case"~":i=g.id;break;case null:i=void 0;break;default:i=t.ref}return new _GitUri(e,{fileName:t.path,repoPath:s.path,sha:i})}}if(e.scheme===o.xB.PRs){let t;try{t=JSON.parse(e.query)}catch{}if(t?.fileName){let i=await a.m.instance.git.getOrOpenRepository(e);if(null==i)throw Error(`Unable to find repository for uri=${r.Uri.file(t.fileName).toString(!0)}`);return new _GitUri(e,{fileName:t.fileName,repoPath:i.path,sha:t.isBase?t.baseCommit:t.headCommit})}}let t=await a.m.instance.git.getOrOpenRepository(e);return new _GitUri(e,t?.path)}};v([(0,c.B)()],y.prototype,"directory",1),v([(0,c.B)()],y.prototype,"fileName",1),v([(0,c.B)()],y.prototype,"isUncommitted",1),v([(0,c.B)()],y.prototype,"isUncommittedStaged",1),v([(0,c.B)()],y.prototype,"relativePath",1),v([(0,c.B)()],y.prototype,"shortSha",1),v([(0,c.B)()],y.prototype,"documentUri",1),v([(0,c.B)()],y.prototype,"toFileUri",1),v([(0,h.Yz)({exit:!0})],y,"fromUri",1);let b=y,C=Object.freeze(new b);function R(e){return e instanceof b}function S(e){return JSON.parse((0,s.n)(e))}},9102:(e,t,i)=>{i.d(t,{He:()=>y,Ht:()=>v,PX:()=>R,Xn:()=>P,Yk:()=>f,Zq:()=>C,Zr:()=>GitBranch,kY:()=>A,km:()=>b,n$:()=>w,xM:()=>S});var r=i(4832),s=i(1856),n=i(8180),o=i(3533),a=i(3916),l=i(4232),h=i(7279),c=i(6645),u=i(7736),d=Object.defineProperty,p=Object.getOwnPropertyDescriptor,g=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?p(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&d(t,i,n),n};let m=/^(HEAD|\(.*\))$/;function f(e,t,i){return`${e}|${t?"remotes/":"heads/"}${i}`}let GitBranch=class GitBranch{constructor(e,t,i,r,s,n,o,a,l=0,h=0,c=!1,u=!1){this.container=e,this.repoPath=t,this.name=i,this.remote=r,this.current=s,this.date=n,this.sha=o,this.rebasing=u,this.id=f(t,r,i),this.detached=c||!!this.current&&S(i),this.detached&&(this.name=w(this.sha)),this.upstream=a?.name==null||0===a.name.length?void 0:a,this.state={ahead:l,behind:h}}refType="branch";detached;id;upstream;state;toString(){return`${(0,a.zu)(this)}(${this.id})`}get formattedDate(){return"absolute"===this.container.BranchDateFormatting.dateStyle?this.formatDate(this.container.BranchDateFormatting.dateFormat):this.formatDateFromNow()}get ref(){return this.detached?this.sha:this.name}formatDate(e){return null!=this.date?(0,s.Yq)(this.date,e??"MMMM Do, YYYY h:mma"):""}formatDateFromNow(){return null!=this.date?(0,s.PI)(this.date):""}async getAssociatedPullRequest(e){let t=await this.getRemote();if(t?.provider!=null)return(await this.container.integrations.getByRemote(t))?.getPullRequestForBranch(t.provider.repoDesc,this.getTrackingWithoutRemote()??this.getNameWithoutRemote(),e)}getBasename(){let e=this.getNameWithoutRemote(),t=e.lastIndexOf("/");return -1!==t?e.substring(t+1):e}getNameWithoutRemote(){return this.remote?this.name.substring(v(this.name)+1):this.name}getTrackingWithoutRemote(){return(0,c.UJ)(this)}async getRemote(){let e=this.getRemoteName();if(null==e)return;let t=await this.container.git.getRemotes(this.repoPath);return t.length?t.find(t=>t.name===e):void 0}getRemoteName(){return this.remote?C(this.name):null!=this.upstream?C(this.upstream.name):void 0}async getStatus(){return this.remote?"remote":null!=this.upstream?this.upstream.missing?"missingUpstream":this.state.ahead&&this.state.behind?"diverged":this.state.ahead?"ahead":this.state.behind?"behind":"upToDate":(await this.container.git.getRemotes(this.repoPath)).length?"unpublished":"local"}getTrackingStatus(e){return(0,u.um)(this.upstream,this.state,e)}get starred(){let e=this.container.storage.getWorkspace("starred:branches");return void 0!==e&&!0===e[this.id]}star(){return this.container.git.getRepository(this.repoPath)?.star(this)}unstar(){return this.container.git.getRepository(this.repoPath)?.unstar(this)}};function w(e){return`(${(0,c.pV)(e)}...)`}function v(e){return e.startsWith("remotes/")?e.indexOf("/",8):e.indexOf("/")}function y(e){if(e.remote){let t=v(e.name);return -1===t?[e.name,void 0]:[e.name.substring(t+1),e.name.substring(0,t)]}if(e.upstream?.name!=null){let t=v(e.upstream.name);return -1===t?[e.name,void 0]:[e.name,e.upstream.name.substring(0,t)]}return[e.name,void 0]}function b(e){return e.substring(v(e)+1)}function C(e){return e.substring(0,v(e))}function R(e){return e instanceof GitBranch}function S(e){return!(e=e.trim()).length||m.test(e)}function P(e,t){switch((t={current:!0,orderBy:r.H.get("sortBranchesBy"),...t}).orderBy){case"date:asc":return e.sort((e,i)=>(t.missingUpstream?(e.upstream?.missing?-1:1)-(i.upstream?.missing?-1:1):0)||(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(t.openWorktreeBranches?(t.openWorktreeBranches.includes(e.name)?-1:1)-(t.openWorktreeBranches.includes(i.name)?-1:1):0)||(e.starred?-1:1)-(i.starred?-1:1)||(i.remote?-1:1)-(e.remote?-1:1)||(null==e.date?-1:e.date.getTime())-(null==i.date?-1:i.date.getTime())||(0,h.wN)(e.name,i.name));case"name:asc":return e.sort((e,i)=>(t.missingUpstream?(e.upstream?.missing?-1:1)-(i.upstream?.missing?-1:1):0)||(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(t.openWorktreeBranches?(t.openWorktreeBranches.includes(e.name)?-1:1)-(t.openWorktreeBranches.includes(i.name)?-1:1):0)||(e.starred?-1:1)-(i.starred?-1:1)||("main"===e.name?-1:1)-("main"===i.name?-1:1)||("master"===e.name?-1:1)-("master"===i.name?-1:1)||("develop"===e.name?-1:1)-("develop"===i.name?-1:1)||(i.remote?-1:1)-(e.remote?-1:1)||(0,h.wN)(e.name,i.name));case"name:desc":return e.sort((e,i)=>(t.missingUpstream?(e.upstream?.missing?-1:1)-(i.upstream?.missing?-1:1):0)||(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(t.openWorktreeBranches?(t.openWorktreeBranches.includes(e.name)?-1:1)-(t.openWorktreeBranches.includes(i.name)?-1:1):0)||(e.starred?-1:1)-(i.starred?-1:1)||("main"===e.name?-1:1)-("main"===i.name?-1:1)||("master"===e.name?-1:1)-("master"===i.name?-1:1)||("develop"===e.name?-1:1)-("develop"===i.name?-1:1)||(i.remote?-1:1)-(e.remote?-1:1)||(0,h.wN)(i.name,e.name));default:return e.sort((e,i)=>(t.missingUpstream?(e.upstream?.missing?-1:1)-(i.upstream?.missing?-1:1):0)||(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(t.openWorktreeBranches?(t.openWorktreeBranches.includes(e.name)?-1:1)-(t.openWorktreeBranches.includes(i.name)?-1:1):0)||(e.starred?-1:1)-(i.starred?-1:1)||(i.remote?-1:1)-(e.remote?-1:1)||(null==i.date?-1:i.date.getTime())-(null==e.date?-1:e.date.getTime())||(0,h.wN)(i.name,e.name))}}async function A(e,t,i){let r;for await(let s of(t.startsWith("remotes/")?(r=t,t=t.substring(8)):r=`remotes/${t}`,(i??=new l.t(t=>e.getBranches(null!=t?{paging:t}:void 0))).values()))if(!s.remote&&s.upstream?.name!=null&&(s.upstream.name===t||s.upstream.name===r))return s}g([(0,o.B)(e=>e??"MMMM Do, YYYY h:mma")],GitBranch.prototype,"formatDate",1),g([(0,n.Yz)()],GitBranch.prototype,"getAssociatedPullRequest",1),g([(0,o.B)()],GitBranch.prototype,"getBasename",1),g([(0,o.B)()],GitBranch.prototype,"getNameWithoutRemote",1),g([(0,o.B)()],GitBranch.prototype,"getTrackingWithoutRemote",1),g([(0,o.B)()],GitBranch.prototype,"getRemote",1),g([(0,o.B)()],GitBranch.prototype,"getRemoteName",1),g([(0,o.B)()],GitBranch.prototype,"getStatus",1)},5287:(e,t,i)=>{i.d(t,{M7:()=>GitCommitIdentity,WM:()=>C,Yg:()=>b,Zx:()=>S,aQ:()=>P,kk:()=>R});var r=i(1398),s=i(5176),n=i(3807),o=i(1856),a=i(6950),l=i(3533),h=i(3916),c=i(7279),u=i(7931),d=i(5313),p=i(5248),g=i(6645),m=Object.defineProperty,f=Object.getOwnPropertyDescriptor,w=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?f(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&m(t,i,n),n};let v=/stash@{(\d+)}/,y=class _GitCommit{constructor(e,t,i,r,s,o,a,l,h,c,u,d,m,f){this.container=e,this.repoPath=t,this.sha=i,this.author=r,this.committer=s,this.parents=a,this.ref=i,this.shortSha=i.substring(0,this.container.CommitShaFormatting.length),this.tips=d,m?(this.refType="stash",this.stashName=m||void 0,this.stashOnRef=f||void 0,this.number=v.exec(m)?.[1]):this.refType="revision",null!=l?(this._message=l,o!==l?this._summary=`${o} ${n.EO.Ellipsis}`:this._summary=o):(0,g._k)(i,!0)?(this._summary=o,this._message="Uncommitted Changes"):this._summary=`${o} ${n.EO.Ellipsis}`,null!=c&&(this._stats=c),null!=h&&(Array.isArray(h)?this._files=h:h instanceof p.lY?this._file=h:(null!=h.file&&(this._file=h.file),null!=h.files&&(this._files=h.files)),this._recomputeStats=!0),null!=u?Array.isArray(u)?this.lines=u:this.lines=[u]:this.lines=[]}_stashUntrackedFilesLoaded=!1;_recomputeStats=!1;lines;ref;refType;shortSha;stashName;number;stashOnRef;tips;toString(){return`${(0,h.zu)(this)}(${this.repoPath}|${this.shortSha})`}get date(){return"committed"===this.container.CommitDateFormatting.dateSource?this.committer.date:this.author.date}_file;get file(){return this._file}_files;get files(){return this._files}get formattedDate(){return"absolute"===this.container.CommitDateFormatting.dateStyle?this.formatDate(this.container.CommitDateFormatting.dateFormat):this.formatDateFromNow()}get isUncommitted(){return(0,g._k)(this.sha)}get isUncommittedStaged(){return(0,g.KH)(this.sha)}_message;get message(){return this._message}get name(){return this.stashName?this.stashName:this.shortSha}_stats;get stats(){return this._recomputeStats&&this.computeFileStats(),this._stats}_summary;get summary(){return this._summary}_resolvedPreviousSha;get resolvedPreviousSha(){return this._resolvedPreviousSha}get unresolvedPreviousSha(){let e=this._resolvedPreviousSha??(null!=this.file?this.file.previousSha:this.parents[0])??`${this.sha}^`;return(0,g.i8)(e)?"HEAD":e}_etagFileSystem;hasFullDetails(){return null!=this.message&&null!=this.files&&(this.isUncommitted&&this._etagFileSystem===this.container.git.getRepository(this.repoPath)?.etagFileSystem||0!==this.parents.length)&&("stash"!==this.refType||this._stashUntrackedFilesLoaded)}async ensureFullDetails(){let e;if(this.hasFullDetails())return;if(this.isUncommitted){let e=this.container.git.getRepository(this.repoPath);if(this._etagFileSystem=e?.etagFileSystem,null!=this._etagFileSystem){let t=await this.container.git.getStatusForRepo(this.repoPath);null!=t&&(this._files=t.files.flatMap(e=>e.getPseudoFileChanges())),this._etagFileSystem=e?.etagFileSystem}null==this._files&&(this._files=null!=this.file?[this.file]:[]);return}let[t,i]=await Promise.allSettled(["stash"!==this.refType?this.container.git.getCommit(this.repoPath,this.sha):void 0,"stash"!==this.refType||this._stashUntrackedFilesLoaded?void 0:this.container.git.getCommit(this.repoPath,`${this.stashName}^3`),this.getPreviousSha()]);if("fulfilled"===t.status&&null!=t.value&&(e=t.value,this.parents.push(...e.parents??[]),this._summary=e.summary,this._message=e.message,this._files=e.files,null!=this._file)){let e=this._files.find(e=>e.path===this._file.path);null!=e&&(this._file=new p.lY(e.repoPath,e.path,e.status,e.originalPath??this._file.originalPath,e.previousSha??this._file.previousSha,e.stats??this._file.stats))}if("fulfilled"===i.status&&null!=i.value&&(this._stashUntrackedFilesLoaded=!0,e=i.value,e?.files!=null&&0!==e.files.length)){let t=e.files.map(e=>new p.lY(this.repoPath,e.path,p.KZ.Untracked,e.originalPath));null==this._files?this._files=t:this._files.push(...t)}this._recomputeStats=!0}computeFileStats(){if(!this._recomputeStats||null==this._files)return;this._recomputeStats=!1;let e={added:0,deleted:0,changed:0},t=0,i=0;for(let r of this._files)switch(null!=r.stats&&(t+=r.stats.additions,i+=r.stats.deletions),r.status){case"A":case"?":e.added++;break;case"D":e.deleted++;break;default:e.changed++}null!=this._stats&&(0===t&&0!==this._stats.additions&&(t=this._stats.additions),0===i&&0!==this._stats.deletions&&(i=this._stats.deletions)),this._stats={...this._stats,changedFiles:e,additions:t,deletions:i}}async findFile(e,t){if(!this.hasFullDetails()&&(await this.ensureFullDetails(),null==this._files))return;let i=this.container.git.getRelativePath(e,this.repoPath);return this.isUncommitted&&null!=t?this._files?.find(e=>e.path===i&&e.staged===t):this._files?.find(e=>e.path===i)}formatDate(e){return"committed"===this.container.CommitDateFormatting.dateSource?this.committer.formatDate(e):this.author.formatDate(e)}formatDateFromNow(e){return"committed"===this.container.CommitDateFormatting.dateSource?this.committer.fromNow(e):this.author.fromNow(e)}formatStats(e){let t=this.stats;if(null==t)return e?.empty??"";let{changedFiles:i,additions:r,deletions:s}=t;if(0>=S(i)&&r<=0&&s<=0)return e?.empty??"";let{compact:o=!1,expand:a=!1,prefix:l="",sectionSeparator:h=` ${(0,c.eV)(n.EO.Dot,1,1,n.EO.Space)} `,separator:u=" ",suffix:d=""}=e??{},p=l;if("number"==typeof i)i&&(p+=a?`${(0,c.td)("file",i)} changed`:`~${i}`);else{let{added:e,changed:t,deleted:s}=i;e?p+=a?`${(0,c.td)("file",e)} added`:`+${e}`:a||o||(p+="+0"),t?p+=`${e?u:""}${a?`${(0,c.td)("file",t)} changed`:`~${t}`}`:a||o||(p+="~0"),s?p+=`${t|r?u:""}${a?`${(0,c.td)("file",s)} deleted`:`-${s}`}`:a||o||(p+="-0")}return a&&(r&&(p+=`${i?h:""}${(0,c.td)("addition",r)}`),s&&(p+=`${i||r?u:""}${(0,c.td)("deletion",s)}`)),p+=d}async getAssociatedPullRequest(e,t){if(e??=await this.container.git.getBestRemoteWithIntegration(this.repoPath),e?.hasIntegration())return(await this.container.integrations.getByRemote(e))?.getPullRequestForCommit(e.provider.repoDesc,this.ref,t)}async getEnrichedAutolinks(e){if(!this.isUncommitted&&(e??=await this.container.git.getBestRemoteWithIntegration(this.repoPath),e?.provider!=null))return null==this.message&&await this.ensureFullDetails(),this.container.autolinks.getEnrichedAutolinks(this.message??this.summary,e)}getAvatarUri(e){return this.author.getAvatarUri(this,e)}getCachedAvatarUri(e){return this.author.getCachedAvatarUri(e)}async getCommitForFile(e,t){let i="string"==typeof e?this.container.git.getRelativePath(e,this.repoPath):e.path,r=await this.findFile(i,t);if(null!=r)return this.with({sha:r.staged?d.id:this.sha,files:{file:r}})}async getCommitsForFiles(){return this.hasFullDetails()||(await this.ensureFullDetails(),null!=this._files)?this._files?.map(e=>this.with({files:{file:e}}))??[]:[]}getGitUri(e=!1){let t=this._file?.uri??this.container.git.getAbsoluteUri(this.repoPath,this.repoPath);return e?new u.nk(this._file?.originalUri??t,{repoPath:this.repoPath,sha:this.unresolvedPreviousSha}):new u.nk(t,this)}getPreviousComparisonUrisForLine(e,t){return null!=this.file?this.container.git.getPreviousComparisonUrisForLine(this.repoPath,this.file.uri,e,t??(this.sha===d.SU?void 0:this.sha)):Promise.resolve(void 0)}_previousShaPromise;async getPreviousSha(){if(null==this._previousShaPromise){async function e(){if(null!=this.file){if(null!=this.file.previousSha&&(0,g.HH)(this.file.previousSha))return this.file.previousSha;let e=await this.container.git.resolveReference(this.repoPath,(0,g._k)(this.sha,!0)?"HEAD":`${this.sha}^`,this.file.originalPath??this.file.path);return this._resolvedPreviousSha=e,e}let e=this.parents[0];if(null!=e&&(0,g.HH)(e))return this._resolvedPreviousSha=e,e;let t=await this.container.git.resolveReference(this.repoPath,(0,g._k)(this.sha,!0)?"HEAD":`${this.sha}^`);return this._resolvedPreviousSha=t,t}this._previousShaPromise=e.call(this)}return this._previousShaPromise}getRepository(){return this.container.git.getRepository(this.repoPath)}async isPushed(){return this.container.git.hasCommitBeenPushed(this.repoPath,this.ref)}with(e){let t;return null!=e.files?(t={file:this._file,files:this._files},null!=e.files.file?t.file=e.files.file:null===e.files.file&&(t.file=void 0),null!=e.files.files?t.files=e.files.files:null===e.files.files&&(t.files=void 0)):null===e.files&&(t=void 0),new _GitCommit(this.container,this.repoPath,e.sha??this.sha,this.author,this.committer,this.summary,this.getChangedValue(e.parents,this.parents)??[],this.message,t,this.stats,this.getChangedValue(e.lines,this.lines),this.tips,this.stashName,this.stashOnRef)}getChangedValue(e,t){return void 0===e?t:null!==e?e:void 0}};w([(0,l.B)()],y.prototype,"isUncommitted",1),w([(0,l.B)()],y.prototype,"isUncommittedStaged",1),w([(0,a.G)()],y.prototype,"ensureFullDetails",1),w([(0,l.B)()],y.prototype,"getGitUri",1),w([(0,l.B)((e,t)=>`${e}|${t??""}`)],y.prototype,"getPreviousComparisonUrisForLine",1),w([(0,a.G)()],y.prototype,"isPushed",1);let b=y;function C(e){return e instanceof b}function R(e){return e instanceof b&&"stash"===e.refType&&!!e.stashName}let GitCommitIdentity=class GitCommitIdentity{constructor(e,t,i,r){this.name=e,this.email=t,this.date=i,this.avatarUrl=r}formatDate(e){return(0,o.Yq)(this.date,e??"MMMM Do, YYYY h:mma")}fromNow(e){return(0,o.PI)(this.date,e)}getAvatarUri(e,t){return null!=this.avatarUrl?r.Uri.parse(this.avatarUrl):(0,s.m_)(this.email,e,t)}getCachedAvatarUri(e){return null!=this.avatarUrl?r.Uri.parse(this.avatarUrl):(0,s.qJ)(this.email,e)}};function S(e){return null==e?0:"number"==typeof e?e:e.added+e.changed+e.deleted}function P(e){if(!e.hasFullDetails())throw Error(`GitCommit(${e.sha}) is not fully loaded`)}w([(0,l.B)(e=>e??"MMMM Do, YYYY h:mma")],GitCommitIdentity.prototype,"formatDate",1)},5313:(e,t,i)=>{i.d(t,{SU:()=>s,id:()=>n,nB:()=>r});let r="0000000000000000000000000000000000000000-",s="0000000000000000000000000000000000000000",n="0000000000000000000000000000000000000000:"},4693:(e,t,i)=>{i.d(t,{NT:()=>p,X6:()=>u,cQ:()=>d,sL:()=>GitContributor,tB:()=>g});var r=i(1398),s=i(5176),n=i(4832),o=i(1856),a=i(3533),l=i(7279),h=Object.defineProperty,c=Object.getOwnPropertyDescriptor;let GitContributor=class GitContributor{constructor(e,t,i,r,s,n=!1,o,a,l,h){this.repoPath=e,this.name=t,this.email=i,this.count=r,this.date=s,this.current=n,this.stats=o,this.username=a,this.avatarUrl=l,this.id=h}get label(){return this.name??this.username}formatDate(e){return null!=this.date?(0,o.Yq)(this.date,e??"MMMM Do, YYYY h:mma"):""}formatDateFromNow(e){return null!=this.date?(0,o.PI)(this.date,e):""}getAvatarUri(e){return null!=this.avatarUrl?r.Uri.parse(this.avatarUrl):(0,s.m_)(this.email,void 0,e)}getCoauthor(){return`${this.name}${this.email?` <${this.email}>`:""}`}};function u(e,t){return e.name===t.name&&e.email===t.email&&e.username===t.username}function d(e){return e instanceof GitContributor}async function p(e,t,i){let r={label:e.label,description:e.current?"you":e.email,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e,iconPath:n.H.get("gitCommands.avatars")?await e.getAvatarUri():void 0};return i?.alwaysShow==null&&t&&(r.alwaysShow=!0),r}function g(e,t){t={picked:!0,current:!0,orderBy:n.H.get("sortContributorsBy"),...t};let i=e=>d(e)?e:e.item,r=(e,i)=>!t.picked||d(e)||d(i)?0:(e.picked?-1:1)-(i.picked?-1:1);switch(t.orderBy){case"count:asc":return e.sort((e,s)=>{let n=r(e,s);return e=i(e),s=i(s),n||(t.current?(e.current?-1:1)-(s.current?-1:1):0)||e.count-s.count||(e.date?.getTime()??0)-(s.date?.getTime()??0)});case"date:desc":return e.sort((e,s)=>{let n=r(e,s);return e=i(e),s=i(s),n||(t.current?(e.current?-1:1)-(s.current?-1:1):0)||(s.date?.getTime()??0)-(e.date?.getTime()??0)||s.count-e.count});case"date:asc":return e.sort((e,s)=>{let n=r(e,s);return e=i(e),s=i(s),n||(t.current?(e.current?-1:1)-(s.current?-1:1):0)||(e.date?.getTime()??0)-(s.date?.getTime()??0)||s.count-e.count});case"name:asc":return e.sort((e,s)=>{let n=r(e,s);return e=i(e),s=i(s),n||(t.current?(e.current?-1:1)-(s.current?-1:1):0)||(0,l.wN)(e.name??e.username,s.name??s.username)});case"name:desc":return e.sort((e,s)=>{let n=r(e,s);return e=i(e),s=i(s),n||(t.current?(e.current?-1:1)-(s.current?-1:1):0)||(0,l.wN)(s.name??s.username,e.name??e.username)});default:return e.sort((e,s)=>{let n=r(e,s);return e=i(e),s=i(s),n||(t.current?(e.current?-1:1)-(s.current?-1:1):0)||s.count-e.count||(s.date?.getTime()??0)-(e.date?.getTime()??0)})}}((e,t,i,r)=>{for(var s,n=r>1?void 0:r?c(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&h(t,i,n)})([(0,a.B)(e=>e??"MMMM Do, YYYY h:mma")],GitContributor.prototype,"formatDate",1)},5248:(e,t,i)=>{i.d(t,{C0:()=>y,CB:()=>b,Hk:()=>C,Hz:()=>_,KZ:()=>v,NO:()=>w,OG:()=>P,Vk:()=>f,WI:()=>R,b_:()=>k,lY:()=>GitFileChange,m5:()=>T});var r,s,n,o=i(1398),a=i(3807),l=i(2972),h=i(3533),c=i(520),u=i(4911),d=i(7279),p=Object.defineProperty,g=Object.getOwnPropertyDescriptor,m=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?g(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&p(t,i,n),n},f=((r=f||{}).AddedByBoth="AA",r.AddedByUs="AU",r.AddedByThem="UA",r.DeletedByBoth="DD",r.DeletedByUs="DU",r.DeletedByThem="UD",r.ModifiedByBoth="UU",r),w=((s=w||{}).Modified="M",s.Added="A",s.Deleted="D",s.Renamed="R",s.Copied="C",s.Unchanged=".",s.Untracked="?",s.Ignored="!",s.UpdatedButUnmerged="U",s),v=((n=v||{}).Modified="M",n.Added="A",n.Deleted="D",n.Untracked="?",n.Ignored="!",n);function y(e,t=!1,i){let r=(0,u.A3)(e.path,i);return t&&("R"===e.status||"C"===e.status)&&e.originalPath?`${r} ${(0,d.eV)(a.EO.ArrowLeft,1,1)} ${e.originalPath}`:r}function b(e,t={}){return(0,c.j)(e.path,t)}function C(e,t){return e.originalPath?(0,u.Uf)(e.originalPath,t)[0]:""}function R(e,t){return(0,u.Uf)(e.path,t)[0]}let S={".":void 0,"!":"icon-status-ignored.svg","?":"icon-status-untracked.svg",A:"icon-status-added.svg",D:"icon-status-deleted.svg",M:"icon-status-modified.svg",R:"icon-status-renamed.svg",C:"icon-status-copied.svg",AA:"icon-status-conflict.svg",AU:"icon-status-conflict.svg",UA:"icon-status-conflict.svg",DD:"icon-status-conflict.svg",DU:"icon-status-conflict.svg",UD:"icon-status-conflict.svg",UU:"icon-status-conflict.svg",T:"icon-status-modified.svg",U:"icon-status-modified.svg"};function P(e){return S[e]??"icon-status-unknown.svg"}let A={".":void 0,"!":"diff-ignored","?":"diff-added",A:"diff-added",D:"diff-removed",M:"diff-modified",R:"diff-renamed",C:"diff-added",AA:"warning",AU:"warning",UA:"warning",DD:"warning",DU:"warning",UD:"warning",UU:"warning",T:"diff-modified",U:"diff-modified"};function k(e){let t=A[e];return null!=t?new o.ThemeIcon(t):void 0}let D={".":"Unchanged","!":"Ignored","?":"Untracked",A:"Added",D:"Deleted",M:"Modified",R:"Renamed",C:"Copied",AA:"Conflict",AU:"Conflict",UA:"Conflict",DD:"Conflict",DU:"Conflict",UD:"Conflict",UU:"Conflict",T:"Modified",U:"Updated but Unmerged"};function T(e){return D[e]??"Unknown"}let GitFileChange=class GitFileChange{constructor(e,t,i,r,s,n,o){this.repoPath=e,this.path=t,this.status=i,this.originalPath=r,this.previousSha=s,this.stats=n,this.staged=o}get hasConflicts(){switch(this.status){case"UA":case"AU":case"AA":case"UD":case"DU":case"DD":case"UU":return!0;default:return!1}}get uri(){return l.m.instance.git.getAbsoluteUri(this.path,this.repoPath)}get originalUri(){return this.originalPath?l.m.instance.git.getAbsoluteUri(this.originalPath,this.repoPath):void 0}getWorkingUri(){return l.m.instance.git.getWorkingUri(this.repoPath,this.uri)}formatStats(e){if(null==this.stats)return e?.empty??"";let{additions:t,deletions:i}=this.stats;if(t<0&&i<0)return e?.empty??"";let{compact:r=!1,expand:s=!1,prefix:n="",separator:o=" ",suffix:a=""}=e??{},l=n;return t?l+=s?`${(0,d.td)("line",t)} added`:`+${t}`:s||r||(l+="+0"),i?l+=`${t?o:""}${s?`${(0,d.td)("line",i)} deleted`:`-${i}`}`:s||r||(l+="-0"),l+=a}};function _(e){return e instanceof GitFileChange}m([(0,h.B)()],GitFileChange.prototype,"uri",1),m([(0,h.B)()],GitFileChange.prototype,"originalUri",1),m([(0,h.B)()],GitFileChange.prototype,"getWorkingUri",1)},8559:(e,t,i)=>{i.d(t,{LI:()=>n,Uf:()=>c,Vz:()=>o,m2:()=>Issue,nL:()=>a,pr:()=>h,xu:()=>l});var r,s=i(1398),n=((r=n||{})[r.Admin=100]="Admin",r[r.Maintain=40]="Maintain",r[r.Write=30]="Write",r[r.Triage=20]="Triage",r[r.Read=10]="Read",r[r.None=0]="None",r);function o(e){return{type:e.type,provider:{id:e.provider.id,name:e.provider.name,domain:e.provider.domain,icon:e.provider.icon},id:e.id,nodeId:e.nodeId,title:e.title,url:e.url,createdDate:e.createdDate,updatedDate:e.updatedDate,closedDate:e.closedDate,closed:e.closed,state:e.state}}function a(e){if(null==e)return`<span class="codicon codicon-link" style="color:${s.window.activeColorTheme.kind===s.ColorThemeKind.Dark?"#a371f7":"#8250df"};"></span>`;if("pullrequest"!==e.type)return e.closed?`<span class="codicon codicon-pass" style="color:${s.window.activeColorTheme.kind===s.ColorThemeKind.Dark?"#a371f7":"#8250df"};"></span>`:`<span class="codicon codicon-issues" style="color:${s.window.activeColorTheme.kind===s.ColorThemeKind.Dark?"#3fb950":"#1a7f37"};"></span>`;switch(e.state){case"merged":return`<span class="codicon codicon-git-merge" style="color:${s.window.activeColorTheme.kind===s.ColorThemeKind.Dark?"#a371f7":"#8250df"};"></span>`;case"closed":return`<span class="codicon codicon-git-pull-request-closed" style="color:${s.window.activeColorTheme.kind===s.ColorThemeKind.Dark?"#f85149":"#cf222e"};"></span>`;case"opened":return`<span class="codicon codicon-git-pull-request" style="color:${s.window.activeColorTheme.kind===s.ColorThemeKind.Dark?"#3fb950":"#1a7f37"};"></span>`;default:return'<span class="codicon codicon-git-pull-request"></span>'}}function l(e){if(null==e)return`<span style="color:${s.window.activeColorTheme.kind===s.ColorThemeKind.Dark?"#a371f7":"#8250df"};">$(link)</span>`;if("pullrequest"!==e.type)return e.closed?`<span style="color:${s.window.activeColorTheme.kind===s.ColorThemeKind.Dark?"#a371f7":"#8250df"};">$(pass)</span>`:`<span style="color:${s.window.activeColorTheme.kind===s.ColorThemeKind.Dark?"#3fb950":"#1a7f37"};">$(issues)</span>`;switch(e.state){case"merged":return`<span style="color:${s.window.activeColorTheme.kind===s.ColorThemeKind.Dark?"#a371f7":"#8250df"};">$(git-merge)</span>`;case"closed":return`<span style="color:${s.window.activeColorTheme.kind===s.ColorThemeKind.Dark?"#f85149":"#cf222e"};">$(git-pull-request-closed)</span>`;case"opened":return`<span style="color:${s.window.activeColorTheme.kind===s.ColorThemeKind.Dark?"#3fb950":"#1a7f37"};">$(git-pull-request)</span>`;default:return"$(git-pull-request)"}}function h(e){if(null==e)return new s.ThemeIcon("link",new s.ThemeColor("gitlens.closedAutolinkedIssueIconColor"));if("pullrequest"!==e.type)return e.closed?new s.ThemeIcon("pass",new s.ThemeColor("gitlens.closedAutolinkedIssueIconColor")):new s.ThemeIcon("issues",new s.ThemeColor("gitlens.openAutolinkedIssueIconColor"));switch(e.state){case"merged":return new s.ThemeIcon("git-merge",new s.ThemeColor("gitlens.mergedPullRequestIconColor"));case"closed":return new s.ThemeIcon("git-pull-request-closed",new s.ThemeColor("gitlens.closedPullRequestIconColor"));case"opened":return new s.ThemeIcon("git-pull-request",new s.ThemeColor("gitlens.openPullRequestIconColor"));default:return new s.ThemeIcon("git-pull-request")}}function c(e){return{type:e.type,provider:{id:e.provider.id,name:e.provider.name,domain:e.provider.domain,icon:e.provider.icon},id:e.id,nodeId:e.nodeId,title:e.title,url:e.url,createdDate:e.createdDate,updatedDate:e.updatedDate,closedDate:e.closedDate,closed:e.closed,state:e.state,author:{name:e.author.name,avatarUrl:e.author.avatarUrl,url:e.author.url},repository:null==e.repository?void 0:{owner:e.repository.owner,repo:e.repository.repo},assignees:e.assignees.map(e=>({name:e.name,avatarUrl:e.avatarUrl,url:e.url})),labels:null==e.labels?void 0:e.labels.map(e=>({color:e.color,name:e.name})),commentsCount:e.commentsCount,thumbsUpCount:e.thumbsUpCount}}let Issue=class Issue{constructor(e,t,i,r,s,n,o,a,l,h,c,u,d,p,g,m){this.provider=e,this.id=t,this.nodeId=i,this.title=r,this.url=s,this.createdDate=n,this.updatedDate=o,this.closed=a,this.state=l,this.author=h,this.repository=c,this.assignees=u,this.closedDate=d,this.labels=p,this.commentsCount=g,this.thumbsUpCount=m}type="issue"}},304:(e,t,i)=>{i.d(t,{B9:()=>PullRequest,Q6:()=>f,c7:()=>y,dq:()=>m,e0:()=>v,gI:()=>w,pf:()=>b,r0:()=>C,tI:()=>R});var r,s,n,o,a,l=i(2972),h=i(1856),c=i(3533),u=i(6645),d=Object.defineProperty,p=Object.getOwnPropertyDescriptor,g=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?p(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&d(t,i,n),n},m=((r=m||{}).Approved="Approved",r.ChangesRequested="ChangesRequested",r.ReviewRequired="ReviewRequired",r),f=((s=f||{}).Unknown="Unknown",s.Mergeable="Mergeable",s.Conflicting="Conflicting",s),w=((n=w||{}).Success="success",n.Pending="pending",n.Failed="failed",n),v=((o=v||{}).Merge="merge",o.Squash="squash",o.Rebase="rebase",o),y=((a=y||{}).Approved="APPROVED",a.ChangesRequested="CHANGES_REQUESTED",a.Commented="COMMENTED",a.Dismissed="DISMISSED",a.Pending="PENDING",a.ReviewRequested="REVIEW_REQUESTED",a);function b(e){return{type:e.type,provider:{id:e.provider.id,name:e.provider.name,domain:e.provider.domain,icon:e.provider.icon},id:e.id,nodeId:e.nodeId,title:e.title,url:e.url,createdDate:e.createdDate,updatedDate:e.updatedDate,closedDate:e.closedDate,closed:e.closed,author:{name:e.author.name,avatarUrl:e.author.avatarUrl,url:e.author.url},state:e.state,mergedDate:e.mergedDate,mergeableState:e.mergeableState,refs:e.refs?{head:{exists:e.refs.head.exists,owner:e.refs.head.owner,repo:e.refs.head.repo,sha:e.refs.head.sha,branch:e.refs.head.branch,url:e.refs.head.url},base:{exists:e.refs.base.exists,owner:e.refs.base.owner,repo:e.refs.base.repo,sha:e.refs.base.sha,branch:e.refs.base.branch,url:e.refs.base.url},isCrossRepository:e.refs.isCrossRepository}:void 0,isDraft:e.isDraft,additions:e.additions,deletions:e.deletions,commentsCount:e.commentsCount,thumbsUpCount:e.thumbsUpCount,reviewDecision:e.reviewDecision,reviewRequests:e.reviewRequests,assignees:e.assignees}}let PullRequest=class PullRequest{constructor(e,t,i,r,s,n,o,a,l,h,c,u,d,p,g,m,f,w,v,y,b,C,R,S,P){this.provider=e,this.author=t,this.id=i,this.nodeId=r,this.title=s,this.url=n,this.repository=o,this.state=a,this.createdDate=l,this.updatedDate=h,this.closedDate=c,this.mergedDate=u,this.mergeableState=d,this.viewerCanUpdate=p,this.refs=g,this.isDraft=m,this.additions=f,this.deletions=w,this.commentsCount=v,this.thumbsUpCount=y,this.reviewDecision=b,this.reviewRequests=C,this.latestReviews=R,this.assignees=S,this.statusCheckRollupState=P}type="pullrequest";get closed(){return"closed"===this.state}get formattedDate(){return"absolute"===l.m.instance.PullRequestDateFormatting.dateStyle?this.formatDate(l.m.instance.PullRequestDateFormatting.dateFormat):this.formatDateFromNow()}formatDate(e){return(0,h.Yq)(this.mergedDate??this.closedDate??this.updatedDate,e??"MMMM Do, YYYY h:mma")}formatDateFromNow(){return(0,h.PI)(this.mergedDate??this.closedDate??this.updatedDate)}formatClosedDate(e){return null==this.closedDate?"":(0,h.Yq)(this.closedDate,e??"MMMM Do, YYYY h:mma")}formatClosedDateFromNow(){return null==this.closedDate?"":(0,h.PI)(this.closedDate)}formatMergedDate(e){return null==this.mergedDate?"":(0,h.Yq)(this.mergedDate,e??"MMMM Do, YYYY h:mma")??""}formatMergedDateFromNow(){return null==this.mergedDate?"":(0,h.PI)(this.mergedDate)}formatUpdatedDate(e){return(0,h.Yq)(this.updatedDate,e??"MMMM Do, YYYY h:mma")??""}formatUpdatedDateFromNow(){return(0,h.PI)(this.updatedDate)}};function C(e){return e instanceof PullRequest}async function R(e,t,i){let r={repoPath:t,base:{ref:i.base.sha,label:`${i.base.branch} (${(0,u.pV)(i.base.sha)})`},head:{ref:i.head.sha,label:i.head.branch}},s=await e.git.getMergeBase(r.repoPath,r.base.ref,r.head.ref,{forkPoint:!0})??await e.git.getMergeBase(r.repoPath,r.base.ref,r.head.ref);return null!=s&&(r.base={ref:s,label:`${i.base.branch} (${(0,u.pV)(s)})`}),r}g([(0,c.B)(e=>e??"MMMM Do, YYYY h:mma")],PullRequest.prototype,"formatDate",1),g([(0,c.B)(e=>e??"MMMM Do, YYYY h:mma")],PullRequest.prototype,"formatClosedDate",1),g([(0,c.B)(e=>e??"MMMM Do, YYYY h:mma")],PullRequest.prototype,"formatMergedDate",1),g([(0,c.B)(e=>e??"MMMM Do, YYYY h:mma")],PullRequest.prototype,"formatUpdatedDate",1)},6645:(e,t,i)=>{i.d(t,{A1:()=>F,HH:()=>v,KH:()=>R,M4:()=>L,Nf:()=>x,SN:()=>O,UJ:()=>_,Xn:()=>f,_k:()=>b,a$:()=>y,aJ:()=>T,bv:()=>E,cf:()=>I,dx:()=>P,eN:()=>B,gC:()=>$,i8:()=>C,iw:()=>k,kA:()=>A,p8:()=>w,pV:()=>S,rd:()=>D});var r=i(3807),s=i(4832),n=i(7279),o=i(9102),a=i(5313);let l=/^(\S*?)(\.\.\.?)(\S*)\s*$/,h=/(^[0-9a-f]{40}([\^@~:]\S*)?$)|(^[0]{40}(:|-)$)/,c=/(^[0-9a-f]{40}$)|(^[0]{40}(:|-)$)/,u=/(^[0-9a-f]{40})\^[0-3]?$/,d=/^(.*?)([\^@~:].*)?$/,p=/^[0]{40}(?:[\^@~:]\S*)?:?$/,g=/^[0]{40}([\^@~]\S*)?:$/;function m(e,t){return!!t&&e.test(t)}function f(e,t,i=".."){return`${e??""}${i}${t??""}`}function w(e){return e?.includes("..")??!1}function v(e){return m(c,e)}function y(e){return m(h,e)}function b(e,t=!1){return e===a.SU||e===a.id||!t&&m(p,e)}function C(e){return e===`${a.SU}^`||e===`${a.id}^`}function R(e,t=!1){return e===a.id||!t&&m(g,e)}function S(e,t){if(e===a.nB)return"(deleted)";if(!e)return t?.strings?.working??"";if(b(e))return R(e)?t?.strings?.uncommittedStaged??"Index":t?.strings?.uncommitted??"Working Tree";if(w(e)||!t?.force&&!y(e))return e;let i=Math.max(5,s.H.get("advanced.abbreviatedShaLength")),r=d.exec(e);if(null!=r){let[,e,t]=r;if(null!=t)return`${e.substr(0,i)}${t}`}return e.substr(0,i)}function P(e){let t=l.exec(e);if(null==t)return;let[,i,r,s]=t;return{ref1:i,notation:r,ref2:s}}function A(e,t,i={refType:"revision"}){switch(i.refType){case"branch":return{refType:"branch",repoPath:t,ref:e,name:i.name,id:i.id,remote:i.remote,upstream:i.upstream};case"stash":return{refType:"stash",repoPath:t,ref:e,name:i.name,number:i.number,message:i.message,stashOnRef:i.stashOnRef};case"tag":return{refType:"tag",repoPath:t,ref:e,name:i.name,id:i.id};default:return{refType:"revision",repoPath:t,ref:e,name:i.name??S(e,{force:!0,strings:{working:"Working Tree"}}),message:i.message}}}function k(e){return A(e.ref,e.repoPath,{id:e.id,refType:e.refType,name:e.name,remote:e.remote,upstream:e.upstream})}function D(e,t){return"stash"===e.refType?A(e.ref,e.repoPath,{refType:e.refType,name:e.name,number:e.number,message:t?.excludeMessage?void 0:e.message}):A(e.ref,e.repoPath,{refType:e.refType,name:e.name,message:t?.excludeMessage?void 0:e.message})}function T(e){return"branch"===e.refType&&e.remote?(0,o.km)(e.name):e.name}function _(e){return e.upstream?.name.substring(o.Ht(e.upstream.name)+1)}function I(e){return null!=e&&"object"==typeof e&&"string"==typeof e.refType&&"string"==typeof e.repoPath&&"string"==typeof e.ref&&"string"==typeof e.name}function $(e){return e?.refType==="branch"}function E(e){return e?.refType==="revision"}function O(e){return e?.refType==="revision"&&w(e.ref)}function x(e){return e?.refType==="stash"||e?.refType==="revision"&&!!e?.stashName}function F(e){return e?.refType==="tag"}function B(e){switch(e?.refType){case"branch":return"Branch";case"tag":return"Tag";default:return"Commit"}}function L(e,t){let i;if(null==e)return"";if(t=!1===t?{}:{expand:!0,icon:!0,label:t?.label??t?.expand??!0,...t},!Array.isArray(e)||1===e.length){let s=Array.isArray(e)?e[0]:e,a=t?.quoted?`'${s.name}'`:s.name;switch(s.refType){case"branch":{let e;s.remote&&(a=`${(0,o.Zq)(a)}: ${(0,o.km)(a)}`,a=t?.quoted?`'${a}'`:a),e=t.label?t.capitalize&&t.expand?`${s.remote?"Remote ":""}Branch `:`${s.remote?"remote ":""}branch `:"",i=`${e}${t.icon?`$(git-branch)${r.EO.Space}${a}`:a}`;break}case"tag":i=`${t.label?"tag ":""}${t.icon?`$(tag)${r.EO.Space}${a}`:a}`;break;default:if(x(s)){let e;t.expand&&s.message&&(e=`${null!=s.number?`#${s.number}: `:""}${s.message.length>20?`${s.message.substring(0,20).trimRight()}${r.EO.Ellipsis}`:s.message}`),i=`${t.label?"stash ":""}${t.icon?`$(archive)${r.EO.Space}${e??s.name}`:e??(s.number?`#${s.number}`:s.name)}`}else if(w(s.ref))i=a;else{let e,n;(t.expand&&s.message&&(e=s.message.length>20?` (${s.message.substring(0,20).trimRight()}${r.EO.Ellipsis})`:` (${s.message})`),t.expand&&t.label&&m(u,s.ref))?(a=s.name.endsWith("^")?s.name.substr(0,s.name.length-1):s.name,t?.quoted&&(a=`'${a}'`),n="before "):n="",i=`${t.label?`${n}commit `:""}${t.icon?`$(git-commit)${r.EO.Space}${a}${e??""}`:`${a}${e??""}`}`}}return t.capitalize&&t.expand&&!1!==t.label?(0,n.ZH)(i):i}let s=t.expand?` (${e.map(e=>e.name).join(", ")})`:"";switch(e[0].refType){case"branch":return`${e.length} branches${s}`;case"tag":return`${e.length} tags${s}`;default:return`${e.length} ${x(e[0])?"stashes":"commits"}${s}`}}},7788:(e,t,i)=>{i.d(t,{Qw:()=>f,U6:()=>w,Vx:()=>v,Wf:()=>m,Xd:()=>GitRemote,lb:()=>g,zF:()=>p});var r=i(1398),s=i(3807),n=i(2972),o=i(3533),a=i(7279),l=i(2471),h=i(1225),c=Object.defineProperty,u=Object.getOwnPropertyDescriptor,d=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?u(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&c(t,i,n),n};let GitRemote=class GitRemote{constructor(e,t,i,r,s,n,o,a){this.container=e,this.repoPath=t,this.name=i,this.scheme=r,this._domain=s,this._path=n,this.provider=o,this.urls=a}get default(){let e=n.m.instance.storage.getWorkspace("remote:default");return this.name===e||this.remoteKey===e}get domain(){return this.provider?.domain??this._domain}get id(){return`${this.name}/${this.remoteKey}`}get maybeIntegrationConnected(){return this.container.integrations.isMaybeConnected(this)}get path(){return this.provider?.path??this._path}get remoteKey(){return this._domain?`${this._domain}/${this._path}`:this.path}get url(){let e;for(let t of this.urls){if("push"===t.type)return t.url;null==e&&(e=t.url)}return e}async getIntegration(){return null!=this.provider?this.container.integrations.getByRemote(this):void 0}hasIntegration(){return null!=this.provider&&this.container.integrations.supports(this.provider.id)}matches(e,t){if(null==t){if((0,a.Q_)(e,this.url))return!0;[,e,t]=(0,h.BX)(e)}return(0,a.Q_)(e,this.domain)&&(0,a.Q_)(t,this.path)}async setAsDefault(e=!0){let t=n.m.instance.git.getRepository(this.repoPath);await t?.setRemoteAsDefault(this,e)}};function p(e){if(0===e.length)return;let t=1===e.length?e[0]:e.find(e=>e.default);if(null!=t)return[t.provider];let i=e[0].provider.name;if(e.every(e=>e.provider.name===i))return e.map(e=>e.provider)}function g(e){if(0===e.length)return;let t=1===e.length?e[0]:e.find(e=>e.default);if(null!=t)return t.provider.name;let i=e[0].provider.name;if(e.every(e=>e.provider.name===i))return i}function m(e,t,i,s=r.window.activeColorTheme){if(t.provider?.icon==null)return;let n=r.Uri.joinPath(e.context.extensionUri,`images/${(0,l.kH)(s)?"light":"dark"}/icon-${t.provider.icon}.svg`);return null!=i?i(n):n}function f(e){let t=function(e){let t,i;for(let{type:r}of e.urls)if("fetch"===r){if(t=!0,i)break}else if("push"===r&&(i=!0,t))break;return t&&i?s.EO.ArrowsRightLeft:i?s.EO.ArrowRight:t?s.EO.ArrowLeft:s.EO.Dash}(e),{provider:i}=e;return null!=i?`${t}${s.EO.Space} ${i.name} ${s.EO.Space}${s.EO.Dot}${s.EO.Space} ${i.displayPath}`:`${t}${s.EO.Space} ${e.domain?`${e.domain} ${s.EO.Space}${s.EO.Dot}${s.EO.Space} `:""}${e.path}`}function w(e){return Array.isArray(e)?e.map(e=>e.remoteKey).sort().join(","):e.remoteKey}function v(e){return e instanceof GitRemote}d([(0,o.B)()],GitRemote.prototype,"domain",1),d([(0,o.B)()],GitRemote.prototype,"id",1),d([(0,o.B)()],GitRemote.prototype,"path",1),d([(0,o.B)()],GitRemote.prototype,"remoteKey",1),d([(0,o.B)()],GitRemote.prototype,"url",1)},2124:(e,t,i)=>{i.d(t,{J:()=>s,O:()=>n});var r,s=((r=s||{}).Branch="branch",r.Branches="branches",r.Commit="commit",r.Comparison="comparison",r.CreatePullRequest="createPullRequest",r.File="file",r.Repo="repo",r.Revision="revision",r);function n(e){switch(e.type){case"branch":return"Branch";case"branches":return"Branches";case"commit":return"Commit";case"comparison":return"Comparison";case"createPullRequest":return"Create Pull Request";case"file":case"revision":return"File";case"repo":return"Repository";default:return""}}},9634:(e,t,i)=>{i.d(t,{LN:()=>F,Ti:()=>x,Y$:()=>L,Z6:()=>B,Z_:()=>O});var r,s,n=i(1398),o=i(9032),a=i(3807),l=i(3536),h=i(5900),c=i(7899),u=i(4832),d=i(1856),p=i(6950),g=i(8180),m=i(560),f=i(4026),w=i(3916),v=i(3446),y=i(3395),b=i(4911),C=i(7279),R=i(9102),S=i(6645),P=Object.defineProperty,A=Object.getOwnPropertyDescriptor,k=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?A(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&P(t,i,n),n};let D=Object.freeze([]),T="index,HEAD,*_HEAD,MERGE_*,rebase-merge/**,sequencer/**",_="worktrees/**/index,worktrees/**/HEAD,worktrees/**/*_HEAD,worktrees/**/MERGE_*,worktrees/**/rebase-merge/**,worktrees/**/sequencer/**",I=`{${T}}`,$=`{config,refs/**,${_}}`,E=`{${T},config,refs/**,${_}}`;var O=((r=O||{})[r.Unknown=-1]="Unknown",r[r.Index=0]="Index",r[r.Head=1]="Head",r[r.Heads=2]="Heads",r[r.Tags=3]="Tags",r[r.Stash=4]="Stash",r[r.Remotes=5]="Remotes",r[r.Worktrees=6]="Worktrees",r[r.Config=7]="Config",r[r.Status=8]="Status",r[r.CherryPick=9]="CherryPick",r[r.Merge=10]="Merge",r[r.Rebase=11]="Rebase",r[r.Closed=100]="Closed",r[r.Ignores=101]="Ignores",r[r.RemoteProviders=102]="RemoteProviders",r[r.Starred=103]="Starred",r[r.Opened=104]="Opened",r),x=((s=x||{})[s.Any=0]="Any",s[s.Exclusive=1]="Exclusive",s);let RepositoryChangeEvent=class RepositoryChangeEvent{constructor(e,t){this.repository=e,this._changes=new Set(t)}_changes;toString(e=!1){return e?`changes=${(0,f.fj)(this._changes,", ")}`:`{ repository: ${this.repository?.name??""}, changes: ${(0,f.fj)(this._changes,", ")} }`}changed(...e){let t=e.slice(0,-1),i=e[e.length-1];if(0===i)return(0,f.zN)(this._changes,e=>t.includes(e));let r=this._changes;1===i&&(t.includes(9)||t.includes(10)||t.includes(11)?t.includes(8)||t.push(8):t.includes(8)&&((r=new Set(r)).delete(9),r.delete(10),r.delete(11)));let s=[...(0,f.pb)(r,e=>t.includes(e))];return 1===i?s.length===r.size:s.length===t.length}with(e){return new RepositoryChangeEvent(this.repository,[...this._changes,...e])}};let F=class{constructor(e,t,i,r,s,o,a,l=!1){if(this.container=e,this.onDidRepositoryChange=t,this.provider=i,this.folder=r,this.uri=s,this.root=o,null!=r){if(o)this._name=r.name;else{let t=e.git.getRelativePath(s,r.uri);this._name=t||r.name}}else this._name=(0,b.P8)(s.path);this.getGitDir().then(e=>{if(e?.commonUri==null)return;let t=e.commonUri.path;t.endsWith("/.git")&&(t=t.substring(0,t.length-5));let i=`${(0,b.P8)(t)}: `;this._name.startsWith(i)||(this._name=`${i}${this._name}`)}),this.index=r?.index??e.git.repositoryCount,this.id=(0,h.dX)(s),this._suspended=a,this._closed=l,this._disposable=n.Disposable.from(this.setupRepoWatchers(),u.H.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged(),this._orderByLastFetched&&this.getLastFetched()}static formatLastFetched(e,t=!0){let i=new Date(e);if(Date.now()-e<864e5)return(0,d.PI)(i);if(t)return(0,d.Yq)(i,u.H.get("defaultDateShortFormat")??"short");let r=u.H.get("defaultDateFormat")??`dddd, MMMM Do, YYYY [at] ${u.H.get("defaultTimeFormat")??"h:mma"}`;return/[hHm]/.test(r)||(r+=` [at] ${u.H.get("defaultTimeFormat")??"h:mma"}`),(0,d.Yq)(i,r)}static getLastFetchedUpdateInterval(e){let t=Date.now()-e;return t<864e5?(t<36e5?6e4:36e5)/2:0}static sort(e,t){switch((t={orderBy:u.H.get("sortRepositoriesBy"),...t}).orderBy){case"name:asc":return e.sort((e,t)=>(e.starred?-1:1)-(t.starred?-1:1)||(0,C.wN)(e.name,t.name));case"name:desc":return e.sort((e,t)=>(e.starred?-1:1)-(t.starred?-1:1)||(0,C.wN)(t.name,e.name));case"lastFetched:asc":return e.sort((e,t)=>(e.starred?-1:1)-(t.starred?-1:1)||(e._lastFetched??0)-(t._lastFetched??0));case"lastFetched:desc":return e.sort((e,t)=>(e.starred?-1:1)-(t.starred?-1:1)||(t._lastFetched??0)-(e._lastFetched??0));default:return e}}_onDidChange=new n.EventEmitter;get onDidChange(){return this._onDidChange.event}_onDidChangeFileSystem=new n.EventEmitter;get onDidChangeFileSystem(){return this._onDidChangeFileSystem.event}get formattedName(){return this.name}id;index;_name;get name(){return this._name}_idHash;get idHash(){return void 0===this._idHash&&(this._idHash=(0,o.Fx)(this.id)),this._idHash}_branch;_disposable;_fireChangeDebounced=void 0;_fireFileSystemChangeDebounced=void 0;_pendingFileSystemChange;_pendingRepoChange;_suspended;setupRepoWatchers(){let e;return this.setupRepoWatchersCore().then(t=>e=t),{dispose:()=>void e?.dispose()}}async setupRepoWatchersCore(){let e=(0,v.dQ)(),t=[];t.push(this.container.events.on("git:cache:reset",e=>{(!e.data.repoPath||e.data.repoPath===this.path)&&(this.resetCaches(...e.data.caches??D),e.data.caches?.includes("providers")&&this.fireChange(102))}));let i=n.workspace.createFileSystemWatcher(new n.RelativePattern(this.uri,"**/.gitignore"));function r(i,r){w.Vy.debug(e,`watching '${i.toString(!0)}' for repository changes`);let s=n.workspace.createFileSystemWatcher(new n.RelativePattern(i,r));return t.push(s,s.onDidChange(e=>this.onRepositoryChanged(e,i)),s.onDidCreate(e=>this.onRepositoryChanged(e,i)),s.onDidDelete(e=>this.onRepositoryChanged(e,i))),s}t.push(i,i.onDidChange(this.onGitIgnoreChanged,this),i.onDidCreate(this.onGitIgnoreChanged,this),i.onDidDelete(this.onGitIgnoreChanged,this));let s=await this.getGitDir();return null!=s&&(s?.commonUri==null?r.call(this,s.uri,E):(r.call(this,s.uri,I),r.call(this,s.commonUri,$))),n.Disposable.from(...t)}dispose(){this.unWatchFileSystem(!0),this._disposable.dispose()}toString(){return`${(0,w.zu)(this)}(${this.id})`}get virtual(){return this.provider.virtual}get path(){return this.uri.scheme===a.xB.File?(0,b.Fd)(this.uri.fsPath):this.uri.toString()}get etag(){return this._updatedAt}_orderByLastFetched=!1;get orderByLastFetched(){return this._orderByLastFetched}_updatedAt=0;get updatedAt(){return this._updatedAt}onConfigurationChanged(e){u.H.changed(e,"sortRepositoriesBy")&&(this._orderByLastFetched=u.H.get("sortRepositoriesBy")?.startsWith("lastFetched:")??!1),null!=e&&u.H.changed(e,"remotes",this.folder?.uri)&&(this.resetCaches("remotes"),this.fireChange(5))}onFileSystemChanged(e){/\.git(?:\/|\\|$)/.test(e.fsPath)||(this._etagFileSystem=Date.now(),this.fireFileSystemChange(e))}onGitIgnoreChanged(e){this.fireChange(101)}onRepositoryChanged(e,t){if(e?.path.includes("/fsmonitor--daemon/"))return;this._lastFetched=void 0,this._orderByLastFetched&&this.getLastFetched();let i=null!=e?/(worktrees|index|HEAD|FETCH_HEAD|ORIG_HEAD|CHERRY_PICK_HEAD|MERGE_HEAD|REBASE_HEAD|rebase-merge|config|refs\/(?:heads|remotes|stash|tags))/.exec(this.container.git.getRelativePath(e,t)):void 0;if(null!=i)switch(i[1]){case"config":this.resetCaches(),this.fireChange(7,5);return;case"index":this.fireChange(0);return;case"FETCH_HEAD":return;case"HEAD":this.resetCaches("branches"),this.fireChange(1,2);return;case"ORIG_HEAD":case"refs/heads":this.resetCaches("branches"),this.fireChange(2);return;case"CHERRY_PICK_HEAD":this.fireChange(9,8);return;case"MERGE_HEAD":this.fireChange(10,8);return;case"REBASE_HEAD":case"rebase-merge":this.fireChange(11,8);return;case"refs/remotes":this.resetCaches(),this.fireChange(5);return;case"refs/stash":this.fireChange(4);return;case"refs/tags":this.fireChange(3);return;case"worktrees":this.fireChange(6);return}this.fireChange(-1)}_closed=!1;get closed(){return this._closed}set closed(e){let t=this._closed!==e;this._closed=e,t&&(w.Vy.debug(`Repository(${this.id}).closed(${e})`),this.fireChange(this._closed?100:104))}access(e){return this.container.git.access(e,this.uri)}supports(e){return this.container.git.supports(this.uri,e)}async addRemote(e,t,i){await this.container.git.addRemote(this.uri,e,t,i);let[r]=await this.getRemotes({filter:e=>e.url===t});return r}pruneRemote(e){return this.container.git.pruneRemote(this.uri,e)}removeRemote(e){return this.container.git.removeRemote(this.uri,e)}branch(...e){this.runTerminalCommand("branch",...e)}branchDelete(e,t){Array.isArray(e)||(e=[e]);let i=e.filter(e=>!e.remote);if(0!==i.length){let r=["--delete"];if(t?.force&&r.push("--force"),this.runTerminalCommand("branch",...r,...e.map(e=>e.ref)),t?.remote){let e=i.filter(e=>null!=e.upstream);if(0!==e.length)for(let[t,i]of(0,f.Fi)(e,e=>(0,R.Zq)(e.upstream.name)).entries())this.runTerminalCommand("push","-d",t,...i.map(e=>(0,R.km)(e.upstream.name)))}}let r=e.filter(e=>e.remote);if(0!==r.length)for(let[e,t]of(0,f.Fi)(r,e=>(0,R.Zq)(e.name)).entries())this.runTerminalCommand("push","-d",e,...t.map(e=>(0,S.aJ)(e)))}cherryPick(...e){this.runTerminalCommand("cherry-pick",...e)}containsUri(e){return this===this.container.git.getRepository(e)}async fetch(e){let{progress:t,...i}={progress:!0,...e};return t?n.window.withProgress({location:n.ProgressLocation.Notification,title:null!=i.branch?`${i.pull?"Pulling":"Fetching"} ${i.branch.name}...`:`Fetching ${i.remote?`${i.remote} of `:""}${this.formattedName}...`},()=>this.fetchCore(i)):this.fetchCore(i)}async fetchCore(e){try{await this.container.git.fetch(this.uri,e),this.fireChange(-1)}catch(e){w.Vy.error(e),(0,l.qQ)("Unable to fetch repository")}}async getBestRemoteWithIntegration(e){return this.container.git.getBestRemoteWithIntegration(this.uri,e)}async getBranch(e){if(e){let{values:[t]}=await this.getBranches({filter:t=>t.name===e});return t}return null==this._branch&&(this._branch=this.container.git.getBranch(this.uri)),this._branch}getBranches(e){return this.container.git.getBranches(this.uri,e)}getChangedFilesCount(e){return this.container.git.getChangedFilesCount(this.uri,e)}getCommit(e){return this.container.git.getCommit(this.uri,e)}async getCommonRepository(){let e=await this.getGitDir();return e?.commonUri==null?this:this.container.git.getOrOpenRepository(e.commonUri,{detectNested:!1,force:!0,closeOnOpen:!0})}async getCommonRepositoryUri(){let e=await this.getGitDir();return e?.commonUri?.path.endsWith("/.git")?e.commonUri.with({path:e.commonUri.path.substring(0,e.commonUri.path.length-5)}):e?.commonUri}getContributors(e){return this.container.git.getContributors(this.uri,e)}_gitDir;_gitDirPromise;getGitDir(){return null==this._gitDirPromise&&(this._gitDirPromise=this.container.git.getGitDir(this.uri).then(e=>this._gitDir=e)),this._gitDirPromise}_lastFetched;async getLastFetched(){let e=await this.container.git.getLastFetchedTimestamp(this.uri);return null!=e&&(this._lastFetched=e),this._lastFetched??0}getMergeStatus(){return this.container.git.getMergeStatus(this.uri)}getRebaseStatus(){return this.container.git.getRebaseStatus(this.uri)}async getRemote(e){return(await this.getRemotes()).find(t=>t.name===e)}async getRemotes(e){let t=await this.container.git.getRemotes(this.uri,e?.sort!=null?{sort:e.sort}:void 0);return e?.filter!=null?t.filter(e.filter):t}getStash(){return this.container.git.getStash(this.uri)}getStatus(){return this.container.git.getStatusForRepo(this.uri)}async getTag(e){let{values:[t]}=await this.getTags({filter:t=>t.name===e});return t}getTags(e){return this.container.git.getTags(this.uri,e)}async createWorktree(e,t){await this.container.git.createWorktree(this.uri,e.fsPath,t);let i=e.toString();return this.container.git.getWorktree(this.uri,e=>e.uri.toString()===i)}getWorktrees(){return this.container.git.getWorktrees(this.uri)}async getWorktreesDefaultUri(){return this.container.git.getWorktreesDefaultUri(this.uri)}deleteWorktree(e,t){return this.container.git.deleteWorktree(this.uri,e.fsPath,t)}async hasRemotes(){let e=await this.getRemotes();return e?.length>0}async hasRemoteWithIntegration(e){let t=await this.getBestRemoteWithIntegration(e);return t?.provider!=null}async hasUpstreamBranch(){let e=await this.getBranch();return e?.upstream!=null}isMaybeWorktree(){if(null!=this._gitDir)return null!=this._gitDir.commonUri}async isWorktree(){return(await this.getGitDir())?.commonUri!=null}merge(...e){this.runTerminalCommand("merge",...e)}async pull(e){let{progress:t,...i}={progress:!0,...e};return t?n.window.withProgress({location:n.ProgressLocation.Notification,title:`Pulling ${this.formattedName}...`},()=>this.pullCore(i)):this.pullCore()}async pullCore(e){try{let t=u.H.getCore("git.pullTags",this.uri);u.H.getCore("git.fetchOnPull",this.uri)&&await this.container.git.fetch(this.uri),await this.container.git.pull(this.uri,{...e,tags:t}),this.fireChange(-1)}catch(e){w.Vy.error(e),(0,l.qQ)("Unable to pull repository")}}async showCreatePullRequestPrompt(e,t){if(!this.container.actionRunners.count("createPullRequest")||!await (0,l.ky)(t.name))return;let i=await this.getRemote(e);(0,c.ph)("createPullRequest",{repoPath:this.path,remote:null!=i?{name:i.name,provider:null!=i.provider?{id:i.provider.id,name:i.provider.name,domain:i.provider.domain}:void 0,url:i.url}:{name:e},branch:{name:t.name,isRemote:t.remote,upstream:t.upstream?.name}})}async push(e){let{progress:t,...i}={progress:!0,...e};return t?n.window.withProgress({location:n.ProgressLocation.Notification,title:(0,S.gC)(i.reference)?`${null!=i.publish?"Publishing ":"Pushing "}${i.reference.name}...`:`Pushing ${this.formattedName}...`},()=>this.pushCore(i)):this.pushCore(i)}async pushCore(e){try{await this.container.git.push(this.uri,{reference:e?.reference,force:e?.force,publish:e?.publish}),(0,S.gC)(e?.reference)&&e?.publish!=null&&this.showCreatePullRequestPrompt(e.publish.remote,e.reference),this.fireChange(-1)}catch(e){w.Vy.error(e),(0,l.qQ)("Unable to push repository")}}rebase(e,...t){this.runTerminalCommand(null!=e&&0!==e.length?`${e.join(" ")} rebase`:"rebase",...t)}reset(...e){this.runTerminalCommand("reset",...e)}resetCaches(...e){(0===e.length||e.includes("branches"))&&(this._branch=void 0)}resume(){this._suspended&&(this._suspended=!1,null!=this._pendingRepoChange&&this._fireChangeDebounced(),null!=this._pendingFileSystemChange&&this._fireFileSystemChangeDebounced?.())}revert(...e){this.runTerminalCommand("revert",...e)}richSearchCommits(e,t){return this.container.git.richSearchCommits(this.uri,e,t)}searchCommits(e,t){return this.container.git.searchCommits(this.uri,e,t)}async setRemoteAsDefault(e,t=!0){await this.container.storage.storeWorkspace("remote:default",t?e.name:void 0),this.fireChange(5,102)}get starred(){let e=this.container.storage.getWorkspace("starred:repositories");return null!=e&&!0===e[this.id]}star(e){return this.updateStarred(!0,e)}async stashApply(e,t){await this.container.git.stashApply(this.uri,e,t),this.fireChange(4)}async stashDelete(e,t){await this.container.git.stashDelete(this.uri,e,t),this.fireChange(4)}async stashRename(e,t,i,r){await this.container.git.stashRename(this.uri,e,t,i,r),this.fireChange(4)}async stashSave(e,t,i){await this.container.git.stashSave(this.uri,e,t,i),this.fireChange(4)}async stashSaveSnapshot(e){await this.container.git.stashSaveSnapshot(this.uri,e),this.fireChange(4)}async switch(e,t){let{progress:i,...r}={progress:!0,...t};return i?n.window.withProgress({location:n.ProgressLocation.Notification,title:`Switching ${this.formattedName} to ${e}...`,cancellable:!1},()=>this.switchCore(e,r)):this.switchCore(e,r)}async switchCore(e,t){try{await this.container.git.checkout(this.uri,e,t),this.fireChange(-1)}catch(e){w.Vy.error(e),(0,l.qQ)("Unable to switch to reference")}}toAbsoluteUri(e,t){let i=this.container.git.getAbsoluteUri(e,this.uri);return!(t?.validate??!0)||this.containsUri(i)?i:void 0}unstar(e){return this.updateStarred(!1,e)}async updateStarred(e,t){null!=t?await this.updateStarredCore("branches",t.id,e):await this.updateStarredCore("repositories",this.id,e),this.fireChange(103)}async updateStarredCore(e,t,i){let r=`starred:${e}`,s=this.container.storage.getWorkspace(r);s=(0,y.Y8)(s,t,i),await this.container.storage.storeWorkspace(r,s),this.fireChange(103)}_etagFileSystem;get etagFileSystem(){return this._etagFileSystem}suspend(){this._suspended=!0}tag(...e){this.runTerminalCommand("tag",...e)}tagDelete(e){Array.isArray(e)||(e=[e]),this.runTerminalCommand("tag","--delete",...e.map(e=>e.ref))}_fsWatcherDisposable;_fsWatchers=new Map;_fsChangeDelay=2500;watchFileSystem(e=2500){let t=(0,o.uR)();if(this._fsWatchers.set(t,e),null==this._fsWatcherDisposable){let e=n.workspace.createFileSystemWatcher(new n.RelativePattern(this.uri,"**"));this._fsWatcherDisposable=n.Disposable.from(e,e.onDidChange(this.onFileSystemChanged,this),e.onDidCreate(this.onFileSystemChanged,this),e.onDidDelete(this.onFileSystemChanged,this)),this._etagFileSystem=Date.now()}return this.ensureMinFileSystemChangeDelay(),{dispose:()=>this.unWatchFileSystem(t)}}unWatchFileSystem(e){if("boolean"!=typeof e&&(this._fsWatchers.delete(e),0!==this._fsWatchers.size)){this.ensureMinFileSystemChangeDelay();return}this._etagFileSystem=void 0,this._fsChangeDelay=2500,this._fsWatchers.clear(),this._fsWatcherDisposable?.dispose(),this._fsWatcherDisposable=void 0}ensureMinFileSystemChangeDelay(){let e=(0,f.jk)(this._fsWatchers.values());e!==this._fsChangeDelay&&(this._fsChangeDelay=e,this._fireFileSystemChangeDebounced?.flush(),this._fireFileSystemChangeDebounced?.cancel(),this._fireFileSystemChangeDebounced=void 0)}fireChange(...e){let t=(0,v.dQ)();if(this._updatedAt=Date.now(),null==this._fireChangeDebounced&&(this._fireChangeDebounced=(0,m.sg)(this.fireChangeCore.bind(this),250)),this._pendingRepoChange=this._pendingRepoChange?.with(e)??new RepositoryChangeEvent(this,e),this.onDidRepositoryChange(this,new RepositoryChangeEvent(this,e)),this._suspended){w.Vy.debug(t,`queueing suspended ${this._pendingRepoChange.toString(!0)}`);return}this._fireChangeDebounced()}fireChangeCore(){let e=this._pendingRepoChange;null!=e&&(this._pendingRepoChange=void 0,w.Vy.debug(`Repository(${this.id}) firing ${e.toString(!0)}`),this._onDidChange.fire(e))}fireFileSystemChange(e){let t=(0,v.dQ)();this._updatedAt=Date.now(),null==this._fireFileSystemChangeDebounced&&(this._fireFileSystemChangeDebounced=(0,m.sg)(this.fireFileSystemChangeCore.bind(this),this._fsChangeDelay)),null==this._pendingFileSystemChange&&(this._pendingFileSystemChange={repository:this,uris:[]});let i=this._pendingFileSystemChange;if(i.uris.push(e),this._suspended){w.Vy.debug(t,`queueing suspended fs changes=${i.uris.map(e=>e.fsPath).join(", ")}`);return}this._fireFileSystemChangeDebounced()}async fireFileSystemChangeCore(){let e=this._pendingFileSystemChange;if(null==e)return;this._pendingFileSystemChange=void 0;let t=await this.container.git.excludeIgnoredUris(this.uri,e.uris);0!==t.length&&(t.length!==e.uris.length&&(e={...e,uris:t}),w.Vy.debug(`Repository(${this.id}) firing fs changes=${e.uris.map(e=>e.fsPath).join(", ")}`),this._onDidChangeFileSystem.fire(e))}async runTerminalCommand(e,...t){await this.container.git.runGitCommandViaTerminal?.(this.uri,e,t,{execute:!0}),setTimeout(()=>this.fireChange(-1),2500)}};function B(e){return e instanceof F}async function L(e){let t=new Map(e.map(e=>[e.id,e])),i=new Map;for(let[,e]of t){let r=await e.getCommonRepositoryUri();if(null==r){i.has(e.id),i.set(e.id,{repo:e,worktrees:new Map});continue}let s=(0,h.dX)(r),n=t.get(s);if(null==n){i.has(e.id),i.set(e.id,{repo:e,worktrees:new Map});continue}let o=i.get(n.id);null==o?(o={repo:n,worktrees:new Map},i.set(n.id,o)):o.worktrees.set(e.path,e)}return new Map((0,f.Tj)(i,([,e])=>[e.repo,e.worktrees]))}k([(0,g.Yz)({singleLine:!0})],F.prototype,"setupRepoWatchersCore",1),k([(0,g.Yz)()],F.prototype,"onGitIgnoreChanged",1),k([(0,g.Yz)()],F.prototype,"onRepositoryChanged",1),k([(0,g.Rm)()],F.prototype,"access",1),k([(0,g.Rm)()],F.prototype,"supports",1),k([(0,g.Rm)()],F.prototype,"addRemote",1),k([(0,g.Rm)()],F.prototype,"pruneRemote",1),k([(0,g.Rm)()],F.prototype,"removeRemote",1),k([(0,g.Rm)()],F.prototype,"branch",1),k([(0,g.Rm)()],F.prototype,"branchDelete",1),k([(0,g.Rm)()],F.prototype,"cherryPick",1),k([(0,p.G)(),(0,g.Rm)()],F.prototype,"fetch",1),k([(0,p.G)(),(0,g.Rm)({exit:!0})],F.prototype,"getCommonRepository",1),k([(0,g.Rm)({exit:!0})],F.prototype,"getCommonRepositoryUri",1),k([(0,p.G)()],F.prototype,"getLastFetched",1),k([(0,g.Rm)()],F.prototype,"createWorktree",1),k([(0,g.Rm)()],F.prototype,"merge",1),k([(0,p.G)(),(0,g.Rm)()],F.prototype,"pull",1),k([(0,p.G)(),(0,g.Rm)()],F.prototype,"push",1),k([(0,g.Rm)()],F.prototype,"rebase",1),k([(0,g.Rm)()],F.prototype,"reset",1),k([(0,g.Rm)({singleLine:!0})],F.prototype,"resetCaches",1),k([(0,g.Rm)()],F.prototype,"revert",1),k([(0,g.Yz)()],F.prototype,"richSearchCommits",1),k([(0,g.Yz)()],F.prototype,"searchCommits",1),k([(0,p.G)(),(0,g.Rm)()],F.prototype,"stashApply",1),k([(0,p.G)(),(0,g.Rm)()],F.prototype,"stashDelete",1),k([(0,p.G)(),(0,g.Rm)()],F.prototype,"stashRename",1),k([(0,p.G)(),(0,g.Rm)()],F.prototype,"stashSave",1),k([(0,p.G)(),(0,g.Rm)()],F.prototype,"stashSaveSnapshot",1),k([(0,p.G)(),(0,g.Rm)()],F.prototype,"switch",1),k([(0,g.Rm)()],F.prototype,"tag",1),k([(0,g.Rm)()],F.prototype,"tagDelete",1),k([(0,g.Yz)()],F.prototype,"fireChange",1),k([(0,g.Yz)()],F.prototype,"fireFileSystemChange",1),F=k([(0,g.Is)((e,t)=>`${t}(${e.id})`)],F)},7736:(e,t,i)=>{i.d(t,{ls:()=>GitStatus,um:()=>g});var r=i(3807),s=i(2972),n=i(3533),o=i(7279),a=i(9102),l=i(5287),h=i(5313),c=i(5248),u=Object.defineProperty,d=Object.getOwnPropertyDescriptor,p=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?d(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&u(t,i,n),n};let GitStatus=class GitStatus{constructor(e,t,i,r,s,n,o=!1){this.repoPath=e,this.branch=t,this.sha=i,this.files=r,this.state=s,this.upstream=n,this.rebasing=o,this.detached=(0,a.xM)(t),this.detached&&(this.branch=(0,a.n$)(this.sha))}detached;get conflicts(){return this.files.filter(e=>e.conflicted)}get hasChanges(){return 0!==this.files.length}get hasConflicts(){return this.files.some(e=>e.conflicted)}get ref(){return this.detached?this.sha:this.branch}computeWorkingTreeStatus(){let e=0,t=0,i=0,r=0,s=0,n=0,o=0,a=0,l=0,h=[],u=[],d=[];for(let p of this.files){switch(p.conflictStatus){case void 0:break;case c.Vk.AddedByBoth:case c.Vk.AddedByUs:case c.Vk.AddedByThem:e++,u.push(p);break;case c.Vk.DeletedByBoth:case c.Vk.DeletedByUs:case c.Vk.DeletedByThem:t++;break;default:i++,h.push(p)}switch(p.indexStatus){case void 0:break;case c.NO.Added:r++,u.push(p);break;case c.NO.Deleted:a++;break;default:n++,u.push(p)}switch(p.workingTreeStatus){case void 0:case c.KZ.Ignored:break;case c.KZ.Added:case c.KZ.Untracked:s++,d.push(p);break;case c.KZ.Deleted:l++;break;default:o++,d.push(p)}}let p=e+i+t,g=r+n+a,m=s+o+l;return{conflicted:p,conflictedAddsAndChanges:h,conflictedStatus:p>0?`+${e} ~${i} -${t}`:"",staged:g,stagedStatus:g>0?`+${r} ~${n} -${a}`:"",stagedAddsAndChanges:u,unstaged:m,unstagedStatus:m>0?`+${s} ~${o} -${l}`:"",unstagedAddsAndChanges:d}}getDiffStatus(){let e={added:0,deleted:0,changed:0};if(0===this.files.length)return e;for(let t of this.files)switch(t.status){case"A":case"?":e.added++;break;case"D":e.deleted++;break;default:e.changed++}return e}getFormattedDiffStatus({compact:e,empty:t,expand:i,prefix:r="",separator:s=" ",suffix:n=""}={}){let{added:a,changed:l,deleted:h}=this.getDiffStatus();if(0===a&&0===l&&0===h)return t??"";if(i){let e="";return a&&(e+=`${(0,o.td)("file",a)} added`),l&&(e+=`${0===e.length?"":s}${(0,o.td)("file",l)} changed`),h&&(e+=`${0===e.length?"":s}${(0,o.td)("file",h)} deleted`),`${r}${e}${n}`}let c="";return e?(0!==a&&(c+=`+${a}`),0!==l&&(c+=`${0===c.length?"":s}~${l}`),0!==h&&(c+=`${0===c.length?"":s}-${h}`)):c+=`+${a}${s}~${l}${s}-${h}`,`${r}${c}${n}`}async getRemote(){if(null==this.upstream)return;let e=await s.m.instance.git.getRemotesWithProviders(this.repoPath);if(0===e.length)return;let t=(0,a.Zq)(this.upstream?.name);return e.find(e=>e.name===t)}getUpstreamStatus(e){return g(this.upstream,this.state,e)}};function g(e,t,i){let s=!0,n=!1,a=!1,l="",h=" ",c="";if(null!=i&&({count:s=!0,expand:n=!1,icons:a=!1,prefix:l="",separator:h=" ",suffix:c=""}=i),null==e||0===t.behind&&0===t.ahead)return i?.empty??"";if(n){let i="";return e.missing?i="missing":(t.behind&&(i+=`${(0,o.td)("commit",t.behind,{infix:a?"$(arrow-down) ":void 0})} behind`),t.ahead&&(i+=`${0===i.length?"":h}${(0,o.td)("commit",t.ahead,{infix:a?"$(arrow-up) ":void 0})} ahead`,c.includes(e.name.split("/")[0])&&(i+=" of"))),`${l}${i}${c}`}let u=s&&!e.missing;return`${l}${u?t.behind:""}${u||0!==t.behind?r.EO.ArrowDown:""}${h}${u?t.ahead:""}${u||0!==t.ahead?r.EO.ArrowUp:""}${c}`}p([(0,n.B)()],GitStatus.prototype,"conflicts",1),p([(0,n.B)()],GitStatus.prototype,"hasConflicts",1),p([(0,n.B)()],GitStatus.prototype,"computeWorkingTreeStatus",1),p([(0,n.B)()],GitStatus.prototype,"getDiffStatus",1),p([(0,n.B)()],GitStatus.prototype,"getRemote",1);let GitStatusFile=class GitStatusFile{constructor(e,t,i,r,s){if(this.repoPath=e,this.path=r,this.originalPath=s,null!=t&&null!=i)switch(t+i){case"??":this.workingTreeStatus=c.KZ.Untracked;break;case"!!":this.workingTreeStatus=c.KZ.Ignored;break;case"AA":this.conflictStatus=c.Vk.AddedByBoth;break;case"AU":this.conflictStatus=c.Vk.AddedByUs;break;case"UA":this.conflictStatus=c.Vk.AddedByThem;break;case"DD":this.conflictStatus=c.Vk.DeletedByBoth;break;case"DU":this.conflictStatus=c.Vk.DeletedByUs;break;case"UD":this.conflictStatus=c.Vk.DeletedByThem;break;case"UU":this.conflictStatus=c.Vk.ModifiedByBoth}if(null==this.conflictStatus){switch(t){case"A":this.indexStatus=c.NO.Added;break;case"D":this.indexStatus=c.NO.Deleted;break;case"M":this.indexStatus=c.NO.Modified;break;case"R":this.indexStatus=c.NO.Renamed;break;case"C":this.indexStatus=c.NO.Copied}switch(i){case"A":this.workingTreeStatus=c.KZ.Added;break;case"D":this.workingTreeStatus=c.KZ.Deleted;break;case"M":this.workingTreeStatus=c.KZ.Modified}}}conflictStatus;indexStatus;workingTreeStatus;get conflicted(){return null!=this.conflictStatus}get staged(){return null!=this.indexStatus}get status(){return this.conflictStatus??this.indexStatus??this.workingTreeStatus}get uri(){return s.m.instance.git.getAbsoluteUri(this.path,this.repoPath)}get wip(){return null!=this.workingTreeStatus}getFormattedDirectory(e=!1){return(0,c.C0)(this,e)}getFormattedPath(e={}){return(0,c.CB)(this,e)}getStatusText(){return(0,c.m5)(this.status)}getPseudoCommits(e,t){let i=new Date;if(this.conflicted){let r=new c.lY(this.repoPath,this.path,this.status,this.originalPath,"HEAD",void 0,!1);return[new l.Yg(e,this.repoPath,h.SU,new l.M7("You",t?.email??void 0,i),new l.M7("You",t?.email??void 0,i),"Uncommitted changes",["HEAD"],"Uncommitted changes",{file:r,files:[r]},void 0,[])]}let r=[],s=this.staged;if(this.wip){let n=s?h.id:"HEAD",o=new c.lY(this.repoPath,this.path,this.status,this.originalPath,n,void 0,!1);r.push(new l.Yg(e,this.repoPath,h.SU,new l.M7("You",t?.email??void 0,i),new l.M7("You",t?.email??void 0,i),"Uncommitted changes",[n],"Uncommitted changes",{file:o,files:[o]},void 0,[])),i.setMilliseconds(i.getMilliseconds()-1)}if(s){let s=new c.lY(this.repoPath,this.path,this.status,this.originalPath,"HEAD",void 0,!0);r.push(new l.Yg(e,this.repoPath,h.id,new l.M7("You",t?.email??void 0,i),new l.M7("You",t?.email??void 0,i),"Uncommitted changes",["HEAD"],"Uncommitted changes",{file:s,files:[s]},void 0,[]))}return r}getPseudoFileChanges(){if(this.conflicted)return[new c.lY(this.repoPath,this.path,this.status,this.originalPath,"HEAD",void 0,!1)];let e=[],t=this.staged;return this.wip&&e.push(new c.lY(this.repoPath,this.path,this.status,this.originalPath,t?h.id:"HEAD",void 0,!1)),t&&e.push(new c.lY(this.repoPath,this.path,this.status,this.originalPath,"HEAD",void 0,!0)),e}};p([(0,n.B)()],GitStatusFile.prototype,"status",1),p([(0,n.B)()],GitStatusFile.prototype,"uri",1)},468:(e,t,i)=>{i.d(t,{dz:()=>p,gt:()=>d,rN:()=>GitTag,uO:()=>g});var r=i(2972),s=i(4832),n=i(1856),o=i(3533),a=i(3916),l=i(7279),h=Object.defineProperty,c=Object.getOwnPropertyDescriptor,u=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?c(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&h(t,i,n),n};function d(e,t){return`${e}|tag/${t}`}let GitTag=class GitTag{constructor(e,t,i,r,s,n){this.repoPath=e,this.name=t,this.sha=i,this.message=r,this.date=s,this.commitDate=n,this.id=d(e,t)}refType="tag";id;toString(){return`${(0,a.zu)(this)}(${this.id})`}get formattedDate(){return"absolute"===r.m.instance.TagDateFormatting.dateStyle?this.formatDate(r.m.instance.TagDateFormatting.dateFormat):this.formatDateFromNow()}get ref(){return this.name}formatCommitDate(e){return null!=this.commitDate?(0,n.Yq)(this.commitDate,e??"MMMM Do, YYYY h:mma"):""}formatCommitDateFromNow(){return null!=this.commitDate?(0,n.PI)(this.commitDate):""}formatDate(e){return null!=this.date?(0,n.Yq)(this.date,e??"MMMM Do, YYYY h:mma"):""}formatDateFromNow(){return null!=this.date?(0,n.PI)(this.date):""}getBasename(){let e=this.name.lastIndexOf("/");return -1!==e?this.name.substring(e+1):this.name}};function p(e){return e instanceof GitTag}function g(e,t){switch((t={orderBy:s.H.get("sortTagsBy"),...t}).orderBy){case"date:asc":return e.sort((e,t)=>(e.date?.getTime()??0)-(t.date?.getTime()??0));case"name:asc":return e.sort((e,t)=>(0,l.wN)(e.name,t.name));case"name:desc":return e.sort((e,t)=>(0,l.wN)(t.name,e.name));default:return e.sort((e,t)=>(t.date?.getTime()??0)-(e.date?.getTime()??0))}}u([(0,o.B)(e=>e??"MMMM Do, YYYY h:mma")],GitTag.prototype,"formatCommitDate",1),u([(0,o.B)(e=>e??"MMMM Do, YYYY h:mma")],GitTag.prototype,"formatDate",1),u([(0,o.B)()],GitTag.prototype,"getBasename",1)},3607:(e,t,i)=>{i.d(t,{di:()=>w,vV:()=>v,xG:()=>y});var r=i(1398),s=i(3807),n=i(2972),o=i(4832),a=i(1856),l=i(3533),h=i(4232),c=i(4911),u=i(7279),d=i(2471),p=i(6645),g=Object.defineProperty,m=Object.getOwnPropertyDescriptor,f=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?m(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&g(t,i,n),n};let GitWorktree=class GitWorktree{constructor(e,t,i,r,s,n,o,a,l){this.container=e,this.main=t,this.type=i,this.repoPath=r,this.uri=s,this.locked=n,this.prunable=o,this.sha=a,this.branch=l}get date(){return this.branch?.date}get friendlyPath(){return null!=this.workspaceFolder?(0,d.kZ)(this.uri):(0,c.Fd)((0,c.V8)(this.repoPath,this.uri.fsPath))||(0,c.Fd)(this.uri.fsPath)}get formattedDate(){return"absolute"===this.container.BranchDateFormatting.dateStyle?this.formatDate(this.container.BranchDateFormatting.dateFormat):this.formatDateFromNow()}get hasChanges(){return this._status?.hasChanges}get opened(){return this.workspaceFolder?.uri.toString()===this.uri.toString()}get name(){switch(this.type){case"bare":return"(bare)";case"detached":return(0,p.pV)(this.sha);default:return this.branch?.name||this.friendlyPath}}get workspaceFolder(){return r.workspace.getWorkspaceFolder(this.uri)}formatDate(e){return null!=this.date?(0,a.Yq)(this.date,e??"MMMM Do, YYYY h:mma"):""}formatDateFromNow(){return null!=this.date?(0,a.PI)(this.date):""}_status;_statusPromise;async getStatus(e){return"bare"===this.type?Promise.resolve(void 0):((null==this._statusPromise||e?.force)&&(this._statusPromise=new Promise(async(e,t)=>{try{let t=await n.m.instance.git.getStatusForRepo(this.uri.fsPath);this._status=t,e(t)}catch(e){t(e)}})),this._statusPromise)}};function w(e,t,i,n){let o,a,l="",h="";if(n?.type&&(l="worktree"),n?.includeStatus){let t="",i=0;n?.status!=null?n.status.upstream?.missing?(t+=s.EO.Warning,i+=3):(n.status.state.behind?t+=s.EO.ArrowDown:i+=2,n.status.state.ahead?t+=s.EO.ArrowUp:i+=2,n.status.hasChanges?t+="±":i+=2):i+=6,i>0&&(t+=" ".repeat(i));let r=e.formattedDate;r&&(l?l+=`  ${s.EO.Dot}  ${e.formattedDate}`:l=r),t&&(h+=h?`  ${s.EO.Dot}  ${t}`:t)}switch(e.type){case"bare":a="(bare)",o=new r.ThemeIcon("folder");break;case"branch":a=e.branch?.name??"unknown",o=new r.ThemeIcon("git-branch");break;case"detached":a=(0,p.pV)(e.sha),o=new r.ThemeIcon("git-commit")}return{label:n?.checked?`${a}${(0,u.eV)("$(check)",2)}`:a,description:l?` ${l}`:void 0,detail:n?.path?`${h?`${h}  `:""}${i?`${s.EO.Warning} (missing)`:"$(folder)"} ${e.friendlyPath}`:h,alwaysShow:n?.alwaysShow,buttons:n?.buttons,picked:t,item:e,opened:e.opened,hasChanges:n?.status?.hasChanges,iconPath:o}}async function v(e,t,i,r,s){for(let n of(null==i||Array.isArray(i)||(i=[i]),r??=await e.getWorktrees())){if(n.branch?.name===t)return n;if(null!=i&&null!=n.branch){for await(let t of(s??=new h.t(t=>e.getBranches(null!=t?{paging:t}:void 0))).values())if(t.name===n.branch.name){if(t.upstream?.name!=null&&(i.includes(t.upstream.name)||t.upstream.name.startsWith("remotes/")&&i.includes(t.upstream.name.substring(8))))return n;break}}}}function y(e,t){t={orderBy:o.H.get("sortBranchesBy"),...t};let i=e=>e instanceof GitWorktree?e:e.item;switch(t.orderBy){case"date:asc":return e.sort((e,t)=>(e=i(e),t=i(t),(e.opened?-1:1)-(t.opened?-1:1)||(null===e.hasChanges?0:e.hasChanges?-1:1)-(null===t.hasChanges?0:t.hasChanges?-1:1)||(null==e.date?-1:e.date.getTime())-(null==t.date?-1:t.date.getTime())||(0,u.wN)(e.name,t.name)));case"name:asc":return e.sort((e,t)=>(e=i(e),t=i(t),(e.opened?-1:1)-(t.opened?-1:1)||(null===e.hasChanges?0:e.hasChanges?-1:1)-(null===t.hasChanges?0:t.hasChanges?-1:1)||("main"===e.name?-1:1)-("main"===t.name?-1:1)||("master"===e.name?-1:1)-("master"===t.name?-1:1)||("develop"===e.name?-1:1)-("develop"===t.name?-1:1)||(0,u.wN)(e.name,t.name)));case"name:desc":return e.sort((e,t)=>(e=i(e),t=i(t),(e.opened?-1:1)-(t.opened?-1:1)||(null===e.hasChanges?0:e.hasChanges?-1:1)-(null===t.hasChanges?0:t.hasChanges?-1:1)||("main"===e.name?-1:1)-("main"===t.name?-1:1)||("master"===e.name?-1:1)-("master"===t.name?-1:1)||("develop"===e.name?-1:1)-("develop"===t.name?-1:1)||(0,u.wN)(t.name,e.name)));default:return e.sort((e,t)=>(e=i(e),t=i(t),(e.opened?-1:1)-(t.opened?-1:1)||(null==t.date?-1:t.date.getTime())-(null==e.date?-1:e.date.getTime())||(null===e.hasChanges?0:e.hasChanges?-1:1)-(null===t.hasChanges?0:t.hasChanges?-1:1)||(0,u.wN)(t.name,e.name)))}}f([(0,l.B)()],GitWorktree.prototype,"friendlyPath",1),f([(0,l.B)()],GitWorktree.prototype,"workspaceFolder",1),f([(0,l.B)(e=>e??"MMMM Do, YYYY h:mma")],GitWorktree.prototype,"formatDate",1)},1225:(e,t,i)=>{i.d(t,{BX:()=>s,vw:()=>r}),i(937),i(7788);let r=/^(?:(git:\/\/)(.*?)\/|(https?:\/\/)(?:.*?@)?(.*?)\/|git@(.*):|(ssh:\/\/)(?:.*@)?(.*?)(?::.*?)?(?:\/|(?=~))|(?:.*?@)(.*?):)(.*)$/;function s(e){let t=r.exec(e);return null==t?["","",e]:[t[1]||t[3]||t[6],t[2]||t[4]||t[5]||t[7]||t[8],t[9].replace(/\.git\/?$/,"")]}},8875:(e,t,i)=>{i.d(t,{Hn:()=>n,R6:()=>o,i9:()=>a});var r=i(3131),s=i(7279);async function n(e,t,i,n){let[o,a,l,h]=await Promise.allSettled([e.git.getDiffStatus(t,i),n?e.git.getDiffStatus(t,"HEAD"):void 0,e.git.getChangedFilesCount(t,i),n?e.git.getChangedFilesCount(t,"HEAD"):void 0]),c=(0,r.Ro)(o)??[],u=(0,r.Ro)(l);if(n){let e=(0,r.Ro)(a);if(null!=e){if(0===c.length)c=e??[];else for(let t of e){let e=c.findIndex(e=>e.path===t.path);-1!==e?c.splice(e,1,t):c.push(t)}}let t=(0,r.Ro)(h);null!=t&&(u=null==u?t:{additions:u.additions+t.additions,deletions:u.deletions+t.deletions,changedFiles:c.length,approximated:!0})}return{label:`${(0,s.td)("file",c.length,{zero:"No"})} changed`,files:c,stats:u}}function o(e,t,i,r){return async s=>{let n=await e.git.getLog(t,{limit:s,ref:i,authors:r}),o={log:n,hasMore:n?.hasMore??!0};return o.hasMore&&(o.more=async e=>{o.log=await o.log?.more?.(e)??o.log,o.hasMore=o.log?.hasMore??!0}),o}}async function a(e,t,i,n){let o;if(""===n)throw Error("Cannot get files for comparisons of a ref with working tree");o=""===i?n:`${n}..${i}`;let[a,l]=await Promise.allSettled([e.git.getDiffStatus(t,o),e.git.getChangedFilesCount(t,o)]),h=(0,r.Ro)(a)??[];return{label:`${(0,s.td)("file",h.length,{zero:"No"})} changed`,files:h,stats:(0,r.Ro)(l)}}},4862:(e,t,i)=>{i.d(t,{K:()=>GitHubRemote,P:()=>v});var r=i(1398),s=i(3807),n=i(1856),o=i(3533),a=i(1345),l=i(7279),h=i(8559),c=i(6645),u=i(9858),d=Object.defineProperty,p=Object.getOwnPropertyDescriptor;let g=/\b([^/\s]+\/[^/\s]+?)(?:\\)?#([0-9]+)\b(?!]\()/g,m=/^\/([^/]+)\/([^/]+?)\/blob(.+)$/i,f=/^L(\d+)(?:-L(\d+))?$/;let GitHubRemote=class GitHubRemote extends u.u{constructor(e,t,i,r,s=!1){super(e,t,i,r,s)}get apiBaseUrl(){return this.custom?`${this.protocol}://${this.domain}/api/v3`:`https://api.${this.domain}`}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[{prefix:"#",url:`${this.baseUrl}/issues/<num>`,title:`Open Issue or Pull Request #<num> on ${this.name}`,description:`${this.name} Issue or Pull Request #<num>`},{prefix:"gh-",url:`${this.baseUrl}/issues/<num>`,title:`Open Issue or Pull Request #<num> on ${this.name}`,ignoreCase:!0,description:`${this.name} Issue or Pull Request #<num>`},{tokenize:(e,t,i,r,o,c)=>"plaintext"===t?e:e.replace(g,(e,u,d)=>{let p;let g=(0,a.W)(`${this.protocol}://${this.domain}/${(0,l.e8)(u)}/issues/${d}`),m=` "Open Issue or Pull Request #${d} from ${u} on ${this.name}"`,f=`\0${i.size}\0`;"markdown"===t?i.set(f,`[${e}](${g}${m})`):"html"===t&&i.set(f,`<a href="${g}" title=${m}>${e}</a>`);let w=r?.get(d)?.[0];if(w?.value!=null){if(w.paused)null==c||o?.has(d)||(p=c.size+1,c.set(p,`[${(0,h.xu)()} ${this.name} Issue or Pull Request ${u}#${d} $(loading~spin)](${g}${m}")`));else{let t=w.value,i=(0,l.FV)(t.title.trim());null==c||o?.has(d)||(p=c.size+1,c.set(p,`[${(0,h.xu)(t)} **${i}**](${g}${m})\\
${s.EO.Space.repeat(5)}${e} ${t.state} ${(0,n.PI)(t.closedDate??t.createdDate)}`))}}else null==c||o?.has(d)||(p=c.size+1,c.set(p,`[${(0,h.xu)()} ${this.name} Issue or Pull Request ${u}#${d}](${g}${m})`));return f}),parse:(e,t)=>{let i,r,s;for(;null!=(s=g.exec(e));){[,i,r]=s;let[e,n]=i.split("/",2);t.set(r,{provider:this,id:r,prefix:`${i}#`,url:`${this.protocol}://${this.domain}/${i}/issues/${r}`,title:`Open Issue or Pull Request #<num> from ${i} on ${this.name}`,description:`${this.name} Issue or Pull Request ${i}#${r}`,descriptor:{key:this.remoteKey,owner:e,name:n}})}}}]),this._autolinks}get avatarUri(){let[e]=this.splitPath();return r.Uri.parse(`https://avatars.githubusercontent.com/${e}`)}get icon(){return"github"}get id(){return"github"}get gkProviderId(){var e;return(e=this.domain,(0,l.Q_)(e,"github.com"))?"github":"githubEnterprise"}get name(){return this.formatName("GitHub")}get repoDesc(){let[e,t]=this.splitPath();return{key:this.remoteKey,owner:e,name:t}}async getLocalInfoFromRemoteUri(e,t,i){let r,s,n;if(t.authority!==this.domain||(i?.validate??!0)&&!t.path.startsWith(`/${this.path}/`))return;if(t.fragment){let e=f.exec(t.fragment);if(null!=e){let[,t,i]=e;t&&(r=parseInt(t,10),i&&(s=parseInt(i,10)))}}let o=m.exec(t.path);if(null==o)return;let[,,,a]=o,l=a.indexOf("/",1);if(-1!==l){let t=a.substring(1,l);if((0,c.HH)(t)){let t=e.toAbsoluteUri(a.substr(l),{validate:i?.validate});if(null!=t)return{uri:t,startLine:r,endLine:s}}}let h=new Map;l=a.length;do l=a.lastIndexOf("/",l-1),n=a.substring(1,l),h.set(n,a.substr(l));while(l>0)if(0!==h.size){let{values:t}=await e.getBranches({filter:e=>e.remote&&h.has(e.getNameWithoutRemote())});for(let n of t){let t=h.get(n.getNameWithoutRemote());if(null==t)continue;let o=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=o)return{uri:o,startLine:r,endLine:s}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/tree/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commit/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/compare/${e}${i}${t}`)}getUrlForCreatePullRequest(e,t){if(e.remote.url===t.remote.url)return this.encodeUrl(`${this.baseUrl}/pull/new/${e.branch??"HEAD"}...${t.branch}`);let[i]=t.remote.path.split("/",1);return this.encodeUrl(`${this.baseUrl}/pull/new/${e.branch??"HEAD"}...${i}:${t.branch}`)}getUrlForFile(e,t,i,r){let s;return(s=null!=r?r.start.line===r.end.line?`#L${r.start.line}`:`#L${r.start.line}-L${r.end.line}`:"",i)?`${this.encodeUrl(`${this.baseUrl}/blob/${i}/${e}`)}${s}`:t?`${this.encodeUrl(`${this.baseUrl}/blob/${t}/${e}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}?path=${e}`)}${s}`}};((e,t,i,r)=>{for(var s,n=r>1?void 0:r?p(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&d(t,i,n)})([(0,o.B)()],GitHubRemote.prototype,"repoDesc",1);let w=/^(?:(\d+)\+)?([a-zA-Z\d-]{1,39})@users\.noreply\.(.*)$/i;function v(e){let t=w.exec(e);if(null==t)return;let[,i,r,s]=t;return{userId:i,login:r,authority:s}}},9858:(e,t,i)=>{i.d(t,{u:()=>RemoteProvider});var r=i(1398),s=i(3533),n=i(1345),o=i(3131),a=i(2471),l=i(2124),h=Object.defineProperty,c=Object.getOwnPropertyDescriptor;let RemoteProvider=class RemoteProvider{constructor(e,t,i="https",r,s=!1){this.domain=e,this.path=t,this.protocol=i,this.custom=s,this._name=r}_name;get autolinks(){return[]}get avatarUri(){}get displayPath(){return this.path}get icon(){return"remote"}get owner(){return this.splitPath()[0]}get remoteKey(){return this.domain?`${this.domain}/${this.path}`:this.path}get repoDesc(){return{owner:this.owner,name:this.repoName}}get repoName(){return this.splitPath()[1]}async copy(e){let t=this.getUrlsFromResources(e);t.length&&await r.env.clipboard.writeText(t.join("\n"))}async open(e){let t=this.getUrlsFromResources(e);return!!t.length&&(await Promise.allSettled(t.map(a.CZ))).every(e=>!0===(0,o.Ro)(e))}url(e){switch(e.type){case l.J.Branch:return this.getUrlForBranch(e.branch);case l.J.Branches:return this.getUrlForBranches();case l.J.Commit:return this.getUrlForCommit(e.sha);case l.J.Comparison:return this.getUrlForComparison?.(e.base,e.compare,e.notation??"...");case l.J.CreatePullRequest:return this.getUrlForCreatePullRequest?.(e.base,e.compare);case l.J.File:return this.getUrlForFile(e.fileName,null!=e.branchOrTag?e.branchOrTag:void 0,void 0,e.range);case l.J.Repo:return this.getUrlForRepository();case l.J.Revision:return this.getUrlForFile(e.fileName,null!=e.branchOrTag?e.branchOrTag:void 0,null!=e.sha?e.sha:void 0,e.range);default:return}}get baseUrl(){return`${this.protocol}://${this.domain}/${this.path}`}formatName(e){return null!=this._name?this._name:`${e}${this.custom?` (${this.domain})`:""}`}splitPath(){let e=this.path.indexOf("/");return[this.path.substring(0,e),this.path.substring(e+1)]}getUrlForRepository(){return this.baseUrl}encodeUrl(e){return n.W(e)?.replace(/#/g,"%23")}getUrlsFromResources(e){let t=[];if(Array.isArray(e))for(let i of e){let e=this.url(i);null!=e&&t.push(e)}else{let i=this.url(e);null!=i&&t.push(i)}return t}};((e,t,i,r)=>{for(var s,n=r>1?void 0:r?c(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&h(t,i,n)})([(0,s.B)()],RemoteProvider.prototype,"remoteKey",1)},3269:(e,t,i)=>{i.d(t,{GQ:()=>o,GZ:()=>s,OM:()=>u,V8:()=>n,b4:()=>a,gz:()=>l});var r=i(6645);let s=new Set(["","=:","message:","@:","author:","#:","commit:","?:","file:","~:","change:"]);function n(e){return{query:e.pattern,matchAll:e.matchAll,matchCase:e.matchCase,matchRegex:e.matchRegex}}function o(e){return{pattern:e.query,matchAll:e.matchAll,matchCase:e.matchCase,matchRegex:e.matchRegex}}function a(e){return`${"query"in e?e.query:e.pattern}|${e.matchAll?"A":""}${e.matchCase?"C":""}${e.matchRegex?"R":""}`}function l(e){return e.map(e=>`#:${"string"==typeof e?(0,r.pV)(e):e.name}`).join(" ")}let h=new Map([["","message:"],["=:","message:"],["message:","message:"],["@:","author:"],["author:","author:"],["#:","commit:"],["commit:","commit:"],["?:","file:"],["file:","file:"],["~:","change:"],["change:","change:"]]),c=/(?:(?<op>=:|message:|@:|author:|#:|commit:|\?:|file:|~:|change:)\s?(?<value>".+?"|\S+}?))|(?<text>\S+)(?!(?:=|message|@|author|#|commit|\?|file|~|change):)/g;function u(e){let t,i,s,n;let o=new Map;do{if(n=c.exec(e.query),n?.groups==null)break;if(t=h.get(n.groups.op),{value:i,text:s}=n.groups,s&&!h.has(s.trim())&&(t="@me"===s?"author:":(0,r.HH)(s)?"commit:":"message:",i=s),t&&i){let e=o.get(t);null==e&&(e=new Set,o.set(t,e)),e.add(i)}}while(null!=n)return o}},9188:(e,t,i)=>{i.d(t,{E:()=>r,n:()=>s});let r="-";function s(e){return e.repoOwnerDomain?`${e.repoOwnerDomain}/${e.repoDomain}/${e.repoName}`:`${e.repoDomain}/${e.repoName}`}},153:(e,t,i)=>{i.d(t,{MX:()=>f,PV:()=>g,ec:()=>m});var r=i(1398),s=i(7622),n=i(3700),o=i(3807),a=i(236),l=i(7931),h=i(5313),c=i(6645),u=i(1031),d=i(4832),p=i(3131);async function g(e,t,i,a,l){let u,p,g;let m=i.sha,f=null;async function v(){var r,s;let n;if(null==t.file)return;let o=a+1,u=t.lines.find(e=>e.line===o)??t.lines[0];if(t.isUncommitted)(0,c.KH)(m)&&(n=m);else if(null==(n=f=u.previousSha))return`\`\`\`diff
+ ${l.lineAt(a).text}
\`\`\``;let p=t.file.originalPath;null==p&&i.fsPath!==t.file.uri.fsPath&&(p=t.file.path),a=u.line-1;let g=await e.git.getDiffForLine(i,a,n,m);return null==g&&null==n&&m!==h.id&&(g=await e.git.getDiffForLine(i,a,void 0,h.id)),null!=g?(r=g,null==s&&"hunk"===d.H.get("hovers.changesDiff")?w(r.hunk):`\`\`\`diff${null==r.line.previous?"":`
- ${r.line.previous.trim()}`}${null==r.line.current?"":`
+ ${r.line.current.trim()}`}
\`\`\``):void 0}let y=await v();if(null==y)return;if(t.isUncommitted){let e=await t.getPreviousComparisonUrisForLine(a,m);if(e?.previous==null)return;u=`[$(compare-changes)](${s.T.getMarkdownCommandArgs({lhs:{sha:e.previous.sha??"",uri:e.previous.documentUri()},rhs:{sha:e.current.sha??"",uri:e.current.documentUri()},repoPath:t.repoPath,line:a})} "Open Changes")`,p=null==e.previous.sha||e.previous.isUncommitted?`  &nbsp;_${(0,c.pV)(e.previous.sha,{strings:{working:"Working Tree"}})}_ &nbsp;${o.EO.ArrowLeftRightLong}&nbsp; `:`  &nbsp;[$(git-commit) ${(0,c.pV)(e.previous.sha||"")}](${n.p.getMarkdownCommandArgs(e.previous.sha||"")} "Show Commit") &nbsp;${o.EO.ArrowLeftRightLong}&nbsp; `,g=null==e.current.sha||e.current.isUncommitted?`_${(0,c.pV)(e.current.sha,{strings:{working:"Working Tree"}})}_`:`[$(git-commit) ${(0,c.pV)(e.current.sha||"")}](${n.p.getMarkdownCommandArgs(e.current.sha||"")} "Show Commit")`}else u=`[$(compare-changes)](${s.T.getMarkdownCommandArgs(t,a)} "Open Changes")`,null===f&&(f=await t.getPreviousSha()),f&&(p=`  &nbsp;[$(git-commit) ${(0,c.pV)(f)}](${n.p.getMarkdownCommandArgs(f)} "Show Commit") &nbsp;${o.EO.ArrowLeftRightLong}&nbsp;`),g=`[$(git-commit) ${t.shortSha}](${n.p.getMarkdownCommandArgs(t.sha)} "Show Commit")`;u=`${y}
---

Changes${p??" added in "}${g} &nbsp;&nbsp;|&nbsp;&nbsp; ${u}`;let b=new r.MarkdownString(u,!0);return b.supportHtml=!0,b.isTrusted=!0,b}async function m(e,t,i,a){let h,c,u;let d=w(a);if(null==e)c="_Working Tree_",u="_Unsaved_";else{let r=await e.findFile(t);if(null==r)return;h=`[$(compare-changes)](${s.T.getMarkdownCommandArgs({lhs:{sha:e.sha,uri:l.nk.fromFile(r,t.repoPath,void 0,!0).toFileUri()},rhs:{sha:"",uri:t.toFileUri()},repoPath:t.repoPath,line:i})} "Open Changes")`,c=`[$(git-commit) ${e.shortSha}](${n.p.getMarkdownCommandArgs(e.sha)} "Show Commit")`,u="_Working Tree_"}h=`${d}
---

Local Changes  &nbsp;${c} &nbsp;${o.EO.ArrowLeftRightLong}&nbsp; ${u}${null==h?"":` &nbsp;&nbsp;|&nbsp;&nbsp; ${h}`}`;let p=new r.MarkdownString(h,!0);return p.supportHtml=!0,p.isTrusted=!0,p}async function f(e,t,i,s,n){let o,l;let h=await (0,u.wW)(n?.remotes??e.git.getBestRemotesWithProviders(t.repoPath),n?.cancellation,n?.timeout);if(h.paused){if("cancelled"===h.reason)return}else o=h.value,[l]=o;let c=d.H.get("hovers"),g=l?.provider!=null&&(n?.autolinks||n?.autolinks!==!1&&c.autolinks.enabled&&c.autolinks.enhanced)&&a.c.has(c.detailsMarkdownFormat,"message"),m=l?.hasIntegration()&&!1!==l.maybeIntegrationConnected&&(n?.pullRequests||n?.pullRequests!==!1&&c.pullRequests.enabled)&&a.c.has(n.format,"pullRequest","pullRequestAgo","pullRequestAgoOrDate","pullRequestDate","pullRequestState"),[f,w,v,y]=await Promise.allSettled([g?(0,u.zu)(n?.enrichedAutolinks??t.getEnrichedAutolinks(l),n?.cancellation,n?.timeout):void 0,m?(0,u.wW)(n?.pullRequest??t.getAssociatedPullRequest(l),n?.cancellation,n?.timeout):void 0,e.vsls.enabled?(0,p.nZ)(e.vsls.getContactPresence(t.author.email),250,n?.cancellation):void 0,t.isUncommitted?t.getPreviousComparisonUrisForLine(s,i.sha):void 0,null==t.message?t.ensureFullDetails():void 0]);if(n?.cancellation?.isCancellationRequested)return;let b=(0,p.Ro)(f),C=(0,p.Ro)(w),R=(0,p.Ro)(v),S=(0,p.Ro)(y),P=await a.c.fromTemplateAsync(n.format,t,{enrichedAutolinks:b?.value==null||b.paused?void 0:b.value,dateFormat:null===n.dateFormat?"MMMM Do, YYYY h:mma":n.dateFormat,editor:{line:s,uri:i},getBranchAndTagTips:n?.getBranchAndTagTips,messageAutolinks:n?.autolinks||n?.autolinks!==!1&&c.autolinks.enabled,pullRequest:C?.value,presence:R,previousLineComparisonUris:S,outputFormat:"markdown",remotes:o}),A=new r.MarkdownString(P,!0);return A.supportHtml=!0,A.isTrusted=!0,A}function w(e){return`\`\`\`diff
${e.contents.trim()}
\`\`\``}},3536:(e,t,i)=>{i.d(t,{A5:()=>w,AO:()=>m,CR:()=>f,U_:()=>R,c8:()=>y,gD:()=>g,hU:()=>v,ky:()=>u,lW:()=>C,pR:()=>h,pW:()=>c,pn:()=>d,qQ:()=>p,wW:()=>b});var r=i(1398),s=i(3807);i(1310);var n=i(7899),o=i(4832),a=i(3916),l=i(2471);function h(e){return null==e?S("info","There is no previous commit.","suppressCommitHasNoPreviousCommitWarning"):S("info",`Commit ${e.shortSha} (${e.author.name}, ${e.formattedDate}) has no previous commit.`,"suppressCommitHasNoPreviousCommitWarning")}function c(e){return S("warn",`${e}. The commit could not be found.`,"suppressCommitNotFoundWarning")}async function u(e){let t={title:"Create Pull Request..."};return await S("info",`Would you like to create a Pull Request for branch '${e}'?`,"suppressCreatePullRequestPrompt",{title:"Don't Show Again"},t)===t}async function d(){let e={title:"Disable Debug Logging"};return await S("warn","GitLens debug logging is currently enabled. Unless you are reporting an issue, it is recommended to be disabled. Would you like to disable it?","suppressDebugLoggingWarning",{title:"Don't Show Again"},e)===e}async function p(e){a.Vy.enabled("error")?null!=await S("error",`${e}. See output channel for more details.`,void 0,null,{title:"Open Output Channel"})&&a.Vy.showOutputChannel():null!=await S("error",`${e}. If the error persists, please enable debug logging and try again.`,void 0,null,{title:"Enable Debug Logging"})&&(0,n.RS)(s.Ts.EnableDebugLogging)}function g(e){return S("warn",`${e}. The file is probably not under source control.`,"suppressFileNotUnderSourceControlWarning")}function m(e){return S("error",`This GitLens pre-release version (${e}) has expired. Please upgrade to a more recent version.`)}function f(e){return S("warn",`${e}. The line has uncommitted changes.`,"suppressLineUncommittedWarning")}function w(e){return S("warn",`${e}. No repository could be found.`,"suppressNoRepositoryWarning")}function v(){return S("warn","Closing either the git-rebase-todo file or the Rebase Editor will start the rebase.","suppressRebaseSwitchToTextWarning")}function y(e){return S("error",`Rich integration with ${e} has been disconnected for this session, because of too many failed requests.`,"suppressIntegrationDisconnectedTooManyFailedRequestsWarning",void 0,{title:"OK"})}function b(e){return S("error",e,"suppressIntegrationRequestFailed500Warning",void 0,{title:"OK"})}function C(e){return S("error",`${e} request timed out.`,"suppressIntegrationRequestTimedOutWarning",void 0,{title:"OK"})}async function R(e){let t={title:"Read Announcement",isCloseAffordance:!0};await S("info",`Upgraded to GitLens ${e}${"15"===e?`, with a host of new [Pro features](${s.DS.proFeatures}) including [Launchpad](${s.DS.codeSuggest}), [Code Suggest](${s.DS.codeSuggest}), and more`:""} \u2014 [see what's new](${s.DS.releaseNotes} "See what's new in GitLens ${e}").`,void 0,null,{title:"OK",isCloseAffordance:!0},t)===t&&(0,l.CZ)(s.DS.releaseAnnouncement)}async function S(e,t,i,s={title:"Don't Show Again"},...n){let l;if(a.Vy.log(`ShowMessage(${e}, '${t}', ${i}, ${JSON.stringify(s)})`),null!=i&&o.H.get(`advanced.messages.${i}`)){a.Vy.log(`ShowMessage(${e}, '${t}', ${i}, ${JSON.stringify(s)}) skipped`);return}switch(null!=i&&null!==s&&n.push(s),e){case"info":l=await r.window.showInformationMessage(t,...n);break;case"warn":l=await r.window.showWarningMessage(t,...n);break;case"error":l=await r.window.showErrorMessage(t,...n)}if(null==i||null!==s&&l!==s||(a.Vy.log(`ShowMessage(${e}, '${t}', ${i}, ${JSON.stringify(s)}) don't show again requested`),await function(e){let t={...o.H.get("advanced.messages")};for(let[i,r]of(t[e]=!0,Object.entries(t)))!0!==r&&delete t[i];return o.H.update("advanced.messages",t,r.ConfigurationTarget.Global)}(i),l!==s))return a.Vy.log(`ShowMessage(${e}, '${t}', ${i}, ${JSON.stringify(s)}) returned ${null!=l?l.title:l}`),l}},103:(e,t,i)=>{i.d(t,{X:()=>o});var r=i(1398),s=i(2972),n=i(4832);async function o(e,t){if(!n.H.get("cloudPatches.enabled")){let e={title:"Enable"};if(await r.window.showInformationMessage("Cloud Patches are currently disabled. Would you like to enable them?",{modal:!0},e,{title:"Cancel",isCloseAffordance:!0})!==e)return;await n.H.updateEffective("cloudPatches.enabled",!0)}return"create"===e.mode&&(t={...t,preserveFocus:!1,preserveVisibility:!1}),s.m.instance.patchDetailsView.show(t,e)}},2048:(e,t,i)=>{i.d(t,{A:()=>u,d:()=>EnrichmentService});var r=i(8803),s=i(8180),n=i(3916),o=i(3446),a=i(1014),l=Object.defineProperty,h=Object.getOwnPropertyDescriptor,c=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?h(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&l(t,i,n),n};let EnrichmentService=class EnrichmentService{constructor(e,t){this.container=e,this.connection=t}dispose(){}async delete(e,t){let i=(0,o.dQ)();try{let i=await this.connection.fetchGkDevApi(`v1/enrich-items/${e}`,{method:"DELETE"});if(!i.ok)throw Error(`Unable to ${t} item '${e}':  (${i.status}) ${i.statusText}`)}catch(e){throw n.Vy.error(e,i),e}}async get(e,t){let i=(0,o.dQ)();try{let i=await this.connection.fetchGkDevApi("v1/enrich-items",{method:"GET"});if(t?.isCancellationRequested)throw new r.AL;let s=await i.json();if(t?.isCancellationRequested)throw new r.AL;return null==e?s.data:s.data.filter(t=>t.type===e)}catch(e){if(e instanceof r.WT)return[];throw n.Vy.error(e,i),e}}getPins(e){return this.get("pin",e)}getSnoozed(e){return this.get("snooze",e)}async pinItem(e){let t=(0,o.dQ)();try{if(!await (0,a.G5)(this.container,"Pinning is a Preview feature and requires an account.",{source:"launchpad",detail:"pin"}))throw Error("Unable to pin item: account required");let t={provider:e.provider,entityType:e.type,entityId:e.id,entityUrl:e.url},i=await this.connection.fetchGkDevApi("v1/enrich-items/pin",{method:"POST",body:JSON.stringify(t)});if(!i.ok)throw Error(`Unable to pin item '${t.provider}|${t.entityUrl}#${e.id}':  (${i.status}) ${i.statusText}`);return(await i.json()).data}catch(e){throw n.Vy.error(e,t),e}}unpinItem(e){return this.delete(e,"unpin")}async snoozeItem(e){let t=(0,o.dQ)();try{if(!await (0,a.G5)(this.container,"Snoozing is a Preview feature and requires an acccount.",{source:"launchpad",detail:"snooze"}))throw Error("Unable to snooze item: subscription required");let t={provider:e.provider,entityType:e.type,entityId:e.id,entityUrl:e.url};null!=e.expiresAt&&(t.expiresAt=e.expiresAt);let i=await this.connection.fetchGkDevApi("v1/enrich-items/snooze",{method:"POST",body:JSON.stringify(t)});if(!i.ok)throw Error(`Unable to snooze item '${t.provider}|${t.entityUrl}#${e.id}':  (${i.status}) ${i.statusText}`);return(await i.json()).data}catch(e){throw n.Vy.error(e,t),e}}unsnoozeItem(e){return this.delete(e,"unsnooze")}};function u(e){switch(e.id){case"azure-devops":return"azure";case"bitbucket":case"bitbucket-server":return"bitbucket";case"github":return"github";case"gitlab":return"gitlab";default:throw Error(`Unknown remote provider '${e.id}'`)}}c([(0,s.Rm)()],EnrichmentService.prototype,"get",1),c([(0,s.Rm)()],EnrichmentService.prototype,"getPins",1),c([(0,s.Rm)()],EnrichmentService.prototype,"getSnoozed",1),c([(0,s.Rm)({args:{0:e=>`${e.id} (${e.provider} ${e.type})`}})],EnrichmentService.prototype,"pinItem",1),c([(0,s.Rm)()],EnrichmentService.prototype,"unpinItem",1),c([(0,s.Rm)({args:{0:e=>`${e.id} (${e.provider} ${e.type})`}})],EnrichmentService.prototype,"snoozeItem",1),c([(0,s.Rm)()],EnrichmentService.prototype,"unsnoozeItem",1)},5029:(e,t,i)=>{i.d(t,{TW:()=>A,_W:()=>R,dL:()=>P,uZ:()=>FocusProvider,zt:()=>S});var r=i(1398),s=i(9032),n=i(3807),o=i(8803),a=i(9432),l=i(304),h=i(9188),c=i(7899),u=i(4832),d=i(3131),p=i(2471),g=i(1144),m=i(378),f=i(1298);let w=["mergeable","unassigned-reviewers","failed-checks","conflicts","needs-my-review","code-suggestions","changes-requested","reviewer-commented","waiting-for-review","draft","other"],v=["current-branch","pinned","mergeable","blocked","follow-up","needs-review","waiting-for-review","draft","other","snoozed"],y=new Map([["mergeable","mergeable"],["conflicts","blocked"],["failed-checks","blocked"],["unassigned-reviewers","blocked"],["needs-my-review","needs-review"],["code-suggestions","follow-up"],["changes-requested","follow-up"],["reviewer-commented","follow-up"],["waiting-for-review","waiting-for-review"],["draft","draft"],["other","other"]]),b=new Map([["readyToMerge","mergeable"],["unassignedReviewers","unassigned-reviewers"],["failingCI","failed-checks"],["conflicts","conflicts"],["needsMyReview","needs-my-review"],["changesRequested","changes-requested"],["reviewerCommented","reviewer-commented"],["waitingForReview","waiting-for-review"],["draft","draft"],["other","other"]]),C=new Map([["mergeable",["merge"]],["unassigned-reviewers",["open"]],["failed-checks",["open"]],["conflicts",["open"]],["needs-my-review",["open"]],["code-suggestions",["open"]],["changes-requested",["open"]],["reviewer-commented",["open"]],["waiting-for-review",["open"]],["draft",["open"]],["other",[]]]),R=[f.Q7.GitHub];let FocusProvider=class FocusProvider{constructor(e){this.container=e,this._disposable=r.Disposable.from(u.H.onDidChange(this.onConfigurationChanged,this),...this.registerCommands())}_onDidChange=new r.EventEmitter;get onDidChange(){return this._onDidChange.event}_onDidRefresh=new r.EventEmitter;get onDidRefresh(){return this._onDidRefresh.event}_disposable;dispose(){this._disposable.dispose()}_issues;async getIssues(e){return(e?.force||null==this._issues||this._issues.expiresAt<Date.now())&&(this._issues={promise:this.container.integrations.getMyIssues([f.Q7.GitHub],e?.cancellation),expiresAt:Date.now()+18e5}),this._issues?.promise}_prs;async getPullRequestsWithSuggestionCounts(e){return(e?.force||null==this._prs||this._prs.expiresAt<Date.now())&&(this._prs={promise:this.fetchPullRequestsWithSuggestionCounts(e?.cancellation),expiresAt:Date.now()+18e5}),this._prs?.promise}async fetchPullRequestsWithSuggestionCounts(e){let[t,i]=await Promise.allSettled([this.container.integrations.getMyPullRequests([f.Q7.GitHub],e),this.container.subscription.getSubscription(!0)]),r=(0,d.Ro)(t),s=(0,d.Ro)(i),n=r?.length&&s?.account!=null?await this.container.drafts.getCodeSuggestionCounts(r.map(e=>e.pullRequest)):void 0;return{prs:r,suggestionCounts:n}}_enrichedItems;async getEnrichedItems(e){return(e?.force||null==this._enrichedItems||this._enrichedItems.expiresAt<Date.now())&&(this._enrichedItems={promise:this.container.enrichments.get(void 0,e?.cancellation),expiresAt:Date.now()+18e5}),this._enrichedItems?.promise}_groupedIds;_codeSuggestions;async getCodeSuggestions(e,t){if(!(e.codeSuggestionsCount<1))return(null==this._codeSuggestions||t?.force)&&(this._codeSuggestions=new Map),(t?.force||!this._codeSuggestions.has(e.uuid)||this._codeSuggestions.get(e.uuid).expiresAt<Date.now())&&this._codeSuggestions.set(e.uuid,{promise:this.container.drafts.getCodeSuggestions(e,f.Q7.GitHub,{includeArchived:!1}),expiresAt:Date.now()+18e5}),this._codeSuggestions.get(e.uuid).promise}refresh(){this._issues=void 0,this._prs=void 0,this._enrichedItems=void 0,this._codeSuggestions=void 0,this._onDidChange.fire()}async pin(e){e.viewer.pinned=!0,this._onDidChange.fire(),await this.container.enrichments.pinItem(e.enrichable),this._enrichedItems=void 0,this._onDidChange.fire()}async unpin(e){if(e.viewer.pinned=!1,this._onDidChange.fire(),null==e.viewer.enrichedItems)return;let t=e.viewer.enrichedItems.find(e=>"pin"===e.type);null!=t&&(await this.container.enrichments.unpinItem(t.id),this._enrichedItems=void 0,this._onDidChange.fire())}async snooze(e){e.viewer.snoozed=!0,this._onDidChange.fire(),await this.container.enrichments.snoozeItem(e.enrichable),this._enrichedItems=void 0,this._onDidChange.fire()}async unsnooze(e){if(e.viewer.snoozed=!1,this._onDidChange.fire(),null==e.viewer.enrichedItems)return;let t=e.viewer.enrichedItems.find(e=>"snooze"===e.type);null!=t&&(await this.container.enrichments.unsnoozeItem(t.id),this._enrichedItems=void 0,this._onDidChange.fire())}async merge(e){if(null==e.graphQLId||e.headRef?.oid==null||"github"!==e.provider.id||"Merge"!==await r.window.showQuickPick(["Merge","Cancel"],{placeHolder:`Are you sure you want to merge ${e.headRef?.name??"this pull request"}${e.baseRef?.name?` into ${e.baseRef.name}`:""}? This cannot be undone.`}))return;let t=await this.container.integrations.get(f.Q7.GitHub);await t.mergePullRequest({id:e.graphQLId,headRefSha:e.headRef.oid}),this.refresh()}open(e){null!=e.url&&((0,p.CZ)(e.url),this._prs=void 0)}openCodeSuggestion(e,t){let i=e.codeSuggestions?.find(e=>e.id===t);null!=i&&(this._codeSuggestions?.delete(e.uuid),this._prs=void 0,(0,c.RS)(n.Ts.OpenCloudPatch,{type:"code_suggestion",draft:i}))}openCodeSuggestionInBrowser(e){(0,p.CZ)(this.container.drafts.generateWebUrl(e))}async switchTo(e,t=!1){if(e.openRepository?.localBranch?.current){(0,m.$)({type:"wip",inReview:t,repository:e.openRepository.repo,source:"launchpad"});return}let i=this.getItemBranchDeepLink(e,t?g.zB.SwitchToAndSuggestPullRequest:g.zB.SwitchToPullRequest);null!=i&&(this._codeSuggestions?.delete(e.uuid),await this.container.deepLinks.processDeepLinkUri(i,!1))}async openChanges(e){if(e.openRepository?.localBranch?.current&&(await this.switchTo(e),null!=e.refs)){let t=await (0,l.tI)(this.container,e.openRepository.repo.path,e.refs);await (0,a.$5)(this.container,{repoPath:t.repoPath,lhs:t.base.ref,rhs:t.head.ref},{title:`Changes in Pull Request #${e.id}`})}}async openInGraph(e){let t=this.getItemBranchDeepLink(e);null!=t&&await this.container.deepLinks.processDeepLinkUri(t,!1)}getItemBranchDeepLink(e,t){var i;if("pullrequest"!==e.type||null==e.headRef||e.repoIdentity?.remote?.url==null)return;let s=u.H.get("deepLinks.schemeOverride"),n="string"==typeof s?s:r.env.uriScheme,o=null==t&&e.openRepository?.localBranch?.current?e.openRepository.localBranch.name:e.headRef.name;return r.Uri.parse(`${n}://${this.container.context.extension.id}/link/${g.vk.Repository}/-/${g.vk.Branch}/${o}?url=${encodeURIComponent((i=e.repoIdentity.remote.url).startsWith("https")?i.endsWith(".git")?i:`${i}.git`:i)}${null!=t?`&action=${t}`:""}`)}async getMatchingOpenRepository(e){for(let t of this.container.git.openRepositories){let i=(await t.getRemotes({filter:t=>t.matches(e.repoIdentity.remote.url)||t.matches(e.repoIdentity.provider.domain,h.n(e.repoIdentity.provider))}))?.[0];if(null==i)continue;let r=(await t.getBranches({filter:t=>t.remote&&t.getRemoteName()===i.name&&t.getNameWithoutRemote()===e.headRef?.name}))?.values[0];if(null==r)continue;let s=(await t.getBranches({filter:e=>e.upstream?.name===r.name}))?.values;return{repo:t,remote:i,localBranch:s?.find(e=>e.current)??s?.[0]}}}async getCategorizedItems(e,t){let i;let r=new Set((u.H.get("launchpad.ignoredRepositories")??[]).map(e=>e.toLowerCase())),s=u.H.get("launchpad.staleThreshold");null!=s&&(i=new Date).setDate(i.getDate()-s);let n=this.getEnrichedItems({force:e?.force,cancellation:t});if(this.container.git.isDiscoveringRepositories&&await this.container.git.isDiscoveringRepositories,t?.isCancellationRequested)throw new o.AL;let[a,l]=await Promise.allSettled([n,e?.prs!==!1?this.getPullRequestsWithSuggestionCounts({force:e?.force,cancellation:t}):void 0]);if(t?.isCancellationRequested)throw new o.AL;let h=[],c=(0,d.Ro)(l),p=(0,d.Ro)(a),g={};if(null!=p)for(let e of p)e.entityId in g?g[e.entityId].push(e):g[e.entityId]=[e];if(null!=c){let{prs:e,suggestionCounts:t}=c;if(null==e)return h;let s=r.size?e.filter(e=>!r.has(`${e.pullRequest.repository.owner.toLowerCase()}/${e.pullRequest.repository.repo.toLowerCase()}`)):e,n=await this.container.integrations.get(f.Q7.GitHub),o=await n.getCurrentAccount(),a=s.map(e=>{let t=(0,f.d8)(e.pullRequest),i={type:"pr",id:t.uuid,url:e.pullRequest.url,provider:"github"},r={remote:{url:e.pullRequest.refs?.head?.url,domain:e.pullRequest.provider.domain},name:e.pullRequest.repository.repo,provider:{id:e.pullRequest.provider.id,domain:e.pullRequest.provider.domain,repoDomain:e.pullRequest.repository.owner,repoName:e.pullRequest.repository.repo}};return{...t,type:"pullrequest",uuid:t.uuid,provider:e.pullRequest.provider,enrichable:i,repoIdentity:r,refs:e.pullRequest.refs}}),l=(0,f.iG)(a,{id:o.username},{enrichedItemsByUniqueId:g});h=await Promise.all(l.map(async e=>{let r=t?.[e.uuid]?.count??0,s=b.get(e.suggestedActionCategory);null!=i&&e.updatedDate.getTime()<i.getTime()?s="other":r>0&&e.viewer.isAuthor&&(s="code-suggestions");let n=await this.getMatchingOpenRepository(e),a=function(e,t){let i=[...C.get(e)];return t?i.push("show-overview","open-changes","code-suggest","open-in-graph"):i.push("switch","switch-and-code-suggest","open-in-graph"),i}(s,n?.localBranch?.current??!1);return{...e,currentViewer:o,codeSuggestionsCount:r,isNew:null!=this._groupedIds&&!this._groupedIds.has(`${e.uuid}:${y.get(s)}`),actionableCategory:s,suggestedActions:a,openRepository:n}}))}return this.updateGroupedIds(h),this._onDidRefresh.fire({items:h}),h}updateGroupedIds(e){let t=new Set;for(let i of e){let e=y.get(i.actionableCategory),r=`${i.uuid}:${e}`;t.has(r)||t.add(r)}this._groupedIds=t}async hasConnectedIntegration(){for(let e of R){let t=await this.container.integrations.get(e);if(t.maybeConnected??await t.isConnected())return!0}return!1}async ensureFocusItemCodeSuggestions(e,t){return e.codeSuggestions??=await this.getCodeSuggestions(e,t),e.codeSuggestions}registerCommands(){return[(0,c.Lb)(n.Ts.ToggleLaunchpadIndicator,()=>{let e=u.H.get("launchpad.indicator.enabled")??!1;u.H.updateEffective("launchpad.indicator.enabled",!e)})]}onConfigurationChanged(e){if(!u.H.changed(e,"launchpad"))return;let t=u.H.get("launchpad");this.container.telemetry.sendEvent("launchpad/configurationChanged",{staleThreshold:t.staleThreshold,ignoredRepositories:t.ignoredRepositories,indicatorEnabled:t.indicator.enabled,indicatorOpenInEditor:t.indicator.openInEditor,indicatorIcon:t.indicator.icon,indicatorLabel:t.indicator.label,indicatorUseColors:t.indicator.useColors,indicatorGroups:t.indicator.groups,indicatorPollingEnabled:t.indicator.polling.enabled,indicatorPollingInterval:t.indicator.polling.interval}),u.H.changed(e,"launchpad.indicator.enabled")&&!t.indicator.enabled&&this.container.telemetry.sendEvent("launchpad/indicator/hidden"),(u.H.changed(e,"launchpad.ignoredRepositories")||u.H.changed(e,"launchpad.staleThreshold"))&&(this.refresh(),this.getCategorizedItems({force:!0}))}};function S(e){if(null==e||0===e.length)return new Map;let t=new Map(v.map(e=>[e,[]]));for(let i of(function(e){e.sort((e,t)=>(e.viewer.pinned?-1:1)-(t.viewer.pinned?-1:1)||w.indexOf(e.actionableCategory)-w.indexOf(t.actionableCategory)||t.updatedDate.getTime()-e.updatedDate.getTime())}(e),e)){if(i.viewer.snoozed){t.get("snoozed").push(i);continue}if(i.viewer.pinned&&t.get("pinned").push(i),i.openRepository?.localBranch?.current&&t.get("current-branch").push(i),i.isDraft)t.get("draft").push(i);else{let e=y.get(i.actionableCategory);t.get(e).push(i)}}return t}function P(e){if(null==e||0===e.length)return new Map;let t=new Map(v.map(e=>[e,0]));function i(e){t.set(e,(t.get(e)??0)+1)}for(let t of e){if(t.viewer.snoozed){i("snoozed");continue}t.viewer.pinned&&i("pinned"),t.openRepository?.localBranch?.current&&i("current-branch"),i(t.isDraft?"draft":y.get(t.actionableCategory))}return t}function A(e){return(0,s.Fx)(e.uuid)}},4293:(e,t,i)=>{i.d(t,{A_:()=>m,Cj:()=>g,JP:()=>C,Jc:()=>w,Mt:()=>v,NK:()=>p,Nm:()=>d,SB:()=>c,UJ:()=>l,lc:()=>b,le:()=>h,qn:()=>o,yV:()=>y,zZ:()=>a,zx:()=>f});var r,s,n=i(1856),o=((r=o||{}).Free="free",r.FreePlus="free+",r.Pro="pro",r.Teams="teams",r.Enterprise="enterprise",r),a=((s=a||{})[s.VerificationRequired=-1]="VerificationRequired",s[s.Free=0]="Free",s[s.FreeInPreviewTrial=1]="FreeInPreviewTrial",s[s.FreePreviewTrialExpired=2]="FreePreviewTrialExpired",s[s.FreePlusInTrial=3]="FreePlusInTrial",s[s.FreePlusTrialExpired=4]="FreePlusTrialExpired",s[s.FreePlusTrialReactivationEligible=5]="FreePlusTrialReactivationEligible",s[s.Paid=6]="Paid",s);function l(e){let{account:t,plan:{actual:i,effective:r},previewTrial:s}=e;if(t?.verified===!1)return -1;if(i.id===r.id)switch(r.id){case"free":return null==s?0:2;case"free+":if(null!=r.nextTrialOptInDate&&new Date(r.nextTrialOptInDate)<new Date)return 5;return 4;case"pro":case"teams":case"enterprise":return 6}switch(r.id){case"free":return null==s?0:1;case"free+":if(null!=r.nextTrialOptInDate&&new Date(r.nextTrialOptInDate)<new Date)return 5;return 4;case"pro":return"free"===i.id?1:3;case"teams":case"enterprise":return 6}}function h(e,t,i,r,s,n,o=!1,a){return{id:e,name:c(e),bundle:t,cancelled:o,organizationId:r,trialReactivationCount:i,nextTrialOptInDate:a,startedOn:(s??new Date).toISOString(),expiresOn:null!=n?n.toISOString():void 0}}function c(e){switch(e){case"free+":return"GitKraken Free";case"pro":return"GitKraken Pro";case"teams":return"GitKraken Teams";case"enterprise":return"GitKraken Enterprise";default:return"GitKraken"}}let u=new Map([[void 0,-1],["free",0],["free+",1],["pro",2],["teams",3],["enterprise",4]]);function d(e){return u.get(e)??-1}function p(e,t){return g(e.plan.effective.expiresOn,t)}function g(e,t){return null!=e?(0,n.m8)(Date.now(),new Date(e),t,Math.round):void 0}function m(e){return f(e.plan.actual.id)}function f(e){return"free"!==e&&"free+"!==e}function w(e){let t=p(e);return null!=t&&t<=0}function v(e){return e.plan.actual.id!==e.plan.effective.id}function y(e){if(null==e.account||!v(e)||!1===b(e))return!1;let t=p(e);return null==t||t<=0}function b(e){let t=g(e.previewTrial?.expiresOn);return null!=t?t<=0:void 0}function C(e){}},4379:(e,t,i)=>{i.d(t,{L:()=>o,Z:()=>a});var r=i(1398),s=i(4832),n=i(8973);function o(){return(0,n.SD)("gitlens:plus:enabled",s.H.get("plusFeatures.enabled",void 0,!0))}async function a(){if(o())return!0;let e={title:"Enable"};return await r.window.showInformationMessage("Pro features are currently disabled. Would you like to enable them?",{modal:!0},e,{title:"Cancel",isCloseAffordance:!0})===e&&(await s.H.updateEffective("plusFeatures.enabled",!0),!0)}},3202:(e,t,i)=>{i.r(t),i.d(t,{AzureDevOpsAuthenticationProvider:()=>AzureDevOpsAuthenticationProvider});var r=i(1398),s=i(7279),n=i(2471);let AzureDevOpsAuthenticationProvider=class AzureDevOpsAuthenticationProvider{getSessionId(e){return e?.domain??""}async createSession(e){let t,i=e?.organization;if(!i){let t=r.window.createInputBox();t.ignoreFocusOut=!0;let s=[];try{i=await new Promise(i=>{s.push(t.onDidHide(()=>i(void 0)),t.onDidChangeValue(()=>t.validationMessage=void 0),t.onDidAccept(()=>{let e=t.value.trim();if(!e){t.validationMessage="An organization is required";return}i(e)})),t.title=`Azure DevOps Authentication${e?.domain?`  \u2022 ${e.domain}`:""}`,t.placeholder="Organization",t.prompt="Enter your Azure DevOps organization",t.show()})}finally{t.dispose(),s.forEach(e=>void e.dispose())}}if(!i)return;let o=r.window.createInputBox();o.ignoreFocusOut=!0;let a=[];try{let s={iconPath:new r.ThemeIcon("link-external"),tooltip:"Open the Azure DevOps Access Tokens Page"};t=await new Promise(t=>{a.push(o.onDidHide(()=>t(void 0)),o.onDidChangeValue(()=>o.validationMessage=void 0),o.onDidAccept(()=>{let e=o.value.trim();if(!e){o.validationMessage="A personal access token is required";return}t(e)}),o.onDidTriggerButton(t=>{t===s&&r.env.openExternal(r.Uri.parse(`https://${e?.domain??"dev.azure.com"}/${i}/_usersSettings/tokens`))})),o.password=!0,o.title=`Azure DevOps Authentication${e?.domain?`  \u2022 ${e.domain}`:""}`,o.placeholder=`Requires ${e?.scopes.join(", ")??"all"} scopes`,o.prompt=(0,n.Av)("input-prompt-links")?`Paste your [Azure DevOps Personal Access Token](https://${e?.domain??"dev.azure.com"}/${i}/_usersSettings/tokens "Get your Azure DevOps Access Token")`:"Paste your Azure DevOps Personal Access Token",o.buttons=[s],o.show()})}finally{o.dispose(),a.forEach(e=>void e.dispose())}if(t)return{id:this.getSessionId(e),accessToken:(0,s.K3)(`:${t}`),scopes:e?.scopes??[],account:{id:"",label:""}}}}},5317:(e,t,i)=>{i.r(t),i.d(t,{BitbucketAuthenticationProvider:()=>BitbucketAuthenticationProvider});var r=i(1398),s=i(7279),n=i(2471);let BitbucketAuthenticationProvider=class BitbucketAuthenticationProvider{getSessionId(e){return e?.domain??""}async createSession(e){let t,i=e?.username;if(!i){let t={iconPath:new r.ThemeIcon("link-external"),tooltip:"Open the Bitbucket Settings Page"},s=r.window.createInputBox();s.ignoreFocusOut=!0;let o=[];try{i=await new Promise(i=>{o.push(s.onDidHide(()=>i(void 0)),s.onDidChangeValue(()=>s.validationMessage=void 0),s.onDidAccept(()=>{let e=s.value.trim();if(!e){s.validationMessage="A Bitbucket username is required";return}i(e)}),s.onDidTriggerButton(i=>{i===t&&r.env.openExternal(r.Uri.parse(`https://${e?.domain??"bitbucket.org"}/account/settings/`))})),s.title=`Bitbucket Authentication${e?.domain?`  \u2022 ${e.domain}`:""}`,s.placeholder="Username",s.prompt=(0,n.Av)("input-prompt-links")?`Enter your [Bitbucket Username](https://${e?.domain??"bitbucket.org"}/account/settings/ "Get your Bitbucket App Password")`:"Enter your Bitbucket Username",s.show()})}finally{s.dispose(),o.forEach(e=>void e.dispose())}}if(!i)return;let o=r.window.createInputBox();o.ignoreFocusOut=!0;let a=[];try{let i={iconPath:new r.ThemeIcon("link-external"),tooltip:"Open the Bitbucket App Passwords Page"};t=await new Promise(t=>{a.push(o.onDidHide(()=>t(void 0)),o.onDidChangeValue(()=>o.validationMessage=void 0),o.onDidAccept(()=>{let e=o.value.trim();if(!e){o.validationMessage="An app password is required";return}t(e)}),o.onDidTriggerButton(t=>{t===i&&r.env.openExternal(r.Uri.parse(`https://${e?.domain??"bitbucket.org"}/account/settings/app-passwords/`))})),o.password=!0,o.title=`Bitbucket Authentication${e?.domain?`  \u2022 ${e.domain}`:""}`,o.placeholder=`Requires ${e?.scopes.join(", ")??"all"} scopes`,o.prompt=(0,n.Av)("input-prompt-links")?`Paste your [Bitbucket App Password](https://${e?.domain??"bitbucket.org"}/account/settings/app-passwords/ "Get your Bitbucket App Password")`:"Paste your Bitbucket App Password",o.buttons=[i],o.show()})}finally{o.dispose(),a.forEach(e=>void e.dispose())}if(t)return{id:this.getSessionId(e),accessToken:(0,s.K3)(`${i}:${t}`),scopes:e?.scopes??[],account:{id:"",label:""}}}}},4500:(e,t,i)=>{i.r(t),i.d(t,{CloudIntegrationService:()=>CloudIntegrationService});var r=i(1398),s=i(3916),n=i(8188);let CloudIntegrationService=class CloudIntegrationService{constructor(e,t){this.container=e,this.connection=t}async getConnections(){let e=await this.connection.fetchGkDevApi("v1/provider-tokens",{method:"GET"},{organizationId:!1});if(!e.ok){let t=(await e.json())?.error;null!=t&&s.Vy.error(`Failed to get connected providers from cloud: ${t}`);return}return(await e.json())?.data}async getConnectionSession(e,t=!1){let i=n.xq[e];if(null==i){s.Vy.error(`Unsupported cloud integration type: ${e}`);return}let r=await this.connection.fetchGkDevApi(`v1/provider-tokens/${i}${t?"/refresh":""}`,{method:t?"POST":"GET"},{organizationId:!1});if(!r.ok){let i=(await r.json())?.error;null!=i&&s.Vy.error(`Failed to ${t?"refresh":"get"} ${e} token from cloud: ${i}`);return}return(await r.json())?.data}async authorize(e){let t=n.xq[e];if(null==t){s.Vy.error(`Unsupported cloud integration type: ${e}`);return}let i=await r.env.asExternalUri(r.Uri.parse(`${r.env.uriScheme}://${this.container.context.extension.id}/${n.Je}?provider=${e}`)),o=await this.connection.fetchGkDevApi(`v1/provider-tokens/${t}/authorize`,{method:"GET"},{query:`source=gitlens&targetURL=${encodeURIComponent(i.toString(!0))}`,organizationId:!1});if(!o.ok){let t=(await o.json())?.error;null!=t&&s.Vy.error(`Failed to authorize with ${e}: ${t}`);return}return(await o.json())?.data}}},3253:(e,t,i)=>{i.r(t),i.d(t,{GitHubEnterpriseAuthenticationProvider:()=>GitHubEnterpriseAuthenticationProvider});var r=i(1398),s=i(2471);let GitHubEnterpriseAuthenticationProvider=class GitHubEnterpriseAuthenticationProvider{getSessionId(e){return e?.domain??""}async createSession(e){let t;let i=r.window.createInputBox();i.ignoreFocusOut=!0;let n=[];try{let o={iconPath:new r.ThemeIcon("link-external"),tooltip:"Open the GitHub Access Tokens Page"};t=await new Promise(t=>{n.push(i.onDidHide(()=>t(void 0)),i.onDidChangeValue(()=>i.validationMessage=void 0),i.onDidAccept(()=>{let e=i.value.trim();if(!e){i.validationMessage="A personal access token is required";return}t(e)}),i.onDidTriggerButton(t=>{t===o&&r.env.openExternal(r.Uri.parse(`https://${e?.domain??"github.com"}/settings/tokens`))})),i.password=!0,i.title=`GitHub Authentication${e?.domain?`  \u2022 ${e.domain}`:""}`,i.placeholder=`Requires a classic token with ${e?.scopes.join(", ")??"all"} scopes`,i.prompt=(0,s.Av)("input-prompt-links")?`Paste your [GitHub Personal Access Token](https://${e?.domain??"github.com"}/settings/tokens "Get your GitHub Access Token")`:"Paste your GitHub Personal Access Token",i.buttons=[o],i.show()})}finally{i.dispose(),n.forEach(e=>void e.dispose())}if(t)return{id:this.getSessionId(e),accessToken:t,scopes:e?.scopes??[],account:{id:"",label:""}}}}},45:(e,t,i)=>{i.r(t),i.d(t,{GitLabAuthenticationProvider:()=>GitLabAuthenticationProvider});var r=i(1398),s=i(2471);let GitLabAuthenticationProvider=class GitLabAuthenticationProvider{getSessionId(e){return e?.domain??""}async createSession(e){let t;let i=r.window.createInputBox();i.ignoreFocusOut=!0;let n=[];try{let o={iconPath:new r.ThemeIcon("link-external"),tooltip:"Open the GitLab Access Tokens Page"};t=await new Promise(t=>{n.push(i.onDidHide(()=>t(void 0)),i.onDidChangeValue(()=>i.validationMessage=void 0),i.onDidAccept(()=>{let e=i.value.trim();if(!e){i.validationMessage="A personal access token is required";return}t(e)}),i.onDidTriggerButton(t=>{t===o&&r.env.openExternal(r.Uri.parse(`https://${e?.domain??"gitlab.com"}/-/profile/personal_access_tokens`))})),i.password=!0,i.title=`GitLab Authentication${e?.domain?`  \u2022 ${e.domain}`:""}`,i.placeholder=`Requires ${e?.scopes.join(", ")??"all"} scopes`,i.prompt=(0,s.Av)("input-prompt-links")?`Paste your [GitLab Personal Access Token](https://${e?.domain??"gitlab.com"}/-/profile/personal_access_tokens "Get your GitLab Access Token")`:"Paste your GitLab Personal Access Token",i.buttons=[o],i.show()})}finally{i.dispose(),n.forEach(e=>void e.dispose())}if(t)return{id:this.getSessionId(e),accessToken:t,scopes:e?.scopes??[],account:{id:"",label:""}}}}},5122:(e,t,i)=>{i.r(t),i.d(t,{JiraAuthenticationProvider:()=>JiraAuthenticationProvider});var r=i(1398),s=i(4022),n=i(2471),o=i(1298);let JiraAuthenticationProvider=class JiraAuthenticationProvider{constructor(e){this.container=e}authProviderId=o.tp.Jira;getSessionId(e){return e?.domain??""}async createSession(e,t){let i=await this.container.cloudIntegrations;if(null==i)return;let o=await i.getConnectionSession(this.authProviderId);if(null!=o&&o.expiresIn<60&&(o=await i.getConnectionSession(this.authProviderId,!0)),!o&&t?.authorizeIfNeeded){let e=(await i.authorize(this.authProviderId))?.url;if(!e)return;await (0,n.CZ)(e);let t=new r.CancellationTokenSource,a=(0,s.I7)(this.container.uri.onDidReceiveCloudIntegrationAuthenticationUri,this.getUriHandlerDeferredExecutor());try{await Promise.race([a.promise,this.openCompletionInput(t.token),new Promise((e,i)=>t.token.onCancellationRequested(()=>i("Cancelled"))),new Promise((e,t)=>setTimeout(t,12e4,"Cancelled"))]),o=await i.getConnectionSession(this.authProviderId)}catch{o=void 0}finally{t.cancel(),t.dispose(),a.cancel()}}if(o)return{id:this.getSessionId(e),accessToken:o.accessToken,scopes:e?.scopes??[],account:{id:"",label:""},expiresAt:new Date(1e3*o.expiresIn+Date.now())}}async openCompletionInput(e){let t=r.window.createInputBox();t.ignoreFocusOut=!0;let i=[];try{if(e.isCancellationRequested)return;await new Promise(r=>{i.push(e.onCancellationRequested(()=>t.hide()),t.onDidHide(()=>r(void 0)),t.onDidAccept(()=>r(void 0))),t.title="Connect to Jira",t.placeholder="Please enter the provided authorization code",t.prompt="",t.show()})}finally{t.dispose(),i.forEach(e=>void e.dispose())}}getUriHandlerDeferredExecutor(){return(e,t,i)=>{if(new URLSearchParams(e.query).get("provider")!==o.tp.Jira){i("Invalid provider");return}t(e.toString(!0))}}}},8188:(e,t,i)=>{i.d(t,{F7:()=>o,Je:()=>s,oE:()=>n,xq:()=>a});var r=i(1298);let s="did-authenticate-cloud-integration",n=[r.tp.Jira],o={jira:r.tp.Jira,trello:r.tp.Trello,gitlab:r.Q7.GitLab,github:r.Q7.GitHub,bitbucket:r.Q7.Bitbucket,azure:r.Q7.AzureDevOps},a={[r.tp.Jira]:"jira",[r.tp.Trello]:"trello",[r.Q7.GitLab]:"gitlab",[r.Q7.GitHub]:"github",[r.Q7.Bitbucket]:"bitbucket",[r.Q7.AzureDevOps]:"azure",[r.PY.GitHubEnterprise]:void 0,[r.PY.GitLabSelfHosted]:void 0}},65:(e,t,i)=>{i.d(t,{On:()=>IssueIntegration,T5:()=>HostingIntegration});var r=i(1398),s=i(8803),n=i(3536),o=i(4832),a=i(6950),l=i(8180),h=i(3916),c=i(3446),u=i(1298),d=Object.defineProperty,p=Object.getOwnPropertyDescriptor,g=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?p(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&d(t,i,n),n};let IntegrationBase=class IntegrationBase{constructor(e,t){this.container=e,this.getProvidersApi=t}_onDidChange=new r.EventEmitter;get onDidChange(){return this._onDidChange.event}get authProviderDescriptor(){return{domain:this.domain,scopes:this.authProvider.scopes}}get icon(){return this.id}autolinks(){return[]}get connectedKey(){return`connected:${this.key}`}get maybeConnected(){return void 0===this._session?void 0:null!==this._session}get connectionExpired(){if(this._session?.expiresAt!=null)return new Date(this._session.expiresAt)<new Date}_session;session(){return void 0===this._session?this.ensureSession(!1):this._session??void 0}async connect(){try{return!!await this.ensureSession(!0)}catch(e){return!1}}async disconnect(e){if(e?.currentSessionOnly&&null===this._session)return;let t=null!=this._session;if(t&&!e?.silent){if(e?.currentSessionOnly)(0,n.c8)(this.name);else{let e;let t={title:"Disable"},i={title:"Disable & Sign Out"},s={title:"Cancel",isCloseAffordance:!0};if(null==(e=this.container.integrationAuthentication.supports(this.authProvider.id)?await r.window.showWarningMessage(`Are you sure you want to disable the rich integration with ${this.name}?

Note: signing out clears the saved authentication.`,{modal:!0},t,i,s):await r.window.showWarningMessage(`Are you sure you want to disable the rich integration with ${this.name}?`,{modal:!0},t,s))||e===s)return;e===i&&this.container.integrationAuthentication.deleteSession(this.authProvider.id,this.authProviderDescriptor)}}this.resetRequestExceptionCount(),this._session=null,t&&(e?.currentSessionOnly||this.container.storage.storeWorkspace(this.connectedKey,!1),this._onDidChange.fire(),e?.currentSessionOnly||this.container.integrations.disconnected(this,this.key)),await this.providerOnDisconnect?.()}async reauthenticate(){void 0!==this._session&&(this._session=void 0,await this.ensureSession(!0,!0))}refresh(){this.ensureSession(!1)}requestExceptionCount=0;resetRequestExceptionCount(){this.requestExceptionCount=0}handleProviderException(e,t,i){return e instanceof s.AL||(h.Vy.error(e,t),(e instanceof s.v3||e instanceof s.Iz)&&this.trackRequestException()),i}trackRequestException(){this.requestExceptionCount++,this.requestExceptionCount>=5&&null!==this._session&&this.disconnect({currentSessionOnly:!0})}async isConnected(){return await this.session()!=null}async ensureSession(e,t=!1){let i;if(null!=this._session)return this._session;if(o.H.get("integrations.enabled")){if(e)await this.container.storage.deleteWorkspace(this.connectedKey);else if(!1===this.container.storage.getWorkspace(this.connectedKey))return;try{i=await this.container.integrationAuthentication.getSession(this.authProvider.id,this.authProviderDescriptor,{createIfNeeded:e,forceNewSession:t})}catch(e){if(await this.container.storage.deleteWorkspace(this.connectedKey),e instanceof Error&&e.message.includes("User did not consent"))return;i=null}return void 0!==i||e||await this.container.storage.deleteWorkspace(this.connectedKey),this._session=i??null,this.resetRequestExceptionCount(),null!=i&&(await this.container.storage.storeWorkspace(this.connectedKey,!0),queueMicrotask(()=>{this._onDidChange.fire(),this.container.integrations.connected(this,this.key),this.providerOnConnect?.()})),i??void 0}}getIgnoreSSLErrors(){return this.container.integrations.ignoreSSLErrors(this)}async searchMyIssues(e,t){let i=(0,c.dQ)();if(this.maybeConnected??await this.isConnected())try{let i=await this.searchProviderMyIssues(this._session,null!=e?Array.isArray(e)?e:[e]:void 0,t);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,i,void 0)}}async getIssueOrPullRequest(e,t,i){let r=(0,c.dQ)();if(this.maybeConnected??await this.isConnected())return this.container.cache.getIssueOrPullRequest(t,e,this,()=>({value:(async()=>{try{let i=await this.getProviderIssueOrPullRequest(this._session,e,t);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,r,void 0)}})()}),i)}async getCurrentAccount(e){let t=(0,c.dQ)();if(!(this.maybeConnected??await this.isConnected()))return;let{expiryOverride:i,...r}=e??{};return this.container.cache.getCurrentAccount(this,()=>({value:(async()=>{try{let e=await this.getProviderCurrentAccount?.(this._session,r);return this.resetRequestExceptionCount(),e}catch(e){return this.handleProviderException(e,t,void 0)}})()}),{expiryOverride:i})}};g([(0,l.Rm)()],IntegrationBase.prototype,"connect",1),g([(0,a.G)(),(0,l.Rm)()],IntegrationBase.prototype,"disconnect",1),g([(0,l.Rm)()],IntegrationBase.prototype,"reauthenticate",1),g([(0,l.Yz)()],IntegrationBase.prototype,"trackRequestException",1),g([(0,a.G)(),(0,l.Yz)({exit:!0})],IntegrationBase.prototype,"isConnected",1),g([(0,a.G)()],IntegrationBase.prototype,"ensureSession",1),g([(0,l.Yz)()],IntegrationBase.prototype,"searchMyIssues",1),g([(0,l.Yz)()],IntegrationBase.prototype,"getIssueOrPullRequest",1);let IssueIntegration=class IssueIntegration extends IntegrationBase{type="issues";async getAccountForResource(e){if(this.maybeConnected??await this.isConnected())try{let t=await this.getProviderAccountForResource(this._session,e);return this.resetRequestExceptionCount(),t}catch(e){return this.handleProviderException(e,void 0,void 0)}}async getResourcesForUser(){if(this.maybeConnected??await this.isConnected())try{let e=await this.getProviderResourcesForUser(this._session);return this.resetRequestExceptionCount(),e}catch(e){return this.handleProviderException(e,void 0,void 0)}}async getProjectsForResources(e){if(this.maybeConnected??await this.isConnected())try{let t=await this.getProviderProjectsForResources(this._session,e);return this.resetRequestExceptionCount(),t}catch(e){return this.handleProviderException(e,void 0,void 0)}}async getProjectsForUser(){let e=await this.getResourcesForUser();if(null!=e)return this.getProjectsForResources(e)}async getIssuesForProject(e,t){if(this.maybeConnected??await this.isConnected())try{let i=await this.getProviderIssuesForProject(this._session,e,t);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,void 0,void 0)}}};g([(0,a.G)(),(0,l.Yz)()],IssueIntegration.prototype,"getAccountForResource",1),g([(0,a.G)(),(0,l.Yz)()],IssueIntegration.prototype,"getResourcesForUser",1),g([(0,l.Yz)()],IssueIntegration.prototype,"getProjectsForResources",1),g([(0,l.Yz)()],IssueIntegration.prototype,"getIssuesForProject",1);let HostingIntegration=class HostingIntegration extends IntegrationBase{type="hosting";async getAccountForEmail(e,t,i){let r=(0,c.dQ)();if(this.maybeConnected??await this.isConnected())try{let r=await this.getProviderAccountForEmail(this._session,e,t,i);return this.resetRequestExceptionCount(),r}catch(e){return this.handleProviderException(e,r,void 0)}}async getAccountForCommit(e,t,i){let r=(0,c.dQ)();if(this.maybeConnected??await this.isConnected())try{let r=await this.getProviderAccountForCommit(this._session,e,t,i);return this.resetRequestExceptionCount(),r}catch(e){return this.handleProviderException(e,r,void 0)}}async getDefaultBranch(e){let t=(0,c.dQ)();if(this.maybeConnected??await this.isConnected())return this.container.cache.getRepositoryDefaultBranch(e,this,()=>({value:(async()=>{try{let t=await this.getProviderDefaultBranch(this._session,e);return this.resetRequestExceptionCount(),t}catch(e){return this.handleProviderException(e,t,void 0)}})()}))}async getRepositoryMetadata(e,t){let i=(0,c.dQ)();if(this.maybeConnected??await this.isConnected())return this.container.cache.getRepositoryMetadata(e,this,()=>({value:(async()=>{try{let i=await this.getProviderRepositoryMetadata(this._session,e,t?.cancellation);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,i,void 0)}})()}),{expiryOverride:t?.expiryOverride})}async mergePullRequest(e,t){let i=(0,c.dQ)();if(!(this.maybeConnected??await this.isConnected()))return!1;try{let i=await this.mergeProviderPullRequest(this._session,e,t);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,i,!1)}}async getPullRequestForBranch(e,t,i){let r=(0,c.dQ)();if(!(this.maybeConnected??await this.isConnected()))return;let{expiryOverride:s,...n}=i??{};return this.container.cache.getPullRequestForBranch(t,e,this,()=>({value:(async()=>{try{let i=await this.getProviderPullRequestForBranch(this._session,e,t,n);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,r,void 0)}})()}),{expiryOverride:s})}async getPullRequestForCommit(e,t,i){let r=(0,c.dQ)();if(this.maybeConnected??await this.isConnected())return this.container.cache.getPullRequestForSha(t,e,this,()=>({value:(async()=>{try{let i=await this.getProviderPullRequestForCommit(this._session,e,t);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,r,void 0)}})()}),i)}async getMyIssuesForRepos(e,t){let i;let r=this.authProvider.id;if(!(this.maybeConnected??await this.isConnected()))return;let s=await this.getProvidersApi();if(r!==u.Q7.GitLab&&(s.isRepoIdsInput(e)||r===u.Q7.AzureDevOps&&!e.every(e=>null!=e.project&&null!=e.namespace))){h.Vy.warn(`Unsupported input for provider ${r}`,"getIssuesForRepos");return}if(r===u.Q7.AzureDevOps){let n=new Set,o=new Set;for(let t of e)n.add(t.namespace),o.add(t.project);if(n.size>1){h.Vy.warn(`Multiple organizations not supported for provider ${r}`,"getIssuesForRepos");return}if(0===n.size){h.Vy.warn(`No organizations found for provider ${r}`,"getIssuesForRepos");return}let a=n.values().next().value;if(t?.filters!=null){let e;if(!s.providerSupportsIssueFilters(r,t.filters)){h.Vy.warn(`Unsupported filters for provider ${r}`,"getIssuesForRepos");return}try{e=await s.getCurrentUserForInstance(r,a)}catch(e){h.Vy.error(e,"getIssuesForRepos");return}if(null==e){h.Vy.warn(`Unable to get current user for ${r}`,"getIssuesForRepos");return}let n=e.name;if(null==n){h.Vy.warn(`Unable to get user property for filter for ${r}`,"getIssuesForRepos");return}i={authorLogin:t.filters.includes(u.mN.Author)?n:void 0,assigneeLogins:t.filters.includes(u.mN.Assignee)?[n]:void 0,mentionLogin:t.filters.includes(u.mN.Mention)?n:void 0}}let l=JSON.parse(t?.cursor??"{}").cursors??[],c=Array.from(o.values()).map(e=>({namespace:a,project:e,cursor:void 0}));l.length>0&&(c=l);try{let e={cursors:[]},t=!1,r=[];return await Promise.all(c.map(async n=>{let o=await s.getIssuesForAzureProject(n.namespace,n.project,{...i,cursor:n.cursor});r.push(...o.values),o.paging?.more&&(t=!0,e.cursors.push({namespace:n.namespace,project:n.project,cursor:o.paging.cursor}))})),{values:r,paging:{more:t,cursor:JSON.stringify(e)}}}catch(e){h.Vy.error(e,"getIssuesForRepos");return}}if(t?.filters!=null){let e;try{e=await s.getCurrentUser(r)}catch(e){h.Vy.error(e,"getIssuesForRepos");return}if(null==e){h.Vy.warn(`Unable to get current user for ${r}`,"getIssuesForRepos");return}let n=e.username;if(null==n){h.Vy.warn(`Unable to get user property for filter for ${r}`,"getIssuesForRepos");return}i={authorLogin:t.filters.includes(u.mN.Author)?n:void 0,assigneeLogins:t.filters.includes(u.mN.Assignee)?[n]:void 0,mentionLogin:t.filters.includes(u.mN.Mention)?n:void 0}}if(s.getProviderIssuesPagingMode(r)===u.W3.Repo&&!s.isRepoIdsInput(e)){let n=JSON.parse(t?.cursor??"{}").cursors??[],o=e.map(e=>({repo:e,cursor:void 0}));n.length>0&&(o=n);try{let e={cursors:[]},n=!1,a=[];return await Promise.all(o.map(async o=>{let l=await s.getIssuesForRepo(r,o.repo,{...i,cursor:o.cursor,baseUrl:t?.customUrl});a.push(...l.values),l.paging?.more&&(n=!0,e.cursors.push({repo:o.repo,cursor:l.paging.cursor}))})),{values:a,paging:{more:n,cursor:JSON.stringify(e)}}}catch(e){h.Vy.error(e,"getIssuesForRepos");return}}try{return await s.getIssuesForRepos(r,e,{...i,cursor:t?.cursor,baseUrl:t?.customUrl})}catch(e){h.Vy.error(e,"getIssuesForRepos");return}}async getMyPullRequestsForRepos(e,t){let i;let r=this.authProvider.id;if(!(this.maybeConnected??await this.isConnected()))return;let s=await this.getProvidersApi();if(r!==u.Q7.GitLab&&(s.isRepoIdsInput(e)||r===u.Q7.AzureDevOps&&!e.every(e=>null!=e.project&&null!=e.namespace))){h.Vy.warn(`Unsupported input for provider ${r}`);return}if(t?.filters!=null){let n,o;if(!s.providerSupportsPullRequestFilters(r,t.filters)){h.Vy.warn(`Unsupported filters for provider ${r}`,"getPullRequestsForRepos");return}if(r===u.Q7.AzureDevOps){let t=new Set;for(let i of e)t.add(i.namespace);if(t.size>1){h.Vy.warn(`Multiple organizations not supported for provider ${r}`,"getPullRequestsForRepos");return}if(0===t.size){h.Vy.warn(`No organizations found for provider ${r}`,"getPullRequestsForRepos");return}let i=t.values().next().value;try{n=await s.getCurrentUserForInstance(r,i)}catch(e){h.Vy.error(e,"getPullRequestsForRepos");return}}else try{n=await s.getCurrentUser(r)}catch(e){h.Vy.error(e,"getPullRequestsForRepos");return}if(null==n){h.Vy.warn(`Unable to get current user for ${r}`,"getPullRequestsForRepos");return}switch(r){case u.Q7.Bitbucket:case u.Q7.AzureDevOps:o=n.id;break;default:o=n.username}if(null==o){h.Vy.warn(`Unable to get user property for filter for ${r}`,"getPullRequestsForRepos");return}i={authorLogin:t.filters.includes(u.XP.Author)?o:void 0,assigneeLogins:t.filters.includes(u.XP.Assignee)?[o]:void 0,reviewRequestedLogin:t.filters.includes(u.XP.ReviewRequested)?o:void 0,mentionLogin:t.filters.includes(u.XP.Mention)?o:void 0}}if(s.getProviderPullRequestsPagingMode(r)===u.W3.Repo&&!s.isRepoIdsInput(e)){let n=JSON.parse(t?.cursor??"{}").cursors??[],o=e.map(e=>({repo:e,cursor:void 0}));n.length>0&&(o=n);try{let e={cursors:[]},n=!1,a=[];return await Promise.all(o.map(async o=>{let l=await s.getPullRequestsForRepo(r,o.repo,{...i,cursor:o.cursor,baseUrl:t?.customUrl});a.push(...l.values),l.paging?.more&&(n=!0,e.cursors.push({repo:o.repo,cursor:l.paging.cursor}))})),{values:a,paging:{more:n,cursor:JSON.stringify(e)}}}catch(e){h.Vy.error(e,"getPullRequestsForRepos");return}}try{return s.getPullRequestsForRepos(r,e,{...i,cursor:t?.cursor,baseUrl:t?.customUrl})}catch(e){h.Vy.error(e,"getPullRequestsForRepos");return}}async searchMyPullRequests(e,t){let i=(0,c.dQ)();if(this.maybeConnected??await this.isConnected())try{let i=await this.searchProviderMyPullRequests(this._session,null!=e?Array.isArray(e)?e:[e]:void 0,t);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,i,void 0)}}};g([(0,a.G)(),(0,l.Yz)()],HostingIntegration.prototype,"getAccountForEmail",1),g([(0,a.G)(),(0,l.Yz)()],HostingIntegration.prototype,"getAccountForCommit",1),g([(0,l.Yz)()],HostingIntegration.prototype,"getDefaultBranch",1),g([(0,l.Yz)()],HostingIntegration.prototype,"getRepositoryMetadata",1),g([(0,l.Yz)()],HostingIntegration.prototype,"getPullRequestForBranch",1),g([(0,l.Yz)()],HostingIntegration.prototype,"getPullRequestForCommit",1),g([(0,l.Yz)()],HostingIntegration.prototype,"searchMyPullRequests",1)},552:(e,t,i)=>{i.r(t),i.d(t,{AzureDevOpsIntegration:()=>AzureDevOpsIntegration});var r=i(3916),s=i(65),n=i(1298);let o=n.Mt[n.Q7.AzureDevOps],a=Object.freeze({id:o.id,scopes:o.scopes});let AzureDevOpsIntegration=class AzureDevOpsIntegration extends s.T5{authProvider=a;id=n.Q7.AzureDevOps;key=this.id;name="Azure DevOps";get domain(){return o.domain}get apiBaseUrl(){return"https://dev.azure.com"}async getReposForAzureProject(e,t,i){if(this.maybeConnected??await this.isConnected())try{return await (await this.getProvidersApi()).getReposForAzureProject(e,t,{cursor:i?.cursor})}catch(e){r.Vy.error(e,"getReposForAzureProject");return}}async mergeProviderPullRequest(e,t,i){return Promise.resolve(!1)}async getProviderAccountForCommit(e,t,i,r){return Promise.resolve(void 0)}async getProviderAccountForEmail(e,t,i,r){return Promise.resolve(void 0)}async getProviderDefaultBranch(e,t){return Promise.resolve(void 0)}async getProviderIssueOrPullRequest(e,t,i){return Promise.resolve(void 0)}async getProviderPullRequestForBranch(e,t,i,r){return Promise.resolve(void 0)}async getProviderPullRequestForCommit(e,t,i){return Promise.resolve(void 0)}async getProviderRepositoryMetadata(e,t,i){return Promise.resolve(void 0)}async searchProviderMyPullRequests(e,t){return Promise.resolve(void 0)}async searchProviderMyIssues(e,t){return Promise.resolve(void 0)}}},7287:(e,t,i)=>{i.r(t),i.d(t,{BitbucketIntegration:()=>BitbucketIntegration});var r=i(65),s=i(1298);let n=s.Mt[s.Q7.Bitbucket],o=Object.freeze({id:n.id,scopes:n.scopes});let BitbucketIntegration=class BitbucketIntegration extends r.T5{authProvider=o;id=s.Q7.Bitbucket;key=this.id;name="Bitbucket";get domain(){return n.domain}get apiBaseUrl(){return"https://api.bitbucket.org/2.0"}async mergeProviderPullRequest(e,t,i){return Promise.resolve(!1)}async getProviderAccountForCommit(e,t,i,r){return Promise.resolve(void 0)}async getProviderAccountForEmail(e,t,i,r){return Promise.resolve(void 0)}async getProviderDefaultBranch(e,t){return Promise.resolve(void 0)}async getProviderIssueOrPullRequest(e,t,i){return Promise.resolve(void 0)}async getProviderPullRequestForBranch(e,t,i,r){return Promise.resolve(void 0)}async getProviderPullRequestForCommit(e,t,i){return Promise.resolve(void 0)}async getProviderRepositoryMetadata(e,t,i){return Promise.resolve(void 0)}async searchProviderMyPullRequests(e,t){return Promise.resolve(void 0)}async searchProviderMyIssues(e,t){return Promise.resolve(void 0)}}},6315:(e,t,i)=>{i.r(t),i.d(t,{GitHubEnterpriseIntegration:()=>GitHubEnterpriseIntegration,GitHubIntegration:()=>GitHubIntegration});var r=i(1398),s=i(304),n=i(8180),o=i(1014),a=i(65),l=i(1298),h=Object.defineProperty,c=Object.getOwnPropertyDescriptor;let u=l.Mt[l.Q7.GitHub],d=Object.freeze({id:u.id,scopes:u.scopes}),p=l.Mt[l.PY.GitHubEnterprise],g=Object.freeze({id:p.id,scopes:p.scopes});let GitHubIntegrationBase=class GitHubIntegrationBase extends a.T5{async getProviderAccountForCommit({accessToken:e},t,i,r){return(await this.container.github)?.getAccountForCommit(this,e,t.owner,t.name,i,{...r,baseUrl:this.apiBaseUrl})}async getProviderAccountForEmail({accessToken:e},t,i,r){return(await this.container.github)?.getAccountForEmail(this,e,t.owner,t.name,i,{...r,baseUrl:this.apiBaseUrl})}async getProviderDefaultBranch({accessToken:e},t){return(await this.container.github)?.getDefaultBranch(this,e,t.owner,t.name,{baseUrl:this.apiBaseUrl})}async getProviderIssueOrPullRequest({accessToken:e},t,i){return(await this.container.github)?.getIssueOrPullRequest(this,e,t.owner,t.name,Number(i),{baseUrl:this.apiBaseUrl})}async getProviderPullRequestForBranch({accessToken:e},t,r,s){let{include:n,...o}=s??{},a=(await Promise.resolve().then(i.bind(i,1116))).toGitHubPullRequestState;return(await this.container.github)?.getPullRequestForBranch(this,e,t.owner,t.name,r,{...o,include:n?.map(e=>a(e)),baseUrl:this.apiBaseUrl})}async getProviderPullRequestForCommit({accessToken:e},t,i){return(await this.container.github)?.getPullRequestForCommit(this,e,t.owner,t.name,i,{baseUrl:this.apiBaseUrl})}async getProviderRepositoryMetadata({accessToken:e},t,i){return(await this.container.github)?.getRepositoryMetadata(this,e,t.owner,t.name,{baseUrl:this.apiBaseUrl},i)}async searchProviderMyPullRequests({accessToken:e},t,i){return(await this.container.github)?.searchMyPullRequests(this,e,{repos:t?.map(e=>`${e.owner}/${e.name}`),baseUrl:this.apiBaseUrl},i)}async searchProviderMyIssues({accessToken:e},t,i){return(await this.container.github)?.searchMyIssues(this,e,{repos:t?.map(e=>`${e.owner}/${e.name}`),baseUrl:this.apiBaseUrl},i)}async mergeProviderPullRequest({accessToken:e},t,i){let r=t instanceof s.B9?t.nodeId:t.id,n=t instanceof s.B9?t.refs?.head?.sha:t.headRefSha;return null!=r&&null!=n&&((await this.container.github)?.mergePullRequest(this,e,r,n,{mergeMethod:i?.mergeMethod})??!1)}async getProviderCurrentAccount({accessToken:e},t){return(await this.container.github)?.getCurrentAccount(this,e,{...t,baseUrl:this.apiBaseUrl})}};let GitHubIntegration=class GitHubIntegration extends GitHubIntegrationBase{authProvider=d;id=l.Q7.GitHub;key=this.id;name="GitHub";get domain(){return u.domain}get apiBaseUrl(){return"https://api.github.com"}async refresh(){null==await r.authentication.getSession(this.authProvider.id,this.authProvider.scopes)&&this.maybeConnected?this.disconnect():super.refresh()}};let GitHubEnterpriseIntegration=class GitHubEnterpriseIntegration extends GitHubIntegrationBase{constructor(e,t,i){super(e,t),this._domain=i}authProvider=g;id=l.PY.GitHubEnterprise;key=`${this.id}:${this.domain}`;name="GitHub Enterprise";get domain(){return this._domain}get apiBaseUrl(){return`https://${this._domain}/api/v3`}async connect(){return!!await (0,o.KH)(this.container,`Rich integration with ${this.name} is a Pro feature.`,{source:"integrations",detail:{action:"connect",integration:this.id}})&&super.connect()}};((e,t,i,r)=>{for(var s,n=r>1?void 0:r?c(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&h(t,i,n)})([(0,n.Rm)()],GitHubEnterpriseIntegration.prototype,"connect",1)},6088:(e,t,i)=>{function r(){return"object"==typeof navigator&&"userAgent"in navigator?navigator.userAgent:"object"==typeof process&&void 0!==process.version?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}i.r(t),i.d(t,{GitHubApi:()=>GitHubApi});var s=`octokit-endpoint.js/0.0.0-development ${r()}`;function n(e){for(let t in e)void 0===e[t]&&delete e[t];return e}function o(e,t,i){var r;if("string"==typeof t){let[e,r]=t.split(" ");i=Object.assign(r?{method:e,url:r}:{url:e},i)}else i=Object.assign({},t);i.headers=(r=i.headers)?Object.keys(r).reduce((e,t)=>(e[t.toLowerCase()]=r[t],e),{}):{},n(i),n(i.headers);let s=function e(t,i){let r=Object.assign({},t);return Object.keys(i).forEach(s=>{(function(e){if("object"!=typeof e||null===e||"[object Object]"!==Object.prototype.toString.call(e))return!1;let t=Object.getPrototypeOf(e);if(null===t)return!0;let i=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return"function"==typeof i&&i instanceof i&&Function.prototype.call(i)===Function.prototype.call(e)})(i[s])&&s in t?r[s]=e(t[s],i[s]):Object.assign(r,{[s]:i[s]})}),r}(e||{},i);return"/graphql"===i.url&&(e&&e.mediaType.previews?.length&&(s.mediaType.previews=e.mediaType.previews.filter(e=>!s.mediaType.previews.includes(e)).concat(s.mediaType.previews)),s.mediaType.previews=(s.mediaType.previews||[]).map(e=>e.replace(/-preview/,""))),s}var a=/\{[^}]+\}/g;function l(e){return e.replace(/^\W+|\W+$/g,"").split(/,/)}function h(e,t){let i={__proto__:null};for(let r of Object.keys(e))-1===t.indexOf(r)&&(i[r]=e[r]);return i}function c(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(e){return/%[0-9A-Fa-f]/.test(e)||(e=encodeURI(e).replace(/%5B/g,"[").replace(/%5D/g,"]")),e}).join("")}function u(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function d(e,t,i){return(t="+"===e||"#"===e?c(t):u(t),i)?u(i)+"="+t:t}function p(e){return null!=e}function g(e){return";"===e||"&"===e||"?"===e}function m(e,t){var i=["+","#",".","/",";","?","&"];return"/"===(e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(e,r,s){if(!r)return c(s);{let e="",s=[];if(-1!==i.indexOf(r.charAt(0))&&(e=r.charAt(0),r=r.substr(1)),r.split(/,/g).forEach(function(i){var r=/([^:\*]*)(?::(\d+)|(\*))?/.exec(i);s.push(function(e,t,i,r){var s=e[i],n=[];if(p(s)&&""!==s){if("string"==typeof s||"number"==typeof s||"boolean"==typeof s)s=s.toString(),r&&"*"!==r&&(s=s.substring(0,parseInt(r,10))),n.push(d(t,s,g(t)?i:""));else if("*"===r)Array.isArray(s)?s.filter(p).forEach(function(e){n.push(d(t,e,g(t)?i:""))}):Object.keys(s).forEach(function(e){p(s[e])&&n.push(d(t,s[e],e))});else{let e=[];Array.isArray(s)?s.filter(p).forEach(function(i){e.push(d(t,i))}):Object.keys(s).forEach(function(i){p(s[i])&&(e.push(u(i)),e.push(d(t,s[i].toString())))}),g(t)?n.push(u(i)+"="+e.join(",")):0!==e.length&&n.push(e.join(","))}}else";"===t?p(s)&&n.push(u(i)):""===s&&("&"===t||"?"===t)?n.push(u(i)+"="):""===s&&n.push("");return n}(t,e,r[1],r[2]||r[3]))}),!e||"+"===e)return s.join(",");var n=",";return"?"===e?n="&":"#"!==e&&(n=e),(0!==s.length?e:"")+s.join(n)}}))?e:e.replace(/\/$/,"")}function f(e){let t,i=e.method.toUpperCase(),r=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),s=Object.assign({},e.headers),n=h(e,["method","baseUrl","url","headers","request","mediaType"]),o=function(e){let t=e.match(a);return t?t.map(l).reduce((e,t)=>e.concat(t),[]):[]}(r);r=({expand:m.bind(null,r)}).expand(n),/^http/.test(r)||(r=e.baseUrl+r);let c=h(n,Object.keys(e).filter(e=>o.includes(e)).concat("baseUrl"));if(!/application\/octet-stream/i.test(s.accept)&&(e.mediaType.format&&(s.accept=s.accept.split(/,/).map(t=>t.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),r.endsWith("/graphql")&&e.mediaType.previews?.length)){let t=s.accept.match(/[\w-]+(?=-preview)/g)||[];s.accept=t.concat(e.mediaType.previews).map(t=>{let i=e.mediaType.format?`.${e.mediaType.format}`:"+json";return`application/vnd.github.${t}-preview${i}`}).join(",")}return["GET","HEAD"].includes(i)?r=function(e,t){let i=/\?/.test(e)?"&":"?",r=Object.keys(t);return 0===r.length?e:e+i+r.map(e=>"q"===e?"q="+t.q.split("+").map(encodeURIComponent).join("+"):`${e}=${encodeURIComponent(t[e])}`).join("&")}(r,c):"data"in c?t=c.data:Object.keys(c).length&&(t=c),s["content-type"]||void 0===t||(s["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(i)&&void 0===t&&(t=""),Object.assign({method:i,url:r,headers:s},void 0!==t?{body:t}:null,e.request?{request:e.request}:null)}function w(e,t,i){return f(o(e,t,i))}var v=function e(t,i){let r=o(t,i);return Object.assign(w.bind(null,r),{DEFAULTS:r,defaults:e.bind(null,r),merge:o.bind(null,r),parse:f})}(null,{method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":s},mediaType:{format:""}});let RequestError=class RequestError extends Error{name;status;request;response;constructor(e,t,i){super(e),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="HttpError",this.status=t,"response"in i&&(this.response=i.response);let r=Object.assign({},i.request);i.request.headers.authorization&&(r.headers=Object.assign({},i.request.headers,{authorization:i.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),r.url=r.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=r}};function y(e){let t,i;let r=e.request&&e.request.log?e.request.log:console,s=e.request?.parseSuccessResponseBody!==!1;((function(e){if("object"!=typeof e||null===e||"[object Object]"!==Object.prototype.toString.call(e))return!1;let t=Object.getPrototypeOf(e);if(null===t)return!0;let i=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return"function"==typeof i&&i instanceof i&&Function.prototype.call(i)===Function.prototype.call(e)})(e.body)||Array.isArray(e.body))&&(e.body=JSON.stringify(e.body));let n={},{fetch:o}=globalThis;if(e.request?.fetch&&(o=e.request.fetch),!o)throw Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");return o(e.url,{method:e.method,body:e.body,redirect:e.request?.redirect,headers:Object.fromEntries(Object.entries(e.headers).map(([e,t])=>[e,String(t)])),signal:e.request?.signal,...e.body&&{duplex:"half"}}).then(async o=>{for(let e of(i=o.url,t=o.status,o.headers))n[e[0]]=e[1];if("deprecation"in n){let t=n.link&&n.link.match(/<([^>]+)>; rel="deprecation"/),i=t&&t.pop();r.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${n.sunset}${i?`. See ${i}`:""}`)}if(204!==t&&205!==t){if("HEAD"===e.method){if(t<400)return;throw new RequestError(o.statusText,t,{response:{url:i,status:t,headers:n,data:void 0},request:e})}if(304===t)throw new RequestError("Not modified",t,{response:{url:i,status:t,headers:n,data:await b(o)},request:e});if(t>=400){let r;let s=await b(o);throw new RequestError("string"==typeof s?s:(r="documentation_url"in s?` - ${s.documentation_url}`:"","message"in s)?Array.isArray(s.errors)?`${s.message}: ${s.errors.map(JSON.stringify).join(", ")}${r}`:`${s.message}${r}`:`Unknown error: ${JSON.stringify(s)}`,t,{response:{url:i,status:t,headers:n,data:s},request:e})}return s?await b(o):o.body}}).then(e=>({status:t,url:i,headers:n,data:e})).catch(t=>{if(t instanceof RequestError||"AbortError"===t.name)throw t;let i=t.message;throw"TypeError"===t.name&&"cause"in t&&(t.cause instanceof Error?i=t.cause.message:"string"==typeof t.cause&&(i=t.cause)),new RequestError(i,500,{request:e})})}async function b(e){let t=e.headers.get("content-type");return/application\/json/.test(t)?e.json().catch(()=>e.text()).catch(()=>""):!t||/^text\/|charset=utf-8$/.test(t)?e.text():e.arrayBuffer()}var C=function e(t,i){let r=t.defaults(i);return Object.assign(function(t,i){let s=r.merge(t,i);if(!s.request||!s.request.hook)return y(r.parse(s));let n=(e,t)=>y(r.parse(r.merge(e,t)));return Object.assign(n,{endpoint:r,defaults:e.bind(null,r)}),s.request.hook(n,s)},{endpoint:r,defaults:e.bind(null,r)})}(v,{headers:{"user-agent":`octokit-request.js/0.0.0-development ${r()}`}}),R=class extends Error{constructor(e,t,i){super(`Request failed due to following response errors:
`+i.errors.map(e=>` - ${e.message}`).join("\n")),this.request=e,this.headers=t,this.response=i,this.errors=i.errors,this.data=i.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}name="GraphqlResponseError";errors;data},S=["method","baseUrl","url","headers","request","query","mediaType"],P=["query","method","url"],A=/\/api\/v3\/?$/,k=function e(t,i){let r=t.defaults(i);return Object.assign((e,t)=>(function(e,t,i){if(i){if("string"==typeof t&&"query"in i)return Promise.reject(Error('[@octokit/graphql] "query" cannot be used as variable name'));for(let e in i)if(P.includes(e))return Promise.reject(Error(`[@octokit/graphql] "${e}" cannot be used as variable name`))}let r="string"==typeof t?Object.assign({query:t},i):t,s=Object.keys(r).reduce((e,t)=>(S.includes(t)?e[t]=r[t]:(e.variables||(e.variables={}),e.variables[t]=r[t]),e),{}),n=r.baseUrl||e.endpoint.DEFAULTS.baseUrl;return A.test(n)&&(s.url=n.replace(A,"/api/graphql")),e(s).then(e=>{if(e.data.errors){let t={};for(let i of Object.keys(e.headers))t[i]=e.headers[i];throw new R(s,t,e.data)}return e.data.data})})(r,e,t),{defaults:e.bind(null,r),endpoint:r.endpoint})}(C,{headers:{"user-agent":`octokit-graphql.js/0.0.0-development ${r()}`},method:"POST",url:"/graphql"}),D=i(1398),T=i(7609),_=i(3794),I=i(8803),$=i(304),E=i(6645),O=i(4862),x=i(3536),F=i(4832),B=i(8180),L=i(4026),U=i(3916),W=i(3446),q=i(937),M=i(7279),N=i(4766),H=i(1116),G=Object.defineProperty,V=Object.getOwnPropertyDescriptor,Q=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?V(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&G(t,i,n),n};let j=Object.freeze({values:[]}),z=Object.freeze({ranges:[]}),Y=`
createdAt
closed
closedAt
id
number
title
updatedAt
url
state
`,K=`
${Y}
assignees(first: 10) {
	nodes {
		login
		avatarUrl
		url
	}
}
author {
	login
	avatarUrl
	url
}
baseRefName
baseRefOid
baseRepository {
	name
	owner {
		login
	}
	url
}
checksUrl
isDraft
isCrossRepository
isReadByViewer
headRefName
headRefOid
headRepository {
	name
	owner {
		login
	}
	url
}
permalink
additions
deletions
mergeable
viewerCanUpdate
mergedAt
mergedBy {
	login
}
reactions(content: THUMBS_UP) {
	totalCount
}
repository {
	isFork
	name
	owner {
		login
	}
	viewerPermission
}
reviewDecision
reviewRequests(first: 10) {
	nodes {
		asCodeOwner
		id
		requestedReviewer {
			... on User {
				login
				avatarUrl
				url
			}
		}
	}
}
latestReviews (first: 10) {
	nodes {
		author {
			login
			avatarUrl
			url
		}
		state
	}
}
totalCommentsCount
commits(last: 1) {
	nodes {
		commit {
			oid
			statusCheckRollup {
				state
			}
		}
	}
}
`,J=`
createdAt
closed
closedAt
id
number
title
updatedAt
url
state
`,Z=`
${J}
assignees(first: 100) {
	nodes {
		login
		url
		avatarUrl
	}
}
author {
	login
	avatarUrl
	url
}
comments {
	totalCount
}
labels(first: 20) {
	nodes {
		color
		name
	}
}
reactions(content: THUMBS_UP) {
	totalCount
}
repository {
	name
	owner {
		login
	}
	viewerPermission
}
`;let GitHubApi=class GitHubApi{_onDidReauthenticate=new D.EventEmitter;get onDidReauthenticate(){return this._onDidReauthenticate.event}_disposable;constructor(e){this._disposable=F.H.onDidChangeAny(e=>{(F.H.changedCore(e,["http.proxy","http.proxyStrictSSL"])||F.H.changed(e,["outputLevel","proxy"]))&&this.resetCaches()})}dispose(){this._disposable.dispose()}resetCaches(){this._proxyAgent=null,this._defaults.clear(),this._enterpriseVersions.clear()}_proxyAgent=null;get proxyAgent(){if(!_.HZ)return null===this._proxyAgent&&(this._proxyAgent=(0,T.cQ)()),this._proxyAgent}async getCurrentAccount(e,t,i){let r=(0,W.dQ)();try{let s=`query getCurrentAccount($avatarSize: Int) {
	viewer {
		name
		email
		login
		avatarUrl(size: $avatarSize)
	}
}`,n=await this.graphql(e,t,s,{...i},r);if(n?.viewer==null)return;return{provider:e,name:n.viewer.name??void 0,email:n.viewer.email??void 0,avatarUrl:!n.viewer.avatarUrl||X(i)?n.viewer.avatarUrl??void 0:n.viewer.email&&i?.baseUrl!=null?await this.createEnterpriseAvatarUrl(e,t,i.baseUrl,n.viewer.email,i.avatarSize):void 0,username:n.viewer.login??void 0}}catch(t){if(t instanceof I.g3)return;throw this.handleException(t,e,r)}}async getAccountForCommit(e,t,i,r,s,n){let o=(0,W.dQ)();try{let a=`query getAccountForCommit(
	$owner: String!
	$repo: String!
	$ref: GitObjectID!
	$avatarSize: Int
) {
	repository(name: $repo, owner: $owner) {
		object(oid: $ref) {
			... on Commit {
				author {
					name
					email
					avatarUrl(size: $avatarSize)
					user {
						login
					}
				}
			}
		}
	}
}`,l=await this.graphql(e,t,a,{...n,owner:i,repo:r,ref:s},o),h=l?.repository?.object?.author;if(null==h)return;return{provider:e,name:h.name??void 0,email:h.email??void 0,avatarUrl:!h.avatarUrl||X(n)?h.avatarUrl??void 0:h.email&&n?.baseUrl!=null?await this.createEnterpriseAvatarUrl(e,t,n.baseUrl,h.email,n.avatarSize):void 0,username:h.user?.login??void 0}}catch(t){if(t instanceof I.g3)return;throw this.handleException(t,e,o)}}async getAccountForEmail(e,t,i,r,s,n){let o=(0,W.dQ)();try{let a=`query getAccountForEmail(
	$emailQuery: String!
	$avatarSize: Int
) {
	search(type: USER, query: $emailQuery, first: 1) {
		nodes {
			... on User {
				name
				email
				avatarUrl(size: $avatarSize)
				login
			}
		}
	}
}`,l=await this.graphql(e,t,a,{...n,owner:i,repo:r,emailQuery:`in:email ${s}`},o),h=l?.search?.nodes?.[0];if(null==h)return;return{provider:e,name:h.name??void 0,email:h.email??void 0,avatarUrl:!h.avatarUrl||X(n)?h.avatarUrl??void 0:h.email&&n?.baseUrl!=null?await this.createEnterpriseAvatarUrl(e,t,n.baseUrl,h.email,n.avatarSize):void 0,username:h.login??void 0}}catch(t){if(t instanceof I.g3)return;throw this.handleException(t,e,o)}}async getDefaultBranch(e,t,i,r,s){let n=(0,W.dQ)();try{let o=`query getDefaultBranch(
	$owner: String!
	$repo: String!
) {
	repository(name: $repo, owner: $owner) {
		defaultBranchRef {
			name
		}
	}
}`,a=await this.graphql(e,t,o,{...s,owner:i,repo:r},n),l=a?.repository?.defaultBranchRef?.name??void 0;if(null==l)return;return{provider:e,name:l}}catch(t){if(t instanceof I.g3)return;throw this.handleException(t,e,n)}}async getIssueOrPullRequest(e,t,i,r,s,n){let o=(0,W.dQ)();try{let a=`query getIssueOrPullRequest(
	$owner: String!
	$repo: String!
	$number: Int!
) {
	repository(name: $repo, owner: $owner) {
		issueOrPullRequest(number: $number) {
			__typename
			... on Issue {
				${J}
			}
			... on PullRequest {
				${Y}
			}
		}
	}
}`,l=await this.graphql(e,t,a,{...n,owner:i,repo:r,number:s},o),h=l?.repository?.issueOrPullRequest;if(null==h)return;return{provider:e,type:"PullRequest"===h.__typename?"pullrequest":"issue",id:String(h.number),nodeId:h.id,createdDate:new Date(h.createdAt),updatedDate:new Date(h.updatedAt),title:h.title,closed:h.closed,closedDate:null==h.closedAt?void 0:new Date(h.closedAt),url:h.url,state:(0,H.fromGitHubIssueOrPullRequestState)(h.state)}}catch(t){if(t instanceof I.g3)return;throw this.handleException(t,e,o)}}async getPullRequestForBranch(e,t,i,r,s,n){let o=(0,W.dQ)();try{let a=`query getPullRequestForBranch(
	$owner: String!
	$repo: String!
	$branch: String!
	$limit: Int!
	$include: [PullRequestState!]
	$avatarSize: Int
) {
	repository(name: $repo, owner: $owner) {
		ref(qualifiedName: $branch) {
			associatedPullRequests(first: $limit, orderBy: {field: UPDATED_AT, direction: DESC}, states: $include) {
				nodes {
					author {
						login
						avatarUrl(size: $avatarSize)
						url
					}
					createdAt
					permalink
					number
					id
					title
					state
					updatedAt
					closedAt
					mergedAt
					baseRefName
					baseRefOid
					baseRepository {
						name
						owner {
							login
						}
						url
					}
					headRefName
					headRefOid
					headRepository {
						name
						owner {
							login
						}
						url
					}
					repository {
						isFork
						name
						owner {
							login
						}
						viewerPermission
					}
					isCrossRepository
				}
			}
		}
	}
}`,l=await this.graphql(e,t,a,{...n,owner:i,repo:r,branch:`refs/heads/${s}`,limit:10},o),h=l?.repository?.ref?.associatedPullRequests?.nodes?.filter(e=>null!=e&&(!e.repository.isFork||e.repository.owner.login===i));if(null==h||0===h.length)return;return h.length>1&&h.sort((e,t)=>(e.repository.owner.login===i?-1:1)-(t.repository.owner.login===i?-1:1)||("OPEN"===e.state?-1:1)-("OPEN"===t.state?-1:1)||new Date(t.updatedAt).getTime()-new Date(e.updatedAt).getTime()),(0,H.fromGitHubPullRequest)(h[0],e)}catch(t){if(t instanceof I.g3)return;throw this.handleException(t,e,o)}}async getPullRequestForCommit(e,t,i,r,s,n,o){let a=(0,W.dQ)();try{let l=`query getPullRequestForCommit(
	$owner: String!
	$repo: String!
	$ref: GitObjectID!
	$avatarSize: Int
) {
	repository(name: $repo, owner: $owner) {
		object(oid: $ref) {
			... on Commit {
				associatedPullRequests(first: 2, orderBy: {field: UPDATED_AT, direction: DESC}) {
					nodes {
						author {
							login
							avatarUrl(size: $avatarSize)
							url
						}
						createdAt
						permalink
						number
						id
						title
						state
						updatedAt
						closedAt
						mergedAt
						baseRefName
						baseRefOid
						baseRepository {
							name
							owner {
								login
							}
							url
						}
						headRefName
						headRefOid
						headRepository {
							name
							owner {
								login
							}
							url
						}
						repository {
							name
							isFork
							owner {
								login
							}
							viewerPermission
						}
						isCrossRepository
					}
				}
			}
		}
	}
}`,h=await this.graphql(e,t,l,{...n,owner:i,repo:r,ref:s},a,o),c=h?.repository?.object?.associatedPullRequests?.nodes?.filter(e=>null!=e&&(!e.repository.isFork||e.repository.owner.login===i));if(null==c||0===c.length)return;return c.length>1&&c.sort((e,t)=>(e.repository.owner.login===i?-1:1)-(t.repository.owner.login===i?-1:1)||("MERGED"===e.state?-1:1)-("MERGED"===t.state?-1:1)||new Date(t.updatedAt).getTime()-new Date(e.updatedAt).getTime()),(0,H.fromGitHubPullRequest)(c[0],e)}catch(t){if(t instanceof I.g3)return;throw this.handleException(t,e,a)}}async getRepositoryMetadata(e,t,i,r,s,n){let o=(0,W.dQ)();try{let a=`query getRepositoryMetadata(
	$owner: String!
	$repo: String!
) {
	repository(name: $repo, owner: $owner) {
		owner {
			login
		}
		name
		parent {
			owner {
				login
			}
			name
		}
	}
}`,l=await this.graphql(e,t,a,{...s,owner:i,repo:r},o,n),h=l?.repository??void 0;if(null==h)return;return{provider:e,owner:h.owner.login,name:h.name,isFork:null!=h.parent,parent:null!=h.parent?{owner:h.parent.owner.login,name:h.parent.name}:void 0}}catch(t){if(t instanceof I.g3)return;throw this.handleException(t,e,o)}}async getBlame(e,t,i,r,s){let n=(0,W.dQ)();try{let o=`query getBlameRanges(
	$owner: String!
	$repo: String!
	$ref: String!
	$path: String!
) {
	viewer { name }
	repository(owner: $owner, name: $repo) {
		object(expression: $ref) {
			...on Commit {
				blame(path: $path) {
					ranges {
						startingLine
						endingLine
						commit {
							oid
							parents(first: 3) { nodes { oid } }
							message
							additions
							changedFiles
							deletions
							author {
								avatarUrl
								date
								email
								name
							}
							committer {
								date
								email
								name
							}
						}
					}
				}
			}
		}
	}
}`,a=await this.graphql(void 0,e,o,{owner:t,repo:i,ref:r,path:s},n);if(null==a)return z;let l=a.repository?.object?.blame?.ranges;if(null==l||0===l.length)return{ranges:[],viewer:a.viewer?.name};return{ranges:l,viewer:a.viewer?.name}}catch(e){if(e instanceof I.g3)return z;throw this.handleException(e,void 0,n)}}async getBranches(e,t,i,r){let s=(0,W.dQ)();try{let n=`query getBranches(
	$owner: String!
	$repo: String!
	$branchQuery: String
	$cursor: String
	$limit: Int = 100
) {
	repository(owner: $owner, name: $repo) {
		refs(query: $branchQuery, refPrefix: "refs/heads/", first: $limit, after: $cursor) {
			pageInfo {
				endCursor
				hasNextPage
			}
			nodes {
				name
				target {
					oid
					...on Commit {
						authoredDate
						committedDate
					}
				}
			}
		}
	}
}`,o=await this.graphql(void 0,e,n,{owner:t,repo:i,branchQuery:r?.query,cursor:r?.cursor,limit:Math.min(100,r?.limit??100)},s);if(null==o)return j;let a=o.repository?.refs;if(null==a)return j;return{paging:{cursor:a.pageInfo.endCursor,more:a.pageInfo.hasNextPage},values:a.nodes}}catch(e){if(e instanceof I.g3)return j;throw this.handleException(e,void 0,s)}}async getCommit(e,t,i,r){let s=(0,W.dQ)();try{let n=await this.request(void 0,e,"GET /repos/{owner}/{repo}/commits/{ref}",{owner:t,repo:i,ref:r},s),o=n?.data;if(null==o)return;let{commit:a}=o;return{oid:o.sha,parents:{nodes:o.parents.map(e=>({oid:e.sha}))},message:a.message,additions:o.stats?.additions,changedFiles:o.files?.length,deletions:o.stats?.deletions,author:{avatarUrl:o.author?.avatar_url??void 0,date:a.author?.date??new Date().toString(),email:a.author?.email??void 0,name:a.author?.name??""},committer:{date:a.committer?.date??new Date().toString(),email:a.committer?.email??void 0,name:a.committer?.name??""},files:o.files}}catch(e){if(e instanceof I.g3)return;throw this.handleException(e,void 0,s)}}async getCommitForFile(e,t,i,r,s){if((0,E.HH)(r))return this.getCommit(e,t,i,r);let n=await this.getCommits(e,t,i,r,{limit:1,path:s});if(0!==n.values.length)return{...await this.getCommit(e,t,i,n.values[0].oid)??n.values[0],viewer:n.viewer}}async getCommitBranches(e,t,i,r,s,n){let o=(0,W.dQ)();try{let a=`query getCommitBranches(
	$owner: String!
	$repo: String!
	$since: GitTimestamp!
	$until: GitTimestamp!
) {
	repository(owner: $owner, name: $repo) {
		refs(first: 20, refPrefix: "refs/heads/") {
			nodes {
				name
				target {
					... on Commit {
						history(first: ${"contains"===s?10:1}, since: $since until: $until) {
							nodes { oid }
						}
					}
				}
			}
		}
	}
}`,l=await this.graphql(void 0,e,a,{owner:t,repo:i,since:n?.toISOString(),until:n?.toISOString()},o),h=l?.repository?.refs?.nodes;if(null==h)return[];let c=[];for(let e of h)for(let t of e.target.history.nodes)if(r.includes(t.oid)){c.push(e.name);break}return c}catch(e){if(e instanceof I.g3)return[];throw this.handleException(e,void 0,o)}}async getCommitCount(e,t,i,r){let s=(0,W.dQ)();try{let n=`query getCommitCount(
	$owner: String!
	$repo: String!
	$ref: String!
) {
	repository(owner: $owner, name: $repo) {
		ref(qualifiedName: $ref) {
			target {
				... on Commit {
					history(first: 1) {
						totalCount
					}
				}
			}
		}
	}
}`,o=await this.graphql(void 0,e,n,{owner:t,repo:i,ref:r},s);return o?.repository?.ref?.target.history.totalCount}catch(e){if(e instanceof I.g3)return;throw this.handleException(e,void 0,s)}}async getCommitOnBranch(e,t,i,r,s,n,o){let a=(0,W.dQ)();try{let l=`query getCommitOnBranch(
	$owner: String!
	$repo: String!
	$ref: String!
	$since: GitTimestamp!
	$until: GitTimestamp!
) {
	repository(owner: $owner, name: $repo) {
		ref(qualifiedName: $ref) {
			target {
				... on Commit {
					history(first: ${"contains"===n?100:1}, since: $since until: $until) {
						nodes { oid }
					}
				}
			}
		}
	}
}`,h=await this.graphql(void 0,e,l,{owner:t,repo:i,ref:`refs/heads/${r}`,since:o?.toISOString(),until:o?.toISOString()},a),c=h?.repository?.ref.target.history.nodes;if(null==c)return[];let u=[];for(let e of c)if(s.includes(e.oid)){u.push(r);break}return u}catch(e){if(e instanceof I.g3)return[];throw this.handleException(e,void 0,a)}}async getCommits(e,t,i,r,s){let n=(0,W.dQ)();if(s?.limit===1&&s?.path==null)return this.getCommitsCoreSingle(e,t,i,r);try{let o;let a=`query getCommits(
	$owner: String!
	$repo: String!
	$ref: String!
	$path: String
	$author: CommitAuthor
	$after: String
	$before: String
	$limit: Int = 100
	$since: GitTimestamp
	$until: GitTimestamp
) {
	viewer { name }
	repository(name: $repo, owner: $owner) {
		object(expression: $ref) {
			... on Commit {
				history(first: $limit, author: $author, path: $path, after: $after, before: $before, since: $since, until: $until) {
					pageInfo {
						startCursor
						endCursor
						hasNextPage
						hasPreviousPage
					}
					nodes {
						... on Commit {
							oid
							message
							parents(first: 3) { nodes { oid } }
							additions
							changedFiles
							deletions
							author {
								avatarUrl
								date
								email
								name
							}
							committer {
								 date
								 email
								 name
							 }
						}
					}
				}
			}
		}
	}
}`;if(s?.authors!=null){if(1===s.authors.length){let[e]=s.authors;o={id:e.id,emails:e.email?[e.email]:void 0}}else{let e=s.authors.filter(e=>e.email).map(e=>e.email);o=e.length?{emails:e}:void 0}}let l=await this.graphql(void 0,e,a,{owner:t,repo:i,ref:r,after:s?.after,before:s?.before,path:s?.path,author:o,limit:Math.min(100,s?.limit??100),since:"string"==typeof s?.since?s?.since:s?.since?.toISOString(),until:"string"==typeof s?.until?s?.until:s?.until?.toISOString()},n),h=l?.repository?.object?.history;if(null==h)return j;return{paging:null!=h.pageInfo.endCursor?{cursor:h.pageInfo.endCursor??void 0,more:h.pageInfo.hasNextPage}:void 0,values:h.nodes,viewer:l?.viewer.name}}catch(e){if(e instanceof I.g3)return j;throw this.handleException(e,void 0,n)}}async getCommitsCoreSingle(e,t,i,r){let s=(0,W.dQ)();try{let n=`query getCommit(
	$owner: String!
	$repo: String!
	$ref: String!
) {
	viewer { name }
	repository(name: $repo owner: $owner) {
		object(expression: $ref) {
			...on Commit {
				oid
				parents(first: 3) { nodes { oid } }
				message
				additions
				changedFiles
				deletions
				author {
					avatarUrl
					date
					email
					name
				}
				committer {
					date
					email
					name
				}
			}
		}
	}
}`,o=await this.graphql(void 0,e,n,{owner:t,repo:i,ref:r},s);if(null==o)return j;let a=o.repository?.object;return null!=a?{values:[a],viewer:o.viewer.name}:j}catch(e){if(e instanceof I.g3)return j;throw this.handleException(e,void 0,s)}}async getCommitRefs(e,t,i,r,s){let n=(0,W.dQ)();try{let o=`query getCommitRefs(
	$owner: String!
	$repo: String!
	$ref: String!
	$after: String
	$before: String
	$first: Int
	$last: Int
	$path: String
	$since: GitTimestamp
	$until: GitTimestamp
) {
	repository(name: $repo, owner: $owner) {
		object(expression: $ref) {
			... on Commit {
				history(first: $first, last: $last, path: $path, since: $since, until: $until, after: $after, before: $before) {
					pageInfo { startCursor, endCursor, hasNextPage, hasPreviousPage }
					totalCount
					nodes { oid }
				}
			}
		}
	}
}`,a=await this.graphql(void 0,e,o,{owner:t,repo:i,ref:r,path:s?.path,first:s?.first,last:s?.last,after:s?.after,before:s?.before,since:s?.since,until:s?.until},n),l=a?.repository?.object?.history;if(null==l)return;return{pageInfo:l.pageInfo,totalCount:l.totalCount,values:l.nodes}}catch(e){if(e instanceof I.g3)return;throw this.handleException(e,void 0,n)}}async getCommitTags(e,t,i,r,s){let n=(0,W.dQ)();try{let o=`query getCommitTags(
	$owner: String!
	$repo: String!
	$since: GitTimestamp!
	$until: GitTimestamp!
) {
	repository(owner: $owner, name: $repo) {
		refs(first: 20, refPrefix: "refs/tags/") {
			nodes {
				name
				target {
					... on Commit {
						history(first: 3, since: $since until: $until) {
							nodes { oid }
						}
					}
				}
			}
		}
	}
}`,a=await this.graphql(void 0,e,o,{owner:t,repo:i,since:s.toISOString(),until:s.toISOString()},n),l=a?.repository?.refs?.nodes;if(null==l)return[];let h=[];for(let e of l)for(let t of e.target.history.nodes)if(t.oid===r){h.push(e.name);break}return h}catch(e){if(e instanceof I.g3)return[];throw this.handleException(e,void 0,n)}}async getNextCommitRefs(e,t,i,r,s,n){let o;let a=await this.getCommitDate(e,t,i,n);if(null==a)return[];let l=await this.getCommitRefs(e,t,i,r,{path:s,first:1,since:a});if(null==l)return[];let h=`${l.pageInfo.startCursor.split(" ",1)[0]} ${l.totalCount}`;if([,o]=h.split(" ",2),o=Math.min(parseInt(o,10),5),null==(l=await this.getCommitRefs(e,t,i,r,{path:s,last:o,before:h})))return[];let c=[];for(let{oid:e}of l.values){if(e===n)break;c.push(e)}return c.reverse()}async getCommitDate(e,t,i,r){let s=(0,W.dQ)();try{let n=`query getCommitDate(
	$owner: String!
	$repo: String!
	$sha: GitObjectID!
) {
	repository(name: $repo, owner: $owner) {
		object(oid: $sha) {
			... on Commit { committer { date } }
		}
	}
}`,o=await this.graphql(void 0,e,n,{owner:t,repo:i,sha:r},s);return o?.repository?.object?.committer.date}catch(e){if(e instanceof I.g3)return;throw this.handleException(e,void 0,s)}}async getContributors(e,t,i){let r=(0,W.dQ)();try{let s=await this.request(void 0,e,"GET /repos/{owner}/{repo}/contributors",{owner:t,repo:i,per_page:100},r),n=s?.data;if(null==n)return[];return s.data}catch(e){if(e instanceof I.g3)return[];throw this.handleException(e,void 0,r)}}async getDefaultBranchName(e,t,i){let r=(0,W.dQ)();try{let s=`query getDefaultBranch(
	$owner: String!
	$repo: String!
) {
	repository(owner: $owner, name: $repo) {
		defaultBranchRef {
			name
		}
	}
}`,n=await this.graphql(void 0,e,s,{owner:t,repo:i},r);if(null==n)return;return n.repository?.defaultBranchRef?.name??void 0}catch(e){if(e instanceof I.g3)return;throw this.handleException(e,void 0,r)}}async getCurrentUser(e,t,i){let r=(0,W.dQ)();try{let s=`query getCurrentUser(
	$owner: String!
	$repo: String!
) {
	viewer { name, email, login, id }
	repository(owner: $owner, name: $repo) { viewerPermission }
}`,n=await this.graphql(void 0,e,s,{owner:t,repo:i},r);if(null==n)return;return{name:n.viewer?.name,email:n.viewer?.email,username:n.viewer?.login,id:n.viewer?.id}}catch(e){if(e instanceof I.g3)return;throw this.handleException(e,void 0,r)}}async getRepositoryVisibility(e,t,i){let r=(0,W.dQ)();try{let s=`query getRepositoryVisibility(
	$owner: String!
	$repo: String!
) {
	repository(owner: $owner, name: $repo) {
		visibility
	}
}`,n=await this.graphql(void 0,e,s,{owner:t,repo:i},r);if(n?.repository?.visibility==null)return;return"PUBLIC"===n.repository.visibility?"public":"private"}catch(e){if(e instanceof I.g3)return;throw this.handleException(e,void 0,r)}}async getTags(e,t,i,r){let s=(0,W.dQ)();try{let n=`query getTags(
	$owner: String!
	$repo: String!
	$tagQuery: String
	$cursor: String
	$limit: Int = 100
) {
	repository(owner: $owner, name: $repo) {
		refs(query: $tagQuery, refPrefix: "refs/tags/", first: $limit, after: $cursor, orderBy: { field: TAG_COMMIT_DATE, direction: DESC }) {
			pageInfo {
				endCursor
				hasNextPage
			}
			nodes {
				name
				target {
					oid
					...on Tag {
						message
						tagger { date }
						target {
					...on Commit {
								oid
						authoredDate
						committedDate
						message
					}
						}
					}
				}
			}
		}
	}
}`,o=await this.graphql(void 0,e,n,{owner:t,repo:i,tagQuery:r?.query,cursor:r?.cursor,limit:Math.min(100,r?.limit??100)},s);if(null==o)return j;let a=o.repository?.refs;if(null==a)return j;return{paging:{cursor:a.pageInfo.endCursor,more:a.pageInfo.hasNextPage},values:a.nodes}}catch(e){if(e instanceof I.g3)return j;throw this.handleException(e,void 0,s)}}async resolveReference(e,t,i,r,s){let n=(0,W.dQ)();try{if(!s){let s=`query resolveReference(
	$owner: String!
	$repo: String!
	$ref: String!
) {
	repository(owner: $owner, name: $repo) {
		object(expression: $ref) {
			oid
		}
	}
}`,o=await this.graphql(void 0,e,s,{owner:t,repo:i,ref:r},n);return o?.repository?.object?.oid??void 0}let o=`query resolveReference(
	$owner: String!
	$repo: String!
	$ref: String!
	$path: String!
) {
	repository(owner: $owner, name: $repo) {
		object(expression: $ref) {
			... on Commit {
				history(first: 1, path: $path) {
					nodes { oid }
				}
			}
		}
	}
}`,a=await this.graphql(void 0,e,o,{owner:t,repo:i,ref:r,path:s},n);return a?.repository?.object?.history.nodes?.[0]?.oid??void 0}catch(e){if(e instanceof I.g3)return;throw this.handleException(e,void 0,n)}}async searchCommits(e,t,i){let r,s,n;let o=(0,W.dQ)(),a=Math.min(100,i?.limit??100);i?.cursor!=null?([r,s,n]=i.cursor.split(" ",3),r=parseInt(r,10),s=parseInt(s,10),n=parseInt(n,10)):(r=1,s=a,n=0);try{let a=await this.request(void 0,e,"GET /search/commits",{q:t,sort:i?.sort,order:i?.order,per_page:s,page:r},o),l=a?.data;if(null==l||0===l.items.length)return;let h=l.items.map(e=>({oid:e.sha,parents:{nodes:e.parents.map(e=>({oid:e.sha}))},message:e.commit.message,author:{avatarUrl:e.author?.avatar_url??void 0,date:e.commit.author?.date??e.commit.author?.date??new Date().toString(),email:e.author?.email??e.commit.author?.email??void 0,name:e.author?.name??e.commit.author?.name??""},committer:{date:e.commit.committer?.date??e.committer?.date??new Date().toString(),email:e.committer?.email??e.commit.committer?.email??void 0,name:e.committer?.name??e.commit.committer?.name??""}})),c=n+l.items.length,u=l.incomplete_results||l.total_count>c;return{pageInfo:{startCursor:`${r} ${s} ${n}`,endCursor:u?`${r+1} ${s} ${c}`:void 0,hasPreviousPage:l.total_count>0&&r>1,hasNextPage:u},totalCount:l.total_count,values:h}}catch(e){if(e instanceof I.g3)return;throw this.handleException(e,void 0,o)}}async searchCommitShas(e,t,i){let r,s,n;let o=(0,W.dQ)(),a=Math.min(100,i?.limit??100);i?.cursor!=null?([r,s,n]=i.cursor.split(" ",3),r=parseInt(r,10),s=parseInt(s,10),n=parseInt(n,10)):(r=1,s=a,n=0);try{let a=await this.request(void 0,e,"GET /search/commits",{q:t,sort:i?.sort,order:i?.order,per_page:s,page:r},o),l=a?.data;if(null==l||0===l.items.length)return;let h=n+l.items.length,c=l.incomplete_results||l.total_count>h;return{pageInfo:{startCursor:`${r} ${s} ${n}`,endCursor:c?`${r+1} ${s} ${h}`:void 0,hasPreviousPage:l.total_count>0&&r>1,hasNextPage:c},totalCount:l.total_count,values:l.items.map(e=>({sha:e.sha,authorDate:new Date(e.commit.author.date).getTime(),committerDate:new Date(e.commit.committer?.date??e.commit.author.date).getTime()}))}}catch(e){if(e instanceof I.g3)return;throw this.handleException(e,void 0,o)}}_enterpriseVersions=new Map;async getEnterpriseVersion(e,t,i){let r=this._enterpriseVersions.get(t);if(null!=r)return r;if(null===r)return;let s=(0,W.dQ)();try{let n=await this.request(e,t,"GET /meta",i,s),o=n?.data?.installed_version;r=o?(0,N.sH)(o):null}catch(e){r=null}return this._enterpriseVersions.set(t,r),r??void 0}async graphql(e,t,i,r,s,n){try{let s;if(null!=n){if(n.isCancellationRequested)throw new I.AL;s=new AbortController,n.onCancellationRequested(()=>s.abort()),r={...r,request:{...r?.request,signal:s.signal}}}return await (0,T.Ff)(e?.getIgnoreSSLErrors()??!1,()=>this.getDefaults(t,k)(i,r))}catch(i){if(i instanceof R){switch(i.errors?.[0]?.type){case"NOT_FOUND":throw new I.g3(i);case"FORBIDDEN":throw new I.v3("github",I.R.Forbidden,i);case"RATE_LIMITED":{let e;let r=i.headers?.["x-ratelimit-reset"];throw null!=r&&Number.isNaN(e=parseInt(r,10))&&(e=void 0),new I.qc(i,t,e)}}U.Vy.isDebugging&&D.window.showErrorMessage(`GitHub request failed: ${i.errors?.[0]?.message??i.message}`)}else i instanceof RequestError||"AbortError"===i.name?this.handleRequestError(e,t,i,s):U.Vy.isDebugging&&D.window.showErrorMessage(`GitHub request failed: ${i.message}`);throw i}}async request(e,t,i,r,s,n){try{let s;if(null!=n){if(n.isCancellationRequested)throw new I.AL;s=new AbortController,n.onCancellationRequested(()=>s.abort()),r={...r,request:{...r?.request,signal:s.signal}}}return await (0,T.Ff)(e?.getIgnoreSSLErrors()??!1,()=>this.getDefaults(t,C)(i,r))}catch(i){throw i instanceof RequestError||"AbortError"===i.name?this.handleRequestError(e,t,i,s):U.Vy.isDebugging&&D.window.showErrorMessage(`GitHub request failed: ${i.message}`),i}}_defaults=new Map;getDefaults(e,t){let i=this._defaults.get(t);null==i&&(i=new Map,this._defaults.set(t,i));let r=i.get(e);return null==r&&(r=t.defaults({headers:{authorization:`token ${e}`},request:{agent:this.proxyAgent,fetch:_.HZ?(e,t)=>{if(null!=t.headers){let{"user-agent":e,...i}=t.headers;e&&(t.headers=i)}return(0,T.hd)(e,t)}:T.hd,hook:"debug"===U.Vy.logLevel||U.Vy.isDebugging?async(e,t)=>{let i=(0,q.u)(`[GITHUB] ${t.method} ${t.url}`,{log:!1});try{return await e(t)}finally{let e;try{if("string"==typeof t.query){let i=/(^[^({\n]+)/.exec(t.query);e=` ${i?.[1].trim()??t.query}`}}catch{}i?.stop({message:e})}}:void 0}}),i.set(e,r)),r}handleRequestError(e,t,i,r){if("AbortError"===i.name)throw new I.AL(i);switch(i.status){case 404:case 410:case 422:throw new I.g3(i);case 401:throw new I.v3("github",I.R.Unauthorized,i);case 403:if(i.message.includes("rate limit")){let e;let r=i.response?.headers?.["x-ratelimit-reset"];throw null!=r&&Number.isNaN(e=parseInt(r,10))&&(e=void 0),new I.qc(i,t,e)}throw new I.v3("github",I.R.Forbidden,i);case 500:U.Vy.error(i,r),null!=i.response&&(e?.trackRequestException(),(0,x.wW)(`${e?.name??"GitHub"} failed to respond and might be experiencing issues.${null==e||"github"===e.id?" Please visit the [GitHub status page](https://githubstatus.com) for more information.":""}`));return;case 502:if(U.Vy.error(i,r),i.message.includes("timeout")){e?.trackRequestException(),(0,x.lW)(e?.name??"GitHub");return}break;default:if(i.status>=400&&i.status<500)throw new I.Iz(i)}U.Vy.error(i,r),U.Vy.isDebugging&&D.window.showErrorMessage(`GitHub request failed: ${i.response?.errors?.[0]?.message??i.message}`)}handleException(e,t,i){return U.Vy.error(e,i),e instanceof I.v3&&this.showAuthenticationErrorMessage(e,t),e}async showAuthenticationErrorMessage(e,t){if(e.reason===I.R.Unauthorized||e.reason===I.R.Forbidden){let i="Reauthenticate";await D.window.showErrorMessage(`${e.message}. Would you like to try reauthenticating${e.reason===I.R.Forbidden?" to provide additional access":""}?`,i)===i&&(await t?.reauthenticate(),this.resetCaches(),this._onDidReauthenticate.fire())}else D.window.showErrorMessage(e.message)}async createEnterpriseAvatarUrl(e,t,i,r,s){s=s??16;let n=await this.getEnterpriseVersion(e,t,{baseUrl:i});if((0,N.ib)(n,">= 3.0.0")){let n;let o=(0,O.P)(r);null!=o&&D.Uri.parse(i).authority===o.authority&&(null!=o.userId?n=`${i}/enterprise/avatars/u/${encodeURIComponent(o.userId)}?s=${s}`:null!=o.login&&(n=`${i}/enterprise/avatars/${encodeURIComponent(o.login)}?s=${s}`)),null==n&&(n=`${i}/enterprise/avatars/u/e?email=${encodeURIComponent(r)}&s=${s}`);let a=await (0,T.Ff)(e?.getIgnoreSSLErrors()??!1,()=>(0,T.hd)(n,{method:"GET",headers:{Authorization:`Bearer ${t}`}}));if(a.ok){let e=(0,M.K3)(new Uint8Array(await a.arrayBuffer())),t=a.headers.get("content-type");return`data:${t};base64,${e}`}}return`https://avatars.githubusercontent.com/u/e?email=${encodeURIComponent(r)}&s=${s}`}async searchMyPullRequests(e,t,i,r){let s=(0,W.dQ)();try{let n=function(t,i){return{pullRequest:(0,H.fromGitHubPullRequestDetailed)(t,e),reasons:i?[i]:[]}},o=`query searchPullRequests(
	$authored: String!
	$assigned: String!
	$reviewRequested: String!
	$mentioned: String!
) {
	authored: search(first: 100, query: $authored, type: ISSUE) {
		nodes {
			...on PullRequest {
				${K}
			}
		}
	}
	assigned: search(first: 100, query: $assigned, type: ISSUE) {
		nodes {
			...on PullRequest {
				${K}
			}
		}
	}
	reviewRequested: search(first: 100, query: $reviewRequested, type: ISSUE) {
		nodes {
			...on PullRequest {
				${K}
			}
		}
	}
	mentioned: search(first: 100, query: $mentioned, type: ISSUE) {
		nodes {
			...on PullRequest {
				${K}
			}
		}
	}
}`,a=i?.search?.trim()??"";if(i?.user&&(a+=` user:${i.user}`),i?.repos!=null&&i.repos.length>0){let e="  repo:";a+=`${e}${i.repos.join(e)}`}let l="is:pr is:open archived:false",h=await this.graphql(e,t,o,{authored:`${a} ${l} author:@me`.trim(),assigned:`${a} ${l} assignee:@me`.trim(),reviewRequested:`${a} ${l} review-requested:@me`.trim(),mentioned:`${a} ${l} mentions:@me`.trim(),baseUrl:i?.baseUrl},s,r);if(void 0===h)return[];return ee([...h.assigned.nodes.map(e=>n(e,"assigned")),...h.reviewRequested.nodes.map(e=>n(e,"review-requested")),...h.mentioned.nodes.map(e=>n(e,"mentioned")),...h.authored.nodes.map(e=>n(e,"authored"))],e=>e.pullRequest.url)}catch(t){throw this.handleException(t,e,s)}}async searchMyIssues(e,t,i,r){let s=(0,W.dQ)(),n=`query searchIssues(
				$authored: String!
				$assigned: String!
				$mentioned: String!
			) {
				authored: search(first: 100, query: $authored, type: ISSUE) {
					nodes {
						... on Issue {
							${Z}
						}
					}
				}
				assigned: search(first: 100, query: $assigned, type: ISSUE) {
					nodes {
						... on Issue {
							${Z}
						}
					}
				}
				mentioned: search(first: 100, query: $mentioned, type: ISSUE) {
					nodes {
						... on Issue {
							${Z}
						}
					}
				}
			}`,o=i?.search?.trim()??"";if(i?.user&&(o+=` user:${i.user}`),i?.repos!=null&&i.repos.length>0){let e="  repo:";o+=`${e}${i.repos.join(e)}`}let a="type:issue is:open archived:false";try{let l=function(t,i){return{issue:(0,H.fromGitHubIssueDetailed)(t,e),reasons:i?[i]:[]}},h=await this.graphql(e,t,n,{authored:`${o} ${a} author:@me`.trim(),assigned:`${o} ${a} assignee:@me`.trim(),mentioned:`${o} ${a} mentions:@me`.trim(),baseUrl:i?.baseUrl},s,r);if(void 0===h)return[];return ee([...h.assigned.nodes.map(e=>l(e,"assigned")),...h.mentioned.nodes.map(e=>l(e,"mentioned")),...h.authored.nodes.map(e=>l(e,"authored"))],e=>e.issue.url)}catch(t){throw this.handleException(t,e,s)}}async mergePullRequest(e,t,i,r,s,n){let o;let a=(0,W.dQ)();switch(s?.mergeMethod){case $.e0.Merge:o="MERGE";break;case $.e0.Rebase:o="REBASE";break;case $.e0.Squash:o="SQUASH"}try{let l=`mutation mergePullRequest(
	$id: ID!
	$expectedSourceSha: GitObjectID!
	$mergeMethod: PullRequestMergeMethod
) {
	mergePullRequest(input: { pullRequestId: $id, expectedHeadOid: $expectedSourceSha, mergeMethod: $mergeMethod }) {
		pullRequest {
			id
		}
	}
}`,h=await this.graphql(e,t,l,{id:i,expectedSourceSha:r,mergeMethod:o,baseUrl:s?.baseUrl},a,n);return h?.pullRequest?.id===i}catch(t){throw this.handleException(t,e,a)}}};function X(e){return e?.baseUrl==null||"https://api.github.com"===e.baseUrl}function ee(e,t){return[...(0,L.pD)(e,t,(e,t)=>(0!==t.reasons.length&&e.reasons.push(...t.reasons),e))]}Q([(0,B.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"getAccountForCommit",1),Q([(0,B.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"getAccountForEmail",1),Q([(0,B.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"getDefaultBranch",1),Q([(0,B.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"getIssueOrPullRequest",1),Q([(0,B.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"getPullRequestForBranch",1),Q([(0,B.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"getPullRequestForCommit",1),Q([(0,B.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"getRepositoryMetadata",1),Q([(0,B.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getBlame",1),Q([(0,B.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getBranches",1),Q([(0,B.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getCommit",1),Q([(0,B.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getCommitForFile",1),Q([(0,B.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getCommitBranches",1),Q([(0,B.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getCommitCount",1),Q([(0,B.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getCommitOnBranch",1),Q([(0,B.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getCommits",1),Q([(0,B.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getCommitRefs",1),Q([(0,B.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getCommitTags",1),Q([(0,B.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getNextCommitRefs",1),Q([(0,B.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getContributors",1),Q([(0,B.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getDefaultBranchName",1),Q([(0,B.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getCurrentUser",1),Q([(0,B.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getRepositoryVisibility",1),Q([(0,B.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getTags",1),Q([(0,B.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"resolveReference",1),Q([(0,B.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"searchCommits",1),Q([(0,B.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"searchCommitShas",1),Q([(0,B.Yz)({args:{0:e=>e?.name,1:"<token>"}})],GitHubApi.prototype,"getEnterpriseVersion",1),Q([(0,B.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"searchMyPullRequests",1),Q([(0,B.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"searchMyIssues",1),Q([(0,B.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"mergePullRequest",1)},1116:(e,t,i)=>{i.r(t),i.d(t,{fromCommitFileStatus:()=>v,fromGitHubIssueDetailed:()=>f,fromGitHubIssueOrPullRequestState:()=>a,fromGitHubPullRequest:()=>o,fromGitHubPullRequestDetailed:()=>m,fromGitHubPullRequestMergeableState:()=>d,fromGitHubPullRequestReviewDecision:()=>h,fromGitHubPullRequestReviewState:()=>c,fromGitHubPullRequestStatusCheckRollupState:()=>g,toGitHubPullRequestMergeableState:()=>p,toGitHubPullRequestReviewDecision:()=>u,toGitHubPullRequestState:()=>l});var r=i(5248),s=i(8559),n=i(304);function o(e,t){return new n.B9(t,{name:e.author.login,avatarUrl:e.author.avatarUrl,url:e.author.url},String(e.number),e.id,e.title,e.permalink,{owner:e.repository.owner.login,repo:e.repository.name,accessLevel:w(e.repository.viewerPermission)},a(e.state),new Date(e.createdAt),new Date(e.updatedAt),null==e.closedAt?void 0:new Date(e.closedAt),null==e.mergedAt?void 0:new Date(e.mergedAt),void 0,void 0,{head:{exists:null!=e.headRepository,owner:e.headRepository?.owner.login,repo:e.headRepository?.name,sha:e.headRefOid,branch:e.headRefName,url:e.headRepository?.url},base:{exists:null!=e.baseRepository,owner:e.baseRepository?.owner.login,repo:e.baseRepository?.name,sha:e.baseRefOid,branch:e.baseRefName,url:e.baseRepository?.url},isCrossRepository:e.isCrossRepository})}function a(e){return"MERGED"===e?"merged":"CLOSED"===e?"closed":"opened"}function l(e){return"merged"===e?"MERGED":"closed"===e?"CLOSED":"OPEN"}function h(e){switch(e){case"APPROVED":return n.dq.Approved;case"CHANGES_REQUESTED":return n.dq.ChangesRequested;case"REVIEW_REQUIRED":return n.dq.ReviewRequired}}function c(e){switch(e){case"APPROVED":return n.c7.Approved;case"CHANGES_REQUESTED":return n.c7.ChangesRequested;case"COMMENTED":return n.c7.Commented;case"DISMISSED":return n.c7.Dismissed;case"PENDING":return n.c7.Pending}}function u(e){switch(e){case n.dq.Approved:return"APPROVED";case n.dq.ChangesRequested:return"CHANGES_REQUESTED";case n.dq.ReviewRequired:return"REVIEW_REQUIRED"}}function d(e){switch(e){case"MERGEABLE":return n.Q6.Mergeable;case"CONFLICTING":return n.Q6.Conflicting;case"UNKNOWN":return n.Q6.Unknown}}function p(e){switch(e){case n.Q6.Mergeable:return"MERGEABLE";case n.Q6.Conflicting:return"CONFLICTING";case n.Q6.Unknown:return"UNKNOWN"}}function g(e){switch(e){case"SUCCESS":case"EXPECTED":return n.gI.Success;case"FAILURE":case"ERROR":return n.gI.Failed;case"PENDING":return n.gI.Pending;default:return}}function m(e,t){return new n.B9(t,{name:e.author.login,avatarUrl:e.author.avatarUrl,url:e.author.url},String(e.number),e.id,e.title,e.permalink,{owner:e.repository.owner.login,repo:e.repository.name,accessLevel:w(e.repository.viewerPermission)},a(e.state),new Date(e.createdAt),new Date(e.updatedAt),null==e.closedAt?void 0:new Date(e.closedAt),null==e.mergedAt?void 0:new Date(e.mergedAt),d(e.mergeable),e.viewerCanUpdate,{head:{exists:null!=e.headRepository,owner:e.headRepository?.owner.login,repo:e.headRepository?.name,sha:e.headRefOid,branch:e.headRefName,url:e.headRepository?.url},base:{exists:null!=e.baseRepository,owner:e.baseRepository?.owner.login,repo:e.baseRepository?.name,sha:e.baseRefOid,branch:e.baseRefName,url:e.baseRepository?.url},isCrossRepository:e.isCrossRepository},e.isDraft,e.additions,e.deletions,e.totalCommentsCount,e.reactions.totalCount,h(e.reviewDecision),e.reviewRequests.nodes.map(e=>null!=e.requestedReviewer?{isCodeOwner:e.asCodeOwner,reviewer:{name:e.requestedReviewer.login,avatarUrl:e.requestedReviewer.avatarUrl,url:e.requestedReviewer.url},state:n.c7.ReviewRequested}:void 0).filter(e=>!!e),e.latestReviews.nodes.map(e=>({reviewer:{name:e.author.login,avatarUrl:e.author.avatarUrl,url:e.author.url},state:c(e.state)})),e.assignees.nodes.map(e=>({name:e.login,avatarUrl:e.avatarUrl,url:e.url})),g(e.commits.nodes[0].commit.statusCheckRollup?.state))}function f(e,t){return new s.m2({id:t.id,name:t.name,domain:t.domain,icon:t.icon},String(e.number),e.id,e.title,e.url,new Date(e.createdAt),new Date(e.updatedAt),e.closed,a(e.state),{name:e.author.login,avatarUrl:e.author.avatarUrl,url:e.author.url},{owner:e.repository.owner.login,repo:e.repository.name,accessLevel:w(e.repository.viewerPermission)},e.assignees.nodes.map(e=>({name:e.login,avatarUrl:e.avatarUrl,url:e.url})),null==e.closedAt?void 0:new Date(e.closedAt),e.labels?.nodes==null?void 0:e.labels.nodes.map(e=>({color:e.color,name:e.name})),e.comments?.totalCount,e.reactions?.totalCount)}function w(e){switch(e){case"ADMIN":return s.LI.Admin;case"MAINTAIN":return s.LI.Maintain;case"WRITE":return s.LI.Write;case"TRIAGE":return s.LI.Triage;case"READ":return s.LI.Read;default:return s.LI.None}}function v(e){switch(e){case"added":return r.NO.Added;case"changed":case"modified":return r.NO.Modified;case"removed":return r.NO.Deleted;case"renamed":return r.NO.Renamed;case"copied":return r.NO.Copied}}},2035:(e,t,i)=>{i.r(t),i.d(t,{GitLabIntegration:()=>GitLabIntegration,GitLabSelfHostedIntegration:()=>GitLabSelfHostedIntegration});var r=i(8180),s=i(1014),n=i(65),o=i(1298),a=Object.defineProperty,l=Object.getOwnPropertyDescriptor;let h=o.Mt[o.Q7.GitLab],c=Object.freeze({id:h.id,scopes:h.scopes}),u=o.Mt[o.PY.GitLabSelfHosted],d=Object.freeze({id:u.id,scopes:u.scopes});let GitLabIntegrationBase=class GitLabIntegrationBase extends n.T5{async getProviderAccountForCommit({accessToken:e},t,i,r){return(await this.container.gitlab)?.getAccountForCommit(this,e,t.owner,t.name,i,{...r,baseUrl:this.apiBaseUrl})}async getProviderAccountForEmail({accessToken:e},t,i,r){return(await this.container.gitlab)?.getAccountForEmail(this,e,t.owner,t.name,i,{...r,baseUrl:this.apiBaseUrl})}async getProviderDefaultBranch({accessToken:e},t){return(await this.container.gitlab)?.getDefaultBranch(this,e,t.owner,t.name,{baseUrl:this.apiBaseUrl})}async getProviderIssueOrPullRequest({accessToken:e},t,i){return(await this.container.gitlab)?.getIssueOrPullRequest(this,e,t.owner,t.name,Number(i),{baseUrl:this.apiBaseUrl})}async getProviderPullRequestForBranch({accessToken:e},t,r,s){let{include:n,...o}=s??{},a=(await Promise.resolve().then(i.bind(i,372))).toGitLabMergeRequestState;return(await this.container.gitlab)?.getPullRequestForBranch(this,e,t.owner,t.name,r,{...o,include:n?.map(e=>a(e)),baseUrl:this.apiBaseUrl})}async getProviderPullRequestForCommit({accessToken:e},t,i){return(await this.container.gitlab)?.getPullRequestForCommit(this,e,t.owner,t.name,i,{baseUrl:this.apiBaseUrl})}async getProviderRepositoryMetadata({accessToken:e},t,i){return(await this.container.gitlab)?.getRepositoryMetadata(this,e,t.owner,t.name,{baseUrl:this.apiBaseUrl},i)}searchProviderMyPullRequests(e,t){return Promise.resolve(void 0)}searchProviderMyIssues(e,t){return Promise.resolve(void 0)}async mergeProviderPullRequest(e,t,i){return Promise.resolve(!1)}};let GitLabIntegration=class GitLabIntegration extends GitLabIntegrationBase{authProvider=c;id=o.Q7.GitLab;key=this.id;name="GitLab";get domain(){return h.domain}get apiBaseUrl(){return"https://gitlab.com/api"}};let GitLabSelfHostedIntegration=class GitLabSelfHostedIntegration extends GitLabIntegrationBase{constructor(e,t,i){super(e,t),this._domain=i}authProvider=d;id=o.PY.GitLabSelfHosted;key=`${this.id}:${this.domain}`;name="GitLab Self-Hosted";get domain(){return this._domain}get apiBaseUrl(){return`https://${this._domain}/api`}async connect(){return!!await (0,s.KH)(this.container,`Rich integration with ${this.name} is a Pro feature.`,{source:"integrations",detail:{action:"connect",integration:this.id}})&&super.connect()}};((e,t,i,r)=>{for(var s,n=r>1?void 0:r?l(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&a(t,i,n)})([(0,r.Rm)()],GitLabSelfHostedIntegration.prototype,"connect",1)},69:(e,t,i)=>{i.r(t),i.d(t,{GitLabApi:()=>GitLabApi});var r=i(1398),s=i(7609),n=i(3794),o=i(8803),a=i(304),l=i(3536),h=i(4832),c=i(8180),u=i(3916),d=i(3446),p=i(937),g=i(7279),m=i(372),f=Object.defineProperty,w=Object.getOwnPropertyDescriptor,v=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?w(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&f(t,i,n),n};let GitLabApi=class GitLabApi{_disposable;_projectIds=new Map;constructor(e){this._disposable=h.H.onDidChangeAny(e=>{(h.H.changedCore(e,["http.proxy","http.proxyStrictSSL"])||h.H.changed(e,["proxy","remotes"]))&&this.resetCaches()})}dispose(){this._disposable.dispose()}resetCaches(){this._projectIds.clear(),this._proxyAgents.clear()}_proxyAgents=new Map;getProxyAgent(e){if(n.HZ)return;let t=this._proxyAgents.get(e.id);if(void 0===t){let i=e.getIgnoreSSLErrors();t=(0,s.cQ)(!0!==i&&"force"!==i&&void 0),this._proxyAgents.set(e.id,t??null)}return t??void 0}async getAccountForCommit(e,t,i,s,n,a,l){let h=(0,d.dQ)(),c=await this.getProjectId(e,t,i,s,a?.baseUrl,l);if(c)try{let i;let s=await this.request(e,t,a?.baseUrl,`v4/projects/${c}/repository/commits/${n}?stats=false`,{method:"GET"},l,h);for(let r of(await this.findUser(e,t,s.author_name,a)))if(r.name===s.author_name||r.publicEmail&&r.publicEmail===s.author_email){if(i=r,"active"===r.state)break}else((0,g.Q_)(r.name,s.author_name)||r.publicEmail&&(0,g.Q_)(r.publicEmail,s.author_email))&&(i=r);if(null==i)return;return i.avatarUrl&&!/^([a-zA-Z][\w+.-]+):/.test(i.avatarUrl)&&(i.avatarUrl=r.Uri.joinPath(r.Uri.parse(i.webUrl),"..",i.avatarUrl).toString()),{provider:e,name:i.name||void 0,email:s.author_email||void 0,avatarUrl:i.avatarUrl||void 0,username:i.username||void 0}}catch(t){if(t instanceof o.g3)return;throw this.handleException(t,e,h)}}async getAccountForEmail(e,t,i,r,s,n){let a=(0,d.dQ)();try{let[i]=await this.findUser(e,t,s,n);if(null==i)return;return{provider:e,name:i.name||void 0,email:i.publicEmail||void 0,avatarUrl:i.avatarUrl||void 0,username:i.username||void 0}}catch(t){if(t instanceof o.g3)return;throw this.handleException(t,e,a)}}async getDefaultBranch(e,t,i,r,s,n){let a=(0,d.dQ)();try{let o=`query getDefaultBranch(
	$fullPath: ID!
) {
	project(fullPath: $fullPath) {
		repository {
			rootRef
		}
}`,l=await this.graphql(e,t,s?.baseUrl,o,{fullPath:`${i}/${r}`},n,a),h=l?.data?.project?.repository?.rootRef??void 0;if(null==h)return;return{provider:e,name:h}}catch(t){if(t instanceof o.g3)return;throw this.handleException(t,e,a)}}async getIssueOrPullRequest(e,t,i,r,s,n,a){let l=(0,d.dQ)();try{let o=`query getIssueOrMergeRequest(
	$fullPath: ID!
	$iid: String!
) {
	project(fullPath: $fullPath) {
		mergeRequest(iid: $iid) {
			author {
				name
				avatarUrl
				webUrl
			}
			iid
			title
			description
			state
			createdAt
			updatedAt
			mergedAt
			webUrl
		}
		issue(iid: $iid) {
			author {
				name
				avatarUrl
				webUrl
			}
			iid
			title
			description
			state
			createdAt
			updatedAt
			closedAt
			webUrl
		}
	}
}`,h=await this.graphql(e,t,n?.baseUrl,o,{fullPath:`${i}/${r}`,iid:String(s)},a,l);if(h?.data?.project?.issue!=null){let t=h.data.project.issue;return{provider:e,type:"issue",id:t.iid,nodeId:void 0,createdDate:new Date(t.createdAt),updatedDate:new Date(t.updatedAt),title:t.title,closed:"closed"===t.state,closedDate:null==t.closedAt?void 0:new Date(t.closedAt),url:t.webUrl,state:"locked"===t.state?"closed":t.state}}if(h?.data?.project?.mergeRequest!=null){let t=h.data.project.mergeRequest;return{provider:e,type:"pullrequest",id:t.iid,nodeId:void 0,createdDate:new Date(t.createdAt),updatedDate:new Date(t.updatedAt),title:t.title,closed:"closed"===t.state,closedDate:"closed"===t.state?new Date(t.updatedAt):void 0,url:t.webUrl,state:"locked"===t.state?"closed":t.state}}return}catch(t){if(t instanceof o.g3)return;throw this.handleException(t,e,l)}}async getPullRequestForBranch(e,t,i,r,s,n,l){let h=(0,d.dQ)();try{let o;let c=`
			nodes {
				iid
				author {
					name
					avatarUrl
					webUrl
				}
				title
				description
				state
				createdAt
				updatedAt
				mergedAt
				webUrl
			}`,u=`query getMergeRequestForBranch(
	$fullPath: ID!
	$branches: [String!]
) {
	project(fullPath: $fullPath) {
		${n?.include==null?`mergeRequests(sourceBranches: $branches sort: UPDATED_DESC first: 1) {
			${c}
		}`:""}
		${n?.include?.includes("opened")?`opened: mergeRequests(sourceBranches: $branches state: opened sort: UPDATED_DESC first: 1) {
			${c}
		}`:""}
		${n?.include?.includes("merged")?`merged: mergeRequests(sourceBranches: $branches state: merged sort: UPDATED_DESC first: 1) {
			${c}
		}`:""}
		${n?.include?.includes("closed")?`closed: mergeRequests(sourceBranches: $branches state: closed sort: UPDATED_DESC first: 1) {
			${c}
		}`:""}
	}
}`,d=await this.graphql(e,t,n?.baseUrl,u,{fullPath:`${i}/${r}`,branches:[s],state:n?.include},l,h);if(n?.include==null)o=d?.data?.project?.mergeRequests?.nodes?.[0];else for(let e of n.include){let t;"opened"===e?t=d?.data?.project?.opened?.nodes?.[0]:"merged"===e?t=d?.data?.project?.merged?.nodes?.[0]:"closed"===e&&(t=d?.data?.project?.closed?.nodes?.[0]),null!=t&&(null==o||new Date(t.updatedAt)>new Date(o.updatedAt))&&(o=t)}if(null==o)return;return new a.B9(e,{name:o.author?.name??"Unknown",avatarUrl:o.author?.avatarUrl??"",url:o.author?.webUrl??""},String(o.iid),void 0,o.title,o.webUrl,{owner:i,repo:r},(0,m.fromGitLabMergeRequestState)(o.state),new Date(o.createdAt),new Date(o.updatedAt),"closed"!==o.state?void 0:new Date(o.updatedAt),null==o.mergedAt?void 0:new Date(o.mergedAt))}catch(t){if(t instanceof o.g3)return;throw this.handleException(t,e,h)}}async getPullRequestForCommit(e,t,i,r,s,n,a){let l=(0,d.dQ)(),h=await this.getProjectId(e,t,i,r,n?.baseUrl,a);if(h)try{let o=await this.request(e,t,n?.baseUrl,`v4/projects/${h}/repository/commits/${s}/merge_requests`,{method:"GET"},a,l);if(null==o||0===o.length)return;return o.length>1&&o.sort((e,t)=>("opened"===e.state?-1:1)-("opened"===t.state?-1:1)||new Date(t.updated_at).getTime()-new Date(e.updated_at).getTime()),(0,m.fromGitLabMergeRequestREST)(o[0],e,{owner:i,repo:r})}catch(t){if(t instanceof o.g3)return;throw this.handleException(t,e,l)}}async getRepositoryMetadata(e,t,i,r,s,n){let a=(0,d.dQ)(),l=await this.getProjectId(e,t,i,r,s?.baseUrl,n);if(l)try{let i=await this.request(e,t,s?.baseUrl,`v4/projects/${l}`,{method:"GET"},n,a);if(null==i)return;return{provider:e,owner:i.namespace.full_path,name:i.path,isFork:null!=i.forked_from_project,parent:null!=i.forked_from_project?{owner:i.forked_from_project.namespace.full_path,name:i.forked_from_project.path}:void 0}}catch(t){if(t instanceof o.g3)return;throw this.handleException(t,e,a)}}async findUser(e,t,i,r,s){let n=(0,d.dQ)();try{let o=`query findUser(
$search: String!
) {
	users(search: $search) {
		nodes {
			id
			name
			username,
			publicEmail,
			state
			avatarUrl
			webUrl
		}
	}
}`,a=await this.graphql(e,t,r?.baseUrl,o,{search:i},s,n),l=a?.data?.users?.nodes;if(null==l||0===l.length)return[];let h=[];for(let e of l){let t=/gid:\/\/gitlab\/User\/([0-9]+)\b/.exec(e.id);null!=t&&h.push({id:parseInt(t[1],10),name:e.name,username:e.username,publicEmail:e.publicEmail||void 0,state:e.state,avatarUrl:e.avatarUrl,webUrl:e.webUrl})}return h}catch(t){if(t instanceof o.g3)return[];return this.handleException(t,e,n),[]}}getProjectId(e,t,i,r,s,n){let o=`${t}|${i}/${r}`,a=this._projectIds.get(o);return null==a&&(a=this.getProjectIdCore(e,t,i,r,s,n),this._projectIds.set(o,a)),a}async getProjectIdCore(e,t,i,r,s,n){let a=(0,d.dQ)();try{let o=`query getProjectId(
	$fullPath: ID!
) {
	project(fullPath: $fullPath) {
		id
	}
}`,l=await this.graphql(e,t,s,o,{fullPath:`${i}/${r}`},n,a),h=l?.data?.project?.id;if(null==h)return;let c=/gid:\/\/gitlab\/Project\/([0-9]+)\b/.exec(h);if(null==c)return;let u=c[1];return(0,d.TT)(a,` \u2022 projectId=${u}`),u}catch(t){if(t instanceof o.g3)return;this.handleException(t,e,a);return}}async graphql(e,t,i,n,a,l,h){let c;try{let r=(0,p.u)(`[GITLAB] POST ${i}`,{log:!1}),h=this.getProxyAgent(e);try{let r;if(null!=l){if(l.isCancellationRequested)throw new o.AL;r=new AbortController,l.onCancellationRequested(()=>r.abort())}if((c=await (0,s.Ff)(e.getIgnoreSSLErrors(),()=>(0,s.hd)(`${i??"https://gitlab.com/api"}/graphql`,{method:"POST",headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"},agent:h,signal:r?.signal,body:JSON.stringify({query:n,variables:a})}))).ok){let e=await c.json();if("errors"in e)throw new o.QI("GitLab",c,e.errors);return e}throw new o.QI("GitLab",c)}finally{let e=/(^[^({\n]+)/.exec(n),t=` ${e?.[1].trim()??n}`;r?.stop({message:t})}}catch(i){throw i instanceof o.QI||"AbortError"===i.name?this.handleRequestError(e,t,i,h):u.Vy.isDebugging&&r.window.showErrorMessage(`GitLab request failed: ${i.message}`),i}}async request(e,t,i,n,a,l,h){let c;let d=`${i??"https://gitlab.com/api"}/${n}`;try{let i=(0,p.u)(`[GITLAB] ${a?.method??"GET"} ${d}`,{log:!1}),r=this.getProxyAgent(e);try{let i;if(null!=l){if(l.isCancellationRequested)throw new o.AL;i=new AbortController,l.onCancellationRequested(()=>i.abort())}if((c=await (0,s.Ff)(e.getIgnoreSSLErrors(),()=>(0,s.hd)(d,{headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"},agent:r,signal:i?.signal,...a}))).ok)return await c.json();throw new o.QI("GitLab",c)}finally{i?.stop()}}catch(i){throw i instanceof o.QI||"AbortError"===i.name?this.handleRequestError(e,t,i,h):u.Vy.isDebugging&&r.window.showErrorMessage(`GitLab request failed: ${i.message}`),i}}handleRequestError(e,t,i,s){if("AbortError"===i.name||!(i instanceof o.QI))throw new o.AL(i);switch(i.status){case 404:case 410:case 422:throw new o.g3(i);case 401:throw new o.v3("gitlab",o.R.Unauthorized,i);case 403:if(i.message.includes("rate limit exceeded")){let e;let r=i.response?.headers?.get("x-ratelimit-reset");throw null!=r&&Number.isNaN(e=parseInt(r,10))&&(e=void 0),new o.qc(i,t,e)}throw new o.v3("gitlab",o.R.Forbidden,i);case 500:u.Vy.error(i,s),null!=i.response&&(e?.trackRequestException(),(0,l.wW)(`${e?.name??"GitLab"} failed to respond and might be experiencing issues.${null==e||"gitlab"===e.id?" Please visit the [GitLab status page](https://status.gitlab.com) for more information.":""}`));return;case 502:if(u.Vy.error(i,s),i.message.includes("timeout")){e?.trackRequestException(),(0,l.lW)(e?.name??"GitLab");return}break;default:if(i.status>=400&&i.status<500)throw new o.Iz(i)}u.Vy.error(i,s),u.Vy.isDebugging&&r.window.showErrorMessage(`GitLab request failed: ${i.response?.errors?.[0]?.message??i.message}`)}handleException(e,t,i){return u.Vy.error(e,i),e instanceof o.v3&&this.showAuthenticationErrorMessage(e,t),e}async showAuthenticationErrorMessage(e,t){if(e.reason===o.R.Unauthorized||e.reason===o.R.Forbidden){let i="Reauthenticate";await r.window.showErrorMessage(`${e.message}. Would you like to try reauthenticating${e.reason===o.R.Forbidden?" to provide additional access":""}?`,i)===i&&(await t.reauthenticate(),this.resetCaches())}else r.window.showErrorMessage(e.message)}};v([(0,c.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitLabApi.prototype,"getAccountForCommit",1),v([(0,c.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitLabApi.prototype,"getAccountForEmail",1),v([(0,c.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitLabApi.prototype,"getDefaultBranch",1),v([(0,c.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitLabApi.prototype,"getIssueOrPullRequest",1),v([(0,c.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitLabApi.prototype,"getPullRequestForBranch",1),v([(0,c.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitLabApi.prototype,"getPullRequestForCommit",1),v([(0,c.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitLabApi.prototype,"getRepositoryMetadata",1)},372:(e,t,i)=>{i.r(t),i.d(t,{fromGitLabMergeRequestREST:()=>o,fromGitLabMergeRequestState:()=>s,toGitLabMergeRequestState:()=>n});var r=i(304);function s(e){return"locked"===e?"closed":e}function n(e){return e}function o(e,t,i){return new r.B9(t,{name:e.author?.name??"Unknown",avatarUrl:e.author?.avatar_url??"",url:e.author?.web_url??""},String(e.iid),void 0,e.title,e.web_url,i,s(e.state),new Date(e.created_at),new Date(e.updated_at),null==e.closed_at?void 0:new Date(e.closed_at),null==e.merged_at?void 0:new Date(e.merged_at))}},7832:(e,t,i)=>{i.r(t),i.d(t,{JiraIntegration:()=>JiraIntegration});var r=i(4026),s=i(65),n=i(1298);let o=n.Mt[n.tp.Jira],a=Object.freeze({id:o.id,scopes:o.scopes});let JiraIntegration=class JiraIntegration extends s.On{authProvider=a;id=n.tp.Jira;key=this.id;name="Jira";get domain(){return o.domain}get apiBaseUrl(){return"https://api.atlassian.com"}_autolinks;async autolinks(){if(!(this.maybeConnected??await this.isConnected())||null==this._session||null==this._organizations||null==this._projects)return[];this._autolinks||=new Map;let e=this._autolinks.get(this._session.accessToken);if(null!=e)return e;let t=[],i=this._organizations.get(this._session.accessToken);if(null!=i)for(let e of i){let i=this._projects.get(`${this._session.accessToken}:${e.id}`);if(null!=i)for(let r of i){let i=`${r.key}-`;t.push({type:"issue",url:`${e.url}/browse/${i}<num>`,prefix:i,title:`Open Issue ${i}<num> on ${e.name}`,description:`${e.name} Issue ${i}<num>`,descriptor:{...e}})}}return this._autolinks.set(this._session.accessToken,t),t}async getProviderAccountForResource({accessToken:e},t){let i=await this.getProvidersApi(),r=await i.getCurrentUserForResource(this.id,t.id,{accessToken:e});if(null!=r)return(0,n.tf)(r,this)}_organizations;async getProviderResourcesForUser({accessToken:e},t=!1){if(this._organizations||=new Map,null==this._organizations.get(e)||t){let t=await this.getProvidersApi(),i=await t.getJiraResourcesForCurrentUser({accessToken:e});this._organizations.set(e,null!=i?i.map(e=>({...e,key:e.id})):void 0)}return this._organizations.get(e)}_projects;async getProviderProjectsForResources({accessToken:e},t,i=!1){this._projects||=new Map;let r=[];if(i)r=t;else for(let i of t){let t=`${e}:${i.id}`;null==this._projects.get(t)&&r.push(i)}if(r.length>0){let t=await this.getProvidersApi(),i=await t.getJiraProjectsForResources(r.map(e=>e.id),{accessToken:e});for(let t of r){let r=i?.filter(e=>e.resourceId===t.id);null!=r&&this._projects.set(`${e}:${t.id}`,r.map(e=>({...e})))}}return t.reduce((t,i)=>{let r=this._projects.get(`${e}:${i.id}`);return null!=r&&t.push(...r),t},[])}async getProviderIssuesForProject({accessToken:e},t,i){let s;let o=await this.getProvidersApi(),a=async(i,r)=>{let s=await o.getIssuesForProject(this.id,t.name,t.resourceId,{authorLogin:r===n.mN.Author?i:void 0,assigneeLogins:r===n.mN.Assignee?[i]:void 0,mentionLogin:r===n.mN.Mention?i:void 0,accessToken:e});return s?.map(e=>n.oH(e,this,r)).filter(e=>void 0!==e)};if(i?.user!=null&&i.filters.length>0){let e=Promise.allSettled(i.filters.map(e=>a(i.user,e)));s=[...(0,r.Bq)((0,r.x1)(await e,e=>"fulfilled"===e.status&&null!=e.value?e.value:void 0))];let t=new Map;for(let e of s)if(t.has(e.issue.id)){let i=t.get(e.issue.id);i.reasons=[...i.reasons,...e.reasons]}else t.set(e.issue.id,e);return[...t.values()]}return s=await o.getIssuesForProject(this.id,t.name,t.resourceId,{accessToken:e}),s?.map(e=>n.oH(e,this)).filter(e=>void 0!==e)}async searchProviderMyIssues(e,t,i){let r=t??await this.getProviderResourcesForUser(e);if(!r)return;let s=await this.getProvidersApi(),o=[];for(let t of r){let i=(await this.getProviderAccountForResource(e,t))?.username,r=await s.getIssuesForResourceForCurrentUser(this.id,t.id,{accessToken:e.accessToken}),a=r?.map(e=>n.oH(e,this,void 0,i)).filter(e=>null!=e);null!=a&&o.push(...a)}return o}async getProviderIssueOrPullRequest(e,t,i){let r=await this.getProvidersApi(),s=(await this.getProviderAccountForResource(e,t))?.username,o=await r.getIssue(this.id,t.id,i,{accessToken:e.accessToken});return null!=o?n.oH(o,this,void 0,s)?.issue:void 0}async providerOnConnect(){if(this._autolinks=void 0,null==this._session)return;let e=this.container.storage.get(`jira:${this._session.accessToken}:organizations`),t=this.container.storage.get(`jira:${this._session.accessToken}:projects`),i=e?.data?.map(e=>({...e})),r=t?.data?.map(e=>({...e}));for(let s of(null==e&&(i=await this.getProviderResourcesForUser(this._session,!0),await this.container.storage.store(`jira:${this._session.accessToken}:organizations`,{v:1,timestamp:Date.now(),data:i})),this._organizations||=new Map,this._organizations.set(this._session.accessToken,i),null==t&&i?.length&&(r=await this.getProviderProjectsForResources(this._session,i),await this.container.storage.store(`jira:${this._session.accessToken}:projects`,{v:1,timestamp:Date.now(),data:r})),this._projects||=new Map,r??[])){let e=`${this._session.accessToken}:${s.resourceId}`,t=this._projects.get(e);null==t?this._projects.set(e,[s]):t.push(s)}}providerOnDisconnect(){this._organizations=void 0,this._projects=void 0,this._autolinks=void 0}}},1298:(e,t,i)=>{i.d(t,{Mt:()=>S,NT:()=>y,PY:()=>w,Q7:()=>m,W3:()=>R,XP:()=>b,d8:()=>_,iG:()=>$,lE:()=>p,mN:()=>C,n2:()=>g,oH:()=>P,tf:()=>A,tp:()=>f});var r,s,n,o,a,l,h=i(910),c=i(8559),u=i(304),d=i(7463);let p=h.GitPullRequestReviewState,g=h.GitBuildStatusState;var m=((r=m||{}).GitHub="github",r.GitLab="gitlab",r.Bitbucket="bitbucket",r.AzureDevOps="azureDevOps",r),f=((s=f||{}).Jira="jira",s.Trello="trello",s),w=((n=w||{}).GitHubEnterprise="github-enterprise",n.GitLabSelfHosted="gitlab-self-hosted",n);let v=["github-enterprise","gitlab-self-hosted"];function y(e){return v.includes(e)}var b=((o=b||{}).Author="author",o.Assignee="assignee",o.ReviewRequested="review-requested",o.Mention="mention",o),C=((a=C||{}).Author="author",a.Assignee="assignee",a.Mention="mention",a),R=((l=R||{}).Project="project",l.Repo="repo",l.Repos="repos",l);let S={github:{domain:"github.com",id:"github",issuesPagingMode:"repos",pullRequestsPagingMode:"repos",supportedPullRequestFilters:["author","assignee","review-requested","mention"],supportedIssueFilters:["author","assignee","mention"],scopes:["repo","read:user","user:email"],usesPAT:!0},"github-enterprise":{domain:"",id:"github-enterprise",issuesPagingMode:"repos",pullRequestsPagingMode:"repos",supportedPullRequestFilters:["author","assignee","review-requested","mention"],supportedIssueFilters:["author","assignee","mention"],scopes:["repo","read:user","user:email"],usesPAT:!0},gitlab:{domain:"gitlab.com",id:"gitlab",issuesPagingMode:"repo",pullRequestsPagingMode:"repo",supportedPullRequestFilters:["author","assignee","review-requested"],supportedIssueFilters:["author","assignee"],scopes:["read_api","read_user","read_repository"],usesPAT:!0},"gitlab-self-hosted":{domain:"",id:"gitlab-self-hosted",issuesPagingMode:"repo",pullRequestsPagingMode:"repo",supportedPullRequestFilters:["author","assignee","review-requested"],supportedIssueFilters:["author","assignee"],scopes:["read_api","read_user","read_repository"],usesPAT:!0},bitbucket:{domain:"bitbucket.org",id:"bitbucket",pullRequestsPagingMode:"repo",supportedPullRequestFilters:["author"],scopes:["account:read","repository:read","pullrequest:read","issue:read"],usesPAT:!0},azureDevOps:{domain:"dev.azure.com",id:"azureDevOps",issuesPagingMode:"project",pullRequestsPagingMode:"repo",supportedPullRequestFilters:["author","assignee"],supportedIssueFilters:["author","assignee","mention"],scopes:["vso.code","vso.identity","vso.project","vso.profile","vso.work"],usesPAT:!0},jira:{domain:"atlassian.net",id:"jira",scopes:["read:status:jira","read:application-role:jira","write:attachment:jira","read:comment:jira","read:project-category:jira","read:project:jira","read:issue.vote:jira","read:field-configuration:jira","write:issue:jira","read:issue-security-level:jira","write:issue.property:jira","read:issue.changelog:jira","read:avatar:jira","read:issue-meta:jira","read:permission:jira","offline_access","read:issue:jira","read:me","read:audit-log:jira","read:project.component:jira","read:group:jira","read:project-role:jira","write:comment:jira","read:label:jira","write:comment.property:jira","read:issue-details:jira","read:issue-type-hierarchy:jira","read:issue.transition:jira","read:user:jira","read:field:jira","read:issue-type:jira","read:project.property:jira","read:comment.property:jira","read:project-version:jira"],supportedIssueFilters:["author","assignee","mention"]},trello:{domain:"trello.com",id:"trello",scopes:[]}};function P(e,t,i,r){if(null!=e.updatedDate&&null!=e.author&&null!=e.url)return{reasons:null!=i?[function(e){switch(e){case"author":return"authored";case"assignee":return"assigned";case"mention":return"mentioned"}}(i)]:null!=r?function(e,t){let i=[],r=!1,s=!1;return(e.author?.username===t||e.author?.name===t)&&(i.push("authored"),r=!0),e.assignees?.some(e=>e.username===t||e.name===t)&&(i.push("assigned"),s=!0),r||s||i.push("mentioned"),i}(e,r):[],issue:{type:"issue",provider:t,id:e.number,nodeId:e.graphQLId??e.id,title:e.title,url:e.url,createdDate:e.createdDate,updatedDate:e.updatedDate,closedDate:e.closedDate??void 0,closed:null!=e.closedDate,state:null!=e.closedDate?"closed":"opened",author:{name:e.author.name??"",avatarUrl:e.author.avatarUrl??void 0,url:e.author.url??void 0},assignees:e.assignees?.map(e=>({name:e.name??"",avatarUrl:e.avatarUrl??void 0,url:e.url??void 0}))??[],repository:e.repository?.owner?.login!=null?{owner:e.repository.owner.login,repo:e.repository.name}:void 0,labels:e.labels.map(e=>({color:e.color??void 0,name:e.name})),commentsCount:e.commentCount??void 0,thumbsUpCount:e.upvoteCount??void 0}}}function A(e,t){return{provider:t,name:e.name??void 0,email:e.email??void 0,avatarUrl:e.avatarUrl??void 0,username:e.username??void 0}}let k={[u.gI.Success]:h.GitBuildStatusState.Success,[u.gI.Failed]:h.GitBuildStatusState.Failed,[u.gI.Pending]:h.GitBuildStatusState.Pending},D={[u.c7.Approved]:h.GitPullRequestReviewState.Approved,[u.c7.ChangesRequested]:h.GitPullRequestReviewState.ChangesRequested,[u.c7.Commented]:h.GitPullRequestReviewState.Commented,[u.c7.ReviewRequested]:h.GitPullRequestReviewState.ReviewRequested,[u.c7.Dismissed]:null,[u.c7.Pending]:null},T={[u.Q6.Mergeable]:h.GitPullRequestMergeableState.Mergeable,[u.Q6.Conflicting]:h.GitPullRequestMergeableState.Conflicts,[u.Q6.Unknown]:h.GitPullRequestMergeableState.Unknown};function _(e){return{...function(e){let t=[...e.reviewRequests??[],...e.latestReviews??[]];return{id:e.id,graphQLId:e.nodeId,number:Number.parseInt(e.id,10),title:e.title,url:e.url,state:"opened"===e.state?h.GitPullRequestState.Open:"closed"===e.state?h.GitPullRequestState.Closed:h.GitPullRequestState.Merged,isDraft:e.isDraft??!1,createdDate:e.createdDate,updatedDate:e.updatedDate,closedDate:e.closedDate??null,mergedDate:e.mergedDate??null,commentCount:e.commentsCount??null,upvoteCount:e.thumbsUpCount??null,commitCount:null,fileCount:null,additions:e.additions??null,deletions:e.deletions??null,author:I(e.author),assignees:e.assignees?.map(I)??null,baseRef:e.refs?.base==null?null:{name:e.refs.base.branch,oid:e.refs.base.sha},headRef:e.refs?.head==null?null:{name:e.refs.head.branch,oid:e.refs.head.sha},reviews:t.filter(e=>e.state!==u.c7.Dismissed&&e.state!==u.c7.Pending).map(e=>({reviewer:I(e.reviewer),state:D[e.state]??h.GitPullRequestReviewState.ReviewRequested})),reviewDecision:function(e,t){switch(e){case u.dq.Approved:return h.GitPullRequestReviewState.Approved;case u.dq.ChangesRequested:return h.GitPullRequestReviewState.ChangesRequested;case u.dq.ReviewRequired:return h.GitPullRequestReviewState.ReviewRequested;default:if(t?.some(e=>e.state===u.c7.ReviewRequested))return h.GitPullRequestReviewState.ReviewRequested;if(t?.some(e=>e.state===u.c7.Commented))return h.GitPullRequestReviewState.Commented;return null}}(e.reviewDecision,t),repository:null!=e.repository?{id:e.repository.repo,name:e.repository.repo,owner:{login:e.repository.owner},remoteInfo:null}:{id:"",name:"",owner:{login:""},remoteInfo:null},headRepository:e.refs?.head!=null?{id:e.refs.head.repo,name:e.refs.head.repo,owner:{login:e.refs.head.owner},remoteInfo:null}:null,headCommit:null!=e.statusCheckRollupState?{buildStatuses:[{completedAt:null,description:"",name:"",state:k[e.statusCheckRollupState],startedAt:null,stage:null,url:""}]}:null,permissions:{canMerge:!0===e.viewerCanUpdate&&null!=e.repository.accessLevel&&e.repository.accessLevel>=c.LI.Write,canMergeAndBypassProtections:!0===e.viewerCanUpdate&&null!=e.repository.accessLevel&&e.repository.accessLevel>=c.LI.Admin},mergeableState:e.mergeableState?T[e.mergeableState]:h.GitPullRequestMergeableState.Unknown}}(e),uuid:h.EntityIdentifierUtils.encode((0,d.D)(e))}}function I(e){return{avatarUrl:e.avatarUrl??null,name:e.name??null,url:e.url??null,email:"",username:e.name??null,id:e.name??null}}let $=h.GitProviderUtils.getActionablePullRequests},1574:(e,t,i)=>{i.r(t),i.d(t,{ProvidersApi:()=>ProvidersApi});var r=i(910),s=i.n(r),n=i(8803),o=i(1298);let ProvidersApi=class ProvidersApi{constructor(e){this.container=e;let t=s()();this.providers={[o.Q7.GitHub]:{...o.Mt[o.Q7.GitHub],provider:t.github,getCurrentUserFn:t.github.getCurrentUser.bind(t.github),getPullRequestsForReposFn:t.github.getPullRequestsForRepos.bind(t.github),getIssuesForReposFn:t.github.getIssuesForRepos.bind(t.github)},[o.PY.GitHubEnterprise]:{...o.Mt[o.PY.GitHubEnterprise],provider:t.github,getCurrentUserFn:t.github.getCurrentUser.bind(t.github),getPullRequestsForReposFn:t.github.getPullRequestsForRepos.bind(t.github),getIssuesForReposFn:t.github.getIssuesForRepos.bind(t.github)},[o.Q7.GitLab]:{...o.Mt[o.Q7.GitLab],provider:t.gitlab,getCurrentUserFn:t.gitlab.getCurrentUser.bind(t.gitlab),getPullRequestsForReposFn:t.gitlab.getPullRequestsForRepos.bind(t.gitlab),getPullRequestsForRepoFn:t.gitlab.getPullRequestsForRepo.bind(t.gitlab),getIssuesForReposFn:t.gitlab.getIssuesForRepos.bind(t.gitlab),getIssuesForRepoFn:t.gitlab.getIssuesForRepo.bind(t.gitlab)},[o.PY.GitLabSelfHosted]:{...o.Mt[o.PY.GitLabSelfHosted],provider:t.gitlab,getCurrentUserFn:t.gitlab.getCurrentUser.bind(t.gitlab),getPullRequestsForReposFn:t.gitlab.getPullRequestsForRepos.bind(t.gitlab),getPullRequestsForRepoFn:t.gitlab.getPullRequestsForRepo.bind(t.gitlab),getIssuesForReposFn:t.gitlab.getIssuesForRepos.bind(t.gitlab),getIssuesForRepoFn:t.gitlab.getIssuesForRepo.bind(t.gitlab)},[o.Q7.Bitbucket]:{...o.Mt[o.Q7.Bitbucket],provider:t.bitbucket,getCurrentUserFn:t.bitbucket.getCurrentUser.bind(t.bitbucket),getPullRequestsForReposFn:t.bitbucket.getPullRequestsForRepos.bind(t.bitbucket),getPullRequestsForRepoFn:t.bitbucket.getPullRequestsForRepo.bind(t.bitbucket)},[o.Q7.AzureDevOps]:{...o.Mt[o.Q7.AzureDevOps],provider:t.azureDevOps,getCurrentUserForInstanceFn:t.azureDevOps.getCurrentUserForInstance.bind(t.azureDevOps),getPullRequestsForReposFn:t.azureDevOps.getPullRequestsForRepos.bind(t.azureDevOps),getPullRequestsForRepoFn:t.azureDevOps.getPullRequestsForRepo.bind(t.azureDevOps),getIssuesForAzureProjectFn:t.azureDevOps.getIssuesForAzureProject.bind(t.azureDevOps),getReposForAzureProjectFn:t.azureDevOps.getReposForAzureProject.bind(t.azureDevOps)},[o.tp.Jira]:{...o.Mt[o.tp.Jira],provider:t.jira,getCurrentUserForResourceFn:t.jira.getCurrentUserForResource.bind(t.jira),getJiraResourcesForCurrentUserFn:t.jira.getJiraResourcesForCurrentUser.bind(t.jira),getJiraProjectsForResourcesFn:t.jira.getJiraProjectsForResources.bind(t.jira),getIssueFn:t.jira.getIssue.bind(t.jira),getIssuesForProjectFn:t.jira.getIssuesForProject.bind(t.jira),getIssuesForResourceForCurrentUserFn:t.jira.getIssuesForResourceForCurrentUser.bind(t.jira)},[o.tp.Trello]:{...o.Mt[o.tp.Trello],provider:t.trello}}}providers;getScopesForProvider(e){return this.providers[e]?.scopes}getProviderDomain(e){return this.providers[e]?.domain}getProviderPullRequestsPagingMode(e){return this.providers[e]?.pullRequestsPagingMode}getProviderIssuesPagingMode(e){return this.providers[e]?.issuesPagingMode}providerSupportsPullRequestFilters(e,t){return this.providers[e]?.supportedPullRequestFilters!=null&&t.every(t=>this.providers[e]?.supportedPullRequestFilters?.includes(t))}providerSupportsIssueFilters(e,t){return this.providers[e]?.supportedIssueFilters!=null&&t.every(t=>this.providers[e]?.supportedIssueFilters?.includes(t))}isRepoIdsInput(e){return null!=e&&Array.isArray(e)&&e.every(e=>"string"==typeof e||"number"==typeof e)}async getProviderToken(e,t){let i=null==e.domain||null==e.scopes?void 0:{domain:e.domain,scopes:e.scopes};try{return(await this.container.integrationAuthentication.getSession(e.id,i,{createIfNeeded:t?.createSessionIfNeeded}))?.accessToken}catch{return}}async ensureProviderTokenAndFunction(e,t,i){let r=this.providers[e];if(null==r)throw Error(`Provider with id ${e} not registered`);let s=i??await this.getProviderToken(r);if(null==s)throw Error(`Not connected to provider ${e}`);if(null==r[t])throw Error(`Provider with id ${e} does not support function: ${t}`);return{provider:r,token:s}}handleProviderError(e,t,i){if(null==this.providers[e])throw Error(`Provider with id ${e} not registered`);if(e===o.tp.Jira&&i?.response?.status!=null){if(401===i.response.status)throw new n.v3(e,n.R.Forbidden,i);if(429===i.response.status){let e;let r=i.response.headers?.["x-ratelimit-reset"];throw null!=r&&Number.isNaN(e=parseInt(r,10))&&(e=void 0),new n.qc(i,t,e)}if(i.response.status>=400&&i.response.status<500)throw new n.Iz(i)}throw i}async getPagedResult(e,t,i,r,s="{}"){let n;try{n=JSON.parse(s)}catch{n={}}let o=n.value,a=n.type,l={};"page"===a?l={page:o}:"cursor"===a&&(l={cursor:o});let h={...t,...l},c=await i?.(h,{token:r,isPAT:e.usesPAT});if(null==c)return{values:[]};let u=c.pageInfo?.hasNextPage??!1,d="{}";return c.pageInfo?.endCursor!=null?d=JSON.stringify({value:c.pageInfo?.endCursor,type:"cursor"}):c.pageInfo?.nextPage!=null&&(d=JSON.stringify({value:c.pageInfo?.nextPage,type:"page"})),{values:c.data,paging:{cursor:d,more:u}}}async getPullRequestsForRepos(e,t,i){let{provider:r,token:s}=await this.ensureProviderTokenAndFunction(e,"getPullRequestsForReposFn",i?.accessToken);return this.getPagedResult(r,{...this.isRepoIdsInput(t)?{repoIds:t}:{repos:t},...i},r.getPullRequestsForReposFn,s,i?.cursor)}async getPullRequestsForRepo(e,t,i){let{provider:r,token:s}=await this.ensureProviderTokenAndFunction(e,"getPullRequestsForRepoFn",i?.accessToken);return this.getPagedResult(r,{repo:t,...i},r.getPullRequestsForRepoFn,s,i?.cursor)}async getIssuesForRepos(e,t,i){let{provider:r,token:s}=await this.ensureProviderTokenAndFunction(e,"getIssuesForReposFn",i?.accessToken);return this.getPagedResult(r,{...this.isRepoIdsInput(t)?{repoIds:t}:{repos:t},...i},r.getIssuesForReposFn,s,i?.cursor)}async getIssuesForRepo(e,t,i){let{provider:r,token:s}=await this.ensureProviderTokenAndFunction(e,"getIssuesForRepoFn",i?.accessToken);return this.getPagedResult(r,{repo:t,...i},r.getIssuesForRepoFn,s,i?.cursor)}async getIssuesForAzureProject(e,t,i){let{provider:r,token:s}=await this.ensureProviderTokenAndFunction(o.Q7.AzureDevOps,"getIssuesForAzureProjectFn",i?.accessToken);return this.getPagedResult(r,{namespace:e,project:t,...i},r.getIssuesForAzureProjectFn,s,i?.cursor)}async getReposForAzureProject(e,t,i){let{provider:r,token:s}=await this.ensureProviderTokenAndFunction(o.Q7.AzureDevOps,"getReposForAzureProjectFn",i?.accessToken);return this.getPagedResult(r,{namespace:e,project:t,...i},r.getReposForAzureProjectFn,s,i?.cursor)}async getCurrentUser(e,t){let{provider:i,token:r}=await this.ensureProviderTokenAndFunction(e,"getCurrentUserFn",t?.accessToken);return(await i.getCurrentUserFn?.({token:r,isPAT:i.usesPAT}))?.data}async getCurrentUserForInstance(e,t,i){let{provider:r,token:s}=await this.ensureProviderTokenAndFunction(e,"getCurrentUserForInstanceFn",i?.accessToken);return(await r.getCurrentUserForInstanceFn?.({namespace:t},{token:s,isPAT:r.usesPAT}))?.data}async getCurrentUserForResource(e,t,i){let{provider:r,token:s}=await this.ensureProviderTokenAndFunction(e,"getCurrentUserForResourceFn",i?.accessToken);try{return(await r.getCurrentUserForResourceFn?.({resourceId:t},{token:s}))?.data}catch(t){return this.handleProviderError(e,s,t)}}async getJiraResourcesForCurrentUser(e){let{provider:t,token:i}=await this.ensureProviderTokenAndFunction(o.tp.Jira,"getJiraResourcesForCurrentUserFn",e?.accessToken);try{return(await t.getJiraResourcesForCurrentUserFn?.({token:i}))?.data}catch(e){return this.handleProviderError(o.tp.Jira,i,e)}}async getJiraProjectsForResources(e,t){let{provider:i,token:r}=await this.ensureProviderTokenAndFunction(o.tp.Jira,"getJiraProjectsForResourcesFn",t?.accessToken);try{return(await i.getJiraProjectsForResourcesFn?.({resourceIds:e},{token:r}))?.data}catch(e){return this.handleProviderError(o.tp.Jira,r,e)}}async getIssuesForProject(e,t,i,r){let{provider:s,token:n}=await this.ensureProviderTokenAndFunction(e,"getIssuesForProjectFn",r?.accessToken);try{let e=await s.getIssuesForProjectFn?.({project:t,resourceId:i,...r},{token:n});return e?.data}catch(t){return this.handleProviderError(e,n,t)}}async getIssuesForResourceForCurrentUser(e,t,i){let{provider:r,token:s}=await this.ensureProviderTokenAndFunction(e,"getIssuesForResourceForCurrentUserFn",i?.accessToken);try{let e=await r.getIssuesForResourceForCurrentUserFn?.({resourceId:t},{token:s});return e?.data}catch(t){return this.handleProviderError(e,s,t)}}async getIssue(e,t,i,r){let{provider:s,token:n}=await this.ensureProviderTokenAndFunction(e,"getIssueFn",r?.accessToken);try{let e=await s.getIssueFn?.({resourceId:t,number:i},{token:n});return e?.data}catch(t){return this.handleProviderError(e,n,t)}}}},7463:(e,t,i)=>{i.d(t,{D:()=>o,H:()=>a});var r=i(910),s=i(7279),n=i(1298);function o(e){var t;let i,n=r.EntityType.Issue;"pullrequest"===e.type&&(n=r.EntityType.PullRequest);let o=r.EntityIdentifierProviderType.Github;return t=e.provider.domain,(0,s.Q_)(t,"github.com")||(o=r.EntityIdentifierProviderType.GithubEnterprise,i=e.provider.domain),{provider:o,entityType:n,version:r.EntityVersion.One,domain:i,entityId:void 0!==e.uuid?e.graphQLId:e.nodeId}}function a(e){switch(e.provider){case r.EntityIdentifierProviderType.Github:return n.Q7.GitHub;case r.EntityIdentifierProviderType.GithubEnterprise:return n.PY.GitHubEnterprise;default:return}}},1014:(e,t,i)=>{i.d(t,{G5:()=>l,KH:()=>a,l7:()=>h});var r=i(1398),s=i(3807),n=i(2471),o=i(4293);async function a(e,t,i,s){for(;;){let n=await e.subscription.getSubscription();if(n.account?.verified===!1){let s={title:"Resend Email"},n={title:"Cancel",isCloseAffordance:!0};if(await r.window.showWarningMessage(`${t}

You must verify your email before you can continue.`,{modal:!0},s,n)===s&&await e.subscription.resendVerification(i))continue;return!1}let a=n.plan.effective.id;if((0,o.zx)(a))break;if(s?.allowPreview&&null==n.account&&!(0,o.lc)(n)){let s={title:"Continue"},n={title:"Cancel",isCloseAffordance:!0};if(await r.window.showWarningMessage(`${t}

Do you want to continue to get immediate access to preview local Pro features for 3 days?`,{modal:!0},s,n)!==s)return!1;e.subscription.startPreviewTrial(i);break}if(null==n.account){let s={title:"Start Pro Trial"},n={title:"Sign In"},o={title:"Cancel",isCloseAffordance:!0},a=await r.window.showWarningMessage(`${t}

Do you want to start your free 7-day Pro trial for full access to Pro features?`,{modal:!0},s,n,o);if((a===s||a===n)&&await e.subscription.loginOrSignUp(a===s,i))continue}else{let s={title:"Upgrade to Pro"},n={title:"Cancel",isCloseAffordance:!0};await r.window.showWarningMessage(`${t}

Do you want to upgrade for full access to Pro features?`,{modal:!0},s,n)===s&&e.subscription.upgrade(i)}return!1}return!0}async function l(e,t,i){for(;;){let s=await e.subscription.getSubscription();if(s.account?.verified===!1){let s={title:"Resend Email"},n={title:"Cancel",isCloseAffordance:!0};if(await r.window.showWarningMessage(`${t}

You must verify your email before you can continue.`,{modal:!0},s,n)===s&&await e.subscription.resendVerification(i))continue;return!1}if(null!=s.account)break;let n={title:"Sign Up"},o={title:"Sign In"},a={title:"Cancel",isCloseAffordance:!0},l=await r.window.showWarningMessage(`${t}

Sign up for access to Pro features and our DevEx platform, or sign in`,{modal:!0},n,o,a);if(l===o){if(await e.subscription.loginOrSignUp(!1,i))continue}else if(l===n&&await e.subscription.loginOrSignUp(!0,i))continue;return!1}return!0}async function h(e){if(e.storage.get("confirm:draft:storage",!1))return!0;for(;;){let t={title:"Continue"},i={title:"Cancel",isCloseAffordance:!0},o={title:"Learn More"},a={title:"Security"},l=await r.window.showInformationMessage("Cloud Patches are securely stored by GitKraken and can be accessed by anyone with the link and a GitKraken account.",{modal:!0},t,o,a,i);if(l===t)return e.storage.store("confirm:draft:storage",!0),!0;if(l===a){(0,n.CZ)(s.DS.security);continue}if(l===o){(0,n.CZ)(s.DS.cloudPatches);continue}return!1}}},9542:(e,t,i)=>{i.d(t,{AccountWebviewProvider:()=>AccountWebviewProvider});var r=i(1398),s=i(5176),n=i(7899),o=i(560);let a=new(i(3355)).C1("account","subscription/didChange");let AccountWebviewProvider=class AccountWebviewProvider{constructor(e,t){this.container=e,this.host=t,this._disposable=r.Disposable.from(this.container.subscription.onDidChange(this.onSubscriptionChanged,this))}_disposable;dispose(){this._disposable.dispose()}onSubscriptionChanged(e){this.notifyDidChangeSubscription(e.current)}registerCommands(){return[(0,n.Lb)(`${this.host.id}.refresh`,async()=>{await this.validateSubscriptionCore(!0),await this.host.refresh(!0)},this)]}includeBootstrap(){return this.getState()}onReloaded(){this.notifyDidChangeSubscription()}onVisibilityChanged(e){if(!e){this._validateSubscriptionDebounced?.cancel();return}queueMicrotask(()=>void this.validateSubscription())}onWindowFocusChanged(e){if(!e||!this.host.visible){this._validateSubscriptionDebounced?.cancel();return}queueMicrotask(()=>void this.validateSubscription())}async getSubscription(e){let t;let i=e??await this.container.subscription.getSubscription(!0);return t=i.account?.email?(0,s.ML)(i.account.email,34).toString():`${this.host.getWebRoot()??""}/media/gitlens-logo.webp`,{subscription:i,avatar:t,organizationsCount:(await this.container.organizations.getOrganizations()??[]).length}}async getState(e){let t=await this.getSubscription(e);return{...this.host.baseWebviewState,webroot:this.host.getWebRoot(),subscription:t.subscription,avatar:t.avatar,organizationsCount:t.organizationsCount}}notifyDidChangeSubscription(e){return r.window.withProgress({location:{viewId:this.host.id}},async()=>{let t=await this.getSubscription(e);return this.host.notify(a,{...t})})}_validateSubscriptionDebounced=void 0;async validateSubscription(){null==this._validateSubscriptionDebounced&&(this._validateSubscriptionDebounced=(0,o.sg)(this.validateSubscriptionCore,1e3)),await this._validateSubscriptionDebounced()}_validating;async validateSubscriptionCore(e){if(null==this._validating||e){this._validating=this.container.subscription.validate({force:e});try{await this._validating}finally{this._validating=void 0}}}}},1070:(e,t,i)=>{i.d(t,{FocusWebviewProvider:()=>FocusWebviewProvider});var r=i(910),s=i(1398),n=i(3807),o=i(4703),a=i(7531),l=i(3161),h=i(9102),c=i(8559),u=i(304),d=i(6645),p=i(9634),g=i(3607),m=i(1225),f=i(7899),w=i(8180),v=i(3916),y=i(3446),b=i(4232),C=i(3131),R=i(2048),S=i(7463),P=i(3355);let A="focus",k=new P.Q2(A,"pr/openWorktree"),D=new P.Q2(A,"pr/openBranch"),T=new P.Q2(A,"pr/switchToBranch"),_=new P.Q2(A,"pr/snooze"),I=new P.Q2(A,"pr/pin"),$=new P.Q2(A,"issue/snooze"),E=new P.Q2(A,"issue/pin"),O=new P.C1(A,"didChange",!0);var x=Object.defineProperty,F=Object.getOwnPropertyDescriptor,B=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?F(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&x(t,i,n),n};let FocusWebviewProvider=class FocusWebviewProvider{constructor(e,t){this.container=e,this.host=t,this._disposable=s.Disposable.from(this.container.subscription.onDidChange(this.onSubscriptionChanged,this),this.container.git.onDidChangeRepositories(async()=>{this._etag!==this.container.git.etag&&(null==this._discovering||(this._etag=await this._discovering,this._etag!==this.container.git.etag))&&this.host.refresh(!0)}))}_pullRequests=[];_issues=[];_discovering;_disposable;_etag;_etagSubscription;_repositoryEventsDisposable;_repos;_enrichedItems;dispose(){null!=this.enrichmentExpirationTimeout&&(clearTimeout(this.enrichmentExpirationTimeout),this.enrichmentExpirationTimeout=void 0),this._disposable.dispose()}onMessageReceived(e){switch(!0){case D.is(e):this.onOpenBranch(e.params);break;case T.is(e):this.onSwitchBranch(e.params);break;case k.is(e):this.onOpenWorktree(e.params);break;case _.is(e):this.onSnoozePr(e.params);break;case I.is(e):this.onPinPr(e.params);break;case $.is(e):this.onSnoozeIssue(e.params);break;case E.is(e):this.onPinIssue(e.params)}}async onPinIssue({issue:e,pin:t}){let i=this._issues?.find(t=>t.issue.nodeId===e.nodeId);if(null!=i){if(t)await this.container.enrichments.unpinItem(t),this._enrichedItems=this._enrichedItems?.filter(e=>e.id!==t),i.enriched=i.enriched?.filter(e=>e.id!==t);else{let e={type:"issue",id:r.EntityIdentifierUtils.encode((0,S.D)(i.issue)),provider:(0,R.A)(i.repoAndRemote.remote.provider),url:i.issue.url},t=await this.container.enrichments.pinItem(e);if(null==t)return;null==this._enrichedItems&&(this._enrichedItems=[]),this._enrichedItems.push(t),null==i.enriched&&(i.enriched=[]),i.enriched.push(t)}this.notifyDidChangeState()}}async onSnoozeIssue({issue:e,snooze:t,expiresAt:i}){let s=this._issues?.find(t=>t.issue.nodeId===e.nodeId);if(null!=s){if(t)await this.container.enrichments.unsnoozeItem(t),this._enrichedItems=this._enrichedItems?.filter(e=>e.id!==t),s.enriched=s.enriched?.filter(e=>e.id!==t);else{let e={type:"issue",id:r.EntityIdentifierUtils.encode((0,S.D)(s.issue)),provider:(0,R.A)(s.repoAndRemote.remote.provider),url:s.issue.url};null!=i&&(e.expiresAt=i);let t=await this.container.enrichments.snoozeItem(e);if(null==t)return;null==this._enrichedItems&&(this._enrichedItems=[]),this._enrichedItems.push(t),null==s.enriched&&(s.enriched=[]),s.enriched.push(t)}this.notifyDidChangeState()}}async onPinPr({pullRequest:e,pin:t}){let i=this._pullRequests?.find(t=>t.pullRequest.nodeId===e.nodeId);if(null!=i){if(t)await this.container.enrichments.unpinItem(t),this._enrichedItems=this._enrichedItems?.filter(e=>e.id!==t),i.enriched=i.enriched?.filter(e=>e.id!==t);else{let e={type:"pr",id:r.EntityIdentifierUtils.encode((0,S.D)(i.pullRequest)),provider:(0,R.A)(i.repoAndRemote.remote.provider),url:i.pullRequest.url},t=await this.container.enrichments.pinItem(e);if(null==t)return;null==this._enrichedItems&&(this._enrichedItems=[]),this._enrichedItems.push(t),null==i.enriched&&(i.enriched=[]),i.enriched.push(t)}this.notifyDidChangeState()}}async onSnoozePr({pullRequest:e,snooze:t,expiresAt:i}){let s=this._pullRequests?.find(t=>t.pullRequest.nodeId===e.nodeId);if(null!=s){if(t)await this.container.enrichments.unsnoozeItem(t),this._enrichedItems=this._enrichedItems?.filter(e=>e.id!==t),s.enriched=s.enriched?.filter(e=>e.id!==t);else{let e={type:"pr",id:r.EntityIdentifierUtils.encode((0,S.D)(s.pullRequest)),provider:(0,R.A)(s.repoAndRemote.remote.provider),url:s.pullRequest.url};null!=i&&(e.expiresAt=i);let t=await this.container.enrichments.snoozeItem(e);if(null==t)return;null==this._enrichedItems&&(this._enrichedItems=[]),this._enrichedItems.push(t),null==s.enriched&&(s.enriched=[]),s.enriched.push(t)}this.notifyDidChangeState()}}findSearchedPullRequest(e){return this._pullRequests?.find(t=>t.pullRequest.id===e.id)}async getRemoteBranch(e){let t,i;let r=e.pullRequest,n=e.repoAndRemote,o=n.repo.uri,l=await n.repo.getCommonRepository();if(null==l){s.window.showWarningMessage(`Unable to find main repository(${o.toString()}) for PR #${r.id}`);return}let h=r.refs.base.owner,c=s.Uri.parse(r.refs.base.url),u=r.refs.head.branch,p=s.Uri.parse(r.refs.head.url),g=p.toString(),[,f,w]=(0,m.BX)(g);if([t]=await l.getRemotes({filter:e=>e.matches(f,w)}),null!=t)i=`${t.name}/${u}`,await this.container.git.fetch(l.path,{remote:t.name});else{let e=await s.window.showInformationMessage(`Unable to find a remote for '${g}'. Would you like to add a new remote?`,{modal:!0},{title:"Add Remote"},{title:"Cancel",isCloseAffordance:!0});if(e?.title!=="Yes")return;let n=r.refs.head.owner;if(await (0,a.WQ)(l,n,g,{confirm:!1,fetch:!0,reveal:!1}),[t]=await l.getRemotes({filter:e=>e.url===g}),null==t)return;i=`${t.name}/${u}`;let o=r.refs.base.repo,d=`pr/${c.toString()===p.toString()?u:i}`;this.container.git.setConfig(l.path,`branch.${d}.github-pr-owner-number`,`${h}#${o}#${r.id}`)}return{remote:t,reference:(0,d.kA)(i,l.path,{refType:"branch",name:i,remote:!0})}}async onOpenBranch({pullRequest:e}){let t=this.findSearchedPullRequest(e);if(null==t)return;let i=await this.getRemoteBranch(t);if(null==i){s.window.showErrorMessage(`Unable to find remote branch for '${t.pullRequest.refs?.head.owner}:${t.pullRequest.refs?.head.branch}'`);return}(0,f.RS)(n.Ts.ShowInCommitGraph,{ref:i.reference})}async onSwitchBranch({pullRequest:e}){let t=this.findSearchedPullRequest(e);if(null==t||t.isCurrentBranch)return;if(null!=t.branch)return l.S_(t.branch.repoPath,t.branch);let i=await this.getRemoteBranch(t);if(null==i){s.window.showErrorMessage(`Unable to find remote branch for '${t.pullRequest.refs?.head.owner}:${t.pullRequest.refs?.head.branch}'`);return}return l.S_(i.remote.repoPath,i.reference)}async onOpenWorktree({pullRequest:e}){let t=this.findSearchedPullRequest(e);if(t?.repoAndRemote==null)return;let i=s.Uri.parse(e.refs.base.url),r=t.repoAndRemote.repo.uri;return(0,f.RS)(n.Ts.OpenOrCreateWorktreeForGHPR,{base:{repositoryCloneUrl:{repositoryName:e.refs.base.repo,owner:e.refs.base.owner,url:i}},githubRepository:{rootUri:r},head:{ref:e.refs.head.branch,sha:e.refs.head.sha,repositoryCloneUrl:{repositoryName:e.refs.head.repo,owner:e.refs.head.owner,url:s.Uri.parse(e.refs.head.url)}},item:{number:parseInt(e.id,10)}})}onSubscriptionChanged(e){e.etag!==this._etagSubscription&&(this._etagSubscription=e.etag,this._access=void 0,this.notifyDidChangeState())}_access;async getAccess(e){return(e||null==this._access)&&(this._access=await this.container.git.access(o.k.Focus)),this._access}enrichmentExpirationTimeout;ensureEnrichmentExpirationCore(e){let t;if(null!=this.enrichmentExpirationTimeout&&(clearTimeout(this.enrichmentExpirationTimeout),this.enrichmentExpirationTimeout=void 0),null==e||0===e.length)return;let i=Date.now();for(let r of e){if(null==r.expiresAt)continue;let e=new Date(r.expiresAt).getTime();(null==t||e>i&&e<t)&&(t=e)}if(null==t)return;let r=t+9e5;for(let i of e){if(null==i.expiresAt)continue;let e=new Date(i.expiresAt).getTime();e>t&&e<r&&(t=e)}let s=t-i+6e4;this.enrichmentExpirationTimeout=setTimeout(()=>{this.notifyDidChangeState(!0)},s)}async getState(e,t){let i=this.host.baseWebviewState;this._etag=this.container.git.etag,this.container.git.isDiscoveringRepositories&&(this._discovering=this.container.git.isDiscoveringRepositories.then(e=>(this._discovering=void 0,e)),this._etag=await this._discovering);let r=await this.getAccess(e);if(!0!==r.allowed)return{...i,access:r};let s=(await this.getRichRepos(e)).filter(e=>e.isGitHub),n=s.filter(e=>e.isConnected&&e.isGitHub);if(!(n.length>0))return{...i,access:r,repos:s.map(e=>W(e))};let o=n.map(e=>W(e)),a=Promise.allSettled([this.getMyPullRequests(n,e),this.getMyIssues(n,e),this.getEnrichedItems(e)]),l=async()=>{let[e,t,s]=await a,n=[],l=C.Ro(e)?.map(e=>{let t=L(e,C.Ro(s));return null!=t&&n.push(...t),{pullRequest:u.pf(e.pullRequest),reasons:e.reasons,isCurrentBranch:e.isCurrentBranch??!1,isCurrentWorktree:e.isCurrentWorktree??!1,hasWorktree:e.hasWorktree??!1,hasLocalBranch:e.hasLocalBranch??!1,enriched:U(t),rank:e.rank}}),h=C.Ro(t)?.map(e=>{let t=L(e,C.Ro(s));return null!=t&&n.push(...t),{issue:c.Uf(e.issue),reasons:e.reasons,enriched:U(t),rank:e.rank}});return this.ensureEnrichmentExpirationCore(n),{...i,access:r,repos:o,pullRequests:l,issues:h}};return t?(queueMicrotask(async()=>{let e=await l();this.host.notify(O,{state:e})}),{...i,access:r,repos:o}):await l()}async includeBootstrap(){return this.getState(!0,!0)}async getRichRepos(e){if(e||null==this._repos){let e=[],t=[];for(let i of this.container.git.openRepositories){let r=await i.getBestRemoteWithIntegration({includeDisconnected:!0});if(null==r||e.findIndex(e=>e.remote===r)>-1)continue;t.push(i.onDidChange(this.onRepositoryChanged,this));let s=await this.container.integrations.getByRemote(r);e.push({repo:i,remote:r,isConnected:s?.maybeConnected??await s?.isConnected()??!1,isGitHub:"github"===r.provider.id})}this._repositoryEventsDisposable&&(this._repositoryEventsDisposable.dispose(),this._repositoryEventsDisposable=void 0),this._repositoryEventsDisposable=s.Disposable.from(...t),this._repos=e}return this._repos}onRepositoryChanged(e){e.changed(p.Z_.RemoteProviders,p.Ti.Any)&&this.notifyDidChangeState(!0)}async getMyPullRequests(e,t){let i=(0,y.dQ)();if(t||null==this._pullRequests){let t=[],r=new Map,s=new Map;for(let[n,o]of e.map(e=>[e,this.container.integrations.getMyPullRequestsForRemotes(e.remote)])){let e;try{e=await o}catch(e){v.Vy.error(e,i,`Failed to get prs for '${n.remote.url}'`)}if(null!=e)for(let i of e){if(0===i.reasons.length)continue;let e={...i,repoAndRemote:n,isCurrentWorktree:!1,isCurrentBranch:!1,rank:function(e){let t=0;return e.reasons.includes("authored")?t+=1e3:e.reasons.includes("assigned")?t+=900:e.reasons.includes("review-requested")?t+=800:e.reasons.includes("mentioned")&&(t+=700),e.pullRequest.reviewDecision===u.dq.Approved?e.pullRequest.mergeableState===u.Q6.Mergeable?t+=100:e.pullRequest.mergeableState===u.Q6.Conflicting?t+=90:t+=80:e.pullRequest.reviewDecision===u.dq.ChangesRequested&&(t+=70),t}(i)},o=`${e.pullRequest.refs.head.owner}/${e.pullRequest.refs.head.branch}`,a=r.get(e.repoAndRemote.repo);null==a&&(a=new b.t(t=>e.repoAndRemote.repo.getBranches(null!=t?{paging:t}:void 0)),r.set(e.repoAndRemote.repo,a));let l=s.get(e.repoAndRemote.repo);null==l&&(l=await e.repoAndRemote.repo.getWorktrees(),s.set(e.repoAndRemote.repo,l));let c=await (0,g.vV)(e.repoAndRemote.repo,e.pullRequest.refs.head.branch,o,l,a);e.hasWorktree=null!=c,e.isCurrentWorktree=c?.opened===!0;let d=await (0,h.kY)(n.repo,o,a);d&&(e.branch=d,e.hasLocalBranch=!0,e.isCurrentBranch=d.current),t.push(e)}}this._pullRequests=t.sort((e,t)=>{let i=e.rank,r=t.rank;return i===r?e.pullRequest.updatedDate.getTime()-t.pullRequest.updatedDate.getTime():(r??0)-(i??0)})}return this._pullRequests}async getMyIssues(e,t){let i=(0,y.dQ)();if(t||null==this._pullRequests){let t=[];for(let[r,s]of e.map(e=>[e,this.container.integrations.getMyIssuesForRemotes(e.remote)])){let e;try{e=await s}catch(e){v.Vy.error(e,i,`Failed to get issues for '${r.remote.url}'`)}if(null!=e)for(let i of e)0!==i.reasons.length&&t.push({...i,repoAndRemote:r,rank:0})}this._issues=t.sort((e,t)=>t.issue.updatedDate.getTime()-e.issue.updatedDate.getTime())}return this._issues}async getEnrichedItems(e){if(e||null==this._enrichedItems){let e=await this.container.enrichments.get();this._enrichedItems=e}return this._enrichedItems}async notifyDidChangeState(e,t){this.host.notify(O,{state:await this.getState(e,t)})}};function L(e,t){let i;if(null==t||0===t.length){e.enriched=void 0;return}if(0!==(i=null!=e.pullRequest?t.filter(t=>t.entityUrl===e.pullRequest.url):t.filter(t=>t.entityUrl===e.issue.url)).length)return e.enriched=i,i}function U(e){if(null!=e&&0!==e.length)return e.map(e=>({id:e.id,type:e.type,expiresAt:e.expiresAt}))}function W(e){return{repo:e.repo.path,isGitHub:e.isGitHub,isConnected:e.isConnected}}B([(0,w.Yz)({args:!1})],FocusWebviewProvider.prototype,"onPinIssue",1),B([(0,w.Yz)({args:!1})],FocusWebviewProvider.prototype,"onSnoozeIssue",1),B([(0,w.Yz)({args:!1})],FocusWebviewProvider.prototype,"onPinPr",1),B([(0,w.Yz)({args:!1})],FocusWebviewProvider.prototype,"onSnoozePr",1),B([(0,w.Yz)({args:!1})],FocusWebviewProvider.prototype,"onOpenBranch",1),B([(0,w.Yz)({args:!1})],FocusWebviewProvider.prototype,"onSwitchBranch",1),B([(0,w.Yz)({args:!1})],FocusWebviewProvider.prototype,"onOpenWorktree",1),B([(0,w.Yz)()],FocusWebviewProvider.prototype,"getAccess",1),B([(0,w.Yz)()],FocusWebviewProvider.prototype,"getState",1),B([(0,w.Yz)()],FocusWebviewProvider.prototype,"getRichRepos",1),B([(0,w.Yz)({args:{0:!1}})],FocusWebviewProvider.prototype,"getMyPullRequests",1),B([(0,w.Yz)({args:{0:!1}})],FocusWebviewProvider.prototype,"getMyIssues",1),B([(0,w.Yz)()],FocusWebviewProvider.prototype,"getEnrichedItems",1)},7573:(e,t,i)=>{i.d(t,{GraphWebviewProvider:()=>GraphWebviewProvider});var r=i(1398),s=i(5176),n=i(3900),o=i(3807),a=i(8803),l=i(4703),h=i(1885),c=i(9432),u=i(3708),d=i(3161),p=i(300),g=i(2013),m=i(8880),f=i(1310),w=i(9102),v=i(5313),y=i(4693),b=i(304),C=i(6645),R=i(7788),S=i(2124),P=i(9634),A=i(3269),k=i(6964),D=i(7899),T=i(4832),_=i(8973),I=i(6950),$=i(8180),E=i(560),O=i(4026),x=i(3395),F=i(3131),B=i(2471),L=i(4125),U=i(4118),W=i(1500),q=i(3355);let M="graph",N=["upstream","pullRequest","issue"],H=new q.Q2(M,"chooseRepository"),G=new q.Q2(M,"dblclick"),V=new q.Q2(M,"avatars/get"),Q=new q.Q2(M,"refs/metadata/get"),j=new q.Q2(M,"rows/get"),z=new q.Q2(M,"pullRequest/openDetails"),Y=new q.Q2(M,"search/openInView"),K=new q.Q2(M,"columns/update"),J=new q.Q2(M,"dimMergeCommits"),Z=new q.Q2(M,"refs/update/visibility"),X=new q.Q2(M,"fitlers/update/excludeType"),ee=new q.Q2(M,"configuration/update"),et=new q.Q2(M,"fitlers/update/includeOnlyRefs"),ei=new q.Q2(M,"selection/update"),er=new q.Oz(M,"rows/ensure"),es=new q.Oz(M,"search"),en=new q.C1(M,"didChange",!0,!0),eo=new q.C1(M,"configuration/didChange"),ea=new q.C1(M,"subscription/didChange"),el=new q.C1(M,"avatars/didChange"),eh=new q.C1(M,"refs/didChangeMetadata"),ec=new q.C1(M,"columns/didChange"),eu=new q.C1(M,"scrollMarkers/didChange"),ed=new q.C1(M,"refs/didChangeVisibility"),ep=new q.C1(M,"rows/didChange",void 0,!0),eg=new q.C1(M,"rows/stats/didChange"),em=new q.C1(M,"selection/didChange"),ef=new q.C1(M,"workingTree/didChange"),ew=new q.C1(M,"didSearch"),ev=new q.C1(M,"didFetch");var ey=Object.defineProperty,eb=Object.getOwnPropertyDescriptor,eC=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?eb(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&ey(t,i,n),n};let eR={ref:{width:130,isHidden:!1,order:0},graph:{width:150,mode:void 0,isHidden:!1,order:1},message:{width:300,isHidden:!1,order:2},author:{width:130,isHidden:!1,order:3},changes:{width:200,isHidden:!1,order:4},datetime:{width:130,isHidden:!1,order:5},sha:{width:130,isHidden:!1,order:6}},eS={ref:{width:32,isHidden:!1},graph:{width:150,mode:"compact",isHidden:!1},author:{width:32,isHidden:!1,order:2},message:{width:500,isHidden:!1,order:3},changes:{width:200,isHidden:!1,order:4},datetime:{width:130,isHidden:!0,order:5},sha:{width:130,isHidden:!1,order:6}};let GraphWebviewProvider=class GraphWebviewProvider{constructor(e,t){this.container=e,this.host=t,this._showDetailsView=T.H.get("graph.showDetailsView"),this._theme=r.window.activeColorTheme,this.ensureRepositorySubscriptions(),this._disposable=r.Disposable.from(T.H.onDidChange(this.onConfigurationChanged,this),this.container.subscription.onDidChange(this.onSubscriptionChanged,this),this.container.git.onDidChangeRepositories(async()=>{this._etag!==this.container.git.etag&&(null==this._discovering||(this._etag=await this._discovering,this._etag!==this.container.git.etag))&&this.host.refresh(!0)}),r.window.onDidChangeActiveColorTheme(this.onThemeChanged,this),{dispose:()=>{null!=this._repositoryEventsDisposable&&(this._repositoryEventsDisposable.dispose(),this._repositoryEventsDisposable=void 0)}})}_repository;get repository(){return this._repository}set repository(e){if(this._repository===e){this.ensureRepositorySubscriptions();return}this._repository=e,this.resetRepositoryState(),this.ensureRepositorySubscriptions(!0),this.host.ready&&this.updateState()}_selection;get activeSelection(){return this._selection?.[0]}_discovering;_disposable;_etag;_etagSubscription;_etagRepository;_firstSelection=!0;_graph;_ipcNotificationMap=new Map([[ec,this.notifyDidChangeColumns],[eo,this.notifyDidChangeConfiguration],[en,this.notifyDidChangeState],[ed,this.notifyDidChangeRefsVisibility],[eu,this.notifyDidChangeScrollMarkers],[em,this.notifyDidChangeSelection],[ea,this.notifyDidChangeSubscription],[ef,this.notifyDidChangeWorkingTree],[ev,this.notifyDidFetch]]);_refsMetadata;_search;_searchCancellation;_selectedId;_selectedRows;_showDetailsView;_theme;_repositoryEventsDisposable;_lastFetchedDisposable;isWindowFocused=!0;dispose(){this._disposable.dispose()}canReuseInstance(...e){let t;if(1===this.container.git.openRepositoryCount)return!0;let[i]=e;return(0,P.Z6)(i)?t=i:eD(i)?t=this.container.git.getRepository(i.ref.repoPath):(0,W.c)(i)&&null!=i.state.selectedRepository&&(t=this.container.git.getRepository(i.state.selectedRepository)),t?.uri.toString()===this.repository?.uri.toString()||void 0}getSplitArgs(){return null!=this.repository?[this.repository]:[]}async onShowing(e,t,...i){this._firstSelection=!0,this._etag=this.container.git.etag,this.container.git.isDiscoveringRepositories&&(this._discovering=this.container.git.isDiscoveringRepositories.then(e=>(this._discovering=void 0,e)),this._etag=await this._discovering);let[r]=i;if((0,P.Z6)(r))this.repository=r;else if(eD(r)){this.repository=this.container.git.getRepository(r.ref.repoPath);let e=r.ref.ref;if((0,C.HH)(e)||(e=await this.container.git.resolveReference(r.ref.repoPath,e,void 0,{force:!0})),this.setSelectedRows(e),null!=this._graph){if(this._graph?.ids.has(e))return this.notifyDidChangeSelection(),!0;this.onGetMoreRows({id:e},!0)}}else if((0,W.c)(r)&&null!=r.state.selectedRepository&&(this.repository=this.container.git.getRepository(r.state.selectedRepository)),null==this.repository&&this.container.git.repositoryCount>1){let[t]=(0,n.qU)(o.Ts.ShowGraph,void 0,...i),r=Array.isArray(t)?t[0]:t;"scm"===r.type&&null!=r.scm.rootUri?this.repository=this.container.git.getRepository(r.scm.rootUri):"viewItem"===r.type&&r.node instanceof U.P&&(this.repository=r.node.repo),null!=this.repository&&!e&&this.host.ready&&this.updateState()}return!0}onRefresh(e){e&&this.resetRepositoryState()}includeBootstrap(){return this.getState(!0)}registerCommands(){let e=[];return this.host.isHost("view")&&e.push((0,D.Lb)(`${this.host.id}.refresh`,()=>this.host.refresh(!0)),(0,D.Lb)(`${this.host.id}.openInTab`,()=>void(0,D.RS)(o.Ts.ShowGraphPage,void 0,this.repository))),e.push(this.host.registerWebviewCommand("gitlens.graph.push",this.push),this.host.registerWebviewCommand("gitlens.graph.pull",this.pull),this.host.registerWebviewCommand("gitlens.graph.fetch",this.fetch),this.host.registerWebviewCommand("gitlens.graph.publishBranch",this.publishBranch),this.host.registerWebviewCommand("gitlens.graph.switchToAnotherBranch",this.switchToAnother),this.host.registerWebviewCommand("gitlens.graph.createBranch",this.createBranch),this.host.registerWebviewCommand("gitlens.graph.deleteBranch",this.deleteBranch),this.host.registerWebviewCommand("gitlens.graph.copyRemoteBranchUrl",e=>this.openBranchOnRemote(e,!0)),this.host.registerWebviewCommand("gitlens.graph.openBranchOnRemote",this.openBranchOnRemote),this.host.registerWebviewCommand("gitlens.graph.mergeBranchInto",this.mergeBranchInto),this.host.registerWebviewCommand("gitlens.graph.rebaseOntoBranch",this.rebase),this.host.registerWebviewCommand("gitlens.graph.rebaseOntoUpstream",this.rebaseToRemote),this.host.registerWebviewCommand("gitlens.graph.renameBranch",this.renameBranch),this.host.registerWebviewCommand("gitlens.graph.switchToBranch",this.switchTo),this.host.registerWebviewCommand("gitlens.graph.hideLocalBranch",this.hideRef),this.host.registerWebviewCommand("gitlens.graph.hideRemoteBranch",this.hideRef),this.host.registerWebviewCommand("gitlens.graph.hideRemote",e=>this.hideRef(e,{remote:!0})),this.host.registerWebviewCommand("gitlens.graph.hideRefGroup",e=>this.hideRef(e,{group:!0})),this.host.registerWebviewCommand("gitlens.graph.hideTag",this.hideRef),this.host.registerWebviewCommand("gitlens.graph.cherryPick",this.cherryPick),this.host.registerWebviewCommand("gitlens.graph.copyRemoteCommitUrl",e=>this.openCommitOnRemote(e,!0)),this.host.registerWebviewCommand("gitlens.graph.copyRemoteCommitUrl.multi",e=>this.openCommitOnRemote(e,!0)),this.host.registerWebviewCommand("gitlens.graph.openCommitOnRemote",this.openCommitOnRemote),this.host.registerWebviewCommand("gitlens.graph.openCommitOnRemote.multi",this.openCommitOnRemote),this.host.registerWebviewCommand("gitlens.graph.openSCM",this.openSCM),this.host.registerWebviewCommand("gitlens.graph.rebaseOntoCommit",this.rebase),this.host.registerWebviewCommand("gitlens.graph.resetCommit",this.resetCommit),this.host.registerWebviewCommand("gitlens.graph.resetToCommit",this.resetToCommit),this.host.registerWebviewCommand("gitlens.graph.resetToTip",this.resetToTip),this.host.registerWebviewCommand("gitlens.graph.revert",this.revertCommit),this.host.registerWebviewCommand("gitlens.graph.showInDetailsView",this.openInDetailsView),this.host.registerWebviewCommand("gitlens.graph.switchToCommit",this.switchTo),this.host.registerWebviewCommand("gitlens.graph.undoCommit",this.undoCommit),this.host.registerWebviewCommand("gitlens.graph.stash.save",this.saveStash),this.host.registerWebviewCommand("gitlens.graph.stash.apply",this.applyStash),this.host.registerWebviewCommand("gitlens.graph.stash.delete",this.deleteStash),this.host.registerWebviewCommand("gitlens.graph.stash.rename",this.renameStash),this.host.registerWebviewCommand("gitlens.graph.createTag",this.createTag),this.host.registerWebviewCommand("gitlens.graph.deleteTag",this.deleteTag),this.host.registerWebviewCommand("gitlens.graph.switchToTag",this.switchTo),this.host.registerWebviewCommand("gitlens.graph.createWorktree",this.createWorktree),this.host.registerWebviewCommand("gitlens.graph.createPullRequest",this.createPullRequest),this.host.registerWebviewCommand("gitlens.graph.openPullRequest",this.openPullRequest),this.host.registerWebviewCommand("gitlens.graph.openPullRequestChanges",this.openPullRequestChanges),this.host.registerWebviewCommand("gitlens.graph.openPullRequestComparison",this.openPullRequestComparison),this.host.registerWebviewCommand("gitlens.graph.openPullRequestOnRemote",this.openPullRequestOnRemote),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffsWithMergeBase",this.openChangedFileDiffsWithMergeBase),this.host.registerWebviewCommand("gitlens.graph.compareWithUpstream",this.compareWithUpstream),this.host.registerWebviewCommand("gitlens.graph.compareWithHead",this.compareHeadWith),this.host.registerWebviewCommand("gitlens.graph.compareWithWorking",this.compareWorkingWith),this.host.registerWebviewCommand("gitlens.graph.compareWithMergeBase",this.compareWithMergeBase),this.host.registerWebviewCommand("gitlens.graph.compareAncestryWithWorking",this.compareAncestryWithWorking),this.host.registerWebviewCommand("gitlens.graph.copy",this.copy),this.host.registerWebviewCommand("gitlens.graph.copyMessage",this.copyMessage),this.host.registerWebviewCommand("gitlens.graph.copySha",this.copySha),this.host.registerWebviewCommand("gitlens.graph.addAuthor",this.addAuthor),this.host.registerWebviewCommand("gitlens.graph.columnAuthorOn",()=>this.toggleColumn("author",!0)),this.host.registerWebviewCommand("gitlens.graph.columnAuthorOff",()=>this.toggleColumn("author",!1)),this.host.registerWebviewCommand("gitlens.graph.columnDateTimeOn",()=>this.toggleColumn("datetime",!0)),this.host.registerWebviewCommand("gitlens.graph.columnDateTimeOff",()=>this.toggleColumn("datetime",!1)),this.host.registerWebviewCommand("gitlens.graph.columnShaOn",()=>this.toggleColumn("sha",!0)),this.host.registerWebviewCommand("gitlens.graph.columnShaOff",()=>this.toggleColumn("sha",!1)),this.host.registerWebviewCommand("gitlens.graph.columnChangesOn",()=>this.toggleColumn("changes",!0)),this.host.registerWebviewCommand("gitlens.graph.columnChangesOff",()=>this.toggleColumn("changes",!1)),this.host.registerWebviewCommand("gitlens.graph.columnGraphOn",()=>this.toggleColumn("graph",!0)),this.host.registerWebviewCommand("gitlens.graph.columnGraphOff",()=>this.toggleColumn("graph",!1)),this.host.registerWebviewCommand("gitlens.graph.columnMessageOn",()=>this.toggleColumn("message",!0)),this.host.registerWebviewCommand("gitlens.graph.columnMessageOff",()=>this.toggleColumn("message",!1)),this.host.registerWebviewCommand("gitlens.graph.columnRefOn",()=>this.toggleColumn("ref",!0)),this.host.registerWebviewCommand("gitlens.graph.columnRefOff",()=>this.toggleColumn("ref",!1)),this.host.registerWebviewCommand("gitlens.graph.columnGraphCompact",()=>this.setColumnMode("graph","compact")),this.host.registerWebviewCommand("gitlens.graph.columnGraphDefault",()=>this.setColumnMode("graph",void 0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerLocalBranchOn",()=>this.toggleScrollMarker("localBranches",!0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerLocalBranchOff",()=>this.toggleScrollMarker("localBranches",!1)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerRemoteBranchOn",()=>this.toggleScrollMarker("remoteBranches",!0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerRemoteBranchOff",()=>this.toggleScrollMarker("remoteBranches",!1)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerStashOn",()=>this.toggleScrollMarker("stashes",!0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerStashOff",()=>this.toggleScrollMarker("stashes",!1)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerTagOn",()=>this.toggleScrollMarker("tags",!0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerTagOff",()=>this.toggleScrollMarker("tags",!1)),this.host.registerWebviewCommand("gitlens.graph.copyDeepLinkToBranch",this.copyDeepLinkToBranch),this.host.registerWebviewCommand("gitlens.graph.copyDeepLinkToCommit",this.copyDeepLinkToCommit),this.host.registerWebviewCommand("gitlens.graph.copyDeepLinkToRepo",this.copyDeepLinkToRepo),this.host.registerWebviewCommand("gitlens.graph.copyDeepLinkToTag",this.copyDeepLinkToTag),this.host.registerWebviewCommand("gitlens.graph.shareAsCloudPatch",this.shareAsCloudPatch),this.host.registerWebviewCommand("gitlens.graph.openChangedFiles",this.openFiles),this.host.registerWebviewCommand("gitlens.graph.openOnlyChangedFiles",this.openOnlyChangedFiles),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffs",e=>this.openAllChanges(e)),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffsWithWorking",e=>this.openAllChangesWithWorking(e)),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffsIndividually",e=>this.openAllChanges(e,!0)),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffsWithWorkingIndividually",e=>this.openAllChangesWithWorking(e,!0)),this.host.registerWebviewCommand("gitlens.graph.openChangedFileRevisions",this.openRevisions),this.host.registerWebviewCommand("gitlens.graph.resetColumnsDefault",()=>this.updateColumns(eR)),this.host.registerWebviewCommand("gitlens.graph.resetColumnsCompact",()=>this.updateColumns(eS)),this.host.registerWebviewCommand("gitlens.graph.copyWorkingChangesToWorktree",this.copyWorkingChangesToWorktree)),e}onWindowFocusChanged(e){this.isWindowFocused=e}onFocusChanged(e){this._showActiveSelectionDetailsDebounced?.cancel(),e&&null!=this.activeSelection&&this.container.commitDetailsView.visible&&this.showActiveSelectionDetails()}onVisibilityChanged(e){if(e||this._showActiveSelectionDetailsDebounced?.cancel(),e&&(null!=this.repository&&this.repository.etag!==this._etagRepository||this.container.subscription.etag!==this._etagSubscription)){this.updateState(!0);return}if(e){this.host.sendPendingIpcNotifications();let{activeSelection:e}=this;if(null==e)return;this.showActiveSelectionDetails()}}onMessageReceived(e){switch(!0){case H.is(e):this.onChooseRepository();break;case J.is(e):this.dimMergeCommits(e.params);break;case G.is(e):this.onDoubleClick(e.params);break;case er.is(e):this.onEnsureRowRequest(er,e);break;case V.is(e):this.onGetMissingAvatars(e.params);break;case Q.is(e):this.onGetMissingRefMetadata(e.params);break;case j.is(e):this.onGetMoreRows(e.params);break;case z.is(e):this.onOpenPullRequestDetails(e.params);break;case es.is(e):this.onSearchRequest(es,e);break;case Y.is(e):this.onSearchOpenInView(e.params);break;case K.is(e):this.onColumnsChanged(e.params);break;case ee.is(e):this.updateGraphConfig(e.params);break;case Z.is(e):this.onRefsVisibilityChanged(e.params);break;case ei.is(e):this.onSelectionChanged(e.params);break;case X.is(e):this.updateExcludedType(this._graph,e.params);break;case et.is(e):this.updateIncludeOnlyRefs(this._graph,e.params.refs)}}updateGraphConfig(e){let t;let i=this.getComponentConfig();for(t in e.changes)if(i[t]!==e.changes[t])switch(t){case"minimap":T.H.updateEffective("graph.minimap.enabled",e.changes[t]);break;case"minimapDataType":T.H.updateEffective("graph.minimap.dataType",e.changes[t]);break;case"minimapMarkerTypes":{let i=[];for(let r of e.changes[t]??[])switch(r){case"localBranches":case"remoteBranches":case"stashes":case"tags":i.push(r)}T.H.updateEffective("graph.minimap.additionalTypes",i)}}}_showActiveSelectionDetailsDebounced=void 0;showActiveSelectionDetails(){null==this._showActiveSelectionDetailsDebounced&&(this._showActiveSelectionDetailsDebounced=(0,E.sg)(this.showActiveSelectionDetailsCore.bind(this),250)),this._showActiveSelectionDetailsDebounced()}showActiveSelectionDetailsCore(){let{activeSelection:e}=this;null!=e&&this.host.active&&this.container.events.fire("commit:selected",{commit:e,interaction:"passive",preserveFocus:!0,preserveVisibility:!1===this._showDetailsView},{source:this.host.id})}onConfigurationChanged(e){if(T.H.changed(e,"graph.showDetailsView")&&(this._showDetailsView=T.H.get("graph.showDetailsView")),T.H.changed(e,"graph.commitOrdering")){this.updateState();return}(T.H.changed(e,"defaultDateFormat")||T.H.changed(e,"defaultDateStyle")||T.H.changed(e,"advanced.abbreviatedShaLength")||T.H.changed(e,"graph.avatars")||T.H.changed(e,"graph.dateFormat")||T.H.changed(e,"graph.dateStyle")||T.H.changed(e,"graph.dimMergeCommits")||T.H.changed(e,"graph.highlightRowsOnRefHover")||T.H.changed(e,"graph.scrollRowPadding")||T.H.changed(e,"graph.scrollMarkers.enabled")||T.H.changed(e,"graph.scrollMarkers.additionalTypes")||T.H.changed(e,"graph.showGhostRefsOnRowHover")||T.H.changed(e,"graph.pullRequests.enabled")||T.H.changed(e,"graph.showRemoteNames")||T.H.changed(e,"graph.showUpstreamStatus")||T.H.changed(e,"graph.minimap.enabled")||T.H.changed(e,"graph.minimap.dataType")||T.H.changed(e,"graph.minimap.additionalTypes"))&&(this.notifyDidChangeConfiguration(),(T.H.changed(e,"graph.minimap.enabled")||T.H.changed(e,"graph.minimap.dataType"))&&T.H.get("graph.minimap.enabled")&&"lines"===T.H.get("graph.minimap.dataType")&&!this._graph?.includes?.stats&&this.updateState())}onRepositoryChanged(e){if(!e.changed(P.Z_.Config,P.Z_.Head,P.Z_.Heads,P.Z_.Remotes,P.Z_.Stash,P.Z_.Status,P.Z_.Tags,P.Z_.Unknown,P.Ti.Any)){this._etagRepository=e.repository.etag;return}e.changed(P.Z_.Head,P.Ti.Any)&&this.setSelectedRows(void 0),this.updateState(!e.changed(P.Z_.Unknown,P.Ti.Exclusive))}onRepositoryFileSystemChanged(e){e.repository?.path===this.repository?.path&&this.notifyDidChangeWorkingTree()}onSubscriptionChanged(e){e.etag!==this._etagSubscription&&(this._etagSubscription=e.etag,this.notifyDidChangeSubscription())}onThemeChanged(e){null!=this._theme&&((0,B.g4)(e)&&(0,B.g4)(this._theme)||(0,B.kH)(e)&&(0,B.kH)(this._theme))||(this._theme=e,this.updateState())}dimMergeCommits(e){T.H.updateEffective("graph.dimMergeCommits",e.dim)}onColumnsChanged(e){this.updateColumns(e.config)}onRefsVisibilityChanged(e){this.updateExcludedRefs(this._graph,e.refs,e.visible)}onDoubleClick(e){if("ref"===e.type&&e.ref.context){let t=this.getGraphItemContext(e.ref.context);if(ek(t)){if(null!=e.metadata){if(t=this.getGraphItemContext(e.metadata.data.context),"upstream"===e.metadata.type&&eA(t,"upstreamStatus")){let{ahead:e,behind:i,ref:r}=t.webviewItemValue;if(i>0)return void d.a$(r.repoPath,r);if(e>0)return void d.VC(r.repoPath,!1,r)}else if("pullRequest"===e.metadata.type&&eA(t,"pullrequest"))return void this.openPullRequestOnRemote(t);return}let{ref:i}=t.webviewItemValue;return"head"===e.ref.refType&&e.ref.isCurrentHead?d.S_(i.repoPath):d.S_(i.repoPath,i,!!T.H.isUnset("gitCommands.skipConfirmations")||void 0)}}else if("row"===e.type&&e.row){this._showActiveSelectionDetailsDebounced?.cancel();let t=this.getRevisionReference(this.repository?.path,e.row.id,e.row.type);if(null!=t){this.container.events.fire("commit:selected",{commit:t,interaction:"active",preserveFocus:e.preserveFocus,preserveVisibility:!1},{source:this.host.id});let i=this.host.isHost("editor")?this.container.commitDetailsView:this.container.graphDetailsView;i.ready||i.show({preserveFocus:e.preserveFocus},{commit:t,interaction:"active",preserveVisibility:!1})}}return Promise.resolve()}async onEnsureRowRequest(e,t){let i,r;if(null==this._graph)return;let s=t.params,n=this._graph.remappedIds?.get(s.id)??s.id;this._graph.ids.has(n)?(i=s.id,r=s.id!==n?n:void 0):(await this.updateGraphWithMoreRows(this._graph,n,this._search),this.notifyDidChangeRows(),this._graph.ids.has(n)&&(i=s.id,r=s.id!==n?n:void 0)),this.host.respond(e,t,{id:i,remapped:r})}async onGetMissingAvatars(e){if(null==this._graph)return;let t=this._graph.repoPath;async function i(e,i){let r=await (0,s.m_)(e,{ref:i,repoPath:t});this._graph.avatars.set(e,r.toString(!0))}let r=[];for(let[t,s]of Object.entries(e.emails))this._graph.avatars.has(t)||r.push(i.call(this,t,s));r.length&&(await Promise.allSettled(r),this.updateAvatars())}async onGetMissingRefMetadata(e){if(null==this._graph||null===this._refsMetadata||!(0,_.SD)("gitlens:hasConnectedRemotes"))return;let t=this._graph.repoPath;async function i(e,i){null==this._refsMetadata&&(this._refsMetadata=new Map);let r=(await this.container.git.getBranches(t,{filter:t=>t.id===e}))?.values?.[0],s={...this._refsMetadata.get(e)};if(null==r){for(let t of i)s[t]=null,this._refsMetadata.set(e,s);return}for(let n of i){if(!N.includes(n)){s[n]=null,this._refsMetadata.set(e,s);continue}if("pullRequest"===n){let i=await r?.getAssociatedPullRequest();if(null==i){(void 0===s.pullRequest||s.pullRequest?.length===0)&&(s.pullRequest=null),this._refsMetadata.set(e,s);continue}let n={hostingServiceType:i.provider.id,id:Number.parseInt(i.id)||0,title:i.title,author:i.author.name,date:(i.mergedDate??i.closedDate??i.updatedDate)?.getTime(),state:i.state,url:i.url,context:(0,L.C9)({webviewItem:`gitlens:pullrequest${i.refs?"+refs":""}`,webviewItemValue:{type:"pullrequest",id:i.id,url:i.url,repoPath:t,refs:i.refs,provider:{id:i.provider.id,name:i.provider.name,domain:i.provider.domain,icon:i.provider.icon}}})};s.pullRequest=[n],this._refsMetadata.set(e,s);continue}if("upstream"===n){let t=r?.upstream;if(null==t||void 0==t||t.missing){s.upstream=null,this._refsMetadata.set(e,s);continue}let i={name:(0,w.km)(t.name),owner:(0,w.Zq)(t.name),ahead:r.state.ahead,behind:r.state.behind,context:(0,L.C9)({webviewItem:"gitlens:upstreamStatus",webviewItemValue:{type:"upstreamStatus",ref:(0,C.iw)(r),ahead:r.state.ahead,behind:r.state.behind}})};s.upstream=i,this._refsMetadata.set(e,s)}}}let r=[];for(let t of Object.keys(e.metadata))r.push(i.call(this,t,e.metadata[t]));r.length&&await Promise.allSettled(r),this.updateRefsMetadata()}async onGetMoreRows(e,t=!1){if(this._graph?.paging!=null){if(this._graph?.more==null||this.repository?.etag!==this._etagRepository){this.updateState(!0);return}await this.updateGraphWithMoreRows(this._graph,e.id,this._search),this.notifyDidChangeRows(t)}}async onOpenPullRequestDetails(e){let t=this.repository;if(null==t)return;let i=await t.getBranch();if(null==i)return;let r=await i.getAssociatedPullRequest();if(null!=r)return this.container.pullRequestView.showPullRequest(r,i)}async onSearchRequest(e,t){try{let i=await this.getSearchResults(t.params);this.host.respond(e,t,i)}catch(i){this.host.respond(e,t,{results:i instanceof a.AL?void 0:{error:i instanceof f.Do?"Invalid search pattern":"Unexpected error"}})}}async getSearchResults(e){if(null==e.search)return this.resetSearchState(),{results:void 0};let t=this._search;if(e.more&&t?.more!=null&&t.comparisonKey===(0,A.b4)(e.search))return null!=(t=await t.more(e.limit??T.H.get("graph.searchItemLimit")??100))?(this._search=t,await this.ensureSearchStartsInRange(this._graph,t),{results:t.results.size>0?{ids:Object.fromEntries((0,O.Tj)(t.results,([e,t])=>[this._graph?.remappedIds?.get(e)??e,t])),count:t.results.size,paging:{hasMore:t.paging?.hasMore??!1}}:void 0}):{results:void 0};if(null==t||t.comparisonKey!==(0,A.b4)(e.search)){if(null==this.repository)return{results:{error:"No repository"}};this.repository.etag!==this._etagRepository&&this.updateState(!0),null!=this._searchCancellation&&this._searchCancellation.cancel();let i=new r.CancellationTokenSource;this._searchCancellation=i;try{t=await this.repository.searchCommits(e.search,{limit:T.H.get("graph.searchItemLimit")??100,ordering:T.H.get("graph.commitOrdering"),cancellation:i.token})}catch(e){throw this._search=void 0,e}if(i.token.isCancellationRequested)throw new a.AL;this._search=t}else t=this._search;let i=await this.ensureSearchStartsInRange(this._graph,t),s=!1;return null!=i&&(s=!0,this.setSelectedRows(i)),{results:0===t.results.size?{count:0}:{ids:Object.fromEntries((0,O.Tj)(t.results,([e,t])=>[this._graph?.remappedIds?.get(e)??e,t])),count:t.results.size,paging:{hasMore:t.paging?.hasMore??!1}},selectedRows:s?this._selectedRows:void 0}}onSearchOpenInView(e){null!=this.repository&&this.container.searchAndCompareView.search(this.repository.path,e.search,{label:{label:`for ${e.search.query}`},reveal:{select:!0,focus:!1,expand:!0}})}async onChooseRepository(){let e=this.container.git.openRepositories.sort((e,t)=>(e===this.repository?1:-1)-(t===this.repository?1:-1)||(e.starred?-1:1)-(t.starred?-1:1)||e.index-t.index),t=await (0,k.oe)(`Switch Repository ${o.EO.Dot} ${this.repository?.name}`,"Choose a repository to switch to",e);null!=t&&(this.repository=t)}_fireSelectionChangedDebounced=void 0;onSelectionChanged(e){this._showActiveSelectionDetailsDebounced?.cancel();let t=e.selection[0];this.setSelectedRows(t?.id),null==this._fireSelectionChangedDebounced&&(this._fireSelectionChangedDebounced=(0,E.sg)(this.fireSelectionChanged.bind(this),50)),this._fireSelectionChangedDebounced(t?.id,t?.type)}fireSelectionChanged(e,t){if(null==this.repository)return;let i=this.getRevisionReference(this.repository.path,e,t),r=null!=i?[i]:void 0;this._selection=r,null!=r&&(!(!this._firstSelection&&this.host.isHost("editor"))||this.host.active)&&(this.container.events.fire("commit:selected",{commit:r[0],interaction:"passive",preserveFocus:!0,preserveVisibility:this._firstSelection?!1===this._showDetailsView:"selection"!==this._showDetailsView},{source:this.host.id}),this._firstSelection=!1)}_notifyDidChangeStateDebounced=void 0;getRevisionReference(e,t,i){if(null!=e&&null!=t)switch(i){case"stash-node":return(0,C.kA)(t,e,{refType:"stash",name:t,number:void 0});case"work-dir-changes":return(0,C.kA)(v.SU,e,{refType:"revision"});default:return(0,C.kA)(t,e,{refType:"revision"})}}updateState(e=!1){if(this.host.clearPendingIpcNotifications(),e){this.notifyDidChangeState();return}null==this._notifyDidChangeStateDebounced&&(this._notifyDidChangeStateDebounced=(0,E.sg)(this.notifyDidChangeState.bind(this),250)),this._notifyDidChangeStateDebounced()}_notifyDidChangeAvatarsDebounced=void 0;updateAvatars(e=!1){if(e){this.notifyDidChangeAvatars();return}null==this._notifyDidChangeAvatarsDebounced&&(this._notifyDidChangeAvatarsDebounced=(0,E.sg)(this.notifyDidChangeAvatars.bind(this),100)),this._notifyDidChangeAvatarsDebounced()}async notifyDidChangeAvatars(){if(null==this._graph)return;let e=this._graph;return this.host.notify(el,{avatars:Object.fromEntries(e.avatars)})}_notifyDidChangeRefsMetadataDebounced=void 0;updateRefsMetadata(e=!1){if(e){this.notifyDidChangeRefsMetadata();return}null==this._notifyDidChangeRefsMetadataDebounced&&(this._notifyDidChangeRefsMetadataDebounced=(0,E.sg)(this.notifyDidChangeRefsMetadata.bind(this),100)),this._notifyDidChangeRefsMetadataDebounced()}async notifyDidChangeRefsMetadata(){return this.host.notify(eh,{metadata:null!=this._refsMetadata?Object.fromEntries(this._refsMetadata):this._refsMetadata})}async notifyDidChangeColumns(){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(ec,this._ipcNotificationMap,this),!1;let e=this.getColumns(),t=this.getColumnSettings(e);return this.host.notify(ec,{columns:t,context:this.getColumnHeaderContext(t),settingsContext:this.getGraphSettingsIconContext(t)})}async notifyDidChangeScrollMarkers(){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(eu,this._ipcNotificationMap,this),!1;let e=this.getColumns(),t=this.getColumnSettings(e);return this.host.notify(eu,{context:this.getGraphSettingsIconContext(t)})}async notifyDidChangeRefsVisibility(){return this.host.ready&&this.host.visible?this.host.notify(ed,{excludeRefs:this.getExcludedRefs(this._graph),excludeTypes:this.getExcludedTypes(this._graph),includeOnlyRefs:this.getIncludeOnlyRefs(this._graph)}):(this.host.addPendingIpcNotification(ed,this._ipcNotificationMap,this),!1)}async notifyDidChangeConfiguration(){return this.host.ready&&this.host.visible?this.host.notify(eo,{config:this.getComponentConfig()}):(this.host.addPendingIpcNotification(eo,this._ipcNotificationMap,this),!1)}async notifyDidFetch(){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(ev,this._ipcNotificationMap,this),!1;let e=await this.repository.getLastFetched();return this.host.notify(ev,{lastFetched:new Date(e)})}async notifyDidChangeRows(e=!1,t){if(null==this._graph)return;let i=this._graph;return this.host.notify(ep,{rows:i.rows,avatars:Object.fromEntries(i.avatars),downstreams:Object.fromEntries(i.downstreams),refsMetadata:null!=this._refsMetadata?Object.fromEntries(this._refsMetadata):this._refsMetadata,rowsStats:i.rowsStats?.size?Object.fromEntries(i.rowsStats):void 0,rowsStatsLoading:i.rowsStatsDeferred?.isLoaded!=null&&!i.rowsStatsDeferred.isLoaded(),selectedRows:e?this._selectedRows:void 0,paging:{startingCursor:i.paging?.startingCursor,hasMore:i.paging?.hasMore??!1}},t)}async notifyDidChangeRowsStats(e){if(null!=e.rowsStats)return this.host.notify(eg,{rowsStats:Object.fromEntries(e.rowsStats),rowsStatsLoading:e.rowsStatsDeferred?.isLoaded!=null&&!e.rowsStatsDeferred.isLoaded()})}async notifyDidChangeWorkingTree(){return this.host.ready&&this.host.visible?this.host.notify(ef,{stats:await this.getWorkingTreeStats()??{added:0,deleted:0,modified:0}}):(this.host.addPendingIpcNotification(ef,this._ipcNotificationMap,this),!1)}async notifyDidChangeSelection(){return this.host.ready&&this.host.visible?this.host.notify(em,{selection:this._selectedRows??{}}):(this.host.addPendingIpcNotification(em,this._ipcNotificationMap,this),!1)}async notifyDidChangeSubscription(){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(ea,this._ipcNotificationMap,this),!1;let[e]=await this.getGraphAccess();return this.host.notify(ea,{subscription:e.subscription.current,allowed:!1!==e.allowed})}async notifyDidChangeState(){return this.host.ready&&this.host.visible?(this._notifyDidChangeStateDebounced?.cancel(),this.host.notify(en,{state:await this.getState()})):(this.host.addPendingIpcNotification(en,this._ipcNotificationMap,this),!1)}ensureRepositorySubscriptions(e){if(this.ensureLastFetchedSubscription(e),!e&&null!=this._repositoryEventsDisposable)return;null!=this._repositoryEventsDisposable&&(this._repositoryEventsDisposable.dispose(),this._repositoryEventsDisposable=void 0);let t=this.repository;null!=t&&(this._repositoryEventsDisposable=r.Disposable.from(t.onDidChange(this.onRepositoryChanged,this),t.watchFileSystem(1e3),t.onDidChangeFileSystem(this.onRepositoryFileSystemChanged,this),(0,_.wt)(e=>{"gitlens:hasConnectedRemotes"===e&&(this.resetRefsMetadata(),this.updateRefsMetadata())})))}async ensureLastFetchedSubscription(e){if(!e&&null!=this._lastFetchedDisposable)return;null!=this._lastFetchedDisposable&&(this._lastFetchedDisposable.dispose(),this._lastFetchedDisposable=void 0);let t=this.repository;if(null==t)return;let i=await t.getLastFetched()??0,r=P.LN.getLastFetchedUpdateInterval(i);0!==i&&r>0&&(this._lastFetchedDisposable=(0,E.gC)(()=>{let e=P.LN.getLastFetchedUpdateInterval(i);r!==P.LN.getLastFetchedUpdateInterval(i)&&(r=e),this.notifyDidFetch()},r))}async ensureSearchStartsInRange(e,t){let i;if(0!==t.results.size){for(let r of t.results.keys()){let t=e.remappedIds?.get(r)??r;if(e.ids.has(t))return t;i=t;break}if(null!=i)return await this.updateGraphWithMoreRows(e,i),this.notifyDidChangeRows(),e.ids.has(i)?i:void 0}}getColumns(){return this.container.storage.getWorkspace("graph:columns")}getExcludedTypes(e){if(null!=e)return this.getFiltersByRepo(e)?.excludeTypes}getExcludedRefs(e){let t;if(null==e)return;let i=this.container.storage.getWorkspace("graph:hiddenRefs");if(null!=i&&0!==Object.keys(i).length){for(let e in t=this.container.storage.getWorkspace("graph:filtersByRepo")??{},i){let r=e.split("|",1)[0];t[r]=t[r]??{},t[r].excludeRefs=(0,x.Y8)(t[r].excludeRefs,e,i[e])}this.container.storage.storeWorkspace("graph:filtersByRepo",t),this.container.storage.deleteWorkspace("graph:hiddenRefs")}let r=(t?.[e.repoPath]??this.getFiltersByRepo(e))?.excludeRefs;if(null==r||0===Object.keys(r).length)return;let s=T.H.get("graph.avatars",void 0,!0),n={},o=e=>this.host.asWebviewUri(e);for(let t in r){let i={...r[t]};if("remote"===i.type&&i.owner){let t=e.remotes.get(i.owner);null!=t&&(i.avatarUrl=((s?t.provider?.avatarUri:void 0)??R.Wf(this.container,t,o))?.toString(!0))}n[t]=i}return n}getIncludeOnlyRefs(e){if(null==e)return;let t=this.getFiltersByRepo(e),i=t?.includeOnlyRefs;if(null==i||0===Object.keys(i).length)return;let r={};for(let[t,s]of Object.entries(i)){let i;if("HEAD"===s.id){if(null==(i=(0,O.I6)(e.branches.values(),e=>e.current)))continue;r[i.id]={...s,id:i.id,name:i.name}}else r[t]=s;if("head"===s.type&&(i=i??e.branches.get(s.name),i?.upstream!=null&&!i.upstream.missing)){let t=(0,w.Yk)(e.repoPath,!0,i.upstream.name);r[t]={id:t,type:"remote",name:(0,w.km)(i.upstream.name),owner:(0,w.Zq)(i.upstream.name)}}}return r}getFiltersByRepo(e){if(null==e)return;let t=this.container.storage.getWorkspace("graph:filtersByRepo");return t?.[e.repoPath]}getColumnSettings(e){let t={...eR};if(null!=e)for(let[i,r]of Object.entries(e))t[i]={...eR[i],...r};return t}getColumnHeaderContext(e){return(0,L.C9)({webviewItem:"gitlens:graph:columns",webviewItemValue:this.getColumnContextItems(e).join(",")})}getGraphSettingsIconContext(e){return(0,L.C9)({webviewItem:"gitlens:graph:settings",webviewItemValue:this.getSettingsIconContextItems(e).join(",")})}getColumnContextItems(e){let t=[],i=["author","changes","datetime","graph","message","ref","sha"],r=0;for(let[s,n]of Object.entries(e))i.includes(s)&&(!n.isHidden&&r++,t.push(`column:${s}:${n.isHidden?"hidden":"visible"}${n.mode?`+${n.mode}`:""}`));return r>1&&t.push("columns:canHide"),t}getSettingsIconContextItems(e){let t=null!=e?this.getColumnContextItems(e):[];if(T.H.get("graph.scrollMarkers.enabled")){let e=T.H.get("graph.scrollMarkers.additionalTypes");for(let i of["localBranches","remoteBranches","stashes","tags"])t.push(`scrollMarker:${i}:${e.includes(i)?"enabled":"disabled"}`)}return t}getComponentConfig(){return{avatars:T.H.get("graph.avatars"),dateFormat:T.H.get("graph.dateFormat")??T.H.get("defaultDateFormat")??"short+short",dateStyle:T.H.get("graph.dateStyle")??T.H.get("defaultDateStyle"),enabledRefMetadataTypes:this.getEnabledRefMetadataTypes(),dimMergeCommits:T.H.get("graph.dimMergeCommits"),enableMultiSelection:this.container.prereleaseOrDebugging,highlightRowsOnRefHover:T.H.get("graph.highlightRowsOnRefHover"),minimap:T.H.get("graph.minimap.enabled"),minimapDataType:T.H.get("graph.minimap.dataType"),minimapMarkerTypes:this.getMinimapMarkerTypes(),scrollRowPadding:T.H.get("graph.scrollRowPadding"),scrollMarkerTypes:this.getScrollMarkerTypes(),showGhostRefsOnRowHover:T.H.get("graph.showGhostRefsOnRowHover"),showRemoteNamesOnRefs:T.H.get("graph.showRemoteNames"),idLength:T.H.get("advanced.abbreviatedShaLength")}}getScrollMarkerTypes(){return T.H.get("graph.scrollMarkers.enabled")?["selection","highlights","head","upstream",...T.H.get("graph.scrollMarkers.additionalTypes")]:[]}getMinimapMarkerTypes(){return T.H.get("graph.minimap.enabled")?["selection","highlights","head","upstream",...T.H.get("graph.minimap.additionalTypes")]:[]}getEnabledRefMetadataTypes(){let e=[];return T.H.get("graph.pullRequests.enabled")&&e.push("pullRequest"),T.H.get("graph.showUpstreamStatus")&&e.push("upstream"),e}async getGraphAccess(){let e=await this.container.git.access(l.k.Graph,this.repository?.path);this._etagSubscription=this.container.subscription.etag,!1===e.allowed&&null==e.subscription.current.previewTrial&&(e=await this.container.git.access(l.k.Graph,this.repository?.path));let t=e?.visibility;return null==t&&null!=this.repository&&(t=await this.container.git.visibility(this.repository?.path)),[e,t]}getGraphItemContext(e){let t="string"==typeof e?JSON.parse(e):e;return null==t||"webview"in t||(t.webview=this.host.id),t}async getWorkingTreeStats(){if(null==this.repository||0===this.container.git.repositoryCount)return;let e=await this.container.git.getStatusForRepo(this.repository.path),t=e?.getDiffStatus();return{added:t?.added??0,deleted:t?.deleted??0,modified:t?.changed??0,context:(0,L.C9)({webviewItem:"gitlens:wip",webviewItemValue:{type:"commit",ref:this.getRevisionReference(this.repository.path,v.SU,"work-dir-changes")}})}}async getState(e){var t;let i,r;if(0===this.container.git.repositoryCount||null==this.repository&&(this.repository=this.container.git.getBestRepositoryOrFirst(),null==this.repository))return{...this.host.baseWebviewState,allowed:!0,repositories:[]};this._etagRepository=this.repository?.etag,this.host.title=`${this.host.originalTitle}: ${this.repository.formattedName}`;let{defaultItemLimit:s}=T.H.get("graph"),n=Math.max(s,this._graph?.ids.size??s),o=this._selectedId,a=null==o||o===v.SU?"HEAD":o,l=this.getColumns(),h=this.getColumnSettings(l),c=this.container.git.getCommitsForGraph(this.repository.uri,e=>this.host.asWebviewUri(e),{include:{stats:T.H.get("graph.minimap.enabled")&&"lines"===T.H.get("graph.minimap.dataType")||!h.changes.isHidden},limit:n,ref:a}),u=Promise.allSettled([this.getGraphAccess(),this.getWorkingTreeStats(),this.repository.getBranch(),this.repository.getLastFetched()]);e?queueMicrotask(async()=>{let e=await c;this.setGraph(e),o!==v.SU&&this.setSelectedRows(e.id),this.notifyDidChangeRefsVisibility(),this.notifyDidChangeRows(!0)}):(i=await c,this.setGraph(i),o!==v.SU&&this.setSelectedRows(i.id));let[d,p,g,m]=await u,[f,w]=(0,F.Ro)(d)??[],y=(0,F.Ro)(g);if(null!=y&&(r={...y.state},null!=y.upstream)){r.upstream=y.upstream.name;let[e,t]=await Promise.allSettled([y.getRemote(),y.getAssociatedPullRequest()]),i=(0,F.Ro)(e);i?.provider!=null&&(r.provider={name:i.provider.name,icon:"remote"===i.provider.icon?"cloud":i.provider.icon,url:i.provider.url({type:S.J.Repo})});let s=(0,F.Ro)(t);null!=s&&(r.pr=(0,b.pf)(s))}return{...this.host.baseWebviewState,windowFocused:this.isWindowFocused,repositories:0===(t=this.container.git.openRepositories).length?[]:t.map(e=>({formattedName:e.formattedName,id:e.id,name:e.name,path:e.path,isVirtual:e.provider.virtual})),selectedRepository:this.repository.path,selectedRepositoryVisibility:w,branchName:y?.name,branchState:r,lastFetched:new Date((0,F.Ro)(m)),selectedRows:this._selectedRows,subscription:f?.subscription.current,allowed:(f?.allowed??!1)!==!1,avatars:null!=i?Object.fromEntries(i.avatars):void 0,refsMetadata:null===this.resetRefsMetadata()?null:{},loading:e,rowsStatsLoading:i?.rowsStatsDeferred?.isLoaded!=null&&!i.rowsStatsDeferred.isLoaded(),rows:i?.rows,downstreams:null!=i?Object.fromEntries(i.downstreams):void 0,paging:null!=i?{startingCursor:i.paging?.startingCursor,hasMore:i.paging?.hasMore??!1}:void 0,columns:h,config:this.getComponentConfig(),context:{header:this.getColumnHeaderContext(h),settings:this.getGraphSettingsIconContext(h)},excludeRefs:null!=i?this.getExcludedRefs(i)??{}:{},excludeTypes:this.getExcludedTypes(i)??{},includeOnlyRefs:null!=i?this.getIncludeOnlyRefs(i)??{}:{},nonce:this.host.cspNonce,workingTreeStats:(0,F.Ro)(p)??{added:0,deleted:0,modified:0}}}updateColumns(e){let t=this.container.storage.getWorkspace("graph:columns");for(let[i,r]of Object.entries(e))t=(0,x.Y8)(t,i,r);this.container.storage.storeWorkspace("graph:columns",t),this.notifyDidChangeColumns()}updateExcludedRefs(e,t,i){if(null==t||0===t.length)return;let r=this.getFiltersByRepo(e)?.excludeRefs??{};for(let e of t)r=(0,x.Y8)(r,e.id,i?void 0:{id:e.id,type:e.type,name:e.name,owner:e.owner});this.updateFiltersByRepo(e,{excludeRefs:r}),this.notifyDidChangeRefsVisibility()}updateFiltersByRepo(e,t){if(null==e)throw Error("Cannot save repository filters since Graph is undefined");let i=this.container.storage.getWorkspace("graph:filtersByRepo");return this.container.storage.storeWorkspace("graph:filtersByRepo",(0,x.Y8)(i,e.repoPath,{...i?.[e.repoPath],...t}))}updateIncludeOnlyRefs(e,t){let i;if(null==t||0===t.length){if(this.getFiltersByRepo(e)?.includeOnlyRefs==null)return;i=void 0}else for(let e of(i={},t))i[e.id]={id:e.id,type:e.type,name:e.name,owner:e.owner};this.updateFiltersByRepo(e,{includeOnlyRefs:i}),this.notifyDidChangeRefsVisibility()}updateExcludedType(e,{key:t,value:i}){let r=this.getFiltersByRepo(e)?.excludeTypes;(null!=r&&0!==Object.keys(r).length||!1!==i)&&(r=(0,x.Y8)(r,t,i),this.updateFiltersByRepo(e,{excludeTypes:r}),this.notifyDidChangeRefsVisibility())}resetRefsMetadata(){return this._refsMetadata=(0,_.SD)("gitlens:hasConnectedRemotes")?void 0:null,this._refsMetadata}resetRepositoryState(){this.setGraph(void 0),this.setSelectedRows(void 0)}resetSearchState(){this._search=void 0,this._searchCancellation?.dispose(),this._searchCancellation=void 0}setSelectedRows(e){this._selectedId!==e&&(this._selectedId=e,e===v.SU&&(e="work-dir-changes"),this._selectedRows=null!=e?{[e]:!0}:void 0)}setGraph(e){this._graph=e,null==e?(this.resetRefsMetadata(),this.resetSearchState()):e.rowsStatsDeferred?.promise.then(()=>void this.notifyDidChangeRowsStats(e))}async updateGraphWithMoreRows(e,t,i){let{defaultItemLimit:r,pageItemLimit:s}=T.H.get("graph"),n=await e.more?.(s??r,t);if(null!=n){if(this.setGraph(n),!i?.paging?.hasMore)return;let e=O.HV(i.results)?.[0];if(null==e)return;let t=n.remappedIds?.get(e)??e;n.ids.has(t)&&queueMicrotask(async()=>{try{let e=await this.getSearchResults({search:i.query,more:!0});this.host.notify(ew,e)}catch(e){if(e instanceof a.AL)return;this.host.notify(ew,{results:{error:e instanceof f.Do?"Invalid search pattern":"Unexpected error"}})}})}}fetch(e){let t=null!=e?this.getGraphItemRef(e,"branch"):void 0;d.hd(this.repository,t)}pull(e){let t=null!=e?this.getGraphItemRef(e,"branch"):void 0;d.a$(this.repository,t)}push(e){let t=null!=e?this.getGraphItemRef(e):void 0;d.VC(this.repository,void 0,t)}createBranch(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():h.vt(t.repoPath,t)}deleteBranch(e){if(ek(e,"branch")){let{ref:t}=e.webviewItemValue;return h.TF(t.repoPath,t)}return Promise.resolve()}mergeBranchInto(e){if(ek(e,"branch")){let{ref:t}=e.webviewItemValue;return d.h1(t.repoPath,t)}return Promise.resolve()}openBranchOnRemote(e,t){if(ek(e,"branch")){let i;let{ref:r}=e.webviewItemValue;return r.remote?i=(0,w.Zq)(r.name):null!=r.upstream&&(i=(0,w.Zq)(r.upstream.name)),(0,D.RS)(o.Ts.OpenOnRemote,{repoPath:r.repoPath,resource:{type:S.J.Branch,branch:r.name},remote:i,clipboard:t})}return Promise.resolve()}publishBranch(e){if(ek(e,"branch")){let{ref:t}=e.webviewItemValue;return d.VC(t.repoPath,void 0,t)}return Promise.resolve()}rebase(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():d.RU(t.repoPath,t)}rebaseToRemote(e){if(ek(e,"branch")){let{ref:t}=e.webviewItemValue;if(null!=t.upstream)return d.RU(t.repoPath,(0,C.kA)(t.upstream.name,t.repoPath,{refType:"branch",name:t.upstream.name,remote:!0}))}return Promise.resolve()}renameBranch(e){if(ek(e,"branch")){let{ref:t}=e.webviewItemValue;return h.$w(t.repoPath,t)}return Promise.resolve()}cherryPick(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():d.$T(t.repoPath,t)}async copy(e){let t;let{selection:i}=this.getGraphItemRefs(e);if(i.length)t=i.map(e=>"revision"===e.refType&&e.message?`${e.name}: ${e.message.trim()}`:e.name).join("\n");else if(eA(e,"contributor")){let{name:i,email:r}=e.webviewItemValue;t=`${i}${r?` <${r}>`:""}`}else if(eA(e,"pullrequest")){let{url:i}=e.webviewItemValue;t=i}null!=t&&await r.env.clipboard.writeText(t)}copyMessage(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():(0,D.RS)(o.Ts.CopyMessageToClipboard,{repoPath:t.repoPath,sha:t.ref,message:"message"in t?t.message:void 0})}async copySha(e){let t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();let i=t.ref;return(0,C.HH)(i)||(i=await this.container.git.resolveReference(t.repoPath,i,void 0,{force:!0})),(0,D.RS)(o.Ts.CopyShaToClipboard,{sha:i})}openInDetailsView(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():this.host.isHost("view")?void(0,c.tl)(t,{preserveFocus:!0,preserveVisibility:!1}):(0,D.RS)(o.Ts.ShowInDetailsView,{repoPath:t.repoPath,refs:[t.ref]})}openSCM(e){return null==this.getGraphItemRef(e,"revision")?Promise.resolve():(0,D.S4)("workbench.view.scm")}openCommitOnRemote(e,t){let{selection:i}=this.getGraphItemRefs(e,"revision");return null==i?Promise.resolve():(0,D.RS)(o.Ts.OpenOnRemote,{repoPath:i[0].repoPath,resource:i.map(e=>({type:S.J.Commit,sha:e.ref})),clipboard:t})}copyDeepLinkToBranch(e){if(ek(e,"branch")){let{ref:t}=e.webviewItemValue;return(0,D.RS)(o.Ts.CopyDeepLinkToBranch,{refOrRepoPath:t})}return Promise.resolve()}copyDeepLinkToCommit(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():(0,D.RS)(o.Ts.CopyDeepLinkToCommit,{refOrRepoPath:t})}copyDeepLinkToRepo(e){if(ek(e,"branch")){let{ref:t}=e.webviewItemValue;return t.remote?(0,D.RS)(o.Ts.CopyDeepLinkToRepo,{refOrRepoPath:t.repoPath,remote:(0,w.Zq)(t.name)}):Promise.resolve()}return Promise.resolve()}copyDeepLinkToTag(e){if(ek(e,"tag")){let{ref:t}=e.webviewItemValue;return(0,D.RS)(o.Ts.CopyDeepLinkToTag,{refOrRepoPath:t})}return Promise.resolve()}async shareAsCloudPatch(e){let t=this.getGraphItemRef(e,"revision")??this.getGraphItemRef(e,"stash");return null==t?Promise.resolve():(0,D.RS)(o.Ts.CreateCloudPatch,{to:t.ref,repoPath:t.repoPath})}resetCommit(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():d.cL(t.repoPath,(0,C.kA)(`${t.ref}^`,t.repoPath,{refType:"revision",name:`${t.name}^`,message:t.message}))}resetToCommit(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():d.cL(t.repoPath,t)}resetToTip(e){let t=this.getGraphItemRef(e,"branch");return null==t?Promise.resolve():d.cL(t.repoPath,(0,C.kA)(t.ref,t.repoPath,{refType:"revision",name:t.name}))}revertCommit(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():d.ru(t.repoPath,t)}switchTo(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():d.S_(t.repoPath,t)}hideRef(e,t){var i;let r;if(t?.group&&null!=(i=e)&&null!=i&&(0,L.PH)(i)&&("gitlens.graph"===i.webview||"gitlens.views.graph"===i.webview)&&"object"==typeof i.webviewItemGroupValue&&"refGroup"===i.webviewItemGroupValue.type)({refs:r}=e.webviewItemGroupValue);else if(!t?.group&&ek(e)){let{ref:t}=e.webviewItemValue;null!=t.id&&(r=[t])}return null!=r&&this.updateExcludedRefs(this._graph,r.map(e=>{let i="branch"===e.refType&&e.remote;return{id:e.id,name:i?t?.remote?"*":(0,w.km)(e.name):e.name,owner:i?(0,w.Zq)(e.name):void 0,type:"branch"===e.refType?e.remote?"remote":"head":"tag"}}),!1),Promise.resolve()}switchToAnother(e){let t=this.getGraphItemRef(e);return null==t?d.S_(this.repository?.path):d.S_(t.repoPath)}async undoCommit(e){let t=this.getGraphItemRef(e,"revision");if(null==t)return Promise.resolve();await (0,c.MQ)(this.container,t)}saveStash(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():p.VC(t.repoPath)}applyStash(e){let t=this.getGraphItemRef(e,"stash");return null==t?Promise.resolve():p.Bb(t.repoPath,t)}deleteStash(e){let t=this.getGraphItemRef(e,"stash");return null==t?Promise.resolve():p.gv(t.repoPath,[t])}renameStash(e){let t=this.getGraphItemRef(e,"stash");return null==t?Promise.resolve():p.$w(t.repoPath,t)}async createTag(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():g.vt(t.repoPath,t)}deleteTag(e){if(ek(e,"tag")){let{ref:t}=e.webviewItemValue;return g.TF(t.repoPath,t)}return Promise.resolve()}async createWorktree(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():m.vt(t.repoPath,void 0,t)}async createPullRequest(e){if(ek(e,"branch")){let{ref:t}=e.webviewItemValue,i=this.container.git.getRepository(t.repoPath),r=await i?.getBranch(t.name),s=await r?.getRemote();return(0,D.ph)("createPullRequest",{repoPath:t.repoPath,remote:null!=s?{name:s.name,provider:null!=s.provider?{id:s.provider.id,name:s.provider.name,domain:s.provider.domain}:void 0,url:s.url}:void 0,branch:{name:t.name,upstream:t.upstream?.name,isRemote:t.remote}})}return Promise.resolve()}openPullRequest(e){if(eA(e,"pullrequest")){let t=e.webviewItemValue;return(0,D.ph)("openPullRequest",{repoPath:t.repoPath,provider:{id:t.provider.id,name:t.provider.name,domain:t.provider.domain},pullRequest:{id:t.id,url:t.url}})}return Promise.resolve()}async openPullRequestChanges(e){if(eA(e,"pullrequest")){let t=e.webviewItemValue;if(t.refs?.base!=null&&null!=t.refs.head){let e=await (0,b.tI)(this.container,t.repoPath,t.refs);return(0,c.$5)(this.container,{repoPath:e.repoPath,lhs:e.base.ref,rhs:e.head.ref},{title:`Changes in Pull Request #${t.id}`})}}return Promise.resolve()}async openPullRequestComparison(e){if(eA(e,"pullrequest")){let t=e.webviewItemValue;if(t.refs?.base!=null&&null!=t.refs.head){let e=await (0,b.tI)(this.container,t.repoPath,t.refs);return this.container.searchAndCompareView.compare(e.repoPath,e.head,e.base)}}return Promise.resolve()}openPullRequestOnRemote(e,t){if(eA(e,"pullrequest")){let{url:i}=e.webviewItemValue;return(0,D.RS)(o.Ts.OpenPullRequestOnRemote,{pr:{url:i},clipboard:t})}return Promise.resolve()}async compareAncestryWithWorking(e){let t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();let i=await this.container.git.getBranch(t.repoPath);if(null==i)return;let r=await this.container.git.getMergeBase(t.repoPath,i.ref,t.ref);if(null!=r)return this.container.searchAndCompareView.compare(t.repoPath,"",{ref:r,label:`${i.ref} (${(0,C.pV)(r)})`})}compareHeadWith(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():this.container.searchAndCompareView.compare(t.repoPath,"HEAD",t.ref)}async compareWithMergeBase(e){let t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();let i=await this.container.git.getBranch(t.repoPath);if(null==i)return;let r=await this.container.git.getMergeBase(t.repoPath,i.ref,t.ref);if(null!=r)return this.container.searchAndCompareView.compare(t.repoPath,t.ref,{ref:r,label:`${i.ref} (${(0,C.pV)(r)})`})}async openChangedFileDiffsWithMergeBase(e){let t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();let i=await this.container.git.getBranch(t.repoPath);if(null==i)return;let r=await this.container.git.getMergeBase(t.repoPath,i.ref,t.ref);if(null!=r)return(0,c.$5)(this.container,{repoPath:t.repoPath,lhs:r,rhs:t.ref},{title:`Changes between ${i.ref} (${(0,C.pV)(r)}) ${o.EO.ArrowLeftRightLong} ${(0,C.pV)(t.ref,{strings:{working:"Working Tree"}})}`})}compareWithUpstream(e){if(ek(e,"branch")){let{ref:t}=e.webviewItemValue;if(null!=t.upstream)return this.container.searchAndCompareView.compare(t.repoPath,t.ref,t.upstream.name)}return Promise.resolve()}compareWorkingWith(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():this.container.searchAndCompareView.compare(t.repoPath,"",t.ref)}copyWorkingChangesToWorktree(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():m.PB("working-tree",t.repoPath)}async openFiles(e){let t=await this.getCommitFromGraphItemRef(e);if(null!=t)return(0,c.Km)(t)}async openAllChanges(e,t){let i=await this.getCommitFromGraphItemRef(e);if(null!=i)return t?(0,c.LH)(i):(0,c.po)(i)}async openAllChangesWithWorking(e,t){let i=await this.getCommitFromGraphItemRef(e);if(null!=i)return t?(0,c.Ce)(i):(0,c.Gu)(i)}async openRevisions(e){let t=await this.getCommitFromGraphItemRef(e);if(null!=t)return(0,c.m)(t)}async openOnlyChangedFiles(e){let t=await this.getCommitFromGraphItemRef(e);if(null!=t)return(0,c.E9)(t)}addAuthor(e){if(eA(e,"contributor")){let{repoPath:t,name:i,email:r,current:s}=e.webviewItemValue;return u.s(t,new y.sL(t,i,r,0,void 0,s))}return Promise.resolve()}async toggleColumn(e,t){let i=this.container.storage.getWorkspace("graph:columns"),r=i?.[e];null!=r?r.isHidden=!t:r={isHidden:!t},i=(0,x.Y8)(i,e,r),await this.container.storage.storeWorkspace("graph:columns",i),this.notifyDidChangeColumns(),"changes"!==e||r.isHidden||this._graph?.includes?.stats||this.updateState()}async toggleScrollMarker(e,t){let i=T.H.get("graph.scrollMarkers.additionalTypes"),r=!1;t&&!i.includes(e)?(i=i.concat(e),r=!0):!t&&i.includes(e)&&(i=i.filter(t=>t!==e),r=!0),r&&(await T.H.updateEffective("graph.scrollMarkers.additionalTypes",i),this.notifyDidChangeScrollMarkers())}async setColumnMode(e,t){let i=this.container.storage.getWorkspace("graph:columns"),r=i?.[e];null!=r?r.mode=t:r={mode:t},i=(0,x.Y8)(i,e,r),await this.container.storage.storeWorkspace("graph:columns",i),this.notifyDidChangeColumns()}getCommitFromGraphItemRef(e){let t=this.getGraphItemRef(e,"revision");return null!=t||null!=(t=this.getGraphItemRef(e,"stash"))?this.container.git.getCommit(t.repoPath,t.ref):Promise.resolve(void 0)}getGraphItemRef(e,t){if(null==e){let e=this.activeSelection;return null!=e&&(null==t||t===e.refType)?e:void 0}switch(t){case"branch":return ek(e,"branch")||eA(e,"upstreamStatus")?e.webviewItemValue.ref:void 0;case"revision":return ek(e,"revision")?e.webviewItemValue.ref:void 0;case"stash":return ek(e,"stash")?e.webviewItemValue.ref:void 0;case"tag":return ek(e,"tag")?e.webviewItemValue.ref:void 0;default:return ek(e)?e.webviewItemValue.ref:void 0}}getGraphItemRefs(e,t){if(null==e)return{active:void 0,selection:[]};switch(t){case"branch":if(!ek(e,"branch")&&!eA(e,"upstreamStatus"))return{active:void 0,selection:[]};break;case"revision":if(!ek(e,"revision"))return{active:void 0,selection:[]};break;case"stash":if(!ek(e,"stash"))return{active:void 0,selection:[]};break;case"tag":if(!ek(e,"tag"))return{active:void 0,selection:[]};break;default:if(!ek(e))return{active:void 0,selection:[]}}let i=e.webviewItemsValues?.map(e=>e.webviewItemValue.ref)??[];return i.length||i.push(e.webviewItemValue.ref),{active:e.webviewItemValue.ref,selection:i}}};function eP(e){return null!=e&&(0,L.sc)(e)&&("gitlens.graph"===e.webview||"gitlens.views.graph"===e.webview)}function eA(e,t){return null!=e&&eP(e)&&"object"==typeof e.webviewItemValue&&e.webviewItemValue.type===t}function ek(e,t){return null!=e&&eP(e)&&"object"==typeof e.webviewItemValue&&"ref"in e.webviewItemValue&&(null==t||e.webviewItemValue.ref.refType===t)}function eD(e){return null!=e&&"object"==typeof e&&"ref"in e&&(0,C.cf)(e.ref)}eC([(0,$.Yz)({args:{0:e=>e.toString()}})],GraphWebviewProvider.prototype,"onRepositoryChanged",1),eC([(0,$.Yz)({args:!1})],GraphWebviewProvider.prototype,"onRepositoryFileSystemChanged",1),eC([(0,$.Yz)({args:!1})],GraphWebviewProvider.prototype,"onSubscriptionChanged",1),eC([(0,$.Yz)()],GraphWebviewProvider.prototype,"onEnsureRowRequest",1),eC([(0,I.G)(),(0,$.Yz)()],GraphWebviewProvider.prototype,"onGetMoreRows",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"onOpenPullRequestDetails",1),eC([(0,$.Yz)()],GraphWebviewProvider.prototype,"onSearchRequest",1),eC([(0,$.Yz)()],GraphWebviewProvider.prototype,"updateState",1),eC([(0,$.Yz)()],GraphWebviewProvider.prototype,"updateAvatars",1),eC([(0,$.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeAvatars",1),eC([(0,$.Yz)()],GraphWebviewProvider.prototype,"updateRefsMetadata",1),eC([(0,$.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeRefsMetadata",1),eC([(0,$.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeColumns",1),eC([(0,$.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeScrollMarkers",1),eC([(0,$.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeRefsVisibility",1),eC([(0,$.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeConfiguration",1),eC([(0,$.Yz)()],GraphWebviewProvider.prototype,"notifyDidFetch",1),eC([(0,$.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeRows",1),eC([(0,$.Yz)({args:!1})],GraphWebviewProvider.prototype,"notifyDidChangeRowsStats",1),eC([(0,$.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeWorkingTree",1),eC([(0,$.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeSelection",1),eC([(0,$.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeSubscription",1),eC([(0,$.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeState",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"fetch",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"pull",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"push",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"createBranch",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"deleteBranch",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"mergeBranchInto",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"openBranchOnRemote",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"publishBranch",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"rebase",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"rebaseToRemote",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"renameBranch",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"cherryPick",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"copy",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"copyMessage",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"copySha",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"openInDetailsView",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"openSCM",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"openCommitOnRemote",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"copyDeepLinkToBranch",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"copyDeepLinkToCommit",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"copyDeepLinkToRepo",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"copyDeepLinkToTag",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"shareAsCloudPatch",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"resetCommit",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"resetToCommit",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"resetToTip",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"revertCommit",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"switchTo",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"hideRef",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"switchToAnother",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"undoCommit",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"saveStash",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"applyStash",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"deleteStash",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"renameStash",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"createTag",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"deleteTag",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"createWorktree",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"createPullRequest",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"openPullRequest",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"openPullRequestChanges",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"openPullRequestComparison",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"openPullRequestOnRemote",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"compareAncestryWithWorking",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"compareHeadWith",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"compareWithMergeBase",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"openChangedFileDiffsWithMergeBase",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"compareWithUpstream",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"compareWorkingWith",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"openFiles",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"openAllChanges",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"openAllChangesWithWorking",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"openRevisions",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"openOnlyChangedFiles",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"addAuthor",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"toggleColumn",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"toggleScrollMarker",1),eC([(0,$.Rm)()],GraphWebviewProvider.prototype,"setColumnMode",1)},7823:(e,t,i)=>{i.d(t,{PatchDetailsWebviewProvider:()=>PatchDetailsWebviewProvider});var r=i(1398),s=i(5176),n=i(3807),o=i(8803),a=i(9432),l=i(1310),h=i(5313),c=i(5248),u=i(6645),d=i(9634),p=i(500),g=i(2471);async function m(e,t,i){if(null==i)return;let s=await (0,p.p9)(i,{});if(0===s.length)return;let n=r.window.createQuickPick();n.ignoreFocusOut=(0,g.dW)();let o=[];try{let i=await new Promise(i=>{o.push(n.onDidHide(()=>i(void 0)),n.onDidAccept(()=>{0!==n.activeItems.length&&i(n.activeItems[0])})),n.title=e,n.placeholder=t,n.matchOnDescription=!0,n.matchOnDetail=!0,n.items=s,n.show()});return i?.item}finally{n.dispose(),o.forEach(e=>void e.dispose())}}async function f(e,t,i){let s;let n=r.window.createInputBox();n.ignoreFocusOut=!0;let o=[];try{s=await new Promise(i=>{o.push(n.onDidHide(()=>i(void 0)),n.onDidAccept(()=>{let e=n.value.trim();if(null==e){n.validationMessage="Please enter a valid branch name";return}i(e)})),n.title=e,n.placeholder=t,n.prompt="Enter a name for the new branch",n.show()})}finally{n.dispose(),o.forEach(e=>void e.dispose())}return s}async function w(e,t){if(null==t)return;let i={label:"Create new branch",description:"Creates a branch to apply the Cloud Patch to. (Typing an existing branch name will use that branch.)"},s={label:"Select existing branch",description:"Selects an existing branch to apply the Cloud Patch to."},n=[i,s],o=r.window.createQuickPick();o.ignoreFocusOut=(0,g.dW)();let a=[];try{let r=await new Promise(t=>{a.push(o.onDidHide(()=>t(void 0)),o.onDidAccept(()=>{0!==o.activeItems.length&&t(o.activeItems[0])})),o.title=e,o.placeholder="Select a branch option",o.matchOnDescription=!0,o.matchOnDetail=!0,o.items=n,o.show()});if(r===i)return f(e,"Enter a name for the new branch",t);if(r===s)return m(e,"Select an existing branch",t);return}finally{o.dispose(),a.forEach(e=>void e.dispose())}}var v=i(5854),y=i(560),b=i(3131),C=i(7279);async function R(e,t,i,n){let o=(0,b.v6)(),a=[];function l(e){return e.sort((e,t)=>(e.picked?-1:1)-(t.picked?-1:1)||(0,C.wN)(e.label,t.label))}try{let h=r.window.createQuickPick();if(a.push(h,h.onDidHide(()=>o.fulfill(void 0)),h.onDidAccept(()=>h.busy?void 0:o.fulfill(h.selectedItems.map(e=>e.item))),h.onDidTriggerButton(e=>{e===v.tH&&(h.canSelectMany?h.selectedItems=[]:o.fulfill([]))})),h.ignoreFocusOut=!0,h.title=e,h.placeholder=t,h.matchOnDescription=!0,h.matchOnDetail=!0,h.canSelectMany=n?.multiselect??!0,h.buttons=n?.clearButton?[v.tH]:[],h.busy=!0,h.show(),i=await i,n?.filter!=null&&(i=i.filter(n.filter)),!o.pending)return;let c=i.map(e=>{let t={label:e.name??e.username,description:e.email,picked:n?.picked?.(e)??!1,item:e,iconPath:(0,s.m_)(e.email,void 0)};return t.alwaysShow=t.picked,t});if(!o.pending)return;return h.items=l(c),h.canSelectMany?h.selectedItems=c.filter(e=>e.picked):h.activeItems=c.filter(e=>e.picked),h.busy=!1,a.push(h.onDidChangeSelection((0,y.sg)(e=>{if(!h.canSelectMany||h.busy)return;let t=!1;for(let i of h.items){let r=e.includes(i);(i.picked!==r||i.alwaysShow!==r)&&(i.alwaysShow=i.picked=r,t=!0)}t&&(h.items=l([...h.items]),h.selectedItems=e)},10))),await o.promise}finally{a.forEach(e=>void e.dispose())}}var S=i(7587),P=i(7899),A=i(4832),k=i(8973),D=i(6950),T=i(8180),_=i(4026),I=i(4911),$=i(1112),E=i(378),O=i(103),x=i(1014),F=i(3355);let B="patchDetails",L=new F.Q2(B,"apply"),U=new F.Q2(B,"archive"),W=new F.Q2(B,"create"),q=new F.Q2(B,"openInGraph"),M=new F.Q2(B,"checked");new F.Q2(B,"selectRepo"),new F.Q2(B,"selectBase"),new F.Q2(B,"file/actions/execute");let N=new F.Q2(B,"file/open");new F.Q2(B,"file/openOnRemote");let H=new F.Q2(B,"file/compareWorking"),G=new F.Q2(B,"file/comparePrevious"),V=new F.Q2(B,"preferences/update"),Q=new F.Q2(B,"switchMode"),j=new F.Q2(B,"cloud/copyLink");new F.Q2(B,"local/createPatch");let z=new F.Q2(B,"create/repository/check"),Y=new F.Q2(B,"update/create/metadata"),K=new F.Q2(B,"update/draft/metadata"),J=new F.Q2(B,"update/draft/permissions"),Z=new F.Q2(B,"update/users"),X=new F.Q2(B,"update/userSelection"),ee=new F.Oz(B,"explain"),et=new F.C1(B,"didChange",!0),ei=new F.C1(B,"create/didChange"),er=new F.C1(B,"draft/didChange"),es=new F.C1(B,"preferences/didChange"),en=new F.C1(B,"draft/didChangeRepository");new F.C1(B,"org/settings/didChange");let RepositoryRefChangeset=class RepositoryRefChangeset{constructor(e,t,i,r,s,n){this.container=e,this.repository=t,this.revision=i,this.files=r,this.checked=s,this.expanded=n}type="revision";dispose(){}suspend(){}resume(){}_checked=!1;get checked(){return this._checked}set checked(e){this._checked=e}_expanded=!1;get expanded(){return this._expanded}set expanded(e){this._expanded!==e&&(this._expanded=e)}async getChange(){return{type:"revision",repository:{name:this.repository.name,path:this.repository.path,uri:this.repository.uri.toString()},revision:this.revision,files:this.files,checked:this.checked,expanded:this.expanded}}};let RepositoryWipChangeset=class RepositoryWipChangeset{constructor(e,t,i,r,s,n){this.container=e,this.repository=t,this.revision=i,this.onDidChangeRepositoryWip=r,this.checked=s,this.expanded=n}type="wip";_disposable;dispose(){this._disposable?.dispose(),this._disposable=void 0}suspend(){this._disposable?.dispose(),this._disposable=void 0}resume(){this._files=void 0,this._expanded&&this.subscribe()}_checked=!1;get checked(){return this._checked}set checked(e){this._checked=e}_expanded=!1;get expanded(){return this._expanded}set expanded(e){this._expanded!==e&&(this._files=void 0,e?this.subscribe():(this._disposable?.dispose(),this._disposable=void 0),this._expanded=e)}_files;async getChange(){let e;return this.expanded&&(null==this._files&&(this._files=this.getFiles()),e=await this._files),{type:"wip",repository:{name:this.repository.name,path:this.repository.path,uri:this.repository.uri.toString()},revision:this.revision,files:e?.files,checked:this.checked,expanded:this.expanded}}subscribe(){null==this._disposable&&(this._disposable=r.Disposable.from(this.repository.watchFileSystem(1e3),this.repository.onDidChangeFileSystem(()=>this.onDidChangeWip(),this),this.repository.onDidChange(e=>{e.changed(d.Z_.Index,d.Ti.Any)&&this.onDidChangeWip()})))}onDidChangeWip(){this._files=void 0,this.onDidChangeRepositoryWip(this)}async getFiles(){let e=await this.container.git.getStatusForRepo(this.repository.path),t=[];if(null!=e)for(let i of e.files){let e={repoPath:i.repoPath,path:i.path,status:i.status,originalPath:i.originalPath,staged:i.staged};t.push(e),i.staged&&i.wip&&t.push({...e,staged:!1})}return{files:t}}};var eo=Object.defineProperty,ea=Object.getOwnPropertyDescriptor,el=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?ea(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&eo(t,i,n),n};let PatchDetailsWebviewProvider=class PatchDetailsWebviewProvider{constructor(e,t){this.container=e,this.host=t,this._context={mode:"create",draft:void 0,draftGkDevUrl:void 0,draftUserState:void 0,draftVisibiltyState:void 0,create:void 0,preferences:this.getPreferences(),orgSettings:this.getOrgSettings()},this.setHostTitle(),this.host.description=n.WZ,this._disposable=r.Disposable.from(A.H.onDidChangeAny(this.onAnyConfigurationChanged,this),e.git.onDidChangeRepositories(this.onRepositoriesChanged,this),(0,k.wt)(this.onContextChanged,this))}_context;_disposable;dispose(){this._disposable.dispose()}canReuseInstance(...e){let[t]=e;if(t?.mode==="view"&&null!=t.draft)switch(t.draft.draftType){case"cloud":return this._context.draft?.draftType===t.draft.draftType&&this._context.draft.id===t.draft.id;case"local":return this._context.draft?.draftType===t.draft.draftType&&this._context.draft.patch.contents===t.draft.patch?.contents}return!1}async onShowing(e,t,...i){let[r]=i;if(r?.mode==="view"&&null!=r.draft)await this.updateViewDraftState(r.draft),this.trackViewDraft(this._context.draft,r.source);else{this.container.git.isDiscoveringRepositories&&await this.container.git.isDiscoveringRepositories;let e=r?.mode==="create"&&null!=r.create?r.create:{repositories:void 0};this.updateCreateDraftState(e)}return!t?.preserveVisibility||!!this.host.visible}includeBootstrap(){return this.getState(this._context)}registerCommands(){let e=[];return this.host.isHost("view")&&e.push((0,P.Lb)(`${this.host.id}.refresh`,()=>this.host.refresh(!0)),(0,P.Lb)(`${this.host.id}.close`,()=>this.closeView())),e}onMessageReceived(e){switch(!0){case L.is(e):this.applyPatch(e.params);break;case j.is(e):this.copyCloudLink();break;case W.is(e):this.createDraft(e.params);break;case ee.is(e):this.explainRequest(ee,e);break;case G.is(e):this.openFileComparisonWithPrevious(e.params);break;case H.is(e):this.openFileComparisonWithWorking(e.params);break;case N.is(e):this.openFile(e.params);break;case q.is(e):(0,P.RS)(n.Ts.ShowInCommitGraph,{ref:(0,u.kA)(e.params.ref,e.params.repoPath,{refType:"revision"})});break;case Q.is(e):this.switchMode(e.params);break;case Y.is(e):this.updateCreateMetadata(e.params);break;case K.is(e):this.updateDraftMetadata(e.params);break;case J.is(e):this.updateDraftPermissions();break;case z.is(e):this.updateCreateCheckedState(e.params);break;case V.is(e):this.updatePreferences(e.params);break;case M.is(e):this.onPatchChecked(e.params);break;case Z.is(e):this.onInviteUsers();break;case X.is(e):this.onUpdatePatchUserSelection(e.params);break;case U.is(e):this.archiveDraft(e.params.reason)}}onRefresh(){this.updateState(!0)}onReloaded(){this.updateState(!0)}onVisibilityChanged(e){this._context.create?.changes.forEach(t=>e?t.resume():t.suspend()),e&&this.host.sendPendingIpcNotifications()}onAnyConfigurationChanged(e){(A.H.changed(e,["defaultDateFormat","views.patchDetails.files","views.patchDetails.avatars"])||A.H.changedCore(e,"workbench.tree.renderIndentGuides")||A.H.changedCore(e,"workbench.tree.indent"))&&(this._context.preferences={...this._context.preferences,...this.getPreferences()},this.updateState())}getPreferences(){return{avatars:A.H.get("views.patchDetails.avatars"),dateFormat:A.H.get("defaultDateFormat")??"MMMM Do, YYYY h:mma",files:A.H.get("views.patchDetails.files"),indentGuides:A.H.getCore("workbench.tree.renderIndentGuides")??"onHover",indent:A.H.getCore("workbench.tree.indent")}}onContextChanged(e){["gitlens:gk:organization:ai:enabled","gitlens:gk:organization:drafts:enabled"].includes(e)&&(this._context.orgSettings=this.getOrgSettings(),this.updateState())}getOrgSettings(){return{ai:(0,k.SD)("gitlens:gk:organization:ai:enabled",!1),byob:(0,k.SD)("gitlens:gk:organization:drafts:byob",!1)}}onRepositoriesChanged(e){if("create"===this.mode&&null!=this._context.create){if(this._context.create?.showingAllRepos)for(let t of e.added)this._context.create.changes.set(t.uri.toString(),new RepositoryWipChangeset(this.container,t,{to:h.SU,from:"HEAD"},this.onRepositoryWipChanged.bind(this),!1,!0));for(let t of e.removed)this._context.create.changes.delete(t.uri.toString());this.notifyDidChangeCreateDraftState()}}onRepositoryWipChanged(e){this.notifyDidChangeCreateDraftState()}get mode(){return this._context.mode}setMode(e,t){this._context.mode=e,this.setHostTitle(e),(0,k.o)("gitlens:views:patchDetails:mode","editor"===A.H.get("cloudPatches.experimental.layout")?void 0:e),t||this.updateState(!0)}setHostTitle(e=this._context.mode){"create"===e?this.host.title="Create Cloud Patch":this._context.draft?.draftType==="cloud"&&"suggested_pr_change"===this._context.draft.type?this.host.title="Cloud Suggestion":this.host.title="Cloud Patch Details"}async applyPatch(e){if(null==this._context.draft||"local"===this._context.draft.draftType||!e.selected?.length)return;let t=this._context.draft.changesets?.[0];if(null==t)return;let i="branch"===e.target;for(let s of t.patches)if(e.selected.includes(s.id))try{let e;let t=s.commit??await this.getOrCreateCommitForPatch(s.gkRepositoryId);if(!t)continue;if(i){let i=t.getRepository(),o=await w(`Choose a Branch ${n.EO.Dot} ${i?.name}`,i);if(null==o){r.window.showErrorMessage(`Unable to apply patch to '${s.repository.name}': No branch selected`);continue}let a="string"==typeof o;e={branchName:a?o:o.ref,createBranchIfNeeded:a}}await this.container.git.applyUnreachableCommitForPatch(t.repoPath,t.ref,{stash:"prompt",...e}),r.window.showInformationMessage("Patch applied successfully")}catch(e){if(e instanceof o.AL)return;e instanceof l.ol?e.reason===l.a_.AppliedWithConflicts?r.window.showWarningMessage("Patch applied with conflicts"):r.window.showErrorMessage(e.message):r.window.showErrorMessage(`Unable to apply patch onto '${s.baseRef}': ${e.message}`)}}closeView(){if((0,k.o)("gitlens:views:patchDetails:mode",void 0),"create"===this._context.mode)this.container.draftsView.show();else if(this._context.draft?.draftType==="cloud"){if("suggested_pr_change"===this._context.draft.type){let e=this._context.draft.changesets?.[0].patches[0].repository;(0,E.$)({type:"wip",repository:ec(e)?e:void 0,source:"patchDetails"})}else this.container.draftsView.revealDraft(this._context.draft)}}copyCloudLink(){this._context.draft?.draftType==="cloud"&&r.env.clipboard.writeText(this._context.draft.deepLinkUrl)}async getOrganizationMembers(){return this.container.organizations.getMembers()}async onInviteUsers(){let e,t,i;"create"===this.mode?(i=this._context.create?.userSelections?.map(e=>e.member.id),t=this._context.create?.userSelections?.find(e=>"owner"===e.member.role),e=t?.user):(i=this._context.draftUserState?.selections?.filter(e=>"delete"!==e.change)?.map(e=>e.member.id),e=this._context.draftUserState?.users.find(e=>"owner"===e.role));let r=await R("Select Collaborators","Select the collaborators to share this patch with",this.getOrganizationMembers(),{multiselect:!0,filter:t=>t.id!==e?.userId,picked:e=>i?.includes(e.id)??!1});if(null==r)return;if("create"===this.mode){let e=r.map(e=>eu(e,void 0,"editor","add"));null!=t&&e.push(t),this._context.create.userSelections=e,this.notifyDidChangeCreateDraftState();return}let s=this._context.draftUserState,n=s.selections,o=new Map,a=new Set(r.map(e=>e.id)),l=[];for(let e of n){if(a.has(e.member.id)||"owner"===e.member.role){o.set(e.member.id,e);continue}l.push({...e,change:"delete"})}for(let e of r){let t=o.get(e.id);null!=t&&"delete"===t.change&&(t.change=void 0),l.push(null!=t?t:eu(e,void 0,"editor","add"))}l.length&&(s.selections=l,this.notifyDidChangeViewDraftState())}onUpdatePatchUserSelection(e){if("create"===this.mode){let t=this._context.create?.userSelections;if(null==t)return;if("remove"===e.role){let i=t.findIndex(t=>t.member.id===e.selection.member.id);if(-1===i)return;t.splice(i,1)}else{let i=t.find(t=>t.member.id===e.selection.member.id);if(null==i)return;i.pendingRole=e.role}this.notifyDidChangeCreateDraftState();return}let t=this._context.draftUserState.selections.find(t=>t.member.id===e.selection.member.id);null!=t&&("remove"===e.role?t.change="delete":(t.change="modify",t.pendingRole=e.role),this.notifyDidChangeViewDraftState())}async createDraft({title:e,changesets:t,description:i,visibility:s,userSelections:n}){if(!await (0,x.G5)(this.container,"Cloud Patches are a Preview feature and require an account.",{source:"cloud-patches",detail:"create"})||!await (0,x.l7)(this.container))return;let o=[],a=Object.entries(t),l=1===a.length;for(let[e,t]of a){if(!l&&!1===t.checked)continue;let i=this._context.create?.changes?.get(e);if(null==i)continue;let{revision:r,repository:s}=i;"wip"===t.type&&"staged"===t.checked&&(r={...r,to:h.id}),o.push({repository:s,revision:r})}if(null!=o)try{let t=await this.container.drafts.createDraft("patch",e,o,{description:i,visibility:s});null!=n&&0!==n.length&&await this.container.drafts.addDraftUsers(t.id,n.map(e=>({userId:e.member.id,role:e.pendingRole}))),async function(){let e={title:"View Patch"},i={title:"Copy Link"},s=!1;for(;;){let n=await r.window.showInformationMessage(`Cloud Patch successfully created${s?"— link copied to the clipboard":""}`,e,i);if(n===i){r.env.clipboard.writeText(t.deepLinkUrl),s=!0;continue}n===e&&(0,O.X)({mode:"view",draft:t});break}}(),this.container.draftsView.refresh(!0).then(()=>void this.container.draftsView.revealDraft(t)),this.closeView()}catch(e){r.window.showErrorMessage(`Unable to create draft: ${e.message}`)}}async archiveDraft(e){if(this._context.draft?.draftType!=="cloud")return;let t="suggested_pr_change"===this._context.draft.type,i="Cloud Patch";t&&(i="Code Suggestion");try{await this.container.drafts.archiveDraft(this._context.draft,{archiveReason:e}),this._context.draft={...this._context.draft,isArchived:!0,archivedReason:e};let s="archived";if(t)switch(e){case"accepted":s="accepted";break;case"rejected":s="declined"}r.window.showInformationMessage(`${i} successfully ${s}`),this.notifyDidChangeViewDraftState(),t&&this.trackArchiveDraft(this._context.draft)}catch(n){let s="archive";if(t)switch(e){case"accepted":s="accept";break;case"rejected":s="decline"}r.window.showErrorMessage(`Unable to ${s} ${i}: ${n.message}`)}}async trackArchiveDraft(e){e=await this.ensureDraftContent(e);let t=e.changesets?.[0].patches.find(e=>ec(e.repository));if(null==t)return;let i=t.repository,r=await this.container.git.getBestRemoteWithProvider(i.uri);if(null==r)return;let s=r.provider.id;this.container.telemetry.sendEvent("codeSuggestionArchived",{provider:s,draftId:e.id,reason:e.archivedReason})}async explainRequest(e,t){let i;if(this._context.draft?.draftType!=="cloud"){this.host.respond(e,t,{error:{message:"Unable to find patch"}});return}try{let e=await this.getDraftPatch(this._context.draft);if(null==e)throw Error("Unable to find patch");let t=await this.getOrCreateCommitForPatch(e.gkRepositoryId);if(null==t)throw Error("Unable to find commit");let r=await (await this.container.ai)?.explainCommit(t,{progress:{location:{viewId:this.host.id}}});if(null==r)throw Error("Error retrieving content");i={summary:r}}catch(e){i={error:{message:e.message}}}this.host.respond(e,t,i)}async openPatchContents(e){}onPatchChecked(e){if(e.patch.repository.located||!1===e.checked)return;let t=this._context.draft?.changesets?.[0].patches?.find(t=>t.gkRepositoryId===e.patch.gkRepositoryId);null!=t&&this.getOrLocatePatchRepository(t,{prompt:!0,notifyOnLocation:!0})}notifyPatchRepositoryUpdated(e){return this.host.notify(en,{patch:(0,$.l)({...e,contents:void 0,commit:void 0,repository:{id:e.gkRepositoryId,name:e.repository?.name??"",located:ec(e.repository)}})})}updateCreateCheckedState(e){let t=this._context.create?.changes.get(e.repoUri);null!=t&&(t.checked=e.checked,this.notifyDidChangeCreateDraftState())}updateCreateMetadata(e){null!=this._context.create&&(this._context.create.title=e.title,this._context.create.description=e.description,this._context.create.visibility=e.visibility,this.notifyDidChangeCreateDraftState())}updateDraftMetadata(e){null!=this._context.draft&&(this._context.draftVisibiltyState=e.visibility,this.notifyDidChangeViewDraftState())}async updateDraftPermissions(){let e=this._context.draft,t=e.id,i=[];null!=this._context.draftVisibiltyState&&this._context.draftVisibiltyState!==e.visibility&&i.push(this.container.drafts.updateDraftVisibility(t,this._context.draftVisibiltyState));let s=this._context.draftUserState?.selections,n=[];if(null!=s)for(let e of s)void 0!==e.change&&("delete"!==e.change&&n.push({userId:e.member.id,role:e.pendingRole}),"add"!==e.change&&i.push(this.container.drafts.removeDraftUser(t,e.member.id)));(0!==i.length||0!==n.length)&&(0!==i.length&&console.log(await Promise.all(i)),0!==n.length&&await this.container.drafts.addDraftUsers(t,n),await this.createDraftUserState(e,{force:!0}),r.window.showInformationMessage("Cloud Patch successfully updated"),this.notifyDidChangeViewDraftState())}switchMode(e){this.setMode(e.mode)}_notifyDidChangeStateDebounced=void 0;updateState(e=!1){if(this.host.clearPendingIpcNotifications(),e){this.notifyDidChangeState();return}null==this._notifyDidChangeStateDebounced&&(this._notifyDidChangeStateDebounced=(0,y.sg)(this.notifyDidChangeState.bind(this),500)),this._notifyDidChangeStateDebounced()}async getState(e){let t,i;return"create"===e.mode&&null!=e.create&&(t=await this.getCreateDraftState(e)),"view"===e.mode&&null!=e.draft&&(i=await this.getViewDraftState(e)),(0,$.l)({...this.host.baseWebviewState,mode:e.mode,create:t,draft:i,preferences:e.preferences,orgSettings:e.orgSettings})}async notifyDidChangeState(){return this._notifyDidChangeStateDebounced?.cancel(),this.host.notify(et,{state:await this.getState(this._context)})}updateCreateDraftState(e){let t;let i=!1;if(null!=e.changes){t=this._context.create?.changes??new Map;let i=new Set;for(let s of e.changes){let e;let n=this.container.git.getRepository(r.Uri.parse(s.repository.uri));null!=n&&(e="wip"===s.type?new RepositoryWipChangeset(this.container,n,s.revision,this.onRepositoryWipChanged.bind(this),s.checked??!0,s.expanded??!0):new RepositoryRefChangeset(this.container,n,s.revision,s.files,s.checked??!0,s.expanded??!0),i.add(n.uri.toString()),t.set(n.uri.toString(),e))}if(i.size!==t.size)for(let[e,r]of t)i.has(e)||(r.checked=!1)}else i=null==e.repositories,t=new Map((e.repositories??this.container.git.openRepositories).map(e=>[e.uri.toString(),new RepositoryWipChangeset(this.container,e,{to:h.SU,from:"HEAD"},this.onRepositoryWipChanged.bind(this),!0,!0)]));this._context.create={title:e.title,description:e.description,changes:t,showingAllRepos:i,visibility:"public"},this.setMode("create",!0),this.notifyDidChangeCreateDraftState()}async getCreateDraftState(e){let{create:t}=e;if(null==t)return;let i={};if(0!==t.changes.size)for(let[e,r]of t.changes){let t=await r.getChange();t?.files?.length!==0&&(t.checked!==r.checked&&(t.checked=r.checked),i[e]=t)}return{title:t.title,description:t.description,changes:i,visibility:t.visibility,userSelections:t.userSelections}}async notifyDidChangeCreateDraftState(){return this.host.notify(ei,{mode:this._context.mode,create:await this.getCreateDraftState(this._context)})}async trackViewDraft(e,t){if(e?.draftType!=="cloud"||"suggested_pr_change"!==e.type)return;e=await this.ensureDraftContent(e);let i=e.changesets?.[0].patches.find(e=>ec(e.repository));if(null==i)return;let r=i.repository,s=await this.container.git.getBestRemoteWithProvider(r.uri);if(null==s)return;let n=s.provider.id,o=await this.container.git.visibility(r.path);this.container.telemetry.sendEvent("codeSuggestionViewed",{provider:n,source:t,repoPrivacy:o,draftPrivacy:e.visibility,draftId:e.id})}async updateViewDraftState(e){this._context.draft=e,e?.draftType==="cloud"&&(this._context.draftGkDevUrl=this.container.drafts.generateWebUrl(e),await this.createDraftUserState(e,{force:!0})),this.setMode("view",!0),this.notifyDidChangeViewDraftState()}async getViewDraftState(e,t=!0){if(null==e.draft)return;let i=e.draft;if("cloud"===i.draftType){!0===t&&eh(i)&&setTimeout(async()=>{await this.ensureDraftContent(i),this.notifyDidChangeViewDraftState(!1)},0);let e=this._context.draftUserState;return{draftType:"cloud",id:i.id,type:i.type,createdAt:i.createdAt.getTime(),updatedAt:i.updatedAt.getTime(),author:{id:i.author.id,name:i.author.name,email:i.author.email,avatar:i.author.avatarUri?.toString()},role:i.role,title:i.title,description:i.description,isArchived:i.isArchived,archivedReason:i.archivedReason,visibility:i.visibility,gkDevLink:this._context.draftGkDevUrl,patches:i.changesets?.length?(0,$.l)(i.changesets[0].patches.map(e=>({...e,contents:void 0,commit:void 0,repository:{id:e.gkRepositoryId,name:e.repository?.name??"",located:ec(e.repository)}}))):void 0,users:e.users,userSelections:e.selections}}}async createDraftUserState(e,t){if(null==this._context.draftUserState||t?.force===!0)try{let t=await this.container.drafts.getDraftUsers(e.id);if(0===t.length)return;let i=[],r=[],s=await this.getOrganizationMembers();for(let e of t){i.push(e);let t=s.find(t=>t.id===e.userId);r.push(eu(t,e))}r.sort((e,t)=>((e.pendingRole??e.member.role)==="owner"?-1:1)-((t.pendingRole??t.member.role)==="owner"?-1:1)||e.member.name.localeCompare(t.member.name)),this._context.draftUserState={users:i,selections:r}}catch(e){}}async notifyDidChangeViewDraftState(e=!0){return this.host.notify(er,{mode:this._context.mode,draft:(0,$.l)(await this.getViewDraftState(this._context,e))})}updatePreferences(e){(this._context.preferences?.files?.compact!==e.files?.compact||this._context.preferences?.files?.icon!==e.files?.icon||this._context.preferences?.files?.layout!==e.files?.layout||this._context.preferences?.files?.threshold!==e.files?.threshold)&&(null!=e.files&&(this._context.preferences?.files?.compact!==e.files?.compact&&A.H.updateEffective("views.patchDetails.files.compact",e.files?.compact),this._context.preferences?.files?.icon!==e.files?.icon&&A.H.updateEffective("views.patchDetails.files.icon",e.files?.icon),this._context.preferences?.files?.layout!==e.files?.layout&&A.H.updateEffective("views.patchDetails.files.layout",e.files?.layout),this._context.preferences?.files?.threshold!==e.files?.threshold&&A.H.updateEffective("views.patchDetails.files.threshold",e.files?.threshold),this._context.preferences.files=e.files),this.notifyDidChangePreferences())}async notifyDidChangePreferences(){return this.host.notify(es,{preferences:this._context.preferences})}async getDraftPatch(e,t){e.changesets=await this.ensureChangesets(e);let i=null==t?e.changesets[0].patches?.[0]:e.changesets[0].patches?.find(e=>e.gkRepositoryId===t);if(null!=i){if(null==i.contents||null==i.files||null==i.repository){let e=await this.container.drafts.getPatchDetails(i.id);i.contents=e.contents,i.files=e.files,i.repository=e.repository}return i}}async getFileCommitFromParams(e){let[t,i]=await this.getOrCreateCommit(e);return null!=t&&null!=i?[t,new c.lY(e.repoPath,e.path,e.status,e.originalPath,void 0,void 0,e.staged),i]:null!=(t=await t?.getCommitForFile(e.path,e.staged))?[t,t.file,i]:void 0}async getOrCreateCommit(e){switch(this.mode){case"create":return this.getCommitForFile(e);case"view":return[await this.getOrCreateCommitForPatch(e.gkRepositoryId)];default:return[void 0]}}async getCommitForFile(e){let t=(0,_.I6)(this._context.create.changes.values(),t=>t.repository.path===e.repoPath);if(null==t)return[void 0];let i=await t.getChange();if(null==i)return[void 0];if("revision"===i.type){let t=await this.container.git.getCommit(e.repoPath,i.revision.to??h.SU);return i.revision.to===i.revision.from||i.revision.from.length===i.revision.to.length+1&&i.revision.from.endsWith("^")&&i.revision.from.startsWith(i.revision.to)?[t]:[t,i.revision]}return"wip"===i.type?[await this.container.git.getCommit(e.repoPath,i.revision.to??h.SU)]:[void 0]}async getOrCreateCommitForPatch(e){let t=this._context.draft;if("local"===t.draftType)return;let i=await this.getDraftPatch(t,e);if(i?.repository!=null){if(i?.commit==null){let e=await this.getOrLocatePatchRepository(i,{prompt:!0});if(null==e)return;let s=i.baseRef??"HEAD";for(;;){try{let r=await this.container.git.createUnreachableCommitForPatch(e.uri,i.contents,s,t.title);i.commit=r}catch(t){if(null!=s){let t={title:"Choose Base..."},i={title:"Cancel",isCloseAffordance:!0},n=await r.window.showErrorMessage(`Unable to apply the patch onto ${"HEAD"===s?"HEAD":`'${(0,u.pV)(s)}'`}.
Do you want to try again on a different base?`,{modal:!0},t,i);if(null==n||n===i)break;if(n===t){let t=await (0,S.N)(e.path,"Choose New Base for Patch","Choose a new base to apply the patch onto",{allowRevisions:!0,include:S.m.BranchesAndTags|S.m.HEAD});if(null==t)break;s=t.ref;continue}}else r.window.showErrorMessage(`Unable to apply the patch on base '${(0,u.pV)(s)}': ${t.message}`)}break}}return i?.commit}}async openFile(e){let t=await this.getFileCommitFromParams(e);if(null==t)return;let[i,r]=t;(0,a.Tq)(r,i,{preserveFocus:!0,preview:!0,...e.showOptions})}getChangesTitleNote(){return"view"===this._context.mode&&this._context.draft?.draftType==="cloud"&&"suggested_pr_change"===this._context.draft.type?"Code Suggestion":"Patch"}async openFileComparisonWithPrevious(e){let t=await this.getFileCommitFromParams(e);if(null==t)return;let[i,r,s]=t,n=this.getChangesTitleNote();(0,a.eX)(r,null!=s?{repoPath:i.repoPath,rhs:s.to??h.SU,lhs:s.from}:i,{preserveFocus:!0,preview:!0,...e.showOptions,rhsTitle:"view"===this.mode?`${(0,I.P8)(r.path)} (${n})`:void 0}),this.container.events.fire("file:selected",{uri:r.uri},{source:this.host.id})}async openFileComparisonWithWorking(e){let t=await this.getFileCommitFromParams(e);if(null==t)return;let[i,r,s]=t,n=this.getChangesTitleNote();(0,a.DD)(r,null!=s?{repoPath:i.repoPath,ref:s.to}:i,{preserveFocus:!0,preview:!0,...e.showOptions,lhsTitle:"view"===this.mode?`${(0,I.P8)(r.path)} (${n})`:void 0})}async getOrLocatePatchRepository(e,t){if(null==e.repository||(0,d.Z6)(e.repository))return e.repository;let i=await this.container.repositoryIdentity.getRepository(e.repository,{openIfNeeded:!0,prompt:t?.prompt??!1});return null==i?r.window.showErrorMessage(`Unable to locate repository '${e.repository.name}'`):(e.repository=i,t?.notifyOnLocation&&this.notifyPatchRepositoryUpdated(e)),i}async ensureChangesets(e){return e.changesets??=await this.container.drafts.getChangesets(e.id),e.changesets}async ensureDraftContent(e){if(!eh(e))return e;e.changesets=await this.ensureChangesets(e);let t=e.changesets.flatMap(e=>e.patches).filter(e=>null==e.contents||null==e.files||null==e.repository);if(0===t.length)return e;for(let e of(await Promise.allSettled(t.map(e=>this.container.drafts.getPatchDetails(e)))))if("fulfilled"===e.status){let i=t.find(t=>t.id===e.value.id);null!=i&&(i.contents=e.value.contents,i.files=e.value.files,i.repository=e.value.repository,await this.getOrLocatePatchRepository(i))}return e}};function eh(e){return null==e.changesets||(0,_.zN)(e.changesets,e=>e.patches.some(e=>null==e.contents||null==e.files||null==e.repository))}function ec(e){return null!=e&&(0,d.Z6)(e)}function eu(e,t,i,r){return{change:r,member:e,user:t,pendingRole:i,avatarUrl:e?.email!=null?(0,s.m_)(e.email,void 0).toString():void 0}}el([(0,T.Yz)({args:!1})],PatchDetailsWebviewProvider.prototype,"getState",1),el([(0,D.G)(e=>e.id)],PatchDetailsWebviewProvider.prototype,"ensureChangesets",1)},9525:(e,t,i)=>{i.d(t,{TimelineWebviewProvider:()=>TimelineWebviewProvider});var r=i(1398),s=i(3807),n=i(4703),o=i(7931),a=i(5287),l=i(9634),h=i(7899),c=i(4832),u=i(1856),d=i(8180),p=i(560),g=i(4026),m=i(2471),f=i(5329),w=i(7565),v=i(1500),y=i(3355);let b="timeline",C=new y.Q2(b,"point/open"),R=new y.Q2(b,"period/update"),S=new y.C1(b,"didChange");var P=Object.defineProperty,A=Object.getOwnPropertyDescriptor,k=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?A(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&P(t,i,n),n};let TimelineWebviewProvider=class TimelineWebviewProvider{constructor(e,t){this.container=e,this.host=t,this._context={uri:void 0,period:"3|M",etagRepositories:this.container.git.etag,etagRepository:0,etagSubscription:this.container.subscription.etag},this._context={...this._context,...this._pendingContext},this._pendingContext=void 0,this.host.isHost("editor")?this._disposable=r.Disposable.from(this.container.subscription.onDidChange(this.onSubscriptionChanged,this),this.container.git.onDidChangeRepository(this.onRepositoryChanged,this)):(this.host.description=s.lD,this._disposable=r.Disposable.from(this.container.subscription.onDidChange(this.onSubscriptionChanged,this),this.container.git.onDidChangeRepository(this.onRepositoryChanged,this),this.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this),r.window.onDidChangeActiveTextEditor((0,p.sg)(this.onActiveEditorChanged,250),this),this.container.events.on("file:selected",(0,p.sg)(this.onFileSelected,250),this)))}_bootstraping=!0;_context;_pendingContext;_disposable;dispose(){this._disposable.dispose()}onReloaded(){this.notifyDidChangeState(!0)}canReuseInstance(...e){let t;let[i]=e;return null!=i?i instanceof r.Uri?t=i:(0,f.k)(i)?t=i.uri:(0,v.c)(i)&&null!=i.state.uri&&(t=r.Uri.parse(i.state.uri)):t=r.window.activeTextEditor?.document.uri,t?.toString()===this._context.uri?.toString()||void 0}getSplitArgs(){return null!=this._context.uri?[this._context.uri]:[]}onShowing(e,t,...i){let[s]=i;return null!=s?s instanceof r.Uri?this.updatePendingUri(s):(0,f.k)(s)?this.updatePendingUri(s.uri):(0,v.c)(s)&&this.updatePendingContext({period:s.state.period,uri:null!=s.state.uri?r.Uri.parse(s.state.uri):void 0}):this.updatePendingEditor(r.window.activeTextEditor),e?(this._context={...this._context,...this._pendingContext},this._pendingContext=void 0):this.updateState(),!0}includeBootstrap(){return this._bootstraping=!0,this._context={...this._context,...this._pendingContext},this._pendingContext=void 0,this.getState(this._context)}registerCommands(){let e=[];return this.host.isHost("view")&&e.push((0,h.Lb)(`${this.host.id}.refresh`,()=>this.host.refresh(!0),this),(0,h.Lb)(`${this.host.id}.openInTab`,()=>{null!=this._context.uri&&(0,h.RS)(s.Ts.ShowInTimeline,this._context.uri)},this)),e}onVisibilityChanged(e){e&&(this.host.isHost("view")&&this.updatePendingEditor(r.window.activeTextEditor),(!this._bootstraping||(this._bootstraping=!1,null!=this._pendingContext&&"uri"in this._pendingContext))&&this.updateState())}async onMessageReceived(e){switch(!0){case C.is(e):{if(null==e.params.data||!e.params.data.selected||null==this._context.uri)return;let t=this.container.git.getRepository(this._context.uri);if(null==t)return;let i=await t.getCommit(e.params.data.id);if(null==i)return;this.container.events.fire("commit:selected",{commit:i,interaction:"active",preserveFocus:!0,preserveVisibility:!1},{source:this.host.id}),this.container.commitDetailsView.ready||this.container.commitDetailsView.show({preserveFocus:!0},{commit:i,interaction:"active",preserveVisibility:!1});break}case R.is(e):this.updatePendingContext({period:e.params.period})&&this.updateState(!0)}}onActiveEditorChanged(e){if(null!=e){if(!(0,m.ld)(e))return;this.container.git.isTrackable(e.document.uri)||(e=void 0)}this.updatePendingEditor(e)&&this.updateState()}onFileSelected(e){if(null==e.data)return;let t=e.data.uri;null==t||this.container.git.isTrackable(t)||(t=void 0),this.updatePendingUri(t)&&this.updateState()}onRepositoriesChanged(e){let t=this.updatePendingUri(this._context.uri);(this.updatePendingContext({etagRepositories:e.etag})||t)&&this.updateState()}onRepositoryChanged(e){e.changed(l.Z_.Heads,l.Z_.Index,l.Ti.Any)&&this.updatePendingContext({etagRepository:e.repository.etag})&&this.updateState()}onSubscriptionChanged(e){this.updatePendingContext({etagSubscription:e.etag})&&this.updateState()}async getState(e){let t=c.H.get("defaultDateFormat")??"MMMM Do, YYYY h:mma",i=c.H.get("defaultDateShortFormat")??"short",l=e.period??"3|M",h=null!=e.uri?await o.nk.fromUri(e.uri):void 0,d=h?.repoPath;this.host.isHost("editor")?this.host.title=null==h?this.host.originalTitle:`${this.host.originalTitle}: ${h.fileName}`:this.host.description=h?.fileName??s.lD;let p=await this.container.git.access(n.k.Timeline,d);if(null==e.uri||null==h||null==d||!1===p.allowed){let r=await this.container.git.access(n.k.Timeline,d);return{...this.host.baseWebviewState,period:l,title:h?.relativePath,sha:h?.shortSha,uri:e.uri?.toString(),dateFormat:t,shortDateFormat:i,access:r}}let[m,f]=await Promise.all([this.container.git.getCurrentUser(d),this.container.git.getLogForFile(d,h.fsPath,{limit:0,ref:h.sha,since:(function(e){let t;if("all"==e)return;let[i,r]=e.split("|");switch(r){case"D":t=(0,u.Tl)(new Date,{days:-parseInt(i,10)});break;case"M":t=(0,u.Tl)(new Date,{months:-parseInt(i,10)});break;case"Y":t=(0,u.Tl)(new Date,{years:-parseInt(i,10)});break;default:t=(0,u.Tl)(new Date,{months:-3})}return t.getHours()>=12&&t.setDate(t.getDate()+1),t.setHours(0,0,0,0),t})(l)?.toISOString()})]);if(null==f)return{...this.host.baseWebviewState,dataset:[],period:l,title:h.relativePath,sha:h.shortSha,uri:e.uri.toString(),dateFormat:t,shortDateFormat:i,access:p};let w=[...(0,g.pb)(f.commits.values(),e=>e.file?.stats==null&&1!==(0,a.Zx)(e.stats?.changedFiles))];if(0!==w.length){let t=c.H.get("visualHistory.queryLimit")??20,i=this.container.git.getRepository(e.uri),s=i?.provider.name;w.length>t&&(r.window.showWarningMessage(`Unable able to show more than the first ${t} commits for the specified time period because of ${s?`${s} `:""}rate limits.`),w=w.slice(0,20)),await Promise.allSettled(w.map(e=>e.ensureFullDetails()))}let v=m?.name?`${m.name} (you)`:"You",y=[];for(let e of f.commits.values()){let t=e.file?.stats??(1===(0,a.Zx)(e.stats?.changedFiles)?e.stats:void 0);y.push({author:"You"===e.author.name?v:e.author.name,additions:t?.additions,deletions:t?.deletions,commit:e.sha,date:e.date.toISOString(),message:e.message??e.summary,sort:e.date.getTime()})}return y.sort((e,t)=>t.sort-e.sort),{...this.host.baseWebviewState,dataset:y,period:l,title:h.relativePath,sha:h.shortSha,uri:e.uri.toString(),dateFormat:t,shortDateFormat:i,access:p}}updatePendingContext(e,t){let[i,r]=(0,w.ql)(this._context,this._pendingContext,e,t);return i&&(this._pendingContext=r),i}updatePendingEditor(e,t){return!(null==e&&(0,m.dC)(this._context.uri??this._pendingContext?.uri))&&(null==e||!!(0,m.ld)(e))&&this.updatePendingUri(e?.document.uri,t)}updatePendingUri(e,t){let i;if(null!=e){let t=this.container.git.getRepository(e);i=t?.etag??0}else i=0;return this.updatePendingContext({uri:e,etagRepository:i},t)}_notifyDidChangeStateDebounced=void 0;updateState(e=!1){if(e){this.notifyDidChangeState();return}null==this._notifyDidChangeStateDebounced&&(this._notifyDidChangeStateDebounced=(0,p.sg)(this.notifyDidChangeState.bind(this),500)),this._notifyDidChangeStateDebounced()}async notifyDidChangeState(e=!1){let t;return this._notifyDidChangeStateDebounced?.cancel(),(!!e||null!=this._pendingContext)&&(null!=this._pendingContext?(t={...this._context,...this._pendingContext},this._context=t,this._pendingContext=void 0):t=this._context,this.host.notify(S,{state:await this.getState(t)}))}};k([(0,d.Yz)({args:!1})],TimelineWebviewProvider.prototype,"onActiveEditorChanged",1),k([(0,d.Yz)({args:!1})],TimelineWebviewProvider.prototype,"onFileSelected",1),k([(0,d.Yz)({args:!1})],TimelineWebviewProvider.prototype,"onRepositoriesChanged",1),k([(0,d.Yz)({args:!1})],TimelineWebviewProvider.prototype,"onRepositoryChanged",1),k([(0,d.Yz)({args:!1})],TimelineWebviewProvider.prototype,"onSubscriptionChanged",1),k([(0,d.Yz)({args:!1})],TimelineWebviewProvider.prototype,"getState",1),k([(0,d.Yz)()],TimelineWebviewProvider.prototype,"updateState",1),k([(0,d.Yz)()],TimelineWebviewProvider.prototype,"notifyDidChangeState",1)},410:(e,t,i)=>{i.d(t,{UQ:()=>h,Uw:()=>d,ft:()=>c,hu:()=>LocalWorkspace,j2:()=>CloudWorkspace,w2:()=>p,y1:()=>l,yz:()=>u});var r,s,n,o,a=((r=a||{}).Direct="DIRECT",r.ProviderProject="PROVIDER_PROJECT",r);let CloudWorkspace=class CloudWorkspace{constructor(e,t,i,r,s,n,o,a,l,h){this.container=e,this.id=t,this.name=i,this.organizationId=r,this.provider=s,this.repoRelation=n,this.current=o,this.azureInfo=a,this._repositoryDescriptors=l,this._localPath=h,this._disposable=this.container.git.onDidChangeRepositories(this.resetRepositoriesByName,this)}type="cloud";_repositoryDescriptors;_repositoriesByName;_localPath;_disposable;dispose(){this._disposable.dispose()}get shared(){return null!=this.organizationId}get localPath(){return this._localPath}resetRepositoriesByName(){this._repositoriesByName=void 0}async getRepositoriesByName(e){return(null==this._repositoriesByName||e?.force)&&(this._repositoriesByName=await this.container.workspaces.resolveWorkspaceRepositoriesByName(this.id,{resolveFromPath:!0,usePathMapping:!0})),this._repositoriesByName}async getRepositoryDescriptors(e){return(null==this._repositoryDescriptors||e?.force)&&(this._repositoryDescriptors=await this.container.workspaces.getCloudWorkspaceRepositories(this.id),this.resetRepositoriesByName()),this._repositoryDescriptors}async getRepositoryDescriptor(e){return(await this.getRepositoryDescriptors()).find(t=>t.name===e)}addRepositories(e){null==this._repositoryDescriptors?this._repositoryDescriptors=e:this._repositoryDescriptors=this._repositoryDescriptors.concat(e),this.resetRepositoriesByName()}removeRepositories(e){null!=this._repositoryDescriptors&&(this._repositoryDescriptors=this._repositoryDescriptors.filter(t=>!e.includes(t.name)),this.resetRepositoriesByName())}setLocalPath(e){this._localPath=e}};var l=((s=l||{}).GitHub="GITHUB",s.GitHubEnterprise="GITHUB_ENTERPRISE",s.GitLab="GITLAB",s.GitLabSelfHosted="GITLAB_SELF_HOSTED",s.Bitbucket="BITBUCKET",s.Azure="AZURE",s),h=((n=h||{}).GitHub="github",n.GitHubEnterprise="github_enterprise",n.GitLab="gitlab",n.GitLabSelfHosted="gitlab_self_hosted",n.Bitbucket="bitbucket",n.Azure="azure",n);let c={azure:"azure-devops",bitbucket:"bitbucket",github:"github",github_enterprise:"github",gitlab:"gitlab",gitlab_self_hosted:"gitlab"};var u=((o=u||{}).CurrentWindow="Current Window",o.ParentFolder="Parent Folder",o);let d=100,p=100;let LocalWorkspace=class LocalWorkspace{constructor(e,t,i,r,s,n){this.container=e,this.id=t,this.name=i,this.repositoryDescriptors=r,this.current=s,this._localPath=n,this._disposable=this.container.git.onDidChangeRepositories(this.resetRepositoriesByName,this)}type="local";_localPath;_repositoriesByName;_disposable;dispose(){this._disposable.dispose()}get shared(){return!1}get localPath(){return this._localPath}resetRepositoriesByName(){this._repositoriesByName=void 0}async getRepositoriesByName(e){return(null==this._repositoriesByName||e?.force)&&(this._repositoriesByName=await this.container.workspaces.resolveWorkspaceRepositoriesByName(this.id,{resolveFromPath:!0,usePathMapping:!0})),this._repositoriesByName}getRepositoryDescriptors(){return Promise.resolve(this.repositoryDescriptors)}getRepositoryDescriptor(e){return Promise.resolve(this.repositoryDescriptors.find(t=>t.name===e))}setLocalPath(e){this._localPath=e}}},6169:(e,t,i)=>{i.d(t,{F:()=>p,X:()=>d});var r=i(1398),s=i(2972),n=i(4832),o=i(4026),a=i(3131),l=i(2471),h=i(1270),c=i(2362),u=i(6541);async function d(e,t,i,d){let p;let g=r.window.createQuickPick();if(g.ignoreFocusOut=(0,l.dW)(),g.title=t,g.placeholder=i,g.matchOnDescription=!0,g.matchOnDetail=!0,(0,a.yL)(e)&&(g.busy=!0,g.show(),e=await e),null==e){if(g.placeholder="No commits found",d?.empty?.getState!=null){let e=await d.empty.getState();g.items=e.items,null!=e.placeholder&&(g.placeholder=e.placeholder),null!=e.title&&(g.title=e.title)}else g.items=[(0,c.Du)(c.WL.Cancel,void 0,{label:"OK"})]}else g.items=await m(e);async function m(e){let t=[];for await(let i of(d?.showOtherReferences!=null&&t.push(...d.showOtherReferences),(0,o.Tj)(e.commits.values(),async e=>(0,u.Rc)(e,d?.picked===e.ref,{compact:!0,icon:"avatar"}))))t.push(i);return e.hasMore&&t.push((0,c.Du)(c.WL.LoadMore)),t}async function f(){g.ignoreFocusOut=!0,g.busy=!0;try{let t;if(e=await (await e)?.more?.(n.H.get("advanced.maxListItems")),null==e){if(d?.empty?.getState!=null){let e=await d.empty.getState();t=e.items,null!=e.placeholder&&(g.placeholder=e.placeholder),null!=e.title&&(g.title=e.title)}else t=[(0,c.Du)(c.WL.Cancel,void 0,{label:"OK"})]}else t=await m(e);let i=-1;if(0!==g.activeItems.length){let e=g.activeItems[0];i=g.items.indexOf(e),(0,c.hr)(e)&&i--}g.items=t,i&&(g.activeItems=[g.items[i]])}finally{g.busy=!1}}d?.picked&&(g.activeItems=g.items.filter(e=>!h.Fj.is(e)&&e.picked));let w=[];if(d?.keyboard!=null){let{keyboard:e}=d;(p=s.m.instance.keyboard.createScope(Object.fromEntries(e.keys.map(t=>[t,{onDidPressKey:async t=>{if(0!==g.activeItems.length){let[i]=g.activeItems;if(null!=i&&!(0,c.hr)(i)&&!h.Fj.is(i)){let r=g.ignoreFocusOut;g.ignoreFocusOut=!0,await e.onDidPressKey(t,i),g.ignoreFocusOut=r}}}}])))).start(),w.push(p)}try{let e=await new Promise(e=>{w.push(g.onDidHide(()=>e(void 0)),g.onDidAccept(()=>{if(0!==g.activeItems.length){let[t]=g.activeItems;if((0,c.hr)(t)){if(t.directive===c.WL.LoadMore){f();return}e(void 0);return}e(t)}}),g.onDidChangeValue(e=>{null!=p&&(0!==e.length?p.pause(["left","ctrl+left","right","ctrl+right"]):p.resume())})),g.busy=!1,g.show()});if(null==e||(0,c.hr)(e))return;if(e instanceof h.Fj){await e.execute();return}return e.item}finally{g.dispose(),w.forEach(e=>void e.dispose())}}async function p(e,t,i,n){let d;let p=r.window.createQuickPick();p.ignoreFocusOut=(0,l.dW)(),p.title=t,p.placeholder=i,p.matchOnDescription=!0,p.matchOnDetail=!0,(0,a.yL)(e)&&(p.busy=!0,p.show(),e=await e),null!=e&&(p.items=[...n?.showOtherReferences??[],...(0,o.Tj)(n?.filter!=null?(0,o.pb)(e.commits.values(),n.filter):e.commits.values(),e=>(0,u.rA)(e,n?.picked===e.ref,{compact:!0,icon:!0}))]),(null==e||p.items.length<=(n?.showOtherReferences?.length??0))&&(p.placeholder=null==e?"No stashes found":n?.empty??"No matching stashes found",p.items=[(0,c.Du)(c.WL.Cancel)]),n?.picked&&(p.activeItems=p.items.filter(e=>!h.Fj.is(e)&&e.picked));let g=[];if(n?.keyboard!=null){let{keyboard:e}=n;(d=s.m.instance.keyboard.createScope(Object.fromEntries(e.keys.map(t=>[t,{onDidPressKey:async t=>{if(0!==p.activeItems.length){let[i]=p.activeItems;if(null!=i&&!(0,c.hr)(i)&&!h.Fj.is(i)){let r=p.ignoreFocusOut;p.ignoreFocusOut=!0,await e.onDidPressKey(t,i),p.ignoreFocusOut=r}}}}])))).start(),g.push(d)}try{let e=await new Promise(e=>{g.push(p.onDidHide(()=>e(void 0)),p.onDidAccept(()=>{if(0!==p.activeItems.length){let[t]=p.activeItems;if((0,c.hr)(t)){e(void 0);return}e(t)}}),p.onDidChangeValue(e=>{null!=d&&(0!==e.length?d.pause(["left","ctrl+left","right","ctrl+right"]):d.resume())})),p.busy=!1,p.show()});if(null==e||(0,c.hr)(e))return;if(e instanceof h.Fj){await e.execute();return}return e.item}finally{p.dispose(),g.forEach(e=>void e.dispose())}}},8890:(e,t,i)=>{i.d(t,{W:()=>u});var r=i(1398),s=i(5854),n=i(3807),o=i(4693),a=i(560),l=i(3131),h=i(7279),c=i(2471);async function u(e,t,i,u,d){let p=(0,l.v6)(),g=[];try{let l=r.window.createQuickPick();g.push(l,l.onDidHide(()=>p.fulfill(void 0)),l.onDidAccept(()=>l.busy?void 0:p.fulfill(l.selectedItems.map(e=>e.item))),l.onDidChangeSelection((0,a.sg)(e=>{if(!l.canSelectMany||l.busy)return;let t=!1;for(let i of l.items){let r=e.includes(i);(i.picked!==r||i.alwaysShow!==r)&&(i.alwaysShow=i.picked=r,t=!0)}t&&(l.items=(0,o.tB)([...l.items]),l.selectedItems=e)},10)),l.onDidTriggerButton(e=>{e===s.tH&&(l.canSelectMany?l.selectedItems=[]:p.fulfill([]))})),l.ignoreFocusOut=d?.ignoreFocusOut??(0,c.dW)(),l.title=d?.appendReposToTitle?e.git.openRepositoryCount<=1?i:`${i}${(0,h.xv)(`${(0,h.eV)(n.EO.Dot,2,2)}${t.formattedName}`,n.uR-i.length)}`:i,l.placeholder=u,l.matchOnDescription=!0,l.matchOnDetail=!0,l.canSelectMany=d?.multiselect??!0,l.buttons=d?.clearButton?[s.tH]:[],l.busy=!0,l.show();let m=await t.getContributors();if(!p.pending)return;let f=await Promise.all(m.map(e=>(0,o.NT)(e,d?.picked?.(e)??!1)));if(!p.pending)return;return l.items=(0,o.tB)(f),l.canSelectMany?l.selectedItems=f.filter(e=>e.picked):l.activeItems=f.filter(e=>e.picked),l.busy=!1,await p.promise}finally{g.forEach(e=>void e.dispose())}}},8825:(e,t,i)=>{i.d(t,{$I:()=>CommitRestoreFileChangesCommandQuickPickItem,$t:()=>CommitCopyIdQuickPickItem,EG:()=>CommitOpenChangesWithDiffToolCommandQuickPickItem,IJ:()=>CommitOpenRevisionsCommandQuickPickItem,Kw:()=>CommitOpenFileCommandQuickPickItem,MO:()=>CommitOpenAllChangesCommandQuickPickItem,NH:()=>CommitOpenChangesCommandQuickPickItem,Ol:()=>OpenOnlyChangedFilesCommandQuickPickItem,S5:()=>CommitOpenChangesWithWorkingCommandQuickPickItem,Tw:()=>CommitOpenDirectoryCompareWithWorkingCommandQuickPickItem,Wq:()=>CommitCompareWithWorkingCommandQuickPickItem,X8:()=>CommitOpenAllChangesWithDiffToolCommandQuickPickItem,Xx:()=>CommitCopyMessageQuickPickItem,Y7:()=>CommitOpenDirectoryCompareCommandQuickPickItem,Zq:()=>CommitApplyFileChangesCommandQuickPickItem,_w:()=>CommitOpenDetailsCommandQuickPickItem,aY:()=>OpenChangedFilesCommandQuickPickItem,bO:()=>CommitOpenInGraphCommandQuickPickItem,bi:()=>CommitOpenRevisionCommandQuickPickItem,ln:()=>CommitCompareWithHEADCommandQuickPickItem,o3:()=>CommitFilesQuickPickItem,p1:()=>CommitFileQuickPickItem,ps:()=>CommitOpenAllChangesWithWorkingCommandQuickPickItem,qB:()=>CommitBrowseRepositoryFromHereCommandQuickPickItem,zR:()=>CommitOpenFilesCommandQuickPickItem});var r=i(1398),s=i(5854),n=i(3807),o=i(2972),a=i(6090),l=i(9432),h=i(236),c=i(5248),u=i(4911),d=i(7279),p=i(1270);let CommitFilesQuickPickItem=class CommitFilesQuickPickItem extends p.Fj{constructor(e,t){super({label:e.summary,description:`${h.c.fromTemplate("${author}, ${ago}  $(git-commit)  ${id}",e)}${t?.unpublished?"  (unpublished)":""}`,detail:`${t?.file!=null?`$(file) ${(0,u.P8)(t.file.path)}${t.file.formatStats({expand:!0,separator:", ",prefix:` ${n.EO.Dot} `})}`:`$(files) ${e.formatStats({expand:!0,separator:", ",empty:"No files changed"})}`}${t?.hint!=null?`${(0,d.eV)(n.EO.Dash,4,2,n.EO.Space)}${t.hint}`:""}`,alwaysShow:!0,picked:t?.picked??!0,buttons:[s.kk,s.yi]},void 0,void 0,void 0,{suppressKeyPress:!0}),this.commit=e}get sha(){return this.commit.sha}};let CommitFileQuickPickItem=class CommitFileQuickPickItem extends p.Fj{constructor(e,t,i){super({label:(0,u.P8)(t.path),description:(0,c.C0)(t,!0),picked:i,iconPath:(0,c.b_)(t.status)}),this.commit=e,this.file=t}get sha(){return this.commit.sha}execute(e){return l.eX(this.file,this.commit,e)}};let CommitBrowseRepositoryFromHereCommandQuickPickItem=class CommitBrowseRepositoryFromHereCommandQuickPickItem extends p.Fj{constructor(e,t){super(`Browse Repository from${t?.before?" Before":""} Here${t?.openInNewWindow?" in New Window":""}`),this.commit=e,this.executeOptions=t,this.iconPath=new r.ThemeIcon("folder-opened")}execute(e){return(0,a.V)(this.commit.getGitUri(),{before:this.executeOptions?.before,openInNewWindow:this.executeOptions?.openInNewWindow})}};let CommitCompareWithHEADCommandQuickPickItem=class CommitCompareWithHEADCommandQuickPickItem extends p.Fj{constructor(e){super("Compare with HEAD"),this.commit=e,this.iconPath=new r.ThemeIcon("compare-changes")}execute(e){return o.m.instance.searchAndCompareView.compare(this.commit.repoPath,this.commit.ref,"HEAD")}};let CommitCompareWithWorkingCommandQuickPickItem=class CommitCompareWithWorkingCommandQuickPickItem extends p.Fj{constructor(e){super("Compare with Working Tree",new r.ThemeIcon("compare-changes")),this.commit=e}execute(e){return o.m.instance.searchAndCompareView.compare(this.commit.repoPath,this.commit.ref,"")}};let CommitCopyIdQuickPickItem=class CommitCopyIdQuickPickItem extends p.Fj{constructor(e){super("Copy SHA",new r.ThemeIcon("copy")),this.commit=e}execute(){return l.uT(this.commit)}async onDidPressKey(e){await super.onDidPressKey(e),r.window.showInformationMessage("Commit SHA copied to the clipboard")}};let CommitCopyMessageQuickPickItem=class CommitCopyMessageQuickPickItem extends p.Fj{constructor(e){super("Copy Message",new r.ThemeIcon("copy")),this.commit=e}execute(){return l.eU(this.commit)}async onDidPressKey(e){await super.onDidPressKey(e),r.window.showInformationMessage(`${this.commit.stashName?"Stash":"Commit"} Message copied to the clipboard`)}};let CommitOpenAllChangesCommandQuickPickItem=class CommitOpenAllChangesCommandQuickPickItem extends p.Fj{constructor(e){super("Open All Changes",new r.ThemeIcon("git-compare")),this.commit=e}execute(e){return l.po(this.commit,e)}};let CommitOpenAllChangesWithDiffToolCommandQuickPickItem=class CommitOpenAllChangesWithDiffToolCommandQuickPickItem extends p.Fj{constructor(e){super("Open All Changes (difftool)",new r.ThemeIcon("git-compare")),this.commit=e}execute(){return l.Uf(this.commit)}};let CommitOpenAllChangesWithWorkingCommandQuickPickItem=class CommitOpenAllChangesWithWorkingCommandQuickPickItem extends p.Fj{constructor(e){super("Open All Changes with Working Tree",new r.ThemeIcon("git-compare")),this.commit=e}execute(e){return l.Gu(this.commit,e)}};let CommitOpenChangesCommandQuickPickItem=class CommitOpenChangesCommandQuickPickItem extends p.Fj{constructor(e,t){super("Open Changes",new r.ThemeIcon("git-compare")),this.commit=e,this.file=t}execute(e){return l.eX(this.file,this.commit,e)}};let CommitOpenChangesWithDiffToolCommandQuickPickItem=class CommitOpenChangesWithDiffToolCommandQuickPickItem extends p.Fj{constructor(e,t){super("Open Changes (difftool)",new r.ThemeIcon("git-compare")),this.commit=e,this.file=t}execute(){return l.Rv(this.file,this.commit)}};let CommitOpenChangesWithWorkingCommandQuickPickItem=class CommitOpenChangesWithWorkingCommandQuickPickItem extends p.Fj{constructor(e,t){super("Open Changes with Working File",new r.ThemeIcon("git-compare")),this.commit=e,this.file=t}execute(e){return l.DD(this.file,this.commit,e)}};let CommitOpenDirectoryCompareCommandQuickPickItem=class CommitOpenDirectoryCompareCommandQuickPickItem extends p.Fj{constructor(e){super("Open Directory Compare",new r.ThemeIcon("git-compare")),this.commit=e}execute(){return l.YS(this.commit)}};let CommitOpenDirectoryCompareWithWorkingCommandQuickPickItem=class CommitOpenDirectoryCompareWithWorkingCommandQuickPickItem extends p.Fj{constructor(e){super("Open Directory Compare with Working Tree",new r.ThemeIcon("git-compare")),this.commit=e}execute(){return l.cs(this.commit)}};let CommitOpenDetailsCommandQuickPickItem=class CommitOpenDetailsCommandQuickPickItem extends p.Fj{constructor(e){super("Open Details",new r.ThemeIcon("eye")),this.commit=e}execute(e){return l.JX(this.commit,{preserveFocus:e?.preserveFocus})}};let CommitOpenInGraphCommandQuickPickItem=class CommitOpenInGraphCommandQuickPickItem extends p.Fj{constructor(e){super("Open in Commit Graph",new r.ThemeIcon("gitlens-graph")),this.commit=e}execute(e){return l.wq(this.commit,{preserveFocus:e?.preserveFocus})}};let CommitOpenFilesCommandQuickPickItem=class CommitOpenFilesCommandQuickPickItem extends p.Fj{constructor(e){super("Open Files",new r.ThemeIcon("files")),this.commit=e}execute(e){return l.Km(this.commit)}};let CommitOpenFileCommandQuickPickItem=class CommitOpenFileCommandQuickPickItem extends p.Fj{constructor(e,t){super("Open File",new r.ThemeIcon("file")),this.commit=e,this.file=t}execute(e){return l.Tq(this.file,this.commit,e)}};let CommitOpenRevisionsCommandQuickPickItem=class CommitOpenRevisionsCommandQuickPickItem extends p.Fj{constructor(e){super("Open Files at Revision",new r.ThemeIcon("files")),this.commit=e}execute(e){return l.m(this.commit)}};let CommitOpenRevisionCommandQuickPickItem=class CommitOpenRevisionCommandQuickPickItem extends p.Fj{constructor(e,t){super("Open File at Revision",new r.ThemeIcon("file")),this.commit=e,this.file=t}execute(e){return l.vM(this.file,this.commit,e)}};let CommitApplyFileChangesCommandQuickPickItem=class CommitApplyFileChangesCommandQuickPickItem extends p.Fj{constructor(e,t){super("Apply Changes"),this.commit=e,this.file=t}async execute(){return l.YF(this.file,this.commit)}};let CommitRestoreFileChangesCommandQuickPickItem=class CommitRestoreFileChangesCommandQuickPickItem extends p.Fj{constructor(e,t){super({label:"Restore",description:"aka checkout"}),this.commit=e,this.file=t}execute(){return l.VX(this.file,this.commit)}};let OpenChangedFilesCommandQuickPickItem=class OpenChangedFilesCommandQuickPickItem extends p.Fj{constructor(e,t){super(t??"Open All Changed Files",new r.ThemeIcon("files"),n.Ts.OpenChangedFiles,[{uris:e.map(e=>e.uri)}])}};let OpenOnlyChangedFilesCommandQuickPickItem=class OpenOnlyChangedFilesCommandQuickPickItem extends p.Fj{constructor(e,t){super(t??"Open Changed & Close Unchanged Files",new r.ThemeIcon("files"),n.Ts.OpenOnlyChangedFiles,[{uris:e.map(e=>e.uri)}])}}},1270:(e,t,i)=>{i.d(t,{Fj:()=>CommandQuickPickItem,Xt:()=>n,g5:()=>ActionQuickPickItem,uK:()=>s});var r=i(1398);function s(e){return{kind:r.QuickPickItemKind.Separator,label:e??""}}function n(e,t){return"string"==typeof e?{label:e,item:t}:{...e,item:t}}let CommandQuickPickItem=class CommandQuickPickItem{constructor(e,t,i,r,s){this.command=i,this.args=r,this.options=s,this.command=i,this.args=r,"string"==typeof e?this.label=e:Object.assign(this,e),null!=t&&(this.iconPath=t)}static fromCommand(e,t,i){return new CommandQuickPickItem("string"==typeof e?{label:e}:e,void 0,t,null==i?[]:Array.isArray(i)?i:[i])}static is(e){return e instanceof CommandQuickPickItem}label;description;detail;iconPath;execute(e){return void 0===this.command?Promise.resolve(void 0):r.commands.executeCommand(this.command,...this.args??[])}async onDidPressKey(e){if(this.options?.suppressKeyPress)return;let t=this.execute({preserveFocus:!0,preview:!1});this.options?.onDidPressKey?.(e,t),await t}};let ActionQuickPickItem=class ActionQuickPickItem extends CommandQuickPickItem{constructor(e,t){super(e,void 0,void 0),this.action=t}async execute(e){return this.action(e)}}},2362:(e,t,i)=>{i.d(t,{Du:()=>o,WL:()=>s,hr:()=>a,qT:()=>n});var r,s=((r=s||{})[r.Back=0]="Back",r[r.Cancel=1]="Cancel",r[r.LoadMore=2]="LoadMore",r[r.Noop=3]="Noop",r[r.Reload=4]="Reload",r[r.RequiresVerification=5]="RequiresVerification",r[r.SignIn=6]="SignIn",r[r.StartPreview=7]="StartPreview",r[r.StartProTrial=8]="StartProTrial",r[r.RequiresPaidSubscription=9]="RequiresPaidSubscription",r);function n(e){return"number"==typeof e&&null!=s[e]}function o(e,t,i){let r=i?.label,s=i?.detail;if(null==r)switch(e){case 0:r="Back";break;case 1:r="Cancel";break;case 2:r="Load more";break;case 3:r="Try again";break;case 4:r="Refresh";break;case 6:r="Sign In";break;case 7:r="Continue",s="Continuing gives you 3 days to preview this and other local Pro features";break;case 8:r="Start Pro Trial",s="Start your free 7-day Pro trial for full access to Pro features";break;case 5:r="Resend Email",s="You must verify your email before you can continue";break;case 9:r="Upgrade to Pro",s="Upgrading to a paid plan is required to use this Pro feature"}return{label:r,description:i?.description,detail:s,iconPath:i?.iconPath,alwaysShow:!0,picked:t,directive:e,onDidSelect:i?.onDidSelect}}function a(e){return null!=e&&"directive"in e}},6541:(e,t,i)=>{i.d(t,{DT:()=>GitCommandQuickPickItem,G0:()=>y,IC:()=>m,Rc:()=>f,iq:()=>C,rA:()=>w,sS:()=>b,vS:()=>v});var r=i(1398),s=i(7165),n=i(3807),o=i(2972),a=i(6580),l=i(5287),h=i(6645),c=i(7788),u=i(4832),d=i(1856),p=i(7279),g=i(1270);let GitCommandQuickPickItem=class GitCommandQuickPickItem extends g.Fj{constructor(e,t){super(e,void 0,n.Ts.GitCommands,[t],{suppressKeyPress:!0})}executeSteps(e){return(0,s.g)(o.m.instance,this.args[0],e)}};async function m(e,t,i){let s="";if(i?.type===!0?s=!0===i.current&&e.current?"current branch":"branch":i?.type==="remote"?e.remote&&(s="remote branch"):i?.current===!0&&e.current&&(s="current branch"),i?.status&&!e.remote&&null!=e.upstream){let t=n.EO.Dash;if(e.upstream.missing)t=n.EO.Warning;else{let i=await e.getRemote();if(null!=i){let e,r;for(let{type:t}of i.urls)if("fetch"===t){if(e=!0,r)break}else if("push"===t&&(r=!0,e))break;e&&r?t=n.EO.ArrowsRightLeft:r?t=n.EO.ArrowRight:e&&(t=n.EO.ArrowLeft)}}let i=`${e.getTrackingStatus({suffix:`${n.EO.Space} `})}${t}${n.EO.Space} ${e.upstream.name}`;s=s?`${s}${n.EO.Space.repeat(2)}${i}`:i}return i?.ref&&(e.sha&&(s=s?`${s} $(git-commit)${n.EO.Space}${(0,h.pV)(e.sha)}`:`$(git-commit)${n.EO.Space}${(0,h.pV)(e.sha)}`),void 0!==e.date&&(s=s?`${s}${(0,p.eV)(n.EO.Dot,2,2)}${e.formattedDate}`:e.formattedDate)),{label:i?.checked||i?.checked==null&&i?.current==="checkmark"&&e.current?`${e.name}${(0,p.eV)("$(check)",2)}`:e.name,description:s,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t??e.current,item:e,current:e.current,ref:e.name,remote:e.remote,iconPath:new r.ThemeIcon(e.starred?"star-full":"git-branch")}}async function f(e,t,i){let s;return(0,l.kk)(e)?w(e,t,{...i,icon:i?.icon==="avatar"||i?.icon}):(i?.icon==="avatar"&&(u.H.get("gitCommands.avatars")?s=await e.getAvatarUri():i.icon=!0),i?.icon===!0&&(s=new r.ThemeIcon("git-commit")),i?.compact)?{label:e.summary,description:`${e.author.name}, ${e.formattedDate}${(0,p.eV)("$(git-commit)",2,1)}${e.shortSha}${(0,p.eV)(n.EO.Dot,2,2)}${e.formatStats({compact:!0})}`,alwaysShow:i.alwaysShow,buttons:i.buttons,picked:t,item:e,iconPath:s}:{label:e.summary,description:"",detail:`${n.EO.Space.repeat(2)}${e.author.name}, ${e.formattedDate}${(0,p.eV)("$(git-commit)",2,1)}${e.shortSha}${(0,p.eV)(n.EO.Dot,2,2)}${e.formatStats({compact:!0})}`,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e,iconPath:s}}function w(e,t,i){let s=null==e.number?"":`${e.number}: `;return i?.compact?{label:`${s}${e.summary}`,description:`${e.formattedDate}${(0,p.eV)(n.EO.Dot,2,2)}${e.formatStats({compact:!0})}`,alwaysShow:i.alwaysShow,buttons:i.buttons,picked:t,item:e,iconPath:i.icon?new r.ThemeIcon("archive"):void 0}:{label:`${s}${e.summary}`,description:"",detail:`${n.EO.Space.repeat(2)}${e.formattedDate}${(0,p.eV)(n.EO.Dot,2,2)}${e.formatStats({compact:!0})}`,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e,iconPath:i?.icon?new r.ThemeIcon("archive"):void 0}}function v(e,t,i,s){let o;return""===e?{label:"Working Tree",description:"",alwaysShow:s?.alwaysShow,buttons:s?.buttons,picked:i,item:(0,h.kA)(e,t,{refType:"revision",name:"Working Tree"}),current:!1,ref:e,remote:!1,iconPath:s?.icon?new r.ThemeIcon("file-directory"):void 0}:"HEAD"===e?{label:"HEAD",description:"",alwaysShow:s?.alwaysShow,buttons:s?.buttons,picked:i,item:(0,h.kA)(e,t,{refType:"revision",name:"HEAD"}),current:!1,ref:e,remote:!1,iconPath:s?.icon?new r.ThemeIcon("git-branch"):void 0}:("string"==typeof e?o=(0,h.kA)(e,t):e=(o=e).ref,(0,h.p8)(e))?{label:`Range ${o.name}`,description:"",alwaysShow:s?.alwaysShow,buttons:s?.buttons,picked:i,item:o,current:!1,ref:e,remote:!1}:{label:`Commit ${o.name}`,description:s?.ref?`$(git-commit)${n.EO.Space}${e}`:"",alwaysShow:s?.alwaysShow,buttons:s?.buttons,picked:i,item:o,current:!1,ref:e,remote:!1}}function y(e,t,i){let s="";if(i?.type&&(s="remote"),i?.upstream){let t=(0,c.Qw)(e);s=s?`${s}${(0,p.eV)(n.EO.Dot,2,2)}${t}`:t}return{label:i?.checked?`${e.name}${(0,p.eV)("$(check)",2)}`:e.name,description:s,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e,iconPath:new r.ThemeIcon("cloud")}}async function b(e,t,i){let r;(i?.branch||i?.status)&&(r=await e.getStatus());let s="";if(i?.branch&&null!=r&&(s=r.branch),i?.status&&null!=r){let e="";0!==r.files.length&&(e=r.getFormattedDiffStatus({compact:!0,prefix:(0,p.eV)(n.EO.Dot,2,2)}));let t=r.getUpstreamStatus({prefix:s?`${n.EO.Space} `:""}),i=`${t}${e}`;i&&(s=s?`${s}${i}`:i)}if(i?.fetched){let t=await e.getLastFetched();if(0!==t){let e=`Last fetched ${(0,d.PI)(new Date(t))}`;s=s?`${s}${(0,p.eV)(n.EO.Dot,2,2)}${e}`:e}}return{label:e.formattedName,description:s,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e,repoPath:e.path}}function C(e,t,i){let s="";if(i?.type&&(s="tag"),i?.ref&&(s=`${s}${(0,p.eV)("$(git-commit)",s?2:0,1)}${(0,h.pV)(e.sha)}`,s=`${s?`${s}${(0,p.eV)(n.EO.Dot,2,2)}`:""}${e.formattedDate}`),i?.message){let t=(0,a.E)(e.message);s=s?`${s}${(0,p.eV)(n.EO.Dot,2,2)}${t}`:t}return{label:i?.checked?`${e.name}${(0,p.eV)("$(check)",2)}`:e.name,description:s,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e,current:!1,ref:e.name,remote:!1,iconPath:new r.ThemeIcon("tag")}}},7587:(e,t,i)=>{i.d(t,{N:()=>m,m:()=>g});var r,s=i(1398),n=i(5854),o=i(500),a=i(2972),l=i(1885),h=i(9432),c=i(2013),u=i(6645),d=i(2471),p=i(6541),g=((r=g||{})[r.Branches=1]="Branches",r[r.Tags=2]="Tags",r[r.WorkingTree=4]="WorkingTree",r[r.HEAD=8]="HEAD",r[r.BranchesAndTags=3]="BranchesAndTags",r[r.All=15]="All",r);async function m(e,t,i,r){let p,g;let m=s.window.createQuickPick();m.ignoreFocusOut=(0,d.dW)(),m.title=t,m.placeholder=r?.allowRevisions!=null&&!1!==r.allowRevisions?`${i} (or enter a revision using #)`:i,m.matchOnDescription=!0;let w=[];if(r?.keyboard!=null){let{keyboard:e}=r;(p=a.m.instance.keyboard.createScope(Object.fromEntries(e.keys.map(t=>[t,{onDidPressKey:async t=>{if(0!==m.activeItems.length){let[i]=m.activeItems;if(null!=i){let r=m.ignoreFocusOut;m.ignoreFocusOut=!0,await e.onDidPressKey(t,i),m.ignoreFocusOut=r}}}}])))).start(),w.push(p)}let v=new s.CancellationTokenSource,y=f(e,r);r?.autoPick&&(y=y.then(e=>(e.length<=1&&(g=e[0],v.cancel()),e))),m.busy=!0,m.show();let b=(0,o.e2)(a.m.instance.git.getRepository(e),{buttons:[n.yi],ranges:r?.allowRevisions&&"boolean"!=typeof r.allowRevisions?r.allowRevisions.ranges:void 0});m.items=await y,m.busy=!1;try{let e=await new Promise(e=>{w.push(v.token.onCancellationRequested(()=>m.hide()),m.onDidHide(()=>e(void 0)),m.onDidAccept(()=>{0!==m.activeItems.length&&e(m.activeItems[0])}),m.onDidChangeValue(async e=>{null!=p&&(0!==e.length?p.pause(["left","ctrl+left","right","ctrl+right"]):p.resume()),r?.allowRevisions&&!await b(m,e)&&(m.items=await y)}),m.onDidTriggerItemButton(({button:e,item:{item:t}})=>{e===n.yi&&((0,u.gC)(t)?(0,l._c)(t,{select:!0,expand:!0}):(0,u.A1)(t)?(0,c._c)(t,{select:!0,expand:!0}):(0,u.bv)(t)&&(0,h.JX)(t,{pin:!1,preserveFocus:!0}))}))});if(null==e&&null!=g&&(e=g),null==e)return;return e.item}finally{m.dispose(),w.forEach(e=>void e.dispose())}}async function f(e,t){let i=t?.include??3,r=await (0,o.Qj)(a.m.instance.git.getRepository(e),i?["branches","tags"]:i?["branches"]:i?["tags"]:[],{buttons:[n.yi],filter:t?.filter,picked:t?.picked,sort:t?.sort??{branches:{current:!1},tags:{}}}),s=t?.picked;if(s){let e=r.findIndex(e=>e.ref===s);-1!==e&&r.unshift(...r.splice(e,1))}return 8&i&&r.unshift((0,p.vS)("HEAD",e,void 0,{icon:!0})),4&i&&r.unshift((0,p.vS)("",e,void 0,{icon:!0})),r}},6011:(e,t,i)=>{i.d(t,{ZM:()=>g,oN:()=>CopyRemoteResourceCommandQuickPickItem,zB:()=>OpenRemoteResourceCommandQuickPickItem});var r=i(1398),s=i(5854),n=i(3807),o=i(2972),a=i(9102),l=i(7788),h=i(2124),c=i(2927),u=i(3131),d=i(2471),p=i(1270);let ConfigureCustomRemoteProviderCommandQuickPickItem=class ConfigureCustomRemoteProviderCommandQuickPickItem extends p.Fj{constructor(){super({label:"See how to configure a custom remote provider..."})}async execute(){await r.env.openExternal(r.Uri.parse("https://help.gitkraken.com/gitlens/gitlens-settings/#remote-provider-integration-settings"))}};let CopyOrOpenRemoteCommandQuickPickItem=class CopyOrOpenRemoteCommandQuickPickItem extends p.Fj{constructor(e,t,i,r){super({label:`$(repo) ${e.provider.path}`,description:e.name,buttons:r}),this.remote=e,this.resources=t,this.clipboard=i}async execute(){let e=await Promise.allSettled(this.resources.map(async e=>{if(e.type===h.J.Comparison)(0,a.Zq)(e.base)===this.remote.name&&(e={...e,base:(0,a.km)(e.base)}),(0,a.Zq)(e.compare)===this.remote.name&&(e={...e,compare:(0,a.km)(e.compare)});else if(e.type===h.J.CreatePullRequest){let t=e.base.branch;if(null==t&&null==(t=await o.m.instance.git.getDefaultBranchName(this.remote.repoPath,this.remote.name))&&this.remote.hasIntegration()){let e=await o.m.instance.integrations.getByRemote(this.remote),i=await e?.getDefaultBranch?.(this.remote.provider.repoDesc);t=i?.name}e={...e,base:{branch:t,remote:{path:this.remote.path,url:this.remote.url}}}}else if(e.type===h.J.File&&null!=e.branchOrTag&&("bitbucket"===this.remote.provider.id||"bitbucket-server"===this.remote.provider.id)){let{branchOrTag:t}=e,[i,r]=await Promise.allSettled([o.m.instance.git.getBranches(this.remote.repoPath,{filter:e=>e.name===t||e.getNameWithoutRemote()===t}),o.m.instance.git.getTags(this.remote.repoPath,{filter:e=>e.name===t})]),s=u.Ro(i)?.values[0]?.sha??u.Ro(r)?.values[0]?.sha;s&&(e={...e,type:h.J.Revision,sha:s})}return e})),t=(0,c.x1)(e,e=>(0,u.Ro)(e));await (this.clipboard?this.remote.provider.copy(t):this.remote.provider.open(t))}setAsDefault(){return this.remote.setAsDefault(!0)}};let CopyRemoteResourceCommandQuickPickItem=class CopyRemoteResourceCommandQuickPickItem extends p.Fj{constructor(e,t){let i=(0,l.zF)(e);super(`Copy Link to ${(0,h.O)(t)} for ${i?.length?i[0].name:"Remote"}${i?.length===1?"":n.EO.Ellipsis}`,new r.ThemeIcon("copy"),n.Ts.OpenOnRemote,[{resource:t,remotes:e,clipboard:!0}])}async onDidPressKey(e){await super.onDidPressKey(e),r.window.showInformationMessage("URL copied to the clipboard")}};let OpenRemoteResourceCommandQuickPickItem=class OpenRemoteResourceCommandQuickPickItem extends p.Fj{constructor(e,t){let i=(0,l.zF)(e);super(`Open ${(0,h.O)(t)} on ${i?.length===1?i[0].name:`${i?.length?i[0].name:"Remote"}${n.EO.Ellipsis}`}`,new r.ThemeIcon("link-external"),n.Ts.OpenOnRemote,[{resource:t,remotes:e,clipboard:!1}])}};async function g(e,t,i,n,o){let a;let{autoPick:l,clipboard:h,setDefault:c}={autoPick:!1,clipboard:!1,setDefault:!0,...o};if(0===n.length)a=[new ConfigureCustomRemoteProviderCommandQuickPickItem],t="No auto-detected or configured remote providers found";else{if("default"===l&&n.length>1){let e=n.find(e=>e.default);null!=e&&(n=[e])}a=n.map(e=>new CopyOrOpenRemoteCommandQuickPickItem(e,i,h,c?[s.$o]:void 0))}if(l&&1===n.length)return a[0];let u=r.window.createQuickPick();u.ignoreFocusOut=(0,d.dW)();let p=[];try{let i=await new Promise(i=>{p.push(u.onDidHide(()=>i(void 0)),u.onDidAccept(()=>{0!==u.activeItems.length&&i(u.activeItems[0])}),u.onDidTriggerItemButton(async e=>{e.button===s.$o&&e.item instanceof CopyOrOpenRemoteCommandQuickPickItem&&(await e.item.setAsDefault(),i(e.item))})),u.title=e,u.placeholder=t,u.matchOnDetail=!0,u.items=a,u.show()});if(null==i)return;return i}finally{u.dispose(),p.forEach(e=>void e.dispose())}}},6964:(e,t,i)=>{i.d(t,{ST:()=>p,X:()=>c,oe:()=>d,t6:()=>u});var r=i(1398),s=i(2972),n=i(2927),o=i(4026),a=i(2471),l=i(1270),h=i(6541);async function c(e,t,i,r,n){let o=s.m.instance.git.getBestRepository(e,t);if(null==o||n?.filter==null||await n.filter(o)||(o=void 0),null!=o)return o;let a=await d(i,r,void 0,n);if(a instanceof l.Fj){await a.execute();return}return a}async function u(e,t,i,r){let n;if(null==(n=null==i?s.m.instance.git.highlander:await s.m.instance.git.getOrOpenRepository(i))||r?.filter==null||await r.filter(n)||(n=void 0),null!=n)return n;let o=await d(e,t,void 0,r);if(o instanceof l.Fj){await o.execute();return}return o}async function d(e,t,i,l){let c;if(i??=s.m.instance.git.openRepositories,l?.filter==null)c=await Promise.all((0,o.Tj)(i??s.m.instance.git.openRepositories,e=>(0,h.sS)(e,e===l?.picked,{branch:!0,status:!0})));else{let{filter:e}=l;c=await (0,n.hg)(s.m.instance.git.openRepositories,async t=>await e(t)?(0,h.sS)(t,t===l?.picked,{branch:!0,status:!0}):void 0)}if(0===c.length)return;let u=r.window.createQuickPick();u.ignoreFocusOut=(0,a.dW)();let d=[];try{let i=await new Promise(i=>{d.push(u.onDidHide(()=>i(void 0)),u.onDidAccept(()=>{0!==u.activeItems.length&&i(u.activeItems[0])})),u.title=e,u.placeholder=t,u.matchOnDescription=!0,u.matchOnDetail=!0,u.items=c,u.show()});return i?.item}finally{u.dispose(),d.forEach(e=>void e.dispose())}}async function p(e,t="Choose a repository",i){let l;if(null==i||Array.isArray(i)||null!=i.filter||(i=void 0),null==i||Array.isArray(i))l=await Promise.all((0,o.Tj)(i??s.m.instance.git.openRepositories,e=>(0,h.sS)(e,void 0,{branch:!0,status:!0})));else{let{filter:e}=i;l=await (0,n.hg)(s.m.instance.git.openRepositories,async t=>await e(t)?(0,h.sS)(t,void 0,{branch:!0,status:!0}):void 0)}if(0===l.length)return[];let c=r.window.createQuickPick();c.ignoreFocusOut=(0,a.dW)();let u=[];try{let i=await new Promise(i=>{u.push(c.onDidHide(()=>i(void 0)),c.onDidAccept(()=>i(c.selectedItems))),c.title=e,c.placeholder=t,c.matchOnDescription=!0,c.matchOnDetail=!0,c.items=l,c.canSelectMany=!0,c.selectedItems=l,c.show()});if(null==i)return[];return i.map(e=>e.item)}finally{c.dispose(),u.forEach(e=>void e.dispose())}}},5622:(e,t,i)=>{i.d(t,{G:()=>a});var r=i(1398),s=i(4026),n=i(4911),o=i(2471);async function a(e,t,i){let a=[],l=t.repoPath,h=t.ref;function c(t){return e.git.getRevisionUri(h,`${l}/${t.item.path}`,l)}try{let t;let u=r.window.createQuickPick();u.ignoreFocusOut=i?.ignoreFocusOut??(0,o.dW)();let d=i.initialPath??"";if(i?.keyboard!=null){let{keyboard:r}=i;(t=e.keyboard.createScope(Object.fromEntries(r.keys.map(e=>[e,{onDidPressKey:async e=>{if(0!==u.activeItems.length){let[t]=u.activeItems;if(null!=t.item){let i=u.ignoreFocusOut;u.ignoreFocusOut=!0,await r.onDidPressKey(e,c(t)),u.ignoreFocusOut=i}}}}])))).start(),null!=d&&t.pause(["left","ctrl+left","right","ctrl+right"]),a.push(t)}u.title=i.title,u.placeholder=i?.placeholder??"Search files by name",u.matchOnDescription=!0,u.value=d,u.busy=!0,u.show();let p=await e.git.getTreeForRevision(l,h),g=[...(0,s.x1)(p,e=>{if("blob"!==e.type)return;let[t,i]=(0,n.Uf)(e.path,void 0,!0);return{label:t,description:"."===i?"":i,item:e}})];u.items=g,u.busy=!1;let m=await new Promise(e=>{a.push(u,u.onDidHide(()=>e(void 0)),u.onDidAccept(()=>{0!==u.activeItems.length&&e(u.activeItems[0])}),u.onDidChangeValue(e=>{if(null!=t){for(let i of(0!==e.length?t.pause(["left","ctrl+left","right","ctrl+right"]):t.resume(),g))!i.item.path.includes(e)||i.label.includes(e)||i.description.includes(e)?i.alwaysShow=!1:i.alwaysShow=!0;u.items=g}}))});return null!=m?c(m):void 0}finally{a.forEach(e=>void e.dispose())}}},5900:(e,t,i)=>{i.d(t,{PB:()=>Repositories,dX:()=>l});var r=i(3794),s=i(3807),n=i(7931),o=i(4911),a=i(9736);function l(e){let{path:t}=h(e);return t}function h(e){let t;switch(e.scheme.toLowerCase()){case s.xB.File:return{path:t=(0,o.Fd)(e.fsPath),ignoreCase:!r.j9};case s.xB.Git:return{path:t=47===(t=e.path).charCodeAt(t.length-1)?t.slice(1,-1):t.slice(1),ignoreCase:!r.j9};case s.xB.GitLens:{t=e.path;let i=(0,n.V3)(e.authority);return null==i.uncPath||t.startsWith(i.uncPath)||(t=`${i.uncPath}${e.path}`),{path:t=47===t.charCodeAt(t.length-1)?t.slice(1,-1):t.startsWith("//")?t:t.slice(1),ignoreCase:!r.j9}}case s.xB.Virtual:case s.xB.GitHub:{t=47===(t=e.path).charCodeAt(t.length-1)?t.slice(1,-1):t.slice(1);let i=e.authority?.split("+",1)[0];return{path:i?`${i}/${t}`:t,ignoreCase:!1}}case s.xB.Vsls:case s.xB.VslsScc:return{path:t=47===(t=(0,o.EL)(e.path)).charCodeAt(t.length-1)?t.slice(1,-1):t.slice(1),ignoreCase:!1};case s.xB.PRs:{t=47===(t=e.path).charCodeAt(t.length-1)?t.slice(1,-1):t.slice(1);let i=e.authority?.split("+",1)[0];if(i===s.xB.GitHub)return{path:i?`${i}/${t}`:t,ignoreCase:!1};return{path:t,ignoreCase:!r.j9}}default:return{path:t=47===(t=e.path).charCodeAt(t.length-1)?t.slice(1,-1):t.slice(1),ignoreCase:!1}}}let Repositories=class Repositories{_trie;_count=0;constructor(){this._trie=new a.F6(h)}get count(){return this._count}add(e){let t=this._trie.set(e.uri,e);return t&&this._count++,t}clear(){this._count=0,this._trie.clear()}forEach(e,t){for(let i of this._trie.getDescendants())e.call(t,i)}get(e){return this._trie.get(e)}getClosest(e){return this._trie.getClosest(e)}has(e){return this._trie.has(e)}remove(e,t=!0){let i=this._trie.delete(e,t);return i&&this._count--,i}values(){return this._trie.getDescendants()}}},2927:(e,t,i)=>{i.d(t,{Ay:()=>c,Bo:()=>h,D8:()=>s,E$:()=>l,EG:()=>u,Kl:()=>a,hg:()=>o,lX:()=>d,x1:()=>n});var r=i(4026);function s(e){return null==e?void 0:Array.isArray(e)?e:[e]}function n(e,t){let i=0;return e.reduce((e,r)=>{let s=t(r,i++);return null!=s&&e.push(s),e},[])}async function o(e,t){let i=e.map(t),r=[];for await(let e of i)null!=e&&r.push(e);return r}function a(e,t){let i=e.length;for(;i--;)if(t(e[i],i,e))return i;return -1}function l(e,t){let i=[],r=e.length;e:for(let s of e[0]){let n=r-1;for(;n--;)if(!e[n+1].some(e=>t(e,s)))break e;i.some(e=>t(e,s))||i.push(s)}return i}function h(e){return"string"==typeof e[0]}function c(e,t,i,r=!1,s){let n={name:"",relativePath:"",children:new Map,descendants:[]},o=e.reduce((e,r)=>{let s=e,n="";for(let e of t(r)){n=i(n,e),void 0===s.children&&(s.children=new Map);let t=s.children.get(e);void 0===t&&(t={name:e,relativePath:n,parent:s,children:void 0,descendants:void 0},s.children.set(e,t)),void 0===s.descendants&&(s.descendants=[]),s.descendants.push(r),s=t}return s.value=r,e},n);return r&&(o=function e(t,i,r=!0,s){if(void 0===t.children)return t;let n=[...t.children.values()];for(let t of n)e(t,i,!1,s);if(!r&&1===n.length){let e=n[0];(void 0===e.value||s?.(e.value))&&(t.name=i(t.name,e.name),t.relativePath=e.relativePath,t.children=e.children,t.descendants=e.descendants,t.value=e.value)}return t}(o,i,!0,s)),o}function u(e,t){return(0,r.fj)(new Set(e),t)}async function d(e,t,i){let r=e.map(t),s=[];for await(let e of r)null!=e&&(null==i||i(e))&&s.push(e);return s}},1031:(e,t,i)=>{i.d(t,{sc:()=>l,wD:()=>a,wW:()=>o,zu:()=>h});var r=i(1398),s=i(4026),n=i(3131);let TimedCancellationSource=class TimedCancellationSource{cancellation=new r.CancellationTokenSource;timer;constructor(e){this.timer=setTimeout(()=>this.cancellation.cancel(),e)}dispose(){clearTimeout(this.timer),this.cancellation.dispose()}cancel(){clearTimeout(this.timer),this.cancellation.cancel()}get token(){return this.cancellation.token}};function o(e,t,i,r){let s,o;if(!(0,n.yL)(e))return Promise.resolve({value:e,paused:!1});if(null==t&&null==i)return e.then(e=>({value:e,paused:!1}));let a=Promise.race([e.then(e=>(s?.dispose(),o?.dispose(),t?.isCancellationRequested)?{value:Promise.resolve(e),paused:!0,reason:"cancelled"}:{value:e,paused:!1}),new Promise(r=>{let n=t=>{s?.dispose(),o?.dispose(),r({value:e,paused:!0,reason:t})};if(s=t?.onCancellationRequested(()=>n("cancelled")),null!=i){if("number"==typeof i){let e=setTimeout(()=>n("timedout"),i);o={dispose:()=>clearTimeout(e)}}else o=i.onCancellationRequested(()=>n("timedout"))}})]);return null==r?a:a.then(e=>(e.paused&&setTimeout(()=>r(e),0),e))}async function a(e,t,i,r,n){let a;if(0===e.size)return e;null!=r&&"number"==typeof r&&(r=(a=new TimedCancellationSource(r)).token);let l=await Promise.all((0,s.Tj)(e,([e,s])=>o(s.catch(e=>!t&&e instanceof Error?e:void 0),i,r).then(t=>[e,t])));if(a?.dispose(),null!=n&&l.some(([,e])=>e.paused)){async function h(){let e=new Map;for(let[t,i]of l)e.set(t,{value:i.paused?await i.value:i.value,paused:!1});return e}let e=l.some(([,e])=>e.paused&&"cancelled"===e.reason);n({value:h(),paused:!0,reason:e?"cancelled":"timedout"})}return new Map(l)}async function l(e,t,i,r){let n;if(0===e.size)return e;null!=i&&"number"==typeof i&&(i=(n=new TimedCancellationSource(i)).token);let a=await Promise.all((0,s.Tj)(e,([e,[r,...s]])=>null==r?[e,[void 0,...s]]:o(r.catch(()=>void 0),t,i).then(t=>[e,[t,...s]])));if(n?.dispose(),null!=r&&a.some(([,[e]])=>e?.paused??!1)){async function l(){let e=new Map;for(let[t,[i,...r]]of a)e.set(t,[{value:i?.paused?await i.value:i?.value,paused:!1},...r]);return e}let e=a.some(([,[e]])=>e?.paused&&"cancelled"===e.reason);r({value:l(),paused:!0,reason:e?"cancelled":"timedout"})}return new Map(a)}async function h(e,t,i,r){let s;null!=i&&"number"==typeof i&&(i=(s=new TimedCancellationSource(i)).token);let n=e.then(e=>null==e?e:l(e,t,i,r));n.then(()=>s?.dispose());let a=await o(e,t,i);return a.paused?{value:n,paused:a.paused,reason:a.reason}:{value:await n,paused:!1}}},7899:(e,t,i)=>{i.d(t,{AU:()=>d,G5:()=>l,Ip:()=>c,Jl:()=>f,Lb:()=>h,RS:()=>m,S4:()=>w,Y0:()=>y,gu:()=>g,ph:()=>p,wS:()=>v,yd:()=>u});var r=i(1398),s=i(3807),n=i(2972),o=i(4125);let a=[];function l(){return e=>{a.push(e)}}function h(e,t,i){return r.commands.registerCommand(e,function(...i){let r;if(e===s.Ts.GitCommands){let e=i?.[0];e?.command!=null&&(r={mode:i[0].command},e?.state?.subcommand!=null&&(r.submode=e.state.subcommand))}n.m.instance.telemetry.sendEvent("command",{command:e,context:r}),t.call(this,...i)},i)}function c(e,t,i){return r.commands.registerCommand(e,function(...i){n.m.instance.telemetry.sendEvent("command",{command:e,webview:(0,o.RR)(i[0])?i[0].webview:"<missing>"}),t.call(this,...i)},i)}function u(e){return a.map(t=>"FocusCommand"===t.name?new t(e,void 0,!0):new t(e))}function d(e){return e}function p(e,t){return r.commands.executeCommand(`${s.Ts.ActionPrefix}${e}`,{...t,type:e})}function g(e,t,...i){return{command:e,title:t,arguments:i}}function m(e,...t){return r.commands.executeCommand(e,...t)}function f(e,t,...i){return{command:e,title:t,arguments:i}}function w(e,...t){return"setContext"!=e&&"vscode.executeDocumentSymbolProvider"!==e&&"vscode.changes"!==e&&"vscode.diff"!==e&&"vscode.open"!==e&&n.m.instance.telemetry.sendEvent("command/core",{command:e}),r.commands.executeCommand(e,...t)}function v(e,...t){return n.m.instance.telemetry.sendEvent("command/core",{command:e}),r.commands.executeCommand(e,...t)}function y(e,t,i){return r.commands.executeCommand(e,t,i)}},1994:(e,t,i)=>{i.d(t,{Y:()=>r});let Comparer=class Comparer{};let UriComparer=class UriComparer extends Comparer{equals(e,t,i={exact:!1}){return e===t||null!=e&&null!=t&&(i.exact?e.toString()===t.toString():e.scheme===t.scheme&&e.fsPath===t.fsPath)}};let TextEditorComparer=class TextEditorComparer extends Comparer{equals(e,t,i={usePosition:!1}){return e===t||null!=e&&null!=t&&(!i.usePosition||e.viewColumn===t.viewColumn)&&e.document===t.document}};new TextEditorComparer;let r=new UriComparer},4832:(e,t,i)=>{i.d(t,{H:()=>o,V:()=>Configuration});var r=i(1398),s=i(3807),n=i(3395);let Configuration=class Configuration{static configure(e){e.subscriptions.push(r.workspace.onDidChangeConfiguration(o.onConfigurationChanged,o))}_onDidChange=new r.EventEmitter;get onDidChange(){return this._onDidChange.event}_onDidChangeAny=new r.EventEmitter;get onDidChangeAny(){return this._onDidChangeAny.event}onConfigurationChanged(e){this._onDidChangeAny.fire(e),e.affectsConfiguration(s.Od)&&(this._overrides?.onDidChange!=null&&(e=this._overrides.onDidChange(e)),this._onDidChange.fire(e))}_overrides;applyOverrides(e){this._overrides=e}clearOverrides(){null!=this._overrides&&(this._overrides.get=void 0,this._overrides.getAll=void 0,queueMicrotask(()=>this._overrides=void 0))}get(e,t,i,n){let o=void 0===i?r.workspace.getConfiguration(s.Od,t).get(e):r.workspace.getConfiguration(s.Od,t).get(e,i);return n||this._overrides?.get==null?o:this._overrides.get(e,o)}getAll(e){let t=r.workspace.getConfiguration().get(s.Od);return e||this._overrides?.getAll==null?t:this._overrides.getAll(t)}getAny(e,t,i){return void 0===i?r.workspace.getConfiguration(void 0,t).get(e):r.workspace.getConfiguration(void 0,t).get(e,i)}getCore(e,t,i){return void 0===i?r.workspace.getConfiguration(void 0,t).get(e):r.workspace.getConfiguration(void 0,t).get(e,i)}changed(e,t,i){return null==e||(Array.isArray(t)?t.some(t=>e.affectsConfiguration(`${s.Od}.${t}`,i)):e.affectsConfiguration(`${s.Od}.${t}`,i))}changedAny(e,t,i){return null==e||(Array.isArray(t)?t.some(t=>e.affectsConfiguration(t,i)):e.affectsConfiguration(t,i))}changedCore(e,t,i){return null==e||(Array.isArray(t)?t.some(t=>e.affectsConfiguration(t,i)):e.affectsConfiguration(t,i))}inspect(e,t){return r.workspace.getConfiguration(s.Od,t).inspect(void 0===e?s.Od:e)}inspectAny(e,t){return r.workspace.getConfiguration(void 0,t).inspect(e)}inspectCore(e,t){return r.workspace.getConfiguration(void 0,t).inspect(e)}isUnset(e,t){let i=this.inspect(e,t);return void 0===i.workspaceFolderValue&&void 0===i.workspaceValue&&void 0===i.globalValue}async migrate(e,t,i){let s=this.inspect(e);if(void 0===s)return!1;let n=!1;return void 0!==s.globalValue&&(await this.update(t,null!=i.migrationFn?i.migrationFn(s.globalValue):s.globalValue,r.ConfigurationTarget.Global),n=!0),void 0!==s.workspaceValue&&(await this.update(t,null!=i.migrationFn?i.migrationFn(s.workspaceValue):s.workspaceValue,r.ConfigurationTarget.Workspace),n=!0),void 0!==s.workspaceFolderValue&&(await this.update(t,null!=i.migrationFn?i.migrationFn(s.workspaceFolderValue):s.workspaceFolderValue,r.ConfigurationTarget.WorkspaceFolder),n=!0),n||void 0===i.fallbackValue||(await this.update(t,i.fallbackValue,r.ConfigurationTarget.Global),n=!0),n}async migrateIfMissing(e,t,i){let s=this.inspect(e);if(void 0===s)return;let n=this.inspect(t);void 0!==s.globalValue&&n?.globalValue===void 0&&await this.update(t,null!=i.migrationFn?i.migrationFn(s.globalValue):s.globalValue,r.ConfigurationTarget.Global),void 0!==s.workspaceValue&&n?.workspaceValue===void 0&&await this.update(t,null!=i.migrationFn?i.migrationFn(s.workspaceValue):s.workspaceValue,r.ConfigurationTarget.Workspace),void 0!==s.workspaceFolderValue&&n?.workspaceFolderValue===void 0&&await this.update(t,null!=i.migrationFn?i.migrationFn(s.workspaceFolderValue):s.workspaceFolderValue,r.ConfigurationTarget.WorkspaceFolder)}matches(e,t,i){return e===t}name(e){return e}update(e,t,i){return r.workspace.getConfiguration(s.Od).update(e,t,i)}updateAny(e,t,i,s){return r.workspace.getConfiguration(void 0,i===r.ConfigurationTarget.Global?void 0:s).update(e,t,i)}updateEffective(e,t){let i=this.inspect(e);return void 0!==i.workspaceFolderValue?t===i.workspaceFolderValue?Promise.resolve(void 0):this.update(e,t,r.ConfigurationTarget.WorkspaceFolder):void 0!==i.workspaceValue?t===i.workspaceValue?Promise.resolve(void 0):this.update(e,t,r.ConfigurationTarget.Workspace):i.globalValue===t||void 0===i.globalValue&&t===i.defaultValue?Promise.resolve(void 0):this.update(e,(0,n.t7)(t,i.defaultValue)?void 0:t,r.ConfigurationTarget.Global)}};let o=new Configuration},8973:(e,t,i)=>{i.d(t,{SD:()=>l,o:()=>h,wt:()=>a});var r=i(1398),s=i(7899);let n=new Map,o=new r.EventEmitter,a=o.event;function l(e,t){return n.get(e)??t}async function h(e,t){n.get(e)!==t&&(n.set(e,t),await (0,s.S4)("setContext",e,t),o.fire(e))}},6330:(e,t,i)=>{i.d(t,{N:()=>s});let r=1073741824-1;function s(){let e=0;return{get current(){return e},next:function(){return e===r&&(e=0),++e}}}},1856:(e,t,i)=>{let r,s,n,o;i.d(t,{Fl:()=>d,PI:()=>g,Tl:()=>p,Yq:()=>m,m8:()=>f});let a=/(?<literal>\[.*?\])|(?<year>YYYY|YY)|(?<month>M{1,4})|(?<day>Do|DD?)|(?<weekday>d{2,4})|(?<hour>HH?|hh?)|(?<minute>mm?)|(?<second>ss?)|(?<fractionalSecond>SSS)|(?<dayPeriod>A|a)|(?<timeZoneName>ZZ?)/g,l=/(?<dateStyle>full|long|medium|short)(?:\+(?<timeStyle>full|long|medium|short))?/,h=[["year",629856e5,31536e6,"yr"],["month",2628e6,2628e6,"mo"],["week",6048e5,6048e5,"wk"],["day",864e5,864e5,"d"],["hour",36e5,36e5,"h"],["minute",6e4,6e4,"m"],["second",1e3,1e3,"s"]],c=new Map,u=new Map;function d(e){s="string"==typeof e?"system"===e||0===e.trim().length?void 0:[e]:e??void 0,n=void 0,o=void 0,c.clear(),u.clear(),r=void 0}function p(e,t){let i=new Date(e.getTime());for(let[e,r]of Object.entries(t))if(r)switch(e){case"years":i.setFullYear(i.getFullYear()+r);break;case"months":i.setMonth(i.getMonth()+r);break;case"days":i.setDate(i.getDate()+r);break;case"hours":i.setHours(i.getHours()+r);break;case"minutes":i.setMinutes(i.getMinutes()+r);break;case"seconds":i.setSeconds(i.getSeconds()+r)}return i}function g(e,t){let i=("number"==typeof e?e:e.getTime())-new Date().getTime();for(let[e,a,l,c]of h){let h=Math.abs(i);if(h>=a||1e3===a){if(t){if(null==r&&(r=null!=o?o.resolvedOptions().locale:null!=n?n.resolvedOptions().locale:(o=new Intl.RelativeTimeFormat(s,{localeMatcher:"best fit",numeric:"always",style:"narrow"})).resolvedOptions().locale),"en"===r||r?.startsWith("en-")){let e=Math.round(h/l);return`${e}${c}`}return null==o&&(o=new Intl.RelativeTimeFormat(s,{localeMatcher:"best fit",numeric:"always",style:"narrow"})),o.format(Math.round(i/l),e)}return null==n&&(n=new Intl.RelativeTimeFormat(s,{localeMatcher:"best fit",numeric:"auto",style:"long"})),n.format(Math.round(i/l),e)}}return""}function m(e,t,i,r=!0){t=t??void 0;let n=`${i??""}:${t}`,o=c.get(n);if(null==o){let e;let h=function(e){if(null==e)return{localeMatcher:"best fit",dateStyle:"full",timeStyle:"short"};let t=l.exec(e);if(t?.groups!=null){let{dateStyle:e,timeStyle:i}=t.groups;return{localeMatcher:"best fit",dateStyle:e||"full",timeStyle:i||void 0}}let i={localeMatcher:"best fit"};for(let{groups:t}of e.matchAll(a))if(null!=t){for(let[e,r]of Object.entries(t))if(null!=r)switch(e){case"year":i.year=4===r.length?"numeric":"2-digit";break;case"month":switch(r.length){case 4:i.month="long";break;case 3:i.month="short";break;case 2:i.month="2-digit";break;case 1:i.month="numeric"}break;case"day":"DD"===r?i.day="2-digit":i.day="numeric";break;case"weekday":switch(r.length){case 4:i.weekday="long";break;case 3:i.weekday="short";break;case 2:i.weekday="narrow"}break;case"hour":i.hour=2===r.length?"2-digit":"numeric",i.hour12="hh"===r||"h"===r;break;case"minute":i.minute=2===r.length?"2-digit":"numeric";break;case"second":i.second=2===r.length?"2-digit":"numeric";break;case"fractionalSecond":i.fractionalSecondDigits=3;break;case"dayPeriod":i.dayPeriod="narrow",i.hour12=!0,i.hourCycle="h12";break;case"timeZoneName":i.timeZoneName=2===r.length?"long":"short"}}return i}(t);e=null==i?s:"system"===i?void 0:[i],o=new Intl.DateTimeFormat(e,h),r&&c.set(n,o)}if(null==t||l.test(t))return o.format(e);let h=o.formatToParts(e);return t.replace(a,(t,n,o,a,l,u,d,p,g,m,f,v,y,b,C)=>{if(null!=n)return n.substring(1,n.length-1);for(let[t,n]of Object.entries(C)){if(null==n)continue;let o=h.find(e=>e.type===t);if("Do"===n&&o?.type==="day")return function(e){let t=e%100;return`${e}${w[(t-20)%10]??w[t]??"th"}`}(Number(o.value));if("a"===n&&o?.type==="dayPeriod"){let t=(function(e){let t=`${i??""}:time:${e}`,n=c.get(t);if(null==n){let o;o=null==i?s:"system"===i?void 0:[i],n=new Intl.DateTimeFormat(o,{localeMatcher:"best fit",timeStyle:e}),r&&c.set(t,n)}return n})("short").formatToParts(e).find(e=>"dayPeriod"===e.type);return` ${(t??o)?.value??""}`}return o?.value??""}return""})}function f(e,t,i,r){let s=("number"==typeof t?t:t.getTime())-("number"==typeof e?e:e.getTime()),n=r??Math.floor;switch(i){case"days":return n(s/864e5);case"hours":return n(s/36e5);case"minutes":return n(s/6e4);case"seconds":return n(s/1e3);default:return s}}let w=["th","st","nd","rd"]},6950:(e,t,i)=>{i.d(t,{G:()=>n});var r=i(3131),s=i(8027);function n(e){return(t,i,n)=>{let o;if("function"==typeof n.value?o=n.value:"function"==typeof n.get&&(o=n.get),null==o)throw Error("Not supported");let a=`$gate$${i}`;n.value=function(...t){let i=(0,s.q)(a,e,...t);Object.prototype.hasOwnProperty.call(this,i)||Object.defineProperty(this,i,{configurable:!1,enumerable:!1,writable:!0,value:void 0});let n=this[i];if(void 0===n){let e;try{if(e=o.apply(this,t),null==e||!(0,r.yL)(e))return e;this[i]=n=e.then(e=>(this[i]=void 0,e)).catch(e=>{throw this[i]=void 0,e})}catch(e){throw this[i]=void 0,e}}return n}}}},8180:(e,t,i)=>{i.d(t,{Yz:()=>u,Rm:()=>d,Is:()=>c});var r=i(9262),s=i(560),n=i(3916),o=i(3446),a=i(3131),l=i(7279);let h=Symbol("logInstanceNameFn");function c(e){return t=>{t[h]=e}}function u(e){return d(e,!0)}function d(e,t=!1){let i,c,u,d,p;let g=0,m=!1,f=!1,w=!0;null!=e&&({args:i,if:c,enter:u,exit:d,prefix:p,logThreshold:g=0,scoped:m=!0,singleLine:f=!1,timed:w=!0}=e),g>0&&(f=!0,w=!0),w&&(m=!0);let v=n.Vy.isDebugging,y=t?n.Vy.debug:n.Vy.log,b=v?"debug":"info";return(e,t,C)=>{let R,S;if("function"==typeof C.value?(R=C.value,S="value"):"function"==typeof C.get&&(R=C.get,S="get"),null==R||null==S)throw Error("Not supported");let P=!1!==i?(0,s.bQ)(R):[];C[S]=function(...e){let s,C;if(!v&&!n.Vy.enabled(b)||null!=c&&!c.apply(this,e))return R.apply(this,e);let S=o.$e.next(),A=this!=null?this.constructor?.[h]?.(this,n.zu(this))??(0,n.zu)(this):void 0,k=A?m?`[${S.toString(16).padStart(5)}] ${A}.${t}`:`${A}.${t}`:t;null!=p&&(k=p({id:S,instance:this,instanceName:A??"",name:t,prefix:k},...e)),m&&(s={scopeId:S,prefix:k},(0,o.DL)(S,s));let D=null!=u?u(...e):"";if(!1===i||0===e.length)C="",f||y.call(n.Vy,`${k}${D}`);else{let t,r,s,o;C="";let a=-1;for(o of e){if(r=P[++a],null!=(t=i?.[a])){if("boolean"==typeof t)continue;if(C.length>0&&(C+=", "),"string"==typeof t){C+=t;continue}s=String(t(o))}else C.length>0&&(C+=", "),s=n.Vy.toLoggable(o);C+=r?`${r}=${s}`:s}f||y.call(n.Vy,C?`${k}${D}(${C})`:`${k}${D}`)}if(f||w||null!=d){let t;let i=w?(0,r.k)():void 0,h=e=>{let t=void 0!==i?` [${(0,l.$l)(i)}ms]`:"";f?n.Vy.error(e,C?`${k}${D}(${C})`:`${k}${D}`,s?.exitDetails?`failed${s.exitDetails}${t}`:`failed${t}`):n.Vy.error(e,k,s?.exitDetails?`failed${s.exitDetails}${t}`:`failed${t}`),m&&(0,o.aE)(S)};try{t=R.apply(this,e)}catch(e){throw h(e),e}let c=e=>{let t,r,a,h;if(null!=i?(t=(0,l.$l)(i))>500?(r=n.Vy.warn,a=` [*${t}ms] (slow)`):(r=y,a=` [${t}ms]`):(a="",r=y),null!=d){if("function"==typeof d)try{h=d(e)}catch(e){h=`@log.exit error: ${e}`}else!0===d&&(h=`returned ${n.Vy.toLoggable(e)}`)}else s?.exitFailed?(h=s.exitFailed,r=n.Vy.error):h="completed";f?(0===g||t>g)&&r.call(n.Vy,C?`${k}${D}(${C}) ${h}${s?.exitDetails||""}${a}`:`${k}${D} ${h}${s?.exitDetails||""}${a}`):r.call(n.Vy,C?`${k}(${C}) ${h}${s?.exitDetails||""}${a}`:`${k} ${h}${s?.exitDetails||""}${a}`),m&&(0,o.aE)(S)};return null!=t&&(0,a.yL)(t)?t.then(c,h):c(t),t}return R.apply(this,e)}}}},3533:(e,t,i)=>{i.d(t,{B:()=>s});var r=i(8027);function s(e){return(t,i,s)=>{let n,o,a;if("function"==typeof s.value)n=s.value,o="value";else if("function"==typeof s.get)n=s.get,o="get";else throw Error("Not supported");if(null==n)throw Error("Not supported");let l=`$memoize$${i}`;s[o]=function(...t){let i=(0,r.q)(l,e,...t);return Object.prototype.hasOwnProperty.call(this,i)?a=this[i]:(Object.defineProperty(this,i,{configurable:!1,enumerable:!1,writable:!1,value:a=n.apply(this,t)}),a)}}}},8027:(e,t,i)=>{i.d(t,{q:()=>u});var r=i(1398),s=i(2972),n=i(9102),o=i(5287),a=i(468),l=i(5911);function h(e,t){return""===e||null==t||"object"!=typeof t?t:t instanceof Error?String(t):t instanceof r.Uri?"sha"in t&&"string"==typeof t.sha&&t.sha?`${t.sha}:${t.toString()}`:t.toString():(0,n.PX)(t)||(0,o.WM)(t)||(0,a.dz)(t)||(0,l.sN)(t)?t.toString():(0,s.u)(t)?"<container>":t}function c(...e){if(0===e.length)return"";if(e.length>1)return JSON.stringify(e,h);let[t]=e;if(null==t)return"";switch(typeof t){case"string":return t;case"number":case"boolean":case"undefined":case"symbol":case"bigint":return String(t);default:if(t instanceof Error)return String(t);if(t instanceof r.Uri){if("sha"in t&&"string"==typeof t.sha&&t.sha)return`${t.sha}:${t.toString()}`;return t.toString()}if((0,n.PX)(t)||(0,o.WM)(t)||(0,a.dz)(t)||(0,l.sN)(t))return t.toString();if((0,s.u)(t))return"<container>";return JSON.stringify(t,h)}}function u(e,t,...i){let r;if(0===i.length)return e;if(null!=t)try{r=t(...i)}catch{r=c(...i)}else r=c(...i);return`${e}$${r}`}},1345:(e,t,i)=>{function r(e){if(null!=e)return encodeURI(e.replace(/%20/g," "))}i.d(t,{W:()=>r})},4022:(e,t,i)=>{i.d(t,{HC:()=>l,I7:()=>a,Oo:()=>s,s:()=>n});var r=i(1398);function s(e){return n(e,1)}function n(e,t){return(i,r)=>{let s=0,n=e(e=>(++s>=t&&n.dispose(),i.call(r,e)));return n}}let o=(e,t)=>t(e);function a(e,t=o){let i,r;let s=!0;return{get pending(){return s},promise:new Promise((n,o)=>{i=()=>{s=!1,i=void 0,o()},r=e(async e=>{try{await t(e,n,o),s=!1}catch(e){s=!1,o(e)}})}).then(e=>(r.dispose(),e),e=>{throw r.dispose(),e}),cancel:()=>i?.()}}function l(e,t,i,s){let n;let o=new WeakRef(i),a=e(e=>{let i=o.deref();null!=i?t.call(i,e):n.dispose()});return n=null==s?a:r.Disposable.from(a,...s)}},520:(e,t,i)=>{i.d(t,{j:()=>n});var r=i(4911),s=i(7279);function n(e,t){let i=(0,r.Sp)(e),n=(0,r.P8)(i);if(t?.truncateTo!=null&&n.length>=t.truncateTo)return(0,s.kU)(n,t.truncateTo);if(t?.suffix){if(null!=t.truncateTo&&n.length+t.suffix.length>=t.truncateTo)return`${(0,s.kU)(n,t.truncateTo-t.suffix.length)}${t.suffix}`;n+=t.suffix}if(t?.fileOnly)return n;let o=(0,r.A3)(i,t?.relativeTo);return o?(n=`/${n}`,t?.truncateTo!=null&&n.length+o.length>=t.truncateTo)?`${(0,s.Es)(o,t.truncateTo-n.length)}${n}`:`${o}${n}`:n}},560:(e,t,i)=>{function r(e,t,i){let r,s,n,o,a;function l(e){let i=e-(s??0);return null==s||i>=t||i<0}function h(){let e=Date.now();l(e)?c():a=setTimeout(h,t-(e-(s??0)))}function c(){return(a=void 0,r)?function(){let t=r,i=n;return r=n=void 0,o=e.apply(i,t)}():(r=void 0,n=void 0,o)}function u(...e){let c=Date.now(),d=l(c);return(r=null!=i&&r?i(r,e):e,n=this,s=c,d&&null==a)?a=setTimeout(h,t):null==a&&(a=setTimeout(h,t)),o}return u.cancel=function(){null!=a&&clearTimeout(a),r=void 0,s=void 0,n=void 0,a=void 0},u.flush=function(){return null==a?o:(clearTimeout(a),c())},u.pending=function(){return null!=a},u}i.d(t,{An:()=>d,L2:()=>p,OH:()=>c,Oo:()=>h,bQ:()=>a,gC:()=>u,is:()=>l,sg:()=>r});let s=/\(([\s\S]*)\)/,n=/(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/gm,o=/\s?=.*$/;function a(e){if("function"!=typeof e)throw Error("Not supported");if(0===e.length)return[];let t=Function.prototype.toString.call(e),i=(t=(t=t.replace(n,"")||t).slice(0,t.indexOf("{"))).indexOf("("),r=t.indexOf(")");i=i>=0?i+1:0,r=r>0?r:t.indexOf("="),t=t.slice(i,r),t=`(${t})`;let a=s.exec(t);return null!=a?a[1].split(",").map(e=>e.trim().replace(o,"")):[]}function l(e,t,i){return null==t?null!=e:"function"==typeof t?t(e):void 0===i?void 0!==e[t]:e[t]===i}function h(e){let t;let i=!1;return function(...r){return i||(i=!0,t=e.apply(this,r),e=void 0),t}}function c(e,...t){return(...i)=>e(...t,...i)}function u(e,t){let i;return i=setInterval(e,t),{dispose:()=>{null!=i&&(clearInterval(i),i=void 0)}}}async function d(e,t,i){for(let r of t)try{await e.apply(i,r)}catch{}}function p(e,t){return e>=t?e*e+e+t:e+t*t}},4026:(e,t,i)=>{function r(e,t){if(null==e)return 0;let i=0;for(let r of e)(null==t||t(r))&&i++;return i}function*s(e,t){if(void 0===t)for(let t of e)null!=t&&(yield t);else for(let i of e)t(i)&&(yield i)}function*n(e,t){for(let i of e){let e=t(i);null!=e&&(yield e)}}function o(e,t){for(let i of e)if(t(i))return i}function a(e){return e[Symbol.iterator]().next().value}function*l(e,t){for(let i of e)yield*t(i)}function h(e){return l(e,e=>e)}function c(e,t){let i=Object.create(null);for(let r of e){let e=t(r),s=i[e];void 0===s?i[e]=[r]:s.push(r)}return i}function u(e,t,i){let r=new Map,s=i?.filterNullGroups??!1;for(let i of e){let e=t(i);if(null==e&&s)continue;let n=r.get(e);void 0===n?r.set(e,[i]):n.push(i)}return r}function d(e,t,i){let r=new Map;for(let s of e){let e=i(s);if(null==e)continue;let n=t(s),o=r.get(n);void 0===o?r.set(n,[e]):o.push(e)}return r}function p(e,t){let i=e[Symbol.iterator](),r=i.next();if(r.done)return"";let s=String(r.value);for(;!(r=i.next()).done;)s+=`${t}${r.value}`;return s}function g(e){let t;for(t of e);return t}function*m(e,t){for(let i of e)yield t(i)}function f(e,t){let i=Number.POSITIVE_INFINITY;if(null==t)for(let t of e)t<i&&(i=t);else for(let r of e){let e=t(r);e<i&&(i=e)}return i}function w(e,t){for(let i of e)if(t(i))return!0;return!1}function v(e,t,i){let r=new Map;for(let s of e){let e=t(s),n=r.get(e);if(void 0===n)r.set(e,s);else{let t=i(n,s);void 0!==t&&r.set(e,t)}}return r.values()}i.d(t,{$1:()=>a,$z:()=>c,Bq:()=>h,Fi:()=>u,HV:()=>g,I6:()=>o,Tj:()=>m,U9:()=>r,fA:()=>d,fj:()=>p,jk:()=>f,pD:()=>v,pb:()=>s,qI:()=>l,x1:()=>n,zN:()=>w})},3446:(e,t,i)=>{i.d(t,{$e:()=>r,DL:()=>l,TT:()=>h,aE:()=>n,dQ:()=>o,jr:()=>a});let r=(0,i(6330).N)(),s=new Map;function n(e){s.delete(e)}function o(){return s.get(r.current)}function a(e,t){if(null!=t)return{scopeId:t.scopeId,prefix:`${t.prefix}${e}`};let i=r.next();return{scopeId:i,prefix:`[${String(i).padStart(5)}] ${e}`}}function l(e,t){s.set(e,t)}function h(e,t,i){null!=e&&(e.exitDetails=t,null!=i&&(e.exitFailed=i))}},3916:(e,t,i)=>{i.d(t,{Vy:()=>n,j8:()=>BufferedLogChannel,nH:()=>l,zu:()=>a});var r,s=((r=s||{})[r.Off=0]="Off",r[r.Error=1]="Error",r[r.Warn=2]="Warn",r[r.Info=3]="Info",r[r.Debug=4]="Debug",r);let n=new class Logger2{output;provider;configure(e,t,i=!1){this.provider=e,this._isDebugging=i,this.logLevel=t}enabled(e){return this.level>=o(e)}_isDebugging=!1;get isDebugging(){return this._isDebugging}level=0;_logLevel="off";get logLevel(){return this._logLevel}set logLevel(e){this._logLevel=e,this.level=o(this._logLevel),"off"===e?(this.output?.dispose?.(),this.output=void 0):this.output??=this.provider.createChannel(this.provider.name)}get timestamp(){return`[${new Date().toISOString().replace(/T/," ").slice(0,-1)}]`}debug(e,...t){let i;(!(this.level<4)||this.isDebugging)&&("string"==typeof e?i=e:(i=t.shift(),null!=e&&(i=`${e.prefix} ${i??""}`)),this.isDebugging&&console.log(this.timestamp,`[${this.provider.name}]`,i??"",...t),null==this.output||this.level<4||this.output.appendLine(`${this.timestamp} ${i??""}${this.toLoggableParams(!0,t)}`))}error(e,t,...i){let r;if(!(this.level<1)||this.isDebugging){if(null==(r=null==t||"string"==typeof t?t:`${t.prefix} ${i.shift()??""}`)){let t=e instanceof Error?e.stack:void 0;if(t){let e=/.*\s*?at\s(.+?)\s/.exec(t);null!=e&&(r=e[1])}}this.isDebugging&&(null!=e?console.error(this.timestamp,`[${this.provider.name}]`,r??"",...i,e):console.error(this.timestamp,`[${this.provider.name}]`,r??"",...i)),null==this.output||this.level<1||this.output.appendLine(`${this.timestamp} ${r??""}${this.toLoggableParams(!1,i)}${null!=e?`
${String(e)}`:""}`)}}log(e,...t){let i;(!(this.level<3)||this.isDebugging)&&("string"==typeof e?i=e:(i=t.shift(),null!=e&&(i=`${e.prefix} ${i??""}`)),this.isDebugging&&console.log(this.timestamp,`[${this.provider.name}]`,i??"",...t),null==this.output||this.level<3||this.output.appendLine(`${this.timestamp} ${i??""}${this.toLoggableParams(!1,t)}`))}warn(e,...t){let i;(!(this.level<2)||this.isDebugging)&&("string"==typeof e?i=e:(i=t.shift(),null!=e&&(i=`${e.prefix} ${i??""}`)),this.isDebugging&&console.warn(this.timestamp,`[${this.provider.name}]`,i??"",...t),null==this.output||this.level<2||this.output.appendLine(`${this.timestamp} ${i??""}${this.toLoggableParams(!1,t)}`))}showOutputChannel(e){this.output?.show?.(e)}toLoggable(e,t){if("object"!=typeof e)return String(e);if(Array.isArray(e))return`[${e.map(e=>this.toLoggable(e,t)).join(", ")}]`;let i=this.provider.toLoggable?.(e);if(null!=i)return i;try{return JSON.stringify(e,t)}catch{return"<error>"}}toLoggableParams(e,t){if(0===t.length||e&&this.level<4&&!this.isDebugging)return"";let i=t.map(e=>this.toLoggable(e)).join(", ");return 0!==i.length?` \u2014 ${i}`:""}};let BufferedLogChannel=class BufferedLogChannel{constructor(e,t=500){this.channel=e,this.interval=t}buffer=[];bufferTimer;dispose(){clearInterval(this.bufferTimer),this.bufferTimer=void 0,this.channel.dispose()}get name(){return this.channel.name}appendLine(e){this.buffer.push(e),this.bufferTimer??=setInterval(()=>this.flush(),this.interval)}show(e){this.channel.show?.(e)}_emptyCounter=0;flush(){if(this.buffer.length){this._emptyCounter=0;let e=this.buffer.join("\n");this.buffer.length=0,this.channel.append(e)}else this._emptyCounter++,this._emptyCounter>10&&(clearInterval(this.bufferTimer),this.bufferTimer=void 0,this._emptyCounter=0)}};function o(e){switch(e){case"off":default:return 0;case"error":return 1;case"warn":return 2;case"info":return 3;case"debug":return 4}}function a(e){let t;if("function"==typeof e){if(e.prototype?.constructor==null)return e.name;t=e.prototype.constructor.name??""}else t=e.constructor?.name??"";let i=t.indexOf("_");return -1===i?t:t.substr(i+1)}let l={enabled:e=>n.enabled(e)||n.isDebugging,log:(e,t,i,...r)=>{switch(e){case"error":n.error("",t,i,...r);break;case"warn":n.warn(t,i,...r);break;case"info":n.log(t,i,...r);break;default:n.debug(t,i,...r)}}}},3395:(e,t,i)=>{function r(e,t){if(e===t)return!0;if(null==e||null==t)return!1;let i=typeof e;return(i!==typeof t||"string"!==i&&"number"!==i&&"boolean"!==i)&&JSON.stringify(e)===JSON.stringify(t)}function s(e,t){let i=t?.skipPaths?.length?t?.prefix?t.skipPaths.map(e=>`${t.prefix}.${e}`):t.skipPaths:void 0,r=t?.skipNulls??!1,s=t?.stringify??!1,n=Object.create(null);return!function e(n,o,a){if(!i?.includes(o)){if(Object(a)!==a)null==a?r||(n[o]=s?"all"==s?JSON.stringify(a):a??null:a):"string"==typeof a?n[o]=a:s?n[o]="number"==typeof a||"boolean"==typeof a?a:JSON.stringify(a):n[o]=a;else if(Array.isArray(a)){let i=a.length;if(0===i)return;if(t?.arrays==="join")n[o]=a.join(",");else for(let t=0;t<i;t++)e(n,`${o}[${t}]`,a[t])}else{let t=Object.entries(a);if(0===t.length)return;for(let[i,r]of t)e(n,o?`${o}.${i}`:i,r)}}}(n,t?.prefix??"",e),n}function n(e,t,i){if(null==e&&(e=Object.create(null)),null!=i&&("boolean"!=typeof i||i))"object"==typeof i?e[t]={...i}:e[t]=i;else{let{[t]:i,...r}=e;e=r}return e}i.d(t,{Bq:()=>s,Y8:()=>n,t7:()=>r})},4232:(e,t,i)=>{i.d(t,{t:()=>PageableResult});let PageableResult=class PageableResult{constructor(e){this.fetch=e}cached;async *values(){if(null!=this.cached)for(let e of this.cached.values)yield e;let e=this.cached;for(;null==e||e.paging?.more;)for(let t of(e=await this.fetch(e?.paging),null==this.cached?this.cached=e:(this.cached.values.push(...e.values),this.cached.paging=e.paging),e.values))yield t}}},4911:(e,t,i)=>{i.d(t,{A3:()=>S,EL:()=>d,Fd:()=>C,HS:()=>r.join,K9:()=>w,LC:()=>r.extname,Np:()=>y,P8:()=>r.basename,Sp:()=>m,Uf:()=>P,V8:()=>R,VN:()=>p,bm:()=>b,my:()=>f,oP:()=>v,pD:()=>r.dirname});var r=i(7975),s=i(1398),n=i(3794),o=i(3807);let a=/(?<=^\/?)([A-Z])(?=:\/)/,l=/^([a-zA-Z][\w+.-]+):/,h=/\\/g,c=/^[/|\\]~(?:\d+?|external)(?:[/|\\]|$)/,u=/^[/|\\]~(?:\d+?|external)(?:[/|\\]|$)/;function d(e){var t,i;if("string"==typeof e&&b(e)&&(e=s.Uri.parse(e)),"string"==typeof e)return(t=e,c.test(t))?e:(e=C(e),`/~0${47===e.charCodeAt(0)?e:`/${e}`}`);let r=e.fsPath;return(i=r,c.test(i))?e:(r=C(r),e.with({path:`/~0${47===r.charCodeAt(0)?r:`/${r}`}`}))}function p(e){return u.test(e)}function g(e,t,i,r){let s;if(0===e.length||0===t.length)return 0;(r??!n.j9)&&(e=e.toLowerCase(),t=t.toLowerCase());let o=0;for(let r=0;r<e.length&&(s=e[r])===t[r];r++)s===i&&(o=r);return o}function m(e){if("string"==typeof e){if(!l.test(e))return C(e);e=s.Uri.parse(e,!0)}return C(e.scheme===o.xB.File?e.fsPath:e.path)}function f(e){return l.exec(e)?.[1]}function w(e,t){return("string"==typeof t&&47!==(t=C(t)).charCodeAt(0)&&(t=`/${t}`),"string"==typeof e&&47!==(e=C(e)).charCodeAt(0)&&(e=`/${e}`),"string"==typeof t)?1===t.length||("string"==typeof e?e:e.path).startsWith(47===t.charCodeAt(t.length-1)?t:`${t}/`):"string"==typeof e?1===t.path.length||e.startsWith(47===t.path.charCodeAt(t.path.length-1)?t.path:`${t.path}/`):t.scheme===e.scheme&&t.authority===e.authority&&(1===t.path.length||e.path.startsWith(47===t.path.charCodeAt(t.path.length-1)?t.path:`${t.path}/`))}function v(e){return!b(e)&&(0,r.isAbsolute)(e)}function y(e){return"*"===(0,r.basename)(e)}function b(e){return l.test(e)}function C(e){return e&&(47!==(e=e.replace(h,"/")).charCodeAt(e.length-1)||n.uF&&3===e.length&&":"===e[1]||(e=e.slice(0,-1)),n.uF&&(e=e.replace(a,e=>e.toLowerCase()))),e}function R(e,t,i){e=l.test(e)?s.Uri.parse(e,!0).path:C(e),t=l.test(t)?s.Uri.parse(t,!0).path:C(t);let r=g(`${t}/`,`${e}/`,"/",i);return r>0?t.substring(r+1):t}function S(e,t){let i=(0,r.dirname)(e);if(!i||"."===i||i===t)return"";if(!t)return i;let[s]=P(i,t);return s}function P(e,t,i=!1,n){if(e=m(e),t){let i;t=l.test(t)?m(i=s.Uri.parse(t,!0)):C(t);let r=g(`${t}/`,`${e}/`,"/",n);r>0?(t=e.substring(0,r),e=e.substring(r+1)):47===e.charCodeAt(0)&&(e=e.slice(1)),null!=i&&(t=i.with({path:t}).toString())}else t=C(i?(0,r.dirname)(e):""),e=i?(0,r.basename)(e):e;return[e,t]}},3131:(e,t,i)=>{async function*r(e){let t=new Map(e.map((e,t)=>[t,e.then(e=>({index:t,value:e,status:"fulfilled"}),e=>({index:t,reason:e,status:"rejected"}))]));for(;t.size;){let e=await Promise.race(t.values());t.delete(e.index),yield e}}i.d(t,{Ar:()=>h,FO:()=>o,NY:()=>PromiseCancelledError,Ro:()=>a,nZ:()=>s,v6:()=>n,w:()=>r,yL:()=>l});let PromiseCancelledError=class PromiseCancelledError extends Error{constructor(e,t){super(t),this.promise=e}};function s(e,t,i,r){return null==t&&null==i?e:new Promise((s,n)=>{let o,a,l=!1,h=t=>{o?.dispose(),a?.dispose(),l||(r?.onDidCancel!=null?r.onDidCancel(s,n,t):n(new PromiseCancelledError(e,r?.cancelMessage??("cancelled"===t?"CANCELLED":"TIMED OUT"))))};if(o=i?.onCancellationRequested(()=>h("cancelled")),null!=t){if("number"==typeof t){let e=setTimeout(()=>h("timedout"),t);a={dispose:()=>clearTimeout(e)}}else a=t.onCancellationRequested(()=>h("timedout"))}e.then(()=>{l=!0,o?.dispose(),a?.dispose(),s(e)},e=>{l=!0,o?.dispose(),a?.dispose(),n(e)})})}function n(){let e={pending:!0,promise:void 0,fulfill:void 0,cancel:void 0};return e.promise=new Promise((t,i)=>{e.fulfill=function(i){e.pending=!1,t(i)},e.cancel=function(){e.pending=!1,i()}}),e}function o(e){return e?.pending?e.promise:void 0}function a(e,t){return e?.status==="fulfilled"?e.value:t}function l(e){return null!=e&&(e instanceof Promise||"function"==typeof e?.then)}function h(){return new Promise(e=>queueMicrotask(e))}},1112:(e,t,i)=>{i.d(t,{l:()=>s});var r=i(1398);function s(e){if(null!=e)try{return JSON.parse(JSON.stringify(e,function(e,t){if(t instanceof Date)return t.getTime();if(t instanceof Map||t instanceof Set)return[...t.entries()];if(t instanceof Function||t instanceof Error)return;if(t instanceof RegExp||t instanceof r.Uri)return t.toString();let i=this[e];return i instanceof Date?i.getTime():i instanceof r.Uri?i.toString():t}))}catch(e){throw e}}},937:(e,t,i)=>{i.d(t,{e:()=>Stopwatch,u:()=>o});var r=i(9262),s=i(3916),n=i(3446);Symbol.dispose??=Symbol("Symbol.dispose"),Symbol.asyncDispose??=Symbol("Symbol.asyncDispose");let Stopwatch=class Stopwatch{logScope;logLevel;logProvider;_time;get startTime(){return this._time}_stopped=!1;constructor(e,t,...i){let o;if(this.logScope=null!=e&&"string"!=typeof e?e:(0,n.jr)(e??""),o="boolean"==typeof t?.log?t.log?{}:void 0:t?.log??{},this.logLevel=t?.logLevel??"info",this.logProvider=t?.provider??s.nH,this._time=(0,r.k)(),null!=o){if(!this.logProvider.enabled(this.logLevel))return;i.length?this.logProvider.log(this.logLevel,this.logScope,`${o.message??""}${o.suffix??""}`,...i):this.logProvider.log(this.logLevel,this.logScope,`${o.message??""}${o.suffix??""}`)}}[Symbol.dispose](){this.stop()}elapsed(){let[e,t]=(0,r.k)(this._time);return 1e3*e+Math.floor(t/1e6)}log(e){this.logCore(e,!1)}restart(e){this.logCore(e,!0),this._time=(0,r.k)(),this._stopped=!1}stop(e){this._stopped||(this.restart(e),this._stopped=!0)}logCore(e,t){if(!this.logProvider.enabled(this.logLevel))return;if(!t){this.logProvider.log(this.logLevel,this.logScope,`${e?.message??""}${e?.suffix??""}`);return}let[i,s]=(0,r.k)(this._time),n=1e3*i+Math.floor(s/1e6),o=e?.message??"";this.logProvider.log(n>250?"warn":this.logLevel,this.logScope,`${o?`${o} `:""}[${n}ms]${e?.suffix??""}`)}};function o(e,t,...i){return(t?.provider??s.nH).enabled(t?.logLevel??"info")?new Stopwatch(e,t,...i):void 0}},7279:(e,t,i)=>{let r,s;i.d(t,{K3:()=>w.K,ZH:()=>v,W1:()=>y,lF:()=>R,zd:()=>S,EO:()=>et,yz:()=>P,Q_:()=>b,FV:()=>I,$f:()=>E,Ey:()=>w.E,$l:()=>O,VU:()=>W,Vx:()=>H,vJ:()=>B,RG:()=>L,GW:()=>G,Ow:()=>V,eV:()=>z,td:()=>Y,wN:()=>C,Br:()=>K,xv:()=>J,Es:()=>Z,kU:()=>X,e8:()=>$});let n=e=>161===e||164===e||167===e||168===e||170===e||173===e||174===e||e>=176&&e<=180||e>=182&&e<=186||e>=188&&e<=191||198===e||208===e||215===e||216===e||e>=222&&e<=225||230===e||e>=232&&e<=234||236===e||237===e||240===e||242===e||243===e||e>=247&&e<=250||252===e||254===e||257===e||273===e||275===e||283===e||294===e||295===e||299===e||e>=305&&e<=307||312===e||e>=319&&e<=322||324===e||e>=328&&e<=331||333===e||338===e||339===e||358===e||359===e||363===e||462===e||464===e||466===e||468===e||470===e||472===e||474===e||476===e||593===e||609===e||708===e||711===e||e>=713&&e<=715||717===e||720===e||e>=728&&e<=731||733===e||735===e||e>=768&&e<=879||e>=913&&e<=929||e>=931&&e<=937||e>=945&&e<=961||e>=963&&e<=969||1025===e||e>=1040&&e<=1103||1105===e||8208===e||e>=8211&&e<=8214||8216===e||8217===e||8220===e||8221===e||e>=8224&&e<=8226||e>=8228&&e<=8231||8240===e||8242===e||8243===e||8245===e||8251===e||8254===e||8308===e||8319===e||e>=8321&&e<=8324||8364===e||8451===e||8453===e||8457===e||8467===e||8470===e||8481===e||8482===e||8486===e||8491===e||8531===e||8532===e||e>=8539&&e<=8542||e>=8544&&e<=8555||e>=8560&&e<=8569||8585===e||e>=8592&&e<=8601||8632===e||8633===e||8658===e||8660===e||8679===e||8704===e||8706===e||8707===e||8711===e||8712===e||8715===e||8719===e||8721===e||8725===e||8730===e||e>=8733&&e<=8736||8739===e||8741===e||e>=8743&&e<=8748||8750===e||e>=8756&&e<=8759||8764===e||8765===e||8776===e||8780===e||8786===e||8800===e||8801===e||e>=8804&&e<=8807||8810===e||8811===e||8814===e||8815===e||8834===e||8835===e||8838===e||8839===e||8853===e||8857===e||8869===e||8895===e||8978===e||e>=9312&&e<=9449||e>=9451&&e<=9547||e>=9552&&e<=9587||e>=9600&&e<=9615||e>=9618&&e<=9621||9632===e||9633===e||e>=9635&&e<=9641||9650===e||9651===e||9654===e||9655===e||9660===e||9661===e||9664===e||9665===e||e>=9670&&e<=9672||9675===e||e>=9678&&e<=9681||e>=9698&&e<=9701||9711===e||9733===e||9734===e||9737===e||9742===e||9743===e||9756===e||9758===e||9792===e||9794===e||9824===e||9825===e||e>=9827&&e<=9829||e>=9831&&e<=9834||9836===e||9837===e||9839===e||9886===e||9887===e||9919===e||e>=9926&&e<=9933||e>=9935&&e<=9939||e>=9941&&e<=9953||9955===e||9960===e||9961===e||e>=9963&&e<=9969||9972===e||e>=9974&&e<=9977||9979===e||9980===e||9982===e||9983===e||10045===e||e>=10102&&e<=10111||e>=11094&&e<=11097||e>=12872&&e<=12879||e>=57344&&e<=63743||e>=65024&&e<=65039||65533===e||e>=127232&&e<=127242||e>=127248&&e<=127277||e>=127280&&e<=127337||e>=127344&&e<=127373||127375===e||127376===e||e>=127387&&e<=127404||e>=917760&&e<=917999||e>=983040&&e<=1048573||e>=1048576&&e<=1114109,o=e=>12288===e||e>=65281&&e<=65376||e>=65504&&e<=65510,a=e=>e>=4352&&e<=4447||8986===e||8987===e||9001===e||9002===e||e>=9193&&e<=9196||9200===e||9203===e||9725===e||9726===e||9748===e||9749===e||e>=9800&&e<=9811||9855===e||9875===e||9889===e||9898===e||9899===e||9917===e||9918===e||9924===e||9925===e||9934===e||9940===e||9962===e||9970===e||9971===e||9973===e||9978===e||9981===e||9989===e||9994===e||9995===e||10024===e||10060===e||10062===e||e>=10067&&e<=10069||10071===e||e>=10133&&e<=10135||10160===e||10175===e||11035===e||11036===e||11088===e||11093===e||e>=11904&&e<=11929||e>=11931&&e<=12019||e>=12032&&e<=12245||e>=12272&&e<=12287||e>=12289&&e<=12350||e>=12353&&e<=12438||e>=12441&&e<=12543||e>=12549&&e<=12591||e>=12593&&e<=12686||e>=12688&&e<=12771||e>=12783&&e<=12830||e>=12832&&e<=12871||e>=12880&&e<=19903||e>=19968&&e<=42124||e>=42128&&e<=42182||e>=43360&&e<=43388||e>=44032&&e<=55203||e>=63744&&e<=64255||e>=65040&&e<=65049||e>=65072&&e<=65106||e>=65108&&e<=65126||e>=65128&&e<=65131||e>=94176&&e<=94180||94192===e||94193===e||e>=94208&&e<=100343||e>=100352&&e<=101589||e>=101632&&e<=101640||e>=110576&&e<=110579||e>=110581&&e<=110587||110589===e||110590===e||e>=110592&&e<=110882||110898===e||e>=110928&&e<=110930||110933===e||e>=110948&&e<=110951||e>=110960&&e<=111355||126980===e||127183===e||127374===e||e>=127377&&e<=127386||e>=127488&&e<=127490||e>=127504&&e<=127547||e>=127552&&e<=127560||127568===e||127569===e||e>=127584&&e<=127589||e>=127744&&e<=127776||e>=127789&&e<=127797||e>=127799&&e<=127868||e>=127870&&e<=127891||e>=127904&&e<=127946||e>=127951&&e<=127955||e>=127968&&e<=127984||127988===e||e>=127992&&e<=128062||128064===e||e>=128066&&e<=128252||e>=128255&&e<=128317||e>=128331&&e<=128334||e>=128336&&e<=128359||128378===e||128405===e||128406===e||128420===e||e>=128507&&e<=128591||e>=128640&&e<=128709||128716===e||e>=128720&&e<=128722||e>=128725&&e<=128727||e>=128732&&e<=128735||128747===e||128748===e||e>=128756&&e<=128764||e>=128992&&e<=129003||129008===e||e>=129292&&e<=129338||e>=129340&&e<=129349||e>=129351&&e<=129535||e>=129648&&e<=129660||e>=129664&&e<=129672||e>=129680&&e<=129725||e>=129727&&e<=129733||e>=129742&&e<=129755||e>=129760&&e<=129768||e>=129776&&e<=129784||e>=131072&&e<=196605||e>=196608&&e<=262141,l=/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/y,h=/[\x00-\x1F\x7F-\x9F]{1,1000}/y,c=/(?:\p{Emoji_Modifier_Base}\p{Emoji_Modifier}?|\p{Emoji_Presentation}|\p{Emoji}\uFE0F)(?:\u200d(?:\p{Emoji_Modifier_Base}\p{Emoji_Modifier}?|\p{Emoji_Presentation}|\p{Emoji}\uFE0F))*/yu,u=/[\x20-\x7E\xA0-\xFF]{1,1000}/y,d=/\p{M}+/gu,p={limit:1/0,ellipsis:""},g=(e,t={},i={})=>{let r=t.limit??1/0,s=t.ellipsis??"",m=t?.ellipsisWidth??(s?g(s,p,i).width:0),f=i.ansiWidth??0,w=i.controlWidth??0,v=i.ambiguousWidth??1,y=i.emojiWidth??2,b=i.fullWidthWidth??2,C=i.regularWidth??1,R=i.wideWidth??2,S=0,P=0,A=e.length,k=0,D=!1,T=A,_=Math.max(0,r-m),I=0,$=0,E=0,O=0;e:for(;;){if($>I||P>=A&&P>S){for(let t of(k=0,(e.slice(I,$)||e.slice(S,P)).replaceAll(d,""))){let e=t.codePointAt(0)||0;if(E+(O=o(e)?b:a(e)?R:v!==C&&n(e)?v:C)>_&&(T=Math.min(T,Math.max(I,S)+k)),E+O>r){D=!0;break e}k+=t.length,E+=O}I=$=0}if(P>=A)break;if(u.lastIndex=P,u.test(e)){if(E+(O=(k=u.lastIndex-P)*C)>_&&(T=Math.min(T,P+Math.floor((_-E)/C))),E+O>r){D=!0;break}E+=O,I=S,$=P,P=S=u.lastIndex;continue}if(l.lastIndex=P,l.test(e)){if(E+f>_&&(T=Math.min(T,P)),E+f>r){D=!0;break}E+=f,I=S,$=P,P=S=l.lastIndex;continue}if(h.lastIndex=P,h.test(e)){if(E+(O=(k=h.lastIndex-P)*w)>_&&(T=Math.min(T,P+Math.floor((_-E)/w))),E+O>r){D=!0;break}E+=O,I=S,$=P,P=S=h.lastIndex;continue}if(c.lastIndex=P,c.test(e)){if(E+y>_&&(T=Math.min(T,P)),E+y>r){D=!0;break}E+=y,I=S,$=P,P=S=c.lastIndex;continue}P+=1}return{width:D?_:E,index:D?T:A,truncated:D,ellipsed:D&&r>=m}};var m=i(9262),f=i(3807),w=i(5838);function v(e){return`${e[0].toLocaleUpperCase()}${e.slice(1)}`}function y(e,t){null==r&&(r=new Intl.Collator(void 0,{sensitivity:"accent"}));let i=r.compare(e,t);return 0===i?0:i>0?1:-1}function b(e,t){return null==e&&null==t||null!=e&&null!=t&&0===y(e,t)}function C(e,t){return null==s&&(s=new Intl.Collator(void 0,{numeric:!0,sensitivity:"base"})),s.compare(e,t)}function R(e,t,i=0,r=e.length,s=0,n=t.length){for(;i<r&&s<n;i++,s++){let r=e.charCodeAt(i),n=t.charCodeAt(s);if(r<n)return -1;if(r>n)return 1}let o=r-i,a=n-s;return o<a?-1:o>a?1:0}function S(e,t,i=0,r=e.length,s=0,n=t.length){for(;i<r&&s<n;i++,s++){let o=e.charCodeAt(i),a=t.charCodeAt(s);if(o===a)continue;let l=o-a;if(!(32===l&&j(a))&&!(-32===l&&j(o))){if(Q(o)&&Q(a))return l;return R(e.toLowerCase(),t.toLowerCase(),i,r,s,n)}}let o=r-i,a=n-s;return o<a?-1:o>a?1:0}function P(e){return e?.replace(/[<>&"]/g,e=>{switch(e){case"<":return"&lt;";case">":return"&gt;";case"&":return"&amp;";case'"':return"&quot;";default:return e}})}let A=/[\\`*_{}[\]()#+\-.!]/g,k=/\\([\\`*_{}[\]()#+\-.!])/g,D=/^===/gm,T=/^\u200b===/gm,_=/\r?\n/g;function I(e,t={}){return(e=e.replace(A,"\\$&").replace(D,"​==="),t.quoted)?e.trim().replace(_,"	\\\n>  "):e}function $(e){return e.replace(k,"$1").replace(T,"===")}function E(e){return e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&")}function O(e){let[t,i]=(0,m.k)(e);return 1e3*t+Math.floor(i/1e6)}let x={ellipsisWidth:0,limit:1073741824-1},F={ansiWidth:0,controlWidth:0,ambiguousWidth:1,emojiWidth:2,fullWidthWidth:2,regularWidth:1,wideWidth:2};function B(e,t,i){return null==e||0===e.length?{truncated:!1,ellipsed:!1,width:0,index:0}:g(e,{limit:t,ellipsisWidth:i??0},F)}function L(e){return null==e||0===e.length?0:g(e,x,F).width}let U=["¹","²","³","⁴","⁵","⁶","⁷","⁸","⁹"];function W(e){return U[e-1]??""}let q=/\$\{(?:'.*?[^\\]'|\W*)?(\w*?)(?:'.*?[^\\]'|[\W\d]*)\}/g,M=new Map;function N(e){return 95===e||e>=97&&e<=122||e>=65&&e<=90||e>=48&&e<=57}function H(e){let t=M.get(e);if(null!=t)return t;t=[];let i=e.length,r=0;for(;r<i;){let i=e.indexOf("${",r);if(-1===i)break;let s=e.indexOf("}",i);if(-1===s)break;let n=i+2,o="",a="",l="",h=!1,c="right",u="";if("'"===e[n]){let t=++n;if(-1===(n=e.indexOf("'",n)))break;t!==n&&(a=e.slice(t,n)),n++}else if(!N(e.charCodeAt(n))){let t=n++;for(;n<s&&!N(e.charCodeAt(n));)n++;t!==n&&(a=e.slice(t,n))}for(;n<s;){let t=e.charCodeAt(n);if(N(t))o+=e[n++];else{if(124!==t)break;for(;n<s;){if((t=e.charCodeAt(++n))>=48&&t<=57){l+=e[n];continue}63===t?(h=!0,n++):45===t&&(c="left",n++);break}}}if(n<s){if("'"===e[n]){let t=++n;if(-1===(n=e.indexOf("'",n)))break;t!==n&&(u=e.slice(t,n)),n++}else if(!N(e.charCodeAt(n))){let t=n++;for(;n<s&&!N(e.charCodeAt(n));)n++;t!==n&&(u=e.slice(t,n))}}r=s+1,t.push({key:o,start:i,end:r,options:{prefix:a||void 0,suffix:u||void 0,truncateTo:l?parseInt(l,10):void 0,collapseWhitespace:h,padDirection:c}})}return M.set(e,t),t}function G(e,t){if(null==e||0===e.length)return e;if(null==t)return e.replace(q,"");let i=H(e);if(0===i.length)return e;let r=0,s="";for(let n of i)s+=e.slice(r,n.start)+(t[n.key]??""),r=n.end;return r<e.length&&(s+=e.slice(r)),s}async function V(e,t){let i;if(null==e||0===e.length)return e;if(null==t)return e.replace(q,"");let r=H(e);if(0===r.length)return e;let s=0,n="";for(let o of r)null!=(i=t[o.key])&&"object"==typeof i&&"function"==typeof i.then&&(i=await i),n+=e.slice(s,o.start)+(i??""),s=o.end;return s<e.length&&(n+=e.slice(s)),n}function Q(e){return e>=f.s7.a&&e<=f.s7.z}function j(e){return e>=f.s7.A&&e<=f.s7.Z}function z(e,t=0,i=0,r=" "){return 0===t&&0===i?e:`${0===t?"":r.repeat(t)}${e}${0===i?"":r.repeat(i)}`}function Y(e,t,i){if(null==i)return`${t} ${e}${1===t?"":"s"}`;let r=1===t?e:i.plural??`${e}s`;return i.only?r:`${0===t?i.zero??t:i.format?.(t)??t}${i.infix??" "}${r}`}function K(e,t){let i=e.indexOf(t);if(-1===i)return[e];let r=e.substring(0,i),s=e.substring(i+t.length);return null!=s?[r,s]:[r]}function J(e,t,i="…",r){if(!e)return e;if(t<=1)return i;if((r=r??L(e))<=t)return e;if(r===e.length)return`${e.substring(0,t-1)}${i}`;let s=Math.floor(t/(r/e.length)),n=L(e.substring(0,s));for(;n<t;)n+=L(e[s++]);return n>=t&&s--,`${e.substring(0,s)}${i}`}function Z(e,t,i="…",r){if(!e)return e;if(t<=1)return i;if((r=r??L(e))<=t)return e;if(r===e.length)return`${i}${e.substring(r-t)}`;let s=Math.floor(t/(r/e.length)),n=L(e.substring(0,s));for(;n<t;)n+=L(e[s++]);return n>=t&&s--,`${i}${e.substring(e.length-s)}`}function X(e,t,i="…"){if(!e)return e;if(t<=1)return i;let r=L(e);return r<=t?e:`${e.slice(0,Math.floor(t/2)-1)}${i}${e.slice(r-Math.ceil(t/2))}`}let ee={};function et(e){return null==e||""===e?"":function(e,t,i){let r,s,n,o,a,l,h;let c=[],u=4,d=4,p=3,g="",m=[],f={val:i(0),position:32,index:1};for(r=0;r<3;r+=1)c[r]=r;for(n=0,a=4,l=1;l!=a;)o=f.val&f.position,f.position>>=1,0==f.position&&(f.position=32,f.val=i(f.index++)),n|=(o>0?1:0)*l,l<<=1;let w=String.fromCharCode;switch(n){case 0:for(n=0,a=256,l=1;l!=a;)o=f.val&f.position,f.position>>=1,0==f.position&&(f.position=t,f.val=i(f.index++)),n|=(o>0?1:0)*l,l<<=1;h=w(n);break;case 1:for(n=0,a=65536,l=1;l!=a;)o=f.val&f.position,f.position>>=1,0==f.position&&(f.position=t,f.val=i(f.index++)),n|=(o>0?1:0)*l,l<<=1;h=w(n);break;case 2:return""}for(c[3]=h,s=h,m.push(h);;){if(f.index>e)return"";for(n=0,a=Math.pow(2,p),l=1;l!=a;)o=f.val&f.position,f.position>>=1,0==f.position&&(f.position=t,f.val=i(f.index++)),n|=(o>0?1:0)*l,l<<=1;switch(h=n){case 0:for(n=0,a=256,l=1;l!=a;)o=f.val&f.position,f.position>>=1,0==f.position&&(f.position=t,f.val=i(f.index++)),n|=(o>0?1:0)*l,l<<=1;c[d++]=w(n),h=d-1,u--;break;case 1:for(n=0,a=65536,l=1;l!=a;)o=f.val&f.position,f.position>>=1,0==f.position&&(f.position=t,f.val=i(f.index++)),n|=(o>0?1:0)*l,l<<=1;c[d++]=w(n),h=d-1,u--;break;case 2:return m.join("")}if(0==u&&(u=Math.pow(2,p),p++),c[h])g=c[h];else{if(h!==d)return;g=s+s.charAt(0)}m.push(g),c[d++]=s+g.charAt(0),u--,s=g,0==u&&(u=Math.pow(2,p),p++)}}(e.length,32,t=>(function(e,t){if(!ee[e]){ee[e]={};for(let t=0;t<e.length;t++)ee[e][e.charAt(t)]=t}return ee[e][t]})("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",e.charAt(t)))??""}},9736:(e,t,i)=>{i.d(t,{F6:()=>UriTrie,ZZ:()=>VisitedPathsTrie});var r=i(3794),s=i(4026),n=i(4911);function o(e){return 47===(e=(0,n.Fd)(e)).charCodeAt(0)&&(e=e.slice(1)),e}let UriTrie=class UriTrie{constructor(e){this.normalize=e,this.trie=new PathTrie}trie;clear(){this.trie.clear()}delete(e,t=!0){let{path:i,ignoreCase:r}=this.normalize(e);return this.trie.delete(i,r,t)}get(e){let{path:t,ignoreCase:i}=this.normalize(e);return this.trie.get(t,i)}getChildren(e){let{path:t,ignoreCase:i}=this.normalize(e);return this.trie.getChildren(t,i)}getClosest(e,t,i){let{path:r,ignoreCase:s}=this.normalize(e);return this.trie.getClosest(r,t,i,s)}getDescendants(e,t){if(null==e)return this.trie.getDescendants();let{path:i,ignoreCase:r}=this.normalize(e);return this.trie.getDescendants(i,t,r)}has(e){let{path:t,ignoreCase:i}=this.normalize(e);return this.trie.has(t,i)}set(e,t){let{path:i,ignoreCase:r}=this.normalize(e);return this.trie.set(i,t,r)}};let PathNode=class PathNode{constructor(e){this.path=e}value;children};let PathTrie=class PathTrie{constructor(e=o){this.normalize=e,this.root=new PathNode("")}root;clear(){this.root.children=void 0}delete(e,t,i=!0){let s,n;for(let i of(e=this.normalize(e),t=t??!r.j9,e.split("/"))){let e=(s??this.root).children?.get(t?i.toLowerCase():i);if(null==e)return!1;n=s??this.root,s=e}return!!s?.value&&(i&&a(s.value),s.value=void 0,(null==s.children||0===s.children.size)&&n?.children!=null&&(n.children.delete(t?s.path.toLowerCase():s.path),0===n.children.size&&(n.children=void 0)),!0)}get(e,t){return this.getCore(e,t)}getCore(e,t){let i;for(let s of(e=this.normalize(e),t=t??!r.j9,e.split("/"))){let e=(i??this.root).children?.get(t?s.toLowerCase():s);if(null==e)return;i=e}return i?.value}getChildren(e,t){let i;if(e=this.normalize(e),t=t??!r.j9,e)for(let r of e.split("/")){let e=(i??this.root).children?.get(t?r.toLowerCase():r);if(null==e)return[];i=e}else i=this.root;return i?.children==null?[]:[...(0,s.x1)(i.children.values(),e=>e.value||void 0)]}getClosest(e,t,i,s){let n,o;for(let t of(e=this.normalize(e),s=s??!r.j9,e.split("/"))){n?.value&&(!i||i?.(n.value))&&(o=n);let e=(n??this.root).children?.get(s?t.toLowerCase():t);if(null==e)break;n=e}return!t&&n?.value&&(!i||i?.(n.value))?n.value:o?.value}*getDescendants(e,t,i){let s;e=e?this.normalize(e):"",i=i??!r.j9;let n="";if(e)for(let t of e.split("/")){let e=(s??this.root).children?.get(i?t.toLowerCase():t);if(null==e)return;s=e,n+=`${e.path}/`}else s=this.root;s?.children!=null&&(yield*function* e(i,r,s){for(let n of i.values()){let i=r?`${r}/${n.path}`:n.path;n.value&&(!t||t?.(n.value))&&(yield n.value),null!=n.children&&(yield*e(n.children,i,s))}}(s.children,"",n))}has(e,t){return null!=this.getCore(e,t)}set(e,t,i){e=this.normalize(e),i=i??!r.j9;let s=this.root;for(let t of e.split("/")){let e=i?t.toLowerCase():t,r=s.children?.get(e);null==r&&(null==s.children&&(s.children=new Map),r=new PathNode(t),s.children.set(e,r)),s=r}let n=null==s.value;return n||s.value===t||a(s.value),s.value=t,n}};function a(e){null!=e&&"object"==typeof e&&"dispose"in e&&"function"==typeof e.dispose&&e.dispose()}let VisitedPathNode=class VisitedPathNode{constructor(e){this.path=e}children};let VisitedPathsTrie=class VisitedPathsTrie{constructor(e=o){this.normalize=e,this.root=new VisitedPathNode("")}root;clear(){this.root.children=void 0}has(e,t){let i;for(let s of(e=this.normalize(e),t=t??!r.j9,e.split("/"))){let e=(i??this.root).children?.get(t?s.toLowerCase():s);if(null==e)return!1;i=e}return null!=i}set(e,t){e=this.normalize(e),t=t??!r.j9;let i=this.root;for(let r of e.split("/")){let e=t?r.toLowerCase():r,s=i.children?.get(e);null==s&&(null==i.children&&(i.children=new Map),s=new VisitedPathNode(r),i.children.set(e,s)),i=s}}}},2471:(e,t,i)=>{i.d(t,{Av:()=>I,CZ:()=>$,G1:()=>y,Hn:()=>D,JR:()=>p,LO:()=>m,OH:()=>T,Ol:()=>d,QK:()=>R,RZ:()=>A,XG:()=>g,c5:()=>u,dC:()=>v,dW:()=>f,g4:()=>b,k3:()=>P,kH:()=>C,kZ:()=>w,ld:()=>S,mP:()=>_,pr:()=>k});var r=i(1398),s=i(3807),n=i(7931),o=i(7899),a=i(4832),l=i(3916),h=i(4911),c=i(4766);function u(e){let t=e.toString();return r.workspace.textDocuments.find(e=>e.uri.toString()===t)}async function d(e,t){let i=function(e){let t=r.window.activeTextEditor,i=e.toString();for(let e of[...null!=t?[t]:[],...r.window.visibleTextEditors])if(e.document.uri.toString()===i&&e?.viewColumn!=null)return e}(e);return null!=i?(t?.preserveFocus||await r.window.showTextDocument(i.document,{...t,viewColumn:i.viewColumn}),i):P(e,{viewColumn:r.window.activeTextEditor?.viewColumn,...t})}function p(e,t){let i=new Map(e.map(e=>[e.toString(),e]));for(let e of r.window.visibleTextEditors)e?.viewColumn!=null&&i.delete(e.document.uri.toString());for(let e of(t={background:!0,preview:!1,...t},i.values()))(0,o.S4)("vscode.open",e,t)}function g(){let e;switch(r.env.appName){case"Visual Studio Code - Insiders":e="code-insiders --wait --reuse-window";break;case"Visual Studio Code - Exploration":e="code-exploration --wait --reuse-window";break;case"VSCodium":e="codium --wait --reuse-window";break;default:e="code --wait --reuse-window"}return e}function m(e){let t=r.window.activeTextEditor;return null!=t&&t.document===e?t:void 0}function f(){return!a.H.get("advanced.quickPick.closeOnFocusOut")}function w(e){let t=r.workspace.getWorkspaceFolder(e);return null==t?(0,h.Fd)(e.fsPath):(0,h.Fd)((0,h.V8)(t.uri.fsPath,e.fsPath))||t.name}function v(e){if(0===r.window.visibleTextEditors.length)return!1;if(null==e)return r.window.visibleTextEditors.some(e=>S(e));let t=e.toString();return r.window.visibleTextEditors.some(e=>e.document.uri.toString()===t&&S(e))}function y(e){let t=r.window.activeTextEditor;return null!=t&&t.document===e}function b(e){return e.kind===r.ColorThemeKind.Dark||e.kind===r.ColorThemeKind.HighContrast}function C(e){return e.kind===r.ColorThemeKind.Light||e.kind===r.ColorThemeKind.HighContrastLight}function R(e){return e.scheme===s.xB.Virtual||e.scheme===s.xB.GitHub}function S(e){let t=e.document.uri.scheme;return t!==s.xB.DebugConsole&&t!==s.xB.Output&&t!==s.xB.Terminal}async function P(e,t){let i,a;null!=t&&({background:i,throwOnError:a,...t}=t);try{if((0,n.t5)(e)&&(e=e.documentUri()),i||e.scheme===s.xB.GitLens&&s.D2[(0,h.LC)(e.fsPath)]){await (0,o.S4)("vscode.open",e,{background:i,...t});return}let a=await r.workspace.openTextDocument(e);return r.window.showTextDocument(a,{preserveFocus:!1,preview:!0,viewColumn:r.ViewColumn.Active,...t})}catch(t){if((t?.toString()??"").includes("File seems to be binary and cannot be opened as text")){await (0,o.S4)("vscode.open",e);return}if(a)throw t;l.Vy.error(t,"openEditor");return}}async function A(e,t,i){try{await (0,o.S4)("vscode.changes",t,e.map(e=>[e.uri,e.lhs,e.rhs]))}catch(e){l.Vy.error(e,"openChangesEditor")}}async function k(e,t,i,r){try{await (0,o.S4)("vscode.diff",e,t,i,r)}catch(e){l.Vy.error(e,"openDiffEditor")}}async function D(e,t,i,s=!0){s&&null==r.window.tabGroups.activeTabGroup.activeTab&&(s=!1),await (0,o.S4)("workbench.action.openWalkthrough",{category:`${e}#${t}`,step:i},s)}function T(e,t={location:"currentWindow"}){if(t?.location==="addToWorkspace"){let i=r.workspace.workspaceFolders?.length??0;return void r.workspace.updateWorkspaceFolders(i,0,{uri:e,name:t?.name})}(0,o.S4)("vscode.openFolder",e,{forceNewWindow:t?.location==="newWindow"})}async function _(e){await (0,o.S4)("revealFileInOS",e)}function I(e){return"input-prompt-links"===e&&(0,c.ib)(r.version,">= 1.76")}async function $(e){if(null!=e)return r.env.openExternal(e)}},4766:(e,t,i)=>{i.d(t,{UD:()=>s,ib:()=>o,sH:()=>n});var r=i(7279);function s(e,t){return("string"==typeof e&&(e=n(e)),"string"==typeof t&&(t=n(t)),e.major>t.major)?1:e.major<t.major?-1:e.minor>t.minor?1:e.minor<t.minor?-1:e.patch>t.patch?1:e.patch<t.patch?-1:void 0===e.pre&&void 0!==t.pre?1:void 0!==e.pre&&void 0===t.pre?-1:void 0!==e.pre&&void 0!==t.pre?(0,r.W1)(e.pre,t.pre):0}function n(e){let[t,i]=e.split("-"),[r,s,n]=t.split(".");return{major:"string"==typeof r?parseInt(r,10):r,minor:"string"==typeof s?parseInt(s,10):s,patch:null==n?0:"string"==typeof n?parseInt(n,10):n,pre:i}}function o(e,t){if(null==e)return!1;let[i,r]=t.split(" ");if("="===i)return 0===s(e,r);if(">"===i)return s(e,r)>0;if(">="===i)return s(e,r)>=0;if("<"===i)return 0>s(e,r);if("<="===i)return 0>=s(e,r);throw Error(`Unknown operator: ${i}`)}},4125:(e,t,i)=>{function r(e){return null!=e&&"webview"in e&&null!=e.webview}function s(e){return null!=e&&"webview"in e&&null!=e.webview&&"webviewItem"in e}function n(e){return null!=e&&"webview"in e&&null!=e.webview&&"webviewItemGroup"in e}function o(e){return JSON.stringify(e)}i.d(t,{C9:()=>o,PH:()=>n,RR:()=>r,sc:()=>s})},6885:(e,t,i)=>{i.r(t),i.d(t,{OpenTelemetryProvider:()=>OpenTelemetryProvider}),(w=v||(v={}))[w.INTERNAL=0]="INTERNAL",w[w.SERVER=1]="SERVER",w[w.CLIENT=2]="CLIENT",w[w.PRODUCER=3]="PRODUCER",w[w.CONSUMER=4]="CONSUMER";var r,s,n,o,a,l,h,c,u,d,p,g,m,f,w,v,y,b,C,R,S,P,A,k,D,T="object"==typeof globalThis?globalThis:"object"==typeof self?self:"object"==typeof window?window:"object"==typeof i.g?i.g:{},_="1.8.0",I=/^(\d+)\.(\d+)\.(\d+)(-(.+))?$/,$=function(e){var t=new Set([e]),i=new Set,r=e.match(I);if(!r)return function(){return!1};var s={major:+r[1],minor:+r[2],patch:+r[3],prerelease:r[4]};if(null!=s.prerelease)return function(t){return t===e};function n(e){return i.add(e),!1}return function(e){if(t.has(e))return!0;if(i.has(e))return!1;var r=e.match(I);if(!r)return n(e);var o={major:+r[1],minor:+r[2],patch:+r[3],prerelease:r[4]};return null!=o.prerelease||s.major!==o.major?n(e):0===s.major?s.minor===o.minor&&s.patch<=o.patch?(t.add(e),!0):n(e):s.minor<=o.minor?(t.add(e),!0):n(e)}}(_),E=Symbol.for("opentelemetry.js.api."+_.split(".")[0]);function O(e,t,i,r){void 0===r&&(r=!1);var s,n=T[E]=null!==(s=T[E])&&void 0!==s?s:{version:_};if(!r&&n[e]){var o=Error("@opentelemetry/api: Attempted duplicate registration of API: "+e);return i.error(o.stack||o.message),!1}if(n.version!==_){var o=Error("@opentelemetry/api: Registration of version v"+n.version+" for "+e+" does not match previously registered API v"+_);return i.error(o.stack||o.message),!1}return n[e]=t,i.debug("@opentelemetry/api: Registered a global for "+e+" v"+_+"."),!0}function x(e){var t,i,r=null===(t=T[E])||void 0===t?void 0:t.version;if(r&&$(r))return null===(i=T[E])||void 0===i?void 0:i[e]}function F(e,t){t.debug("@opentelemetry/api: Unregistering a global for "+e+" v"+_+".");var i=T[E];i&&delete i[e]}var B=function(e,t){var i="function"==typeof Symbol&&e[Symbol.iterator];if(!i)return e;var r,s,n=i.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(r=n.next()).done;)o.push(r.value)}catch(e){s={error:e}}finally{try{r&&!r.done&&(i=n.return)&&i.call(n)}finally{if(s)throw s.error}}return o},L=function(e,t,i){if(i||2==arguments.length)for(var r,s=0,n=t.length;s<n;s++)!r&&s in t||(r||(r=Array.prototype.slice.call(t,0,s)),r[s]=t[s]);return e.concat(r||Array.prototype.slice.call(t))},U=function(){function e(e){this._namespace=e.namespace||"DiagComponentLogger"}return e.prototype.debug=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return W("debug",this._namespace,e)},e.prototype.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return W("error",this._namespace,e)},e.prototype.info=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return W("info",this._namespace,e)},e.prototype.warn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return W("warn",this._namespace,e)},e.prototype.verbose=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return W("verbose",this._namespace,e)},e}();function W(e,t,i){var r=x("diag");if(r)return i.unshift(t),r[e].apply(r,L([],B(i),!1))}(n=y||(y={}))[n.NONE=0]="NONE",n[n.ERROR=30]="ERROR",n[n.WARN=50]="WARN",n[n.INFO=60]="INFO",n[n.DEBUG=70]="DEBUG",n[n.VERBOSE=80]="VERBOSE",n[n.ALL=9999]="ALL";var q=function(e,t){var i="function"==typeof Symbol&&e[Symbol.iterator];if(!i)return e;var r,s,n=i.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(r=n.next()).done;)o.push(r.value)}catch(e){s={error:e}}finally{try{r&&!r.done&&(i=n.return)&&i.call(n)}finally{if(s)throw s.error}}return o},M=function(e,t,i){if(i||2==arguments.length)for(var r,s=0,n=t.length;s<n;s++)!r&&s in t||(r||(r=Array.prototype.slice.call(t,0,s)),r[s]=t[s]);return e.concat(r||Array.prototype.slice.call(t))},N=function(){function e(){function e(e){return function(){for(var t=[],i=0;i<arguments.length;i++)t[i]=arguments[i];var r=x("diag");if(r)return r[e].apply(r,M([],q(t),!1))}}var t=this;t.setLogger=function(e,i){if(void 0===i&&(i={logLevel:y.INFO}),e===t){var r,s,n,o=Error("Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation");return t.error(null!==(r=o.stack)&&void 0!==r?r:o.message),!1}"number"==typeof i&&(i={logLevel:i});var a=x("diag"),l=function(e,t){function i(i,r){var s=t[i];return"function"==typeof s&&e>=r?s.bind(t):function(){}}return e<y.NONE?e=y.NONE:e>y.ALL&&(e=y.ALL),t=t||{},{error:i("error",y.ERROR),warn:i("warn",y.WARN),info:i("info",y.INFO),debug:i("debug",y.DEBUG),verbose:i("verbose",y.VERBOSE)}}(null!==(s=i.logLevel)&&void 0!==s?s:y.INFO,e);if(a&&!i.suppressOverrideMessage){var h=null!==(n=Error().stack)&&void 0!==n?n:"<failed to generate stacktrace>";a.warn("Current logger will be overwritten from "+h),l.warn("Current logger will overwrite one already registered from "+h)}return O("diag",l,t,!0)},t.disable=function(){F("diag",t)},t.createComponentLogger=function(e){return new U(e)},t.verbose=e("verbose"),t.debug=e("debug"),t.info=e("info"),t.warn=e("warn"),t.error=e("error")}return e.instance=function(){return this._instance||(this._instance=new e),this._instance},e}(),H=function(e,t){var i="function"==typeof Symbol&&e[Symbol.iterator];if(!i)return e;var r,s,n=i.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(r=n.next()).done;)o.push(r.value)}catch(e){s={error:e}}finally{try{r&&!r.done&&(i=n.return)&&i.call(n)}finally{if(s)throw s.error}}return o},G=function(e){var t="function"==typeof Symbol&&Symbol.iterator,i=t&&e[t],r=0;if(i)return i.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},V=function(){function e(e){this._entries=e?new Map(e):new Map}return e.prototype.getEntry=function(e){var t=this._entries.get(e);if(t)return Object.assign({},t)},e.prototype.getAllEntries=function(){return Array.from(this._entries.entries()).map(function(e){var t=H(e,2);return[t[0],t[1]]})},e.prototype.setEntry=function(t,i){var r=new e(this._entries);return r._entries.set(t,i),r},e.prototype.removeEntry=function(t){var i=new e(this._entries);return i._entries.delete(t),i},e.prototype.removeEntries=function(){for(var t,i,r=[],s=0;s<arguments.length;s++)r[s]=arguments[s];var n=new e(this._entries);try{for(var o=G(r),a=o.next();!a.done;a=o.next()){var l=a.value;n._entries.delete(l)}}catch(e){t={error:e}}finally{try{a&&!a.done&&(i=o.return)&&i.call(o)}finally{if(t)throw t.error}}return n},e.prototype.clear=function(){return new e},e}(),Q=Symbol("BaggageEntryMetadata"),j=N.instance();function z(e){return void 0===e&&(e={}),new V(new Map(Object.entries(e)))}var Y="baggage",K=function(e,t){var i="function"==typeof Symbol&&e[Symbol.iterator];if(!i)return e;var r,s,n=i.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(r=n.next()).done;)o.push(r.value)}catch(e){s={error:e}}finally{try{r&&!r.done&&(i=n.return)&&i.call(n)}finally{if(s)throw s.error}}return o};function J(e){var t,i=e.split(";");if(!(i.length<=0)){var r=i.shift();if(r){var s=r.indexOf("=");if(!(s<=0)){var n,o=decodeURIComponent(r.substring(0,s).trim()),a=decodeURIComponent(r.substring(s+1).trim());return i.length>0&&("string"!=typeof(n=i.join(";"))&&(j.error("Cannot create baggage metadata from unknown type: "+typeof n),n=""),t={__TYPE__:Q,toString:function(){return n}}),{key:o,value:a,metadata:t}}}}}function Z(e){return"string"!=typeof e||0===e.length?{}:e.split(",").map(function(e){return J(e)}).filter(function(e){return void 0!==e&&e.value.length>0}).reduce(function(e,t){return e[t.key]=t.value,e},{})}(o=b||(b={})).AlwaysOff="always_off",o.AlwaysOn="always_on",o.ParentBasedAlwaysOff="parentbased_always_off",o.ParentBasedAlwaysOn="parentbased_always_on",o.ParentBasedTraceIdRatio="parentbased_traceidratio",o.TraceIdRatio="traceidratio";var X="object"==typeof globalThis?globalThis:"object"==typeof self?self:"object"==typeof window?window:"object"==typeof i.g?i.g:{},ee=["OTEL_SDK_DISABLED"],et=["OTEL_BSP_EXPORT_TIMEOUT","OTEL_BSP_MAX_EXPORT_BATCH_SIZE","OTEL_BSP_MAX_QUEUE_SIZE","OTEL_BSP_SCHEDULE_DELAY","OTEL_BLRP_EXPORT_TIMEOUT","OTEL_BLRP_MAX_EXPORT_BATCH_SIZE","OTEL_BLRP_MAX_QUEUE_SIZE","OTEL_BLRP_SCHEDULE_DELAY","OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT","OTEL_ATTRIBUTE_COUNT_LIMIT","OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT","OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT","OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT","OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT","OTEL_SPAN_EVENT_COUNT_LIMIT","OTEL_SPAN_LINK_COUNT_LIMIT","OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT","OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT","OTEL_EXPORTER_OTLP_TIMEOUT","OTEL_EXPORTER_OTLP_TRACES_TIMEOUT","OTEL_EXPORTER_OTLP_METRICS_TIMEOUT","OTEL_EXPORTER_OTLP_LOGS_TIMEOUT","OTEL_EXPORTER_JAEGER_AGENT_PORT"],ei=["OTEL_NO_PATCH_MODULES","OTEL_PROPAGATORS"],er=1/0,es={OTEL_SDK_DISABLED:!1,CONTAINER_NAME:"",ECS_CONTAINER_METADATA_URI_V4:"",ECS_CONTAINER_METADATA_URI:"",HOSTNAME:"",KUBERNETES_SERVICE_HOST:"",NAMESPACE:"",OTEL_BSP_EXPORT_TIMEOUT:3e4,OTEL_BSP_MAX_EXPORT_BATCH_SIZE:512,OTEL_BSP_MAX_QUEUE_SIZE:2048,OTEL_BSP_SCHEDULE_DELAY:5e3,OTEL_BLRP_EXPORT_TIMEOUT:3e4,OTEL_BLRP_MAX_EXPORT_BATCH_SIZE:512,OTEL_BLRP_MAX_QUEUE_SIZE:2048,OTEL_BLRP_SCHEDULE_DELAY:5e3,OTEL_EXPORTER_JAEGER_AGENT_HOST:"",OTEL_EXPORTER_JAEGER_AGENT_PORT:6832,OTEL_EXPORTER_JAEGER_ENDPOINT:"",OTEL_EXPORTER_JAEGER_PASSWORD:"",OTEL_EXPORTER_JAEGER_USER:"",OTEL_EXPORTER_OTLP_ENDPOINT:"",OTEL_EXPORTER_OTLP_TRACES_ENDPOINT:"",OTEL_EXPORTER_OTLP_METRICS_ENDPOINT:"",OTEL_EXPORTER_OTLP_LOGS_ENDPOINT:"",OTEL_EXPORTER_OTLP_HEADERS:"",OTEL_EXPORTER_OTLP_TRACES_HEADERS:"",OTEL_EXPORTER_OTLP_METRICS_HEADERS:"",OTEL_EXPORTER_OTLP_LOGS_HEADERS:"",OTEL_EXPORTER_OTLP_TIMEOUT:1e4,OTEL_EXPORTER_OTLP_TRACES_TIMEOUT:1e4,OTEL_EXPORTER_OTLP_METRICS_TIMEOUT:1e4,OTEL_EXPORTER_OTLP_LOGS_TIMEOUT:1e4,OTEL_EXPORTER_ZIPKIN_ENDPOINT:"http://localhost:9411/api/v2/spans",OTEL_LOG_LEVEL:y.INFO,OTEL_NO_PATCH_MODULES:[],OTEL_PROPAGATORS:["tracecontext","baggage"],OTEL_RESOURCE_ATTRIBUTES:"",OTEL_SERVICE_NAME:"",OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT:er,OTEL_ATTRIBUTE_COUNT_LIMIT:128,OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT:er,OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT:128,OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT:er,OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT:128,OTEL_SPAN_EVENT_COUNT_LIMIT:128,OTEL_SPAN_LINK_COUNT_LIMIT:128,OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT:128,OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT:128,OTEL_TRACES_EXPORTER:"",OTEL_TRACES_SAMPLER:b.ParentBasedAlwaysOn,OTEL_TRACES_SAMPLER_ARG:"",OTEL_LOGS_EXPORTER:"",OTEL_EXPORTER_OTLP_INSECURE:"",OTEL_EXPORTER_OTLP_TRACES_INSECURE:"",OTEL_EXPORTER_OTLP_METRICS_INSECURE:"",OTEL_EXPORTER_OTLP_LOGS_INSECURE:"",OTEL_EXPORTER_OTLP_CERTIFICATE:"",OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE:"",OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE:"",OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE:"",OTEL_EXPORTER_OTLP_COMPRESSION:"",OTEL_EXPORTER_OTLP_TRACES_COMPRESSION:"",OTEL_EXPORTER_OTLP_METRICS_COMPRESSION:"",OTEL_EXPORTER_OTLP_LOGS_COMPRESSION:"",OTEL_EXPORTER_OTLP_CLIENT_KEY:"",OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY:"",OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY:"",OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY:"",OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE:"",OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE:"",OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE:"",OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE:"",OTEL_EXPORTER_OTLP_PROTOCOL:"http/protobuf",OTEL_EXPORTER_OTLP_TRACES_PROTOCOL:"http/protobuf",OTEL_EXPORTER_OTLP_METRICS_PROTOCOL:"http/protobuf",OTEL_EXPORTER_OTLP_LOGS_PROTOCOL:"http/protobuf",OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE:"cumulative"},en={ALL:y.ALL,VERBOSE:y.VERBOSE,DEBUG:y.DEBUG,INFO:y.INFO,WARN:y.WARN,ERROR:y.ERROR,NONE:y.NONE};function eo(e){var t={};for(var i in es)if("OTEL_LOG_LEVEL"===i)!function(e,t,i){var r=i[e];if("string"==typeof r){var s=en[r.toUpperCase()];null!=s&&(t[e]=s)}}(i,t,e);else if(ee.indexOf(i)>-1)!function(e,t,i){if(void 0!==i[e]){var r=String(i[e]);t[e]="true"===r.toLowerCase()}}(i,t,e);else if(et.indexOf(i)>-1)!function(e,t,i,r,s){if(void 0===r&&(r=-1/0),void 0===s&&(s=1/0),void 0!==i[e]){var n=Number(i[e]);isNaN(n)||(n<r?t[e]=r:n>s?t[e]=s:t[e]=n)}}(i,t,e);else if(ei.indexOf(i)>-1)!function(e,t,i,r){void 0===r&&(r=",");var s=i[e];"string"==typeof s&&(t[e]=s.split(r).map(function(e){return e.trim()}))}(i,t,e);else{var r=e[i];null!=r&&(t[i]=String(r))}return t}function ea(){return Object.assign({},es,eo(X))}var el=N.instance(),eh=function(e,t){var i="function"==typeof Symbol&&e[Symbol.iterator];if(!i)return e;var r,s,n=i.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(r=n.next()).done;)o.push(r.value)}catch(e){s={error:e}}finally{try{r&&!r.done&&(i=n.return)&&i.call(n)}finally{if(s)throw s.error}}return o};function ec(e,t){return el.warn("Timeout must be greater than 0",e),t}var eu=function(){function e(){var e=this;this._promise=new Promise(function(t,i){e._resolve=t,e._reject=i})}return Object.defineProperty(e.prototype,"promise",{get:function(){return this._promise},enumerable:!1,configurable:!0}),e.prototype.resolve=function(e){this._resolve(e)},e.prototype.reject=function(e){this._reject(e)},e}(),ed=function(e,t){var i="function"==typeof Symbol&&e[Symbol.iterator];if(!i)return e;var r,s,n=i.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(r=n.next()).done;)o.push(r.value)}catch(e){s={error:e}}finally{try{r&&!r.done&&(i=n.return)&&i.call(n)}finally{if(s)throw s.error}}return o},ep=function(e,t,i){if(i||2==arguments.length)for(var r,s=0,n=t.length;s<n;s++)!r&&s in t||(r||(r=Array.prototype.slice.call(t,0,s)),r[s]=t[s]);return e.concat(r||Array.prototype.slice.call(t))},eg=function(){function e(e,t){this._callback=e,this._that=t,this._isCalled=!1,this._deferred=new eu}return Object.defineProperty(e.prototype,"isCalled",{get:function(){return this._isCalled},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"promise",{get:function(){return this._deferred.promise},enumerable:!1,configurable:!0}),e.prototype.call=function(){for(var e,t=this,i=[],r=0;r<arguments.length;r++)i[r]=arguments[r];if(!this._isCalled){this._isCalled=!0;try{Promise.resolve((e=this._callback).call.apply(e,ep([this._that],ed(i),!1))).then(function(e){return t._deferred.resolve(e)},function(e){return t._deferred.reject(e)})}catch(e){this._deferred.reject(e)}}return this._deferred.promise},e}();(a=C||(C={}))[a.SUCCESS=0]="SUCCESS",a[a.FAILED=1]="FAILED";var em=function(){function e(e){var t,i,r;void 0===e&&(e={}),this._sendingPromises=[],this.url=this.getDefaultUrl(e),"string"==typeof e.hostname&&(this.hostname=e.hostname),this.shutdown=this.shutdown.bind(this),this._shutdownOnce=new eg(this._shutdown,this),this._concurrencyLimit="number"==typeof e.concurrencyLimit?e.concurrencyLimit:30,this.timeoutMillis="number"!=typeof(t=e.timeoutMillis)?(r=Number(null!==(i=ea().OTEL_EXPORTER_OTLP_TRACES_TIMEOUT)&&void 0!==i?i:ea().OTEL_EXPORTER_OTLP_TIMEOUT))<=0?ec(r,1e4):r:t<=0?ec(t,1e4):t,this.onInit(e)}return e.prototype.export=function(e,t){if(this._shutdownOnce.isCalled){t({code:C.FAILED,error:Error("Exporter has been shutdown")});return}if(this._sendingPromises.length>=this._concurrencyLimit){t({code:C.FAILED,error:Error("Concurrent export limit reached")});return}this._export(e).then(function(){t({code:C.SUCCESS})}).catch(function(e){t({code:C.FAILED,error:e})})},e.prototype._export=function(e){var t=this;return new Promise(function(i,r){try{el.debug("items to be sent",e),t.send(e,i,r)}catch(e){r(e)}})},e.prototype.shutdown=function(){return this._shutdownOnce.call()},e.prototype.forceFlush=function(){return Promise.all(this._sendingPromises).then(function(){})},e.prototype._shutdown=function(){return el.debug("shutdown started"),this.onShutdown(),this.forceFlush()},e}(),ef=(l=function(e,t){return(l=Object.setPrototypeOf||({__proto__:[]})instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw TypeError("Class extends value "+String(t)+" is not a constructor or null");function i(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}),ew=function(e){function t(t,i,r){var s=e.call(this,t)||this;return s.name="OTLPExporterError",s.data=r,s.code=i,s}return ef(t,e),t}(Error),ev=function(){return(ev=Object.assign||function(e){for(var t,i=1,r=arguments.length;i<r;i++)for(var s in t=arguments[i])Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s]);return e}).apply(this,arguments)},ey=function(e,t){var i="function"==typeof Symbol&&e[Symbol.iterator];if(!i)return e;var r,s,n=i.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(r=n.next()).done;)o.push(r.value)}catch(e){s={error:e}}finally{try{r&&!r.done&&(i=n.return)&&i.call(n)}finally{if(s)throw s.error}}return o},eb=(h=function(e,t){return(h=Object.setPrototypeOf||({__proto__:[]})instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw TypeError("Class extends value "+String(t)+" is not a constructor or null");function i(){this.constructor=e}h(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}),eC=function(e){function t(t){void 0===t&&(t={});var i,r,s=e.call(this,t)||this;return(s._useXHR=!1,s._useXHR=!!t.headers||"function"!=typeof navigator.sendBeacon,s._useXHR)?s._headers=Object.assign({},(void 0===(i=t.headers)&&(i={}),r={},Object.entries(i).forEach(function(e){var t=eh(e,2),i=t[0],s=t[1];void 0!==s?r[i]=String(s):el.warn('Header "'+i+'" has invalid value ('+s+") and will be ignored")}),r),Z(ea().OTEL_EXPORTER_OTLP_HEADERS)):s._headers={},s}return eb(t,e),t.prototype.onInit=function(){},t.prototype.onShutdown=function(){},t.prototype.send=function(e,t,i){var r=this;if(this._shutdownOnce.isCalled){el.debug("Shutdown already started. Cannot send objects");return}var s=JSON.stringify(this.convert(e)),n=new Promise(function(e,t){var i,n,o,a,l,h,c,u,d,p;r._useXHR?(i=r.url,n=r._headers,o=r.timeoutMillis,h=!1,c=setTimeout(function(){clearTimeout(a),h=!0,l.readyState===XMLHttpRequest.DONE?t(new ew("Request Timeout")):l.abort()},o),(u=function(r,o){void 0===r&&(r=5),void 0===o&&(o=1e3),(l=new XMLHttpRequest).open("POST",i),Object.entries(ev(ev({},{Accept:"application/json","Content-Type":"application/json"}),n)).forEach(function(e){var t=ey(e,2),i=t[0],r=t[1];l.setRequestHeader(i,r)}),l.send(s),l.onreadystatechange=function(){l.readyState===XMLHttpRequest.DONE&&!1===h&&(l.status>=200&&l.status<=299?(el.debug("xhr success",s),e(),clearTimeout(c),clearTimeout(a)):l.status&&[429,502,503,504].includes(l.status)&&r>0?(o*=1.5,a=setTimeout(function(){u(r-1,o)},l.getResponseHeader("Retry-After")?function(e){if(null==e)return -1;var t=Number.parseInt(e,10);if(Number.isInteger(t))return t>0?1e3*t:-1;var i=new Date(e).getTime()-Date.now();return i>=0?i:0}(l.getResponseHeader("Retry-After")):Math.round(Math.random()*(5e3-o)+o))):(t(new ew("Failed to export with XHR (status: "+l.status+")",l.status)),clearTimeout(c),clearTimeout(a)))},l.onabort=function(){h&&t(new ew("Request Timeout")),clearTimeout(c),clearTimeout(a)},l.onerror=function(){h&&t(new ew("Request Timeout")),clearTimeout(c),clearTimeout(a)}})()):(d=r.url,p={type:"application/json"},navigator.sendBeacon(d,new Blob([s],p))?(el.debug("sendBeacon - can send",s),e()):t(new ew("sendBeacon - cannot send "+s)))}).then(t,i);this._sendingPromises.push(n);var o=function(){var e=r._sendingPromises.indexOf(n);r._sendingPromises.splice(e,1)};n.then(o,o)},t}(em),eR=function(e,t){var i="function"==typeof Symbol&&e[Symbol.iterator];if(!i)return e;var r,s,n=i.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(r=n.next()).done;)o.push(r.value)}catch(e){s={error:e}}finally{try{r&&!r.done&&(i=n.return)&&i.call(n)}finally{if(s)throw s.error}}return o};function eS(e){return Object.keys(e).map(function(t){return function e(t,i){return{key:t,value:function t(i){var r=typeof i;return"string"===r?{stringValue:i}:"number"===r?Number.isInteger(i)?{intValue:i}:{doubleValue:i}:"boolean"===r?{boolValue:i}:i instanceof Uint8Array?{bytesValue:i}:Array.isArray(i)?{arrayValue:{values:i.map(t)}}:"object"===r&&null!=i?{kvlistValue:{values:Object.entries(i).map(function(t){var i=eR(t,2);return e(i[0],i[1])})}}:{}}(i)}}(t,e[t])})}var eP=performance;function eA(e){return[Math.trunc(e/1e3),Math.round(e%1e3*1e6)]}function ek(){var e=eP.timeOrigin;return"number"!=typeof e&&(e=eP.timing&&eP.timing.fetchStart),e}function eD(e){return Array.isArray(e)&&2===e.length&&"number"==typeof e[0]&&"number"==typeof e[1]}function eT(e){return eD(e)||"number"==typeof e||e instanceof Date}function e_(e,t){var i=[e[0]+t[0],e[1]+t[1]];return i[1]>=1e9&&(i[1]-=1e9,i[0]+=1),i}function eI(e){return e>=48&&e<=57?e-48:e>=97&&e<=102?e-87:e-55}function e$(e){for(var t=new Uint8Array(e.length/2),i=0,r=0;r<e.length;r+=2){var s=eI(e.charCodeAt(r)),n=eI(e.charCodeAt(r+1));t[i++]=s<<4|n}return t}function eE(e){var t=BigInt(1e9);return BigInt(e[0])*t+BigInt(e[1])}function eO(e){var t;return{low:Number(BigInt.asUintN(32,t=eE(e))),high:Number(BigInt.asUintN(32,t>>BigInt(32)))}}var ex="undefined"!=typeof BigInt?function(e){return eE(e).toString()}:function(e){return 1e9*e[0]+e[1]};function eF(e){return e}function eB(e){if(void 0!==e)return e$(e)}var eL={encodeHrTime:eO,encodeSpanContext:e$,encodeOptionalSpanContext:eB},eU=function(e){var t="function"==typeof Symbol&&Symbol.iterator,i=t&&e[t],r=0;if(i)return i.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},eW=function(e,t){var i="function"==typeof Symbol&&e[Symbol.iterator];if(!i)return e;var r,s,n=i.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(r=n.next()).done;)o.push(r.value)}catch(e){s={error:e}}finally{try{r&&!r.done&&(i=n.return)&&i.call(n)}finally{if(s)throw s.error}}return o},eq=(c=function(e,t){return(c=Object.setPrototypeOf||({__proto__:[]})instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw TypeError("Class extends value "+String(t)+" is not a constructor or null");function i(){this.constructor=e}c(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}),eM="v1/traces",eN="http://localhost:4318/"+eM,eH=function(e){function t(t){void 0===t&&(t={});var i=e.call(this,t)||this;return i._headers=Object.assign(i._headers,Z(ea().OTEL_EXPORTER_OTLP_TRACES_HEADERS)),i}return eq(t,e),t.prototype.convert=function(e){return{resourceSpans:function(e,t){for(var i=function(e){var t,i,r=new Map;try{for(var s=eU(e),n=s.next();!n.done;n=s.next()){var o=n.value,a=r.get(o.resource);a||(a=new Map,r.set(o.resource,a));var l=o.instrumentationLibrary.name+"@"+(o.instrumentationLibrary.version||"")+":"+(o.instrumentationLibrary.schemaUrl||""),h=a.get(l);h||(h=[],a.set(l,h)),h.push(o)}}catch(e){t={error:e}}finally{try{n&&!n.done&&(i=s.return)&&i.call(s)}finally{if(t)throw t.error}}return r}(e),r=[],s=i.entries(),n=s.next();!n.done;){for(var o=eW(n.value,2),a=o[0],l=o[1],h=[],c=l.values(),u=c.next();!u.done;){var d=u.value;if(d.length>0){var p=d[0].instrumentationLibrary,g=p.name,m=p.version,f=p.schemaUrl,w=d.map(function(e){return function(e,t){var i,r=e.spanContext(),s=e.status;return{traceId:t.encodeSpanContext(r.traceId),spanId:t.encodeSpanContext(r.spanId),parentSpanId:t.encodeOptionalSpanContext(e.parentSpanId),traceState:null===(i=r.traceState)||void 0===i?void 0:i.serialize(),name:e.name,kind:null==e.kind?0:e.kind+1,startTimeUnixNano:t.encodeHrTime(e.startTime),endTimeUnixNano:t.encodeHrTime(e.endTime),attributes:eS(e.attributes),droppedAttributesCount:e.droppedAttributesCount,events:e.events.map(function(e){return{attributes:e.attributes?eS(e.attributes):[],name:e.name,timeUnixNano:t.encodeHrTime(e.time),droppedAttributesCount:e.droppedAttributesCount||0}}),droppedEventsCount:e.droppedEventsCount,status:{code:s.code,message:s.message},links:e.links.map(function(e){return function(e,t){var i;return{attributes:e.attributes?eS(e.attributes):[],spanId:t.encodeSpanContext(e.context.spanId),traceId:t.encodeSpanContext(e.context.traceId),traceState:null===(i=e.context.traceState)||void 0===i?void 0:i.serialize(),droppedAttributesCount:e.droppedAttributesCount||0}}(e,t)}),droppedLinksCount:e.droppedLinksCount}}(e,t)});h.push({scope:{name:g,version:m},spans:w,schemaUrl:f})}u=c.next()}var v={resource:{attributes:eS(a.attributes),droppedAttributesCount:0},scopeSpans:h,schemaUrl:void 0};r.push(v),n=s.next()}return r}(e,function(e){if(void 0===e)return eL;var t,i,r=null===(t=e.useLongBits)||void 0===t||t,s=null!==(i=e.useHex)&&void 0!==i&&i;return{encodeHrTime:r?eO:ex,encodeSpanContext:s?eF:e$,encodeOptionalSpanContext:s?eF:eB}}({useHex:!0,useLongBits:!1}))}},t.prototype.getDefaultUrl=function(e){var t;return"string"==typeof e.url?e.url:ea().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT.length>0?function(e){try{var t=new URL(e);return""===t.pathname&&(t.pathname=t.pathname+"/"),t.toString()}catch(t){return el.warn("Could not parse export URL: '"+e+"'"),e}}(ea().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT):ea().OTEL_EXPORTER_OTLP_ENDPOINT.length>0?((t=ea().OTEL_EXPORTER_OTLP_ENDPOINT).endsWith("/")||(t+="/"),t+eM):eN},t}(eC);function eG(e){for(var t={},i=e.length,r=0;r<i;r++){var s=e[r];s&&(t[String(s).toUpperCase().replace(/[-.]/g,"_")]=s)}return t}var eV="deployment.environment",eQ="device.id",ej="os.type",ez="service.name",eY="service.version",eK=eG(["cloud.provider","cloud.account.id","cloud.region","cloud.availability_zone","cloud.platform","aws.ecs.container.arn","aws.ecs.cluster.arn","aws.ecs.launchtype","aws.ecs.task.arn","aws.ecs.task.family","aws.ecs.task.revision","aws.eks.cluster.arn","aws.log.group.names","aws.log.group.arns","aws.log.stream.names","aws.log.stream.arns","container.name","container.id","container.runtime","container.image.name","container.image.tag",eV,eQ,"device.model.identifier","device.model.name","faas.name","faas.id","faas.version","faas.instance","faas.max_memory","host.id","host.name","host.type","host.arch","host.image.name","host.image.id","host.image.version","k8s.cluster.name","k8s.node.name","k8s.node.uid","k8s.namespace.name","k8s.pod.uid","k8s.pod.name","k8s.container.name","k8s.replicaset.uid","k8s.replicaset.name","k8s.deployment.uid","k8s.deployment.name","k8s.statefulset.uid","k8s.statefulset.name","k8s.daemonset.uid","k8s.daemonset.name","k8s.job.uid","k8s.job.name","k8s.cronjob.uid","k8s.cronjob.name",ej,"os.description","os.name","os.version","process.pid","process.executable.name","process.executable.path","process.command","process.command_line","process.command_args","process.owner","process.runtime.name","process.runtime.version","process.runtime.description",ez,"service.namespace","service.instance.id",eY,"telemetry.sdk.name","telemetry.sdk.language","telemetry.sdk.version","telemetry.auto.version","webengine.name","webengine.version","webengine.description"]),eJ=eG(["cpp","dotnet","erlang","go","java","nodejs","php","python","ruby","webjs"]),eZ=((R={})[eK.TELEMETRY_SDK_NAME]="opentelemetry",R[eK.PROCESS_RUNTIME_NAME]="browser",R[eK.TELEMETRY_SDK_LANGUAGE]=eJ.WEBJS,R[eK.TELEMETRY_SDK_VERSION]="1.23.0",R),eX=function(){return(eX=Object.assign||function(e){for(var t,i=1,r=arguments.length;i<r;i++)for(var s in t=arguments[i])Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s]);return e}).apply(this,arguments)},e0=function(e,t){var i,r,s,n,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return n={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function a(n){return function(a){return function(n){if(i)throw TypeError("Generator is already executing.");for(;o;)try{if(i=1,r&&(s=2&n[0]?r.return:n[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,n[1])).done)return s;switch(r=0,s&&(n=[2&n[0],s.value]),n[0]){case 0:case 1:s=n;break;case 4:return o.label++,{value:n[1],done:!1};case 5:o.label++,r=n[1],n=[0];continue;case 7:n=o.ops.pop(),o.trys.pop();continue;default:if(!(s=(s=o.trys).length>0&&s[s.length-1])&&(6===n[0]||2===n[0])){o=0;continue}if(3===n[0]&&(!s||n[1]>s[0]&&n[1]<s[3])){o.label=n[1];break}if(6===n[0]&&o.label<s[1]){o.label=s[1],s=n;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(n);break}s[2]&&o.ops.pop(),o.trys.pop();continue}n=t.call(e,o)}catch(e){n=[6,e],r=0}finally{i=s=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,a])}}},e1=function(e,t){var i="function"==typeof Symbol&&e[Symbol.iterator];if(!i)return e;var r,s,n=i.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(r=n.next()).done;)o.push(r.value)}catch(e){s={error:e}}finally{try{r&&!r.done&&(i=n.return)&&i.call(n)}finally{if(s)throw s.error}}return o},e2=function(){function e(e,t){var i,r=this;this._attributes=e,this.asyncAttributesPending=null!=t,this._syncAttributes=null!==(i=this._attributes)&&void 0!==i?i:{},this._asyncAttributesPromise=null==t?void 0:t.then(function(e){return r._attributes=Object.assign({},r._attributes,e),r.asyncAttributesPending=!1,e},function(e){return el.debug("a resource's async attributes promise rejected: %s",e),r.asyncAttributesPending=!1,{}})}return e.empty=function(){return e.EMPTY},e.default=function(){var t;return new e(((t={})[eK.SERVICE_NAME]="unknown_service",t[eK.TELEMETRY_SDK_LANGUAGE]=eZ[eK.TELEMETRY_SDK_LANGUAGE],t[eK.TELEMETRY_SDK_NAME]=eZ[eK.TELEMETRY_SDK_NAME],t[eK.TELEMETRY_SDK_VERSION]=eZ[eK.TELEMETRY_SDK_VERSION],t))},Object.defineProperty(e.prototype,"attributes",{get:function(){var e;return this.asyncAttributesPending&&el.error("Accessing resource attributes before async attributes settled"),null!==(e=this._attributes)&&void 0!==e?e:{}},enumerable:!1,configurable:!0}),e.prototype.waitForAsyncAttributes=function(){var e,t,i,r;return e=this,t=void 0,i=void 0,r=function(){return e0(this,function(e){switch(e.label){case 0:if(!this.asyncAttributesPending)return[3,2];return[4,this._asyncAttributesPromise];case 1:e.sent(),e.label=2;case 2:return[2]}})},new(i||(i=Promise))(function(s,n){function o(e){try{l(r.next(e))}catch(e){n(e)}}function a(e){try{l(r.throw(e))}catch(e){n(e)}}function l(e){var t;e.done?s(e.value):((t=e.value)instanceof i?t:new i(function(e){e(t)})).then(o,a)}l((r=r.apply(e,t||[])).next())})},e.prototype.merge=function(t){var i,r=this;if(!t)return this;var s=eX(eX({},this._syncAttributes),null!==(i=t._syncAttributes)&&void 0!==i?i:t.attributes);return this._asyncAttributesPromise||t._asyncAttributesPromise?new e(s,Promise.all([this._asyncAttributesPromise,t._asyncAttributesPromise]).then(function(e){var i,s=e1(e,2),n=s[0],o=s[1];return eX(eX(eX(eX({},r._syncAttributes),n),null!==(i=t._syncAttributes)&&void 0!==i?i:t.attributes),o)})):new e(s)},e.EMPTY=new e({}),e}();function e3(e){return Symbol.for(e)}var e4=new function e(t){var i=this;i._currentContext=t?new Map(t):new Map,i.getValue=function(e){return i._currentContext.get(e)},i.setValue=function(t,r){var s=new e(i._currentContext);return s._currentContext.set(t,r),s},i.deleteValue=function(t){var r=new e(i._currentContext);return r._currentContext.delete(t),r}},e8=function(e,t){var i="function"==typeof Symbol&&e[Symbol.iterator];if(!i)return e;var r,s,n=i.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(r=n.next()).done;)o.push(r.value)}catch(e){s={error:e}}finally{try{r&&!r.done&&(i=n.return)&&i.call(n)}finally{if(s)throw s.error}}return o},e5=function(e,t,i){if(i||2==arguments.length)for(var r,s=0,n=t.length;s<n;s++)!r&&s in t||(r||(r=Array.prototype.slice.call(t,0,s)),r[s]=t[s]);return e.concat(r||Array.prototype.slice.call(t))},e7=function(){function e(){}return e.prototype.active=function(){return e4},e.prototype.with=function(e,t,i){for(var r=[],s=3;s<arguments.length;s++)r[s-3]=arguments[s];return t.call.apply(t,e5([i],e8(r),!1))},e.prototype.bind=function(e,t){return t},e.prototype.enable=function(){return this},e.prototype.disable=function(){return this},e}(),e9=function(e,t){var i="function"==typeof Symbol&&e[Symbol.iterator];if(!i)return e;var r,s,n=i.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(r=n.next()).done;)o.push(r.value)}catch(e){s={error:e}}finally{try{r&&!r.done&&(i=n.return)&&i.call(n)}finally{if(s)throw s.error}}return o},e6=function(e,t,i){if(i||2==arguments.length)for(var r,s=0,n=t.length;s<n;s++)!r&&s in t||(r||(r=Array.prototype.slice.call(t,0,s)),r[s]=t[s]);return e.concat(r||Array.prototype.slice.call(t))},te="context",tt=new e7,ti=function(){function e(){}return e.getInstance=function(){return this._instance||(this._instance=new e),this._instance},e.prototype.setGlobalContextManager=function(e){return O(te,e,N.instance())},e.prototype.active=function(){return this._getContextManager().active()},e.prototype.with=function(e,t,i){for(var r,s=[],n=3;n<arguments.length;n++)s[n-3]=arguments[n];return(r=this._getContextManager()).with.apply(r,e6([e,t,i],e9(s),!1))},e.prototype.bind=function(e,t){return this._getContextManager().bind(e,t)},e.prototype._getContextManager=function(){return x(te)||tt},e.prototype.disable=function(){this._getContextManager().disable(),F(te,N.instance())},e}();(u=S||(S={}))[u.NONE=0]="NONE",u[u.SAMPLED=1]="SAMPLED";var tr="0000000000000000",ts="00000000000000000000000000000000",tn={traceId:ts,spanId:tr,traceFlags:S.NONE},to=function(){function e(e){void 0===e&&(e=tn),this._spanContext=e}return e.prototype.spanContext=function(){return this._spanContext},e.prototype.setAttribute=function(e,t){return this},e.prototype.setAttributes=function(e){return this},e.prototype.addEvent=function(e,t){return this},e.prototype.setStatus=function(e){return this},e.prototype.updateName=function(e){return this},e.prototype.end=function(e){},e.prototype.isRecording=function(){return!1},e.prototype.recordException=function(e,t){},e}(),ta=e3("OpenTelemetry Context Key SPAN");function tl(e){return e.getValue(ta)||void 0}function th(){return tl(ti.getInstance().active())}function tc(e,t){return e.setValue(ta,t)}function tu(e){return e.deleteValue(ta)}function td(e,t){return tc(e,new to(t))}function tp(e){var t;return null===(t=tl(e))||void 0===t?void 0:t.spanContext()}var tg=/^([0-9a-f]{32})$/i,tm=/^[0-9a-f]{16}$/i;function tf(e){return tg.test(e)&&e!==ts}function tw(e){var t;return tf(e.traceId)&&(t=e.spanId,tm.test(t)&&t!==tr)}function tv(e){return new to(e)}var ty=ti.getInstance(),tb=function(){function e(){}return e.prototype.startSpan=function(e,t,i){if(void 0===i&&(i=ty.active()),null==t?void 0:t.root)return new to;var r=i&&tp(i);return"object"==typeof r&&"string"==typeof r.spanId&&"string"==typeof r.traceId&&"number"==typeof r.traceFlags&&tw(r)?new to(r):new to},e.prototype.startActiveSpan=function(e,t,i,r){if(!(arguments.length<2)){2==arguments.length?o=t:3==arguments.length?(s=t,o=i):(s=t,n=i,o=r);var s,n,o,a=null!=n?n:ty.active(),l=this.startSpan(e,s,a),h=tc(a,l);return ty.with(h,o,void 0,l)}},e}(),tC=new tb,tR=function(){function e(e,t,i,r){this._provider=e,this.name=t,this.version=i,this.options=r}return e.prototype.startSpan=function(e,t,i){return this._getTracer().startSpan(e,t,i)},e.prototype.startActiveSpan=function(e,t,i,r){var s=this._getTracer();return Reflect.apply(s.startActiveSpan,s,arguments)},e.prototype._getTracer=function(){if(this._delegate)return this._delegate;var e=this._provider.getDelegateTracer(this.name,this.version,this.options);return e?(this._delegate=e,this._delegate):tC},e}(),tS=new(function(){function e(){}return e.prototype.getTracer=function(e,t,i){return new tb},e}()),tP=function(){function e(){}return e.prototype.getTracer=function(e,t,i){var r;return null!==(r=this.getDelegateTracer(e,t,i))&&void 0!==r?r:new tR(this,e,t,i)},e.prototype.getDelegate=function(){var e;return null!==(e=this._delegate)&&void 0!==e?e:tS},e.prototype.setDelegate=function(e){this._delegate=e},e.prototype.getDelegateTracer=function(e,t,i){var r;return null===(r=this._delegate)||void 0===r?void 0:r.getTracer(e,t,i)},e}(),tA="trace",tk=(function(){function e(){this._proxyTracerProvider=new tP,this.wrapSpanContext=tv,this.isSpanContextValid=tw,this.deleteSpan=tu,this.getSpan=tl,this.getActiveSpan=th,this.getSpanContext=tp,this.setSpan=tc,this.setSpanContext=td}return e.getInstance=function(){return this._instance||(this._instance=new e),this._instance},e.prototype.setGlobalTracerProvider=function(e){var t=O(tA,this._proxyTracerProvider,N.instance());return t&&this._proxyTracerProvider.setDelegate(e),t},e.prototype.getTracerProvider=function(){return x(tA)||this._proxyTracerProvider},e.prototype.getTracer=function(e,t){return this.getTracerProvider().getTracer(e,t)},e.prototype.disable=function(){F(tA,N.instance()),this._proxyTracerProvider=new tP},e})().getInstance(),tD=ti.getInstance(),tT=function(){function e(){}return e.prototype.inject=function(e,t){},e.prototype.extract=function(e,t){return e},e.prototype.fields=function(){return[]},e}(),t_={get:function(e,t){if(null!=e)return e[t]},keys:function(e){return null==e?[]:Object.keys(e)}},tI={set:function(e,t,i){null!=e&&(e[t]=i)}},t$=e3("OpenTelemetry Baggage Key");function tE(e){return e.getValue(t$)||void 0}function tO(){return tE(ti.getInstance().active())}function tx(e,t){return e.setValue(t$,t)}function tF(e){return e.deleteValue(t$)}var tB="propagation",tL=new tT,tU=(function(){function e(){this.createBaggage=z,this.getBaggage=tE,this.getActiveBaggage=tO,this.setBaggage=tx,this.deleteBaggage=tF}return e.getInstance=function(){return this._instance||(this._instance=new e),this._instance},e.prototype.setGlobalPropagator=function(e){return O(tB,e,N.instance())},e.prototype.inject=function(e,t,i){return void 0===i&&(i=tI),this._getGlobalPropagator().inject(e,t,i)},e.prototype.extract=function(e,t,i){return void 0===i&&(i=t_),this._getGlobalPropagator().extract(e,t,i)},e.prototype.fields=function(){return this._getGlobalPropagator().fields()},e.prototype.disable=function(){F(tB,N.instance())},e.prototype._getGlobalPropagator=function(){return x(tB)||tL},e})().getInstance(),tW=Function.prototype.toString,tq=tW.call(Object),tM=(r=Object.getPrototypeOf,s=Object,function(e){return r(s(e))}),tN=Object.prototype,tH=tN.hasOwnProperty,tG=Symbol?Symbol.toStringTag:void 0,tV=tN.toString;function tQ(e){if(!(null!=e&&"object"==typeof e)||"[object Object]"!==(null==e?void 0===e?"[object Undefined]":"[object Null]":tG&&tG in Object(e)?function(e){var t=tH.call(e,tG),i=e[tG],r=!1;try{e[tG]=void 0,r=!0}catch(e){}var s=tV.call(e);return r&&(t?e[tG]=i:delete e[tG]),s}(e):tV.call(e)))return!1;var t=tM(e);if(null===t)return!0;var i=tH.call(t,"constructor")&&t.constructor;return"function"==typeof i&&i instanceof i&&tW.call(i)===tq}function tj(e){return tY(e)?e.slice():e}function tz(e,t,i){for(var r=i.get(e[t])||[],s=0,n=r.length;s<n;s++){var o=r[s];if(o.key===t&&o.obj===e)return!0}return!1}function tY(e){return Array.isArray(e)}function tK(e){return"function"==typeof e}function tJ(e){return!tZ(e)&&!tY(e)&&!tK(e)&&"object"==typeof e}function tZ(e){return"string"==typeof e||"number"==typeof e||"boolean"==typeof e||void 0===e||e instanceof Date||e instanceof RegExp||null===e}var tX=function(e){var t="function"==typeof Symbol&&Symbol.iterator,i=t&&e[t],r=0;if(i)return i.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},t0=function(){function e(e){var t;void 0===e&&(e={}),this._propagators=null!==(t=e.propagators)&&void 0!==t?t:[],this._fields=Array.from(new Set(this._propagators.map(function(e){return"function"==typeof e.fields?e.fields():[]}).reduce(function(e,t){return e.concat(t)},[])))}return e.prototype.inject=function(e,t,i){var r,s;try{for(var n=tX(this._propagators),o=n.next();!o.done;o=n.next()){var a=o.value;try{a.inject(e,t,i)}catch(e){el.warn("Failed to inject with "+a.constructor.name+". Err: "+e.message)}}}catch(e){r={error:e}}finally{try{o&&!o.done&&(s=n.return)&&s.call(n)}finally{if(r)throw r.error}}},e.prototype.extract=function(e,t,i){return this._propagators.reduce(function(e,r){try{return r.extract(e,t,i)}catch(e){el.warn("Failed to inject with "+r.constructor.name+". Err: "+e.message)}return e},e)},e.prototype.fields=function(){return this._fields.slice()},e}(),t1=e3("OpenTelemetry SDK Context Key SUPPRESS_TRACING");function t2(e){return e.setValue(t1,!0)}function t3(e){return!0===e.getValue(t1)}var t4="[_0-9a-z-*/]",t8=RegExp("^(?:[a-z]"+t4+"{0,255}|"+("[a-z0-9]"+t4)+"{0,240}@[a-z]"+t4+"{0,13})$"),t5=/^[ -~]{0,255}[!-~]$/,t7=/,|=/,t9=function(){function e(e){this._internalState=new Map,e&&this._parse(e)}return e.prototype.set=function(e,t){var i=this._clone();return i._internalState.has(e)&&i._internalState.delete(e),i._internalState.set(e,t),i},e.prototype.unset=function(e){var t=this._clone();return t._internalState.delete(e),t},e.prototype.get=function(e){return this._internalState.get(e)},e.prototype.serialize=function(){var e=this;return this._keys().reduce(function(t,i){return t.push(i+"="+e.get(i)),t},[]).join(",")},e.prototype._parse=function(e){!(e.length>512)&&(this._internalState=e.split(",").reverse().reduce(function(e,t){var i=t.trim(),r=i.indexOf("=");if(-1!==r){var s=i.slice(0,r),n=i.slice(r+1,t.length);t8.test(s)&&t5.test(n)&&!t7.test(n)&&e.set(s,n)}return e},new Map),this._internalState.size>32&&(this._internalState=new Map(Array.from(this._internalState.entries()).reverse().slice(0,32))))},e.prototype._keys=function(){return Array.from(this._internalState.keys()).reverse()},e.prototype._clone=function(){var t=new e;return t._internalState=new Map(this._internalState),t},e}(),t6="traceparent",ie="tracestate",it=RegExp("^\\s?((?!ff)[\\da-f]{2})-((?![0]{32})[\\da-f]{32})-((?![0]{16})[\\da-f]{16})-([\\da-f]{2})(-.*)?\\s?$"),ii=function(){function e(){}return e.prototype.inject=function(e,t,i){var r=tk.getSpanContext(e);if(!(!r||t3(e))&&tw(r)){var s="00-"+r.traceId+"-"+r.spanId+"-0"+Number(r.traceFlags||S.NONE).toString(16);i.set(t,t6,s),r.traceState&&i.set(t,ie,r.traceState.serialize())}},e.prototype.extract=function(e,t,i){var r,s=i.get(t,t6);if(!s)return e;var n=Array.isArray(s)?s[0]:s;if("string"!=typeof n)return e;var o=(r=it.exec(n))&&("00"!==r[1]||!r[5])?{traceId:r[2],spanId:r[3],traceFlags:parseInt(r[4],16)}:null;if(!o)return e;o.isRemote=!0;var a=i.get(t,ie);if(a){var l=Array.isArray(a)?a.join(","):a;o.traceState=new t9("string"==typeof l?l:void 0)}return tk.setSpanContext(e,o)},e.prototype.fields=function(){return[t6,ie]},e}(),ir=function(){function e(){}return e.prototype.inject=function(e,t,i){var r=tU.getBaggage(e);if(!(!r||t3(e))){var s=r.getAllEntries().map(function(e){var t=K(e,2),i=t[0],r=t[1],s=encodeURIComponent(i)+"="+encodeURIComponent(r.value);return void 0!==r.metadata&&(s+=";"+r.metadata.toString()),s}).filter(function(e){return e.length<=4096}).slice(0,180).reduce(function(e,t){var i=""+e+(""!==e?",":"")+t;return i.length>8192?e:i},"");s.length>0&&i.set(t,Y,s)}},e.prototype.extract=function(e,t,i){var r=i.get(t,Y),s=Array.isArray(r)?r.join(","):r;if(!s)return e;var n={};return 0===s.length?e:(s.split(",").forEach(function(e){var t=J(e);if(t){var i={value:t.value};t.metadata&&(i.metadata=t.metadata),n[t.key]=i}}),0===Object.entries(n).length)?e:tU.setBaggage(e,tU.createBaggage(n))},e.prototype.fields=function(){return[Y]},e}();(d=P||(P={}))[d.NOT_RECORD=0]="NOT_RECORD",d[d.RECORD=1]="RECORD",d[d.RECORD_AND_SAMPLED=2]="RECORD_AND_SAMPLED";var is=function(e){var t="function"==typeof Symbol&&Symbol.iterator,i=t&&e[t],r=0;if(i)return i.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},io=function(e,t){var i="function"==typeof Symbol&&e[Symbol.iterator];if(!i)return e;var r,s,n=i.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(r=n.next()).done;)o.push(r.value)}catch(e){s={error:e}}finally{try{r&&!r.done&&(i=n.return)&&i.call(n)}finally{if(s)throw s.error}}return o};function ia(e){var t,i,r={};if("object"!=typeof e||null==e)return r;try{for(var s=is(Object.entries(e)),n=s.next();!n.done;n=s.next()){var o=io(n.value,2),a=o[0],l=o[1];if("string"!=typeof a||!(a.length>0)){el.warn("Invalid attribute key: "+a);continue}if(!il(l)){el.warn("Invalid attribute value set for key: "+a);continue}Array.isArray(l)?r[a]=l.slice():r[a]=l}}catch(e){t={error:e}}finally{try{n&&!n.done&&(i=s.return)&&i.call(s)}finally{if(t)throw t.error}}return r}function il(e){return null==e||(Array.isArray(e)?function(e){try{for(var t,i,r,s=is(e),n=s.next();!n.done;n=s.next()){var o=n.value;if(null!=o){if(!r){if(ih(o)){r=typeof o;continue}return!1}if(typeof o===r)continue;return!1}}}catch(e){t={error:e}}finally{try{n&&!n.done&&(i=s.return)&&i.call(s)}finally{if(t)throw t.error}}return!0}(e):ih(e))}function ih(e){switch(typeof e){case"number":case"boolean":case"string":return!0}return!1}(p=A||(A={}))[p.UNSET=0]="UNSET",p[p.OK=1]="OK",p[p.ERROR=2]="ERROR";var ic=eG(["aws.lambda.invoked_arn","db.system","db.connection_string","db.user","db.jdbc.driver_classname","db.name","db.statement","db.operation","db.mssql.instance_name","db.cassandra.keyspace","db.cassandra.page_size","db.cassandra.consistency_level","db.cassandra.table","db.cassandra.idempotence","db.cassandra.speculative_execution_count","db.cassandra.coordinator.id","db.cassandra.coordinator.dc","db.hbase.namespace","db.redis.database_index","db.mongodb.collection","db.sql.table","exception.type","exception.message","exception.stacktrace","exception.escaped","faas.trigger","faas.execution","faas.document.collection","faas.document.operation","faas.document.time","faas.document.name","faas.time","faas.cron","faas.coldstart","faas.invoked_name","faas.invoked_provider","faas.invoked_region","net.transport","net.peer.ip","net.peer.port","net.peer.name","net.host.ip","net.host.port","net.host.name","net.host.connection.type","net.host.connection.subtype","net.host.carrier.name","net.host.carrier.mcc","net.host.carrier.mnc","net.host.carrier.icc","peer.service","enduser.id","enduser.role","enduser.scope","thread.id","thread.name","code.function","code.namespace","code.filepath","code.lineno","http.method","http.url","http.target","http.host","http.scheme","http.status_code","http.flavor","http.user_agent","http.request_content_length","http.request_content_length_uncompressed","http.response_content_length","http.response_content_length_uncompressed","http.server_name","http.route","http.client_ip","aws.dynamodb.table_names","aws.dynamodb.consumed_capacity","aws.dynamodb.item_collection_metrics","aws.dynamodb.provisioned_read_capacity","aws.dynamodb.provisioned_write_capacity","aws.dynamodb.consistent_read","aws.dynamodb.projection","aws.dynamodb.limit","aws.dynamodb.attributes_to_get","aws.dynamodb.index_name","aws.dynamodb.select","aws.dynamodb.global_secondary_indexes","aws.dynamodb.local_secondary_indexes","aws.dynamodb.exclusive_start_table","aws.dynamodb.table_count","aws.dynamodb.scan_forward","aws.dynamodb.segment","aws.dynamodb.total_segments","aws.dynamodb.count","aws.dynamodb.scanned_count","aws.dynamodb.attribute_definitions","aws.dynamodb.global_secondary_index_updates","messaging.system","messaging.destination","messaging.destination_kind","messaging.temp_destination","messaging.protocol","messaging.protocol_version","messaging.url","messaging.message_id","messaging.conversation_id","messaging.message_payload_size_bytes","messaging.message_payload_compressed_size_bytes","messaging.operation","messaging.consumer_id","messaging.rabbitmq.routing_key","messaging.kafka.message_key","messaging.kafka.consumer_group","messaging.kafka.client_id","messaging.kafka.partition","messaging.kafka.tombstone","rpc.system","rpc.service","rpc.method","rpc.grpc.status_code","rpc.jsonrpc.version","rpc.jsonrpc.request_id","rpc.jsonrpc.error_code","rpc.jsonrpc.error_message","message.type","message.id","message.compressed_size","message.uncompressed_size"]),iu=function(e){var t="function"==typeof Symbol&&Symbol.iterator,i=t&&e[t],r=0;if(i)return i.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},id=function(e,t){var i="function"==typeof Symbol&&e[Symbol.iterator];if(!i)return e;var r,s,n=i.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(r=n.next()).done;)o.push(r.value)}catch(e){s={error:e}}finally{try{r&&!r.done&&(i=n.return)&&i.call(n)}finally{if(s)throw s.error}}return o},ip=function(){function e(e,t,i,r,s,n,o,a,l,h){void 0===o&&(o=[]),this.attributes={},this.links=[],this.events=[],this._droppedAttributesCount=0,this._droppedEventsCount=0,this._droppedLinksCount=0,this.status={code:A.UNSET},this.endTime=[0,0],this._ended=!1,this._duration=[-1,-1],this.name=i,this._spanContext=r,this.parentSpanId=n,this.kind=s,this.links=o;var c=Date.now();this._performanceStartTime=eP.now(),this._performanceOffset=c-(this._performanceStartTime+ek()),this._startTimeProvided=null!=a,this.startTime=this._getTime(null!=a?a:c),this.resource=e.resource,this.instrumentationLibrary=e.instrumentationLibrary,this._spanLimits=e.getSpanLimits(),this._attributeValueLengthLimit=this._spanLimits.attributeValueLengthLimit||0,null!=h&&this.setAttributes(h),this._spanProcessor=e.getActiveSpanProcessor(),this._spanProcessor.onStart(this,t)}return e.prototype.spanContext=function(){return this._spanContext},e.prototype.setAttribute=function(e,t){return null==t||this._isSpanEnded()||(0===e.length?el.warn("Invalid attribute key: "+e):il(t)?Object.keys(this.attributes).length>=this._spanLimits.attributeCountLimit&&!Object.prototype.hasOwnProperty.call(this.attributes,e)?this._droppedAttributesCount++:this.attributes[e]=this._truncateToSize(t):el.warn("Invalid attribute value set for key: "+e)),this},e.prototype.setAttributes=function(e){var t,i;try{for(var r=iu(Object.entries(e)),s=r.next();!s.done;s=r.next()){var n=id(s.value,2),o=n[0],a=n[1];this.setAttribute(o,a)}}catch(e){t={error:e}}finally{try{s&&!s.done&&(i=r.return)&&i.call(r)}finally{if(t)throw t.error}}return this},e.prototype.addEvent=function(e,t,i){if(this._isSpanEnded())return this;if(0===this._spanLimits.eventCountLimit)return el.warn("No events allowed."),this._droppedEventsCount++,this;this.events.length>=this._spanLimits.eventCountLimit&&(0===this._droppedEventsCount&&el.debug("Dropping extra events."),this.events.shift(),this._droppedEventsCount++),eT(t)&&(eT(i)||(i=t),t=void 0);var r=ia(t);return this.events.push({name:e,attributes:r,time:this._getTime(i),droppedAttributesCount:0}),this},e.prototype.setStatus=function(e){return this._isSpanEnded()||(this.status=e),this},e.prototype.updateName=function(e){return this._isSpanEnded()||(this.name=e),this},e.prototype.end=function(e){var t,i,r,s;if(this._isSpanEnded()){el.error(this.name+" "+this._spanContext.traceId+"-"+this._spanContext.spanId+" - You can only call end() on a span once.");return}this._ended=!0,this.endTime=this._getTime(e),this._duration=(t=this.startTime,r=(i=this.endTime)[0]-t[0],(s=i[1]-t[1])<0&&(r-=1,s+=1e9),[r,s]),this._duration[0]<0&&(el.warn("Inconsistent start and end time, startTime > endTime. Setting span duration to 0ms.",this.startTime,this.endTime),this.endTime=this.startTime.slice(),this._duration=[0,0]),this._droppedEventsCount>0&&el.warn("Dropped "+this._droppedEventsCount+" events because eventCountLimit reached"),this._spanProcessor.onEnd(this)},e.prototype._getTime=function(e){if("number"==typeof e&&e<eP.now()){var t;return t=e+this._performanceOffset,e_(eA(ek()),eA("number"==typeof t?t:eP.now()))}if("number"==typeof e)return eA(e);if(e instanceof Date)return eA(e.getTime());if(eD(e))return e;if(this._startTimeProvided)return eA(Date.now());var i=eP.now()-this._performanceStartTime;return e_(this.startTime,eA(i))},e.prototype.isRecording=function(){return!1===this._ended},e.prototype.recordException=function(e,t){var i={};"string"==typeof e?i[ic.EXCEPTION_MESSAGE]=e:e&&(e.code?i[ic.EXCEPTION_TYPE]=e.code.toString():e.name&&(i[ic.EXCEPTION_TYPE]=e.name),e.message&&(i[ic.EXCEPTION_MESSAGE]=e.message),e.stack&&(i[ic.EXCEPTION_STACKTRACE]=e.stack)),i[ic.EXCEPTION_TYPE]||i[ic.EXCEPTION_MESSAGE]?this.addEvent("exception",i,t):el.warn("Failed to record an exception "+e)},Object.defineProperty(e.prototype,"duration",{get:function(){return this._duration},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"ended",{get:function(){return this._ended},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"droppedAttributesCount",{get:function(){return this._droppedAttributesCount},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"droppedEventsCount",{get:function(){return this._droppedEventsCount},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"droppedLinksCount",{get:function(){return this._droppedLinksCount},enumerable:!1,configurable:!0}),e.prototype._isSpanEnded=function(){return this._ended&&el.warn("Can not execute the operation on ended Span {traceId: "+this._spanContext.traceId+", spanId: "+this._spanContext.spanId+"}"),this._ended},e.prototype._truncateToLimitUtil=function(e,t){return e.length<=t?e:e.substr(0,t)},e.prototype._truncateToSize=function(e){var t=this,i=this._attributeValueLengthLimit;return i<=0?(el.warn("Attribute value limit must be positive, got "+i),e):"string"==typeof e?this._truncateToLimitUtil(e,i):Array.isArray(e)?e.map(function(e){return"string"==typeof e?t._truncateToLimitUtil(e,i):e}):e},e}();(g=k||(k={}))[g.NOT_RECORD=0]="NOT_RECORD",g[g.RECORD=1]="RECORD",g[g.RECORD_AND_SAMPLED=2]="RECORD_AND_SAMPLED";var ig=function(){function e(){}return e.prototype.shouldSample=function(){return{decision:k.NOT_RECORD}},e.prototype.toString=function(){return"AlwaysOffSampler"},e}(),im=function(){function e(){}return e.prototype.shouldSample=function(){return{decision:k.RECORD_AND_SAMPLED}},e.prototype.toString=function(){return"AlwaysOnSampler"},e}(),iw=function(e){el.error("string"==typeof e?e:JSON.stringify(function(e){for(var t={},i=e;null!==i;)Object.getOwnPropertyNames(i).forEach(function(e){if(!t[e]){var r=i[e];r&&(t[e]=String(r))}}),i=Object.getPrototypeOf(i);return t}(e)))};function iv(e){try{iw(e)}catch(e){}}var iy=function(){function e(e){var t,i,r,s;this._root=e.root,this._root||(iv(Error("ParentBasedSampler must have a root sampler configured")),this._root=new im),this._remoteParentSampled=null!==(t=e.remoteParentSampled)&&void 0!==t?t:new im,this._remoteParentNotSampled=null!==(i=e.remoteParentNotSampled)&&void 0!==i?i:new ig,this._localParentSampled=null!==(r=e.localParentSampled)&&void 0!==r?r:new im,this._localParentNotSampled=null!==(s=e.localParentNotSampled)&&void 0!==s?s:new ig}return e.prototype.shouldSample=function(e,t,i,r,s,n){var o=tk.getSpanContext(e);return o&&tw(o)?o.isRemote?o.traceFlags&S.SAMPLED?this._remoteParentSampled.shouldSample(e,t,i,r,s,n):this._remoteParentNotSampled.shouldSample(e,t,i,r,s,n):o.traceFlags&S.SAMPLED?this._localParentSampled.shouldSample(e,t,i,r,s,n):this._localParentNotSampled.shouldSample(e,t,i,r,s,n):this._root.shouldSample(e,t,i,r,s,n)},e.prototype.toString=function(){return"ParentBased{root="+this._root.toString()+", remoteParentSampled="+this._remoteParentSampled.toString()+", remoteParentNotSampled="+this._remoteParentNotSampled.toString()+", localParentSampled="+this._localParentSampled.toString()+", localParentNotSampled="+this._localParentNotSampled.toString()+"}"},e}(),ib=function(){function e(e){void 0===e&&(e=0),this._ratio=e,this._ratio=this._normalize(e),this._upperBound=Math.floor(4294967295*this._ratio)}return e.prototype.shouldSample=function(e,t){return{decision:tf(t)&&this._accumulate(t)<this._upperBound?k.RECORD_AND_SAMPLED:k.NOT_RECORD}},e.prototype.toString=function(){return"TraceIdRatioBased{"+this._ratio+"}"},e.prototype._normalize=function(e){return"number"!=typeof e||isNaN(e)?0:e>=1?1:e<=0?0:e},e.prototype._accumulate=function(e){for(var t=0,i=0;i<e.length/8;i++){var r=8*i;t=(t^parseInt(e.slice(r,r+8),16))>>>0}return t},e}(),iC=ea(),iR=b.AlwaysOn;function iS(){return{sampler:iP(iC),forceFlushTimeoutMillis:3e4,generalLimits:{attributeValueLengthLimit:ea().OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT,attributeCountLimit:ea().OTEL_ATTRIBUTE_COUNT_LIMIT},spanLimits:{attributeValueLengthLimit:ea().OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,attributeCountLimit:ea().OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,linkCountLimit:ea().OTEL_SPAN_LINK_COUNT_LIMIT,eventCountLimit:ea().OTEL_SPAN_EVENT_COUNT_LIMIT,attributePerEventCountLimit:ea().OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,attributePerLinkCountLimit:ea().OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT}}}function iP(e){switch(void 0===e&&(e=ea()),e.OTEL_TRACES_SAMPLER){case b.AlwaysOn:return new im;case b.AlwaysOff:return new ig;case b.ParentBasedAlwaysOn:return new iy({root:new im});case b.ParentBasedAlwaysOff:return new iy({root:new ig});case b.TraceIdRatio:return new ib(iA(e));case b.ParentBasedTraceIdRatio:return new iy({root:new ib(iA(e))});default:return el.error('OTEL_TRACES_SAMPLER value "'+e.OTEL_TRACES_SAMPLER+" invalid, defaulting to "+iR+'".'),new im}}function iA(e){if(void 0===e.OTEL_TRACES_SAMPLER_ARG||""===e.OTEL_TRACES_SAMPLER_ARG)return el.error("OTEL_TRACES_SAMPLER_ARG is blank, defaulting to 1."),1;var t=Number(e.OTEL_TRACES_SAMPLER_ARG);return isNaN(t)?(el.error("OTEL_TRACES_SAMPLER_ARG="+e.OTEL_TRACES_SAMPLER_ARG+" was given, but it is invalid, defaulting to 1."),1):t<0||t>1?(el.error("OTEL_TRACES_SAMPLER_ARG="+e.OTEL_TRACES_SAMPLER_ARG+" was given, but it is out of range ([0..1]), defaulting to 1."),1):t}var ik=function(){this.generateTraceId=iT(16),this.generateSpanId=iT(8)},iD=Array(32);function iT(e){return function(){for(var t=0;t<2*e;t++)iD[t]=Math.floor(16*Math.random())+48,iD[t]>=58&&(iD[t]+=39);return String.fromCharCode.apply(null,iD.slice(0,2*e))}}var i_=function(){function e(e,t,i){this._tracerProvider=i;var r,s,n,o=(r={sampler:iP()},(n=Object.assign({},s=iS(),r,t)).generalLimits=Object.assign({},s.generalLimits,t.generalLimits||{}),n.spanLimits=Object.assign({},s.spanLimits,t.spanLimits||{}),n);this._sampler=o.sampler,this._generalLimits=o.generalLimits,this._spanLimits=o.spanLimits,this._idGenerator=t.idGenerator||new ik,this.resource=i.resource,this.instrumentationLibrary=e}return e.prototype.startSpan=function(e,t,i){void 0===t&&(t={}),void 0===i&&(i=tD.active()),t.root&&(i=tk.deleteSpan(i));var r,s,n,o,a,l,h=tk.getSpan(i);if(t3(i)){el.debug("Instrumentation suppressed, returning Noop Span");var c=tk.wrapSpanContext(tn);return c}var u=null==h?void 0:h.spanContext(),d=this._idGenerator.generateSpanId();u&&tk.isSpanContextValid(u)?(o=u.traceId,a=u.traceState,l=u.spanId):o=this._idGenerator.generateTraceId();var p=null!==(r=t.kind)&&void 0!==r?r:v.INTERNAL,g=(null!==(s=t.links)&&void 0!==s?s:[]).map(function(e){return{context:e.context,attributes:ia(e.attributes)}}),m=ia(t.attributes),f=this._sampler.shouldSample(i,o,e,p,m,g);a=null!==(n=f.traceState)&&void 0!==n?n:a;var w={traceId:o,spanId:d,traceFlags:f.decision===P.RECORD_AND_SAMPLED?S.SAMPLED:S.NONE,traceState:a};if(f.decision===P.NOT_RECORD){el.debug("Recording is off, propagating context in a non-recording span");var c=tk.wrapSpanContext(w);return c}var y=ia(Object.assign(m,f.attributes));return new ip(this,i,e,w,p,l,g,t.startTime,void 0,y)},e.prototype.startActiveSpan=function(e,t,i,r){if(!(arguments.length<2)){2==arguments.length?o=t:3==arguments.length?(s=t,o=i):(s=t,n=i,o=r);var s,n,o,a=null!=n?n:tD.active(),l=this.startSpan(e,s,a),h=tk.setSpan(a,l);return tD.with(h,o,void 0,l)}},e.prototype.getGeneralLimits=function(){return this._generalLimits},e.prototype.getSpanLimits=function(){return this._spanLimits},e.prototype.getActiveSpanProcessor=function(){return this._tracerProvider.getActiveSpanProcessor()},e}(),iI=function(e){var t="function"==typeof Symbol&&Symbol.iterator,i=t&&e[t],r=0;if(i)return i.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},i$=function(){function e(e){this._spanProcessors=e}return e.prototype.forceFlush=function(){var e,t,i=[];try{for(var r=iI(this._spanProcessors),s=r.next();!s.done;s=r.next()){var n=s.value;i.push(n.forceFlush())}}catch(t){e={error:t}}finally{try{s&&!s.done&&(t=r.return)&&t.call(r)}finally{if(e)throw e.error}}return new Promise(function(e){Promise.all(i).then(function(){e()}).catch(function(t){iv(t||Error("MultiSpanProcessor: forceFlush failed")),e()})})},e.prototype.onStart=function(e,t){var i,r;try{for(var s=iI(this._spanProcessors),n=s.next();!n.done;n=s.next())n.value.onStart(e,t)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=s.return)&&r.call(s)}finally{if(i)throw i.error}}},e.prototype.onEnd=function(e){var t,i;try{for(var r=iI(this._spanProcessors),s=r.next();!s.done;s=r.next())s.value.onEnd(e)}catch(e){t={error:e}}finally{try{s&&!s.done&&(i=r.return)&&i.call(r)}finally{if(t)throw t.error}}},e.prototype.shutdown=function(){var e,t,i=[];try{for(var r=iI(this._spanProcessors),s=r.next();!s.done;s=r.next()){var n=s.value;i.push(n.shutdown())}}catch(t){e={error:t}}finally{try{s&&!s.done&&(t=r.return)&&t.call(r)}finally{if(e)throw e.error}}return new Promise(function(e,t){Promise.all(i).then(function(){e()},t)})},e}(),iE=function(){function e(){}return e.prototype.onStart=function(e,t){},e.prototype.onEnd=function(e){},e.prototype.shutdown=function(){return Promise.resolve()},e.prototype.forceFlush=function(){return Promise.resolve()},e}(),iO=function(){function e(e,t){this._exporter=e,this._isExporting=!1,this._finishedSpans=[],this._droppedSpansCount=0;var i=ea();this._maxExportBatchSize="number"==typeof(null==t?void 0:t.maxExportBatchSize)?t.maxExportBatchSize:i.OTEL_BSP_MAX_EXPORT_BATCH_SIZE,this._maxQueueSize="number"==typeof(null==t?void 0:t.maxQueueSize)?t.maxQueueSize:i.OTEL_BSP_MAX_QUEUE_SIZE,this._scheduledDelayMillis="number"==typeof(null==t?void 0:t.scheduledDelayMillis)?t.scheduledDelayMillis:i.OTEL_BSP_SCHEDULE_DELAY,this._exportTimeoutMillis="number"==typeof(null==t?void 0:t.exportTimeoutMillis)?t.exportTimeoutMillis:i.OTEL_BSP_EXPORT_TIMEOUT,this._shutdownOnce=new eg(this._shutdown,this),this._maxExportBatchSize>this._maxQueueSize&&(el.warn("BatchSpanProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize"),this._maxExportBatchSize=this._maxQueueSize)}return e.prototype.forceFlush=function(){return this._shutdownOnce.isCalled?this._shutdownOnce.promise:this._flushAll()},e.prototype.onStart=function(e,t){},e.prototype.onEnd=function(e){this._shutdownOnce.isCalled||(e.spanContext().traceFlags&S.SAMPLED)==0||this._addToBuffer(e)},e.prototype.shutdown=function(){return this._shutdownOnce.call()},e.prototype._shutdown=function(){var e=this;return Promise.resolve().then(function(){return e.onShutdown()}).then(function(){return e._flushAll()}).then(function(){return e._exporter.shutdown()})},e.prototype._addToBuffer=function(e){if(this._finishedSpans.length>=this._maxQueueSize){0===this._droppedSpansCount&&el.debug("maxQueueSize reached, dropping spans"),this._droppedSpansCount++;return}this._droppedSpansCount>0&&(el.warn("Dropped "+this._droppedSpansCount+" spans because maxQueueSize reached"),this._droppedSpansCount=0),this._finishedSpans.push(e),this._maybeStartTimer()},e.prototype._flushAll=function(){var e=this;return new Promise(function(t,i){for(var r=[],s=Math.ceil(e._finishedSpans.length/e._maxExportBatchSize),n=0;n<s;n++)r.push(e._flushOneBatch());Promise.all(r).then(function(){t()}).catch(i)})},e.prototype._flushOneBatch=function(){var e=this;return(this._clearTimer(),0===this._finishedSpans.length)?Promise.resolve():new Promise(function(t,i){var r=setTimeout(function(){i(Error("Timeout"))},e._exportTimeoutMillis);tD.with(t2(tD.active()),function(){e._finishedSpans.length<=e._maxExportBatchSize?(s=e._finishedSpans,e._finishedSpans=[]):s=e._finishedSpans.splice(0,e._maxExportBatchSize);for(var s,n=function(){return e._exporter.export(s,function(e){var s;clearTimeout(r),e.code===C.SUCCESS?t():i(null!==(s=e.error)&&void 0!==s?s:Error("BatchSpanProcessor: span export failed"))})},o=null,a=0,l=s.length;a<l;a++){var h=s[a];h.resource.asyncAttributesPending&&h.resource.waitForAsyncAttributes&&(null!=o||(o=[]),o.push(h.resource.waitForAsyncAttributes()))}null===o?n():Promise.all(o).then(n,function(e){iv(e),i(e)})})})},e.prototype._maybeStartTimer=function(){var e=this;if(!this._isExporting){var t=function(){e._isExporting=!0,e._flushOneBatch().finally(function(){e._isExporting=!1,e._finishedSpans.length>0&&(e._clearTimer(),e._maybeStartTimer())}).catch(function(t){e._isExporting=!1,iv(t)})};if(this._finishedSpans.length>=this._maxExportBatchSize)return t();void 0===this._timer&&(this._timer=setTimeout(function(){return t()},this._scheduledDelayMillis),this._timer)}},e.prototype._clearTimer=function(){void 0!==this._timer&&(clearTimeout(this._timer),this._timer=void 0)},e}(),ix=(m=function(e,t){return(m=Object.setPrototypeOf||({__proto__:[]})instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw TypeError("Class extends value "+String(t)+" is not a constructor or null");function i(){this.constructor=e}m(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}),iF=function(e){function t(t,i){var r=e.call(this,t,i)||this;return r.onInit(i),r}return ix(t,e),t.prototype.onInit=function(e){var t=this;(null==e?void 0:e.disableAutoFlushOnDocumentHide)!==!0&&"undefined"!=typeof document&&(this._visibilityChangeListener=function(){"hidden"===document.visibilityState&&t.forceFlush()},this._pageHideListener=function(){t.forceFlush()},document.addEventListener("visibilitychange",this._visibilityChangeListener),document.addEventListener("pagehide",this._pageHideListener))},t.prototype.onShutdown=function(){"undefined"!=typeof document&&(this._visibilityChangeListener&&document.removeEventListener("visibilitychange",this._visibilityChangeListener),this._pageHideListener&&document.removeEventListener("pagehide",this._pageHideListener))},t}(iO);(f=D||(D={}))[f.resolved=0]="resolved",f[f.timeout=1]="timeout",f[f.error=2]="error",f[f.unresolved=3]="unresolved";var iB=function(){function e(e){void 0===e&&(e={}),this._registeredSpanProcessors=[],this._tracers=new Map;var t,i,r,s,n,o,a,l,h,c,u,d,p,g,m,f,w=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var i=e.shift(),r=new WeakMap;e.length>0;)i=function e(t,i,r,s){if(void 0===r&&(r=0),!(r>20)){if(r++,tZ(t)||tZ(i)||tK(i))n=tj(i);else if(tY(t)){if(n=t.slice(),tY(i))for(var n,o=0,a=i.length;o<a;o++)n.push(tj(i[o]));else if(tJ(i))for(var l=Object.keys(i),o=0,a=l.length;o<a;o++){var h=l[o];n[h]=tj(i[h])}}else if(tJ(t)){if(tJ(i)){if(!(tQ(t)&&tQ(i)))return i;n=Object.assign({},t);for(var l=Object.keys(i),o=0,a=l.length;o<a;o++){var h=l[o],c=i[h];if(tZ(c))void 0===c?delete n[h]:n[h]=c;else{var u=n[h];if(tz(t,h,s)||tz(i,h,s))delete n[h];else{if(tJ(u)&&tJ(c)){var d=s.get(u)||[],p=s.get(c)||[];d.push({obj:t,key:h}),p.push({obj:i,key:h}),s.set(u,d),s.set(c,p)}n[h]=e(n[h],c,r,s)}}}}else n=i}return n}}(i,e.shift(),0,r);return i}({},iS(),(g=Object.assign({},(t=e).spanLimits),m="undefined"!=typeof process&&process&&process.env?eo(process.env):eo(X),g.attributeCountLimit=null!==(a=null!==(o=null!==(n=null!==(r=null===(i=t.spanLimits)||void 0===i?void 0:i.attributeCountLimit)&&void 0!==r?r:null===(s=t.generalLimits)||void 0===s?void 0:s.attributeCountLimit)&&void 0!==n?n:m.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT)&&void 0!==o?o:m.OTEL_ATTRIBUTE_COUNT_LIMIT)&&void 0!==a?a:128,g.attributeValueLengthLimit=null!==(p=null!==(d=null!==(u=null!==(h=null===(l=t.spanLimits)||void 0===l?void 0:l.attributeValueLengthLimit)&&void 0!==h?h:null===(c=t.generalLimits)||void 0===c?void 0:c.attributeValueLengthLimit)&&void 0!==u?u:m.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT)&&void 0!==d?d:m.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT)&&void 0!==p?p:er,Object.assign({},t,{spanLimits:g})));this.resource=null!==(f=w.resource)&&void 0!==f?f:e2.empty(),this.resource=e2.default().merge(this.resource),this._config=Object.assign({},w,{resource:this.resource});var v=this._buildExporterFromEnv();if(void 0!==v){var y=new iF(v);this.activeSpanProcessor=y}else this.activeSpanProcessor=new iE}return e.prototype.getTracer=function(e,t,i){var r=e+"@"+(t||"")+":"+((null==i?void 0:i.schemaUrl)||"");return this._tracers.has(r)||this._tracers.set(r,new i_({name:e,version:t,schemaUrl:null==i?void 0:i.schemaUrl},this._config,this)),this._tracers.get(r)},e.prototype.addSpanProcessor=function(e){0===this._registeredSpanProcessors.length&&this.activeSpanProcessor.shutdown().catch(function(e){return el.error("Error while trying to shutdown current span processor",e)}),this._registeredSpanProcessors.push(e),this.activeSpanProcessor=new i$(this._registeredSpanProcessors)},e.prototype.getActiveSpanProcessor=function(){return this.activeSpanProcessor},e.prototype.register=function(e){void 0===e&&(e={}),tk.setGlobalTracerProvider(this),void 0===e.propagator&&(e.propagator=this._buildPropagatorFromEnv()),e.contextManager&&tD.setGlobalContextManager(e.contextManager),e.propagator&&tU.setGlobalPropagator(e.propagator)},e.prototype.forceFlush=function(){var e=this._config.forceFlushTimeoutMillis,t=this._registeredSpanProcessors.map(function(t){return new Promise(function(i){var r,s=setTimeout(function(){i(Error("Span processor did not completed within timeout period of "+e+" ms")),r=D.timeout},e);t.forceFlush().then(function(){clearTimeout(s),r!==D.timeout&&i(r=D.resolved)}).catch(function(e){clearTimeout(s),r=D.error,i(e)})})});return new Promise(function(e,i){Promise.all(t).then(function(t){var r=t.filter(function(e){return e!==D.resolved});r.length>0?i(r):e()}).catch(function(e){return i([e])})})},e.prototype.shutdown=function(){return this.activeSpanProcessor.shutdown()},e.prototype._getPropagator=function(e){var t;return null===(t=this.constructor._registeredPropagators.get(e))||void 0===t?void 0:t()},e.prototype._getSpanExporter=function(e){var t;return null===(t=this.constructor._registeredExporters.get(e))||void 0===t?void 0:t()},e.prototype._buildPropagatorFromEnv=function(){var e=this,t=Array.from(new Set(ea().OTEL_PROPAGATORS)),i=t.map(function(t){var i=e._getPropagator(t);return i||el.warn('Propagator "'+t+'" requested through environment variable is unavailable.'),i}).reduce(function(e,t){return t&&e.push(t),e},[]);return 0===i.length?void 0:1===t.length?i[0]:new t0({propagators:i})},e.prototype._buildExporterFromEnv=function(){var e=ea().OTEL_TRACES_EXPORTER;if("none"!==e&&""!==e){var t=this._getSpanExporter(e);return t||el.error('Exporter "'+e+'" requested through environment variable is unavailable.'),t}},e._registeredPropagators=new Map([["tracecontext",function(){return new ii}],["baggage",function(){return new ir}]]),e._registeredExporters=new Map,e}(),iL=function(e,t){var i,r,s,n,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return n={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function a(n){return function(a){return function(n){if(i)throw TypeError("Generator is already executing.");for(;o;)try{if(i=1,r&&(s=2&n[0]?r.return:n[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,n[1])).done)return s;switch(r=0,s&&(n=[2&n[0],s.value]),n[0]){case 0:case 1:s=n;break;case 4:return o.label++,{value:n[1],done:!1};case 5:o.label++,r=n[1],n=[0];continue;case 7:n=o.ops.pop(),o.trys.pop();continue;default:if(!(s=(s=o.trys).length>0&&s[s.length-1])&&(6===n[0]||2===n[0])){o=0;continue}if(3===n[0]&&(!s||n[1]>s[0]&&n[1]<s[3])){o.label=n[1];break}if(6===n[0]&&o.label<s[1]){o.label=s[1],s=n;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(n);break}s[2]&&o.ops.pop(),o.trys.pop();continue}n=t.call(e,o)}catch(e){n=[6,e],r=0}finally{i=s=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,a])}}},iU=function(){function e(e){this._exporter=e,this._shutdownOnce=new eg(this._shutdown,this),this._unresolvedExports=new Set}return e.prototype.forceFlush=function(){var e,t,i,r;return e=this,t=void 0,i=void 0,r=function(){return iL(this,function(e){switch(e.label){case 0:return[4,Promise.all(Array.from(this._unresolvedExports))];case 1:if(e.sent(),!this._exporter.forceFlush)return[3,3];return[4,this._exporter.forceFlush()];case 2:e.sent(),e.label=3;case 3:return[2]}})},new(i||(i=Promise))(function(s,n){function o(e){try{l(r.next(e))}catch(e){n(e)}}function a(e){try{l(r.throw(e))}catch(e){n(e)}}function l(e){var t;e.done?s(e.value):((t=e.value)instanceof i?t:new i(function(e){e(t)})).then(o,a)}l((r=r.apply(e,t||[])).next())})},e.prototype.onStart=function(e,t){},e.prototype.onEnd=function(e){var t,i,r=this;if(!this._shutdownOnce.isCalled&&(e.spanContext().traceFlags&S.SAMPLED)!=0){var s=function(){var t,i;return(t=r._exporter,i=[e],new Promise(function(e){tD.with(t2(tD.active()),function(){t.export(i,function(t){e(t)})})})).then(function(e){var t;e.code!==C.SUCCESS&&iv(null!==(t=e.error)&&void 0!==t?t:Error("SimpleSpanProcessor: span export failed (status "+e+")"))}).catch(function(e){iv(e)})};if(e.resource.asyncAttributesPending){var n=null===(i=(t=e.resource).waitForAsyncAttributes)||void 0===i?void 0:i.call(t).then(function(){return null!=n&&r._unresolvedExports.delete(n),s()},function(e){return iv(e)});null!=n&&this._unresolvedExports.add(n)}else s()}},e.prototype.shutdown=function(){return this._shutdownOnce.call()},e.prototype._shutdown=function(){return this._exporter.shutdown()},e}();let OpenTelemetryProvider=class OpenTelemetryProvider{_globalAttributes={};provider;tracer;constructor(e,t,i){this.provider=new iB({resource:new e2({[ez]:"gitlens",[eY]:e.extensionVersion,[eV]:e.env,[eQ]:e.machineId,[ej]:e.platform,"extension.id":e.extensionId,"session.id":e.sessionId,language:e.language,"vscode.edition":e.vscodeEdition,"vscode.version":e.vscodeVersion,"vscode.host":e.vscodeHost,"vscode.remoteName":e.vscodeRemoteName,"vscode.shell":e.vscodeShell,"vscode.uiKind":e.vscodeUIKind})});let r=new eH({url:i?"https://otel-dev.gitkraken.com:4318/v1/traces":"https://otel.gitkraken.com:4318/v1/traces",compression:"gzip",httpAgentOptions:t?.options});this.provider.addSpanProcessor(i?new iU(r):new iF(r)),this.tracer=this.provider.getTracer(e.extensionId)}dispose(){this.provider.shutdown()}sendEvent(e,t,i,r){let s=this.tracer.startSpan(e,{attributes:this._globalAttributes,kind:v.INTERNAL,startTime:i??Date.now()});null!=t&&s.setAttributes(t),s.end(r)}startEvent(e,t,i){let r=this.tracer.startSpan(e,{attributes:this._globalAttributes,kind:v.INTERNAL,startTime:i??Date.now()});return null!=t&&r.setAttributes(t),r}setGlobalAttributes(e){this._globalAttributes=Object.fromEntries(e)}}},1144:(e,t,i)=>{i.d(t,{$:()=>u,HZ:()=>f,NK:()=>d,VZ:()=>h,aN:()=>w,rq:()=>g,sE:()=>c,uW:()=>m,vk:()=>a,yI:()=>p,zB:()=>l});var r,s,n,o,a=((r=a||{}).Branch="b",r.Commit="c",r.Comparison="compare",r.Draft="drafts",r.File="f",r.Repository="r",r.Tag="t",r.Workspace="workspace",r),l=((s=l||{}).Switch="switch",s.SwitchToPullRequest="switch-to-pr",s.SwitchToAndSuggestPullRequest="switch-to-and-suggest-pr",s);let h=["drafts","workspace"],c=[];function u(e){switch(e){case"b":return"Branch";case"c":return"Commit";case"compare":return"Comparison";case"drafts":return"Cloud Patch";case"f":return"File";case"r":return"Repository";case"t":return"Tag";case"workspace":return"Workspace";default:return"Unknown"}}function d(e){switch(e){case"branch":return"b";case"revision":return"c";case"tag":return"t";default:return"r"}}function p(e){let[,t,i,r,s,...n]=e.path.split("/");if("link"!==t)return;let o=new URLSearchParams(e.query);switch(i){case"r":{let e,t,i,a,l=o.get("url")??void 0;null!=l&&(l=decodeURIComponent(l));let h=o.get("path")??void 0;if(null!=h&&(h=decodeURIComponent(h)),!l&&!h)return;let c=o.get("action")??void 0;if(null==s)return{type:"r",mainId:r,remoteUrl:l,repoPath:h};if(null==n||0===n.length)return;let u=n.join("/");if("compare"===s){let r=u.split(/(\.\.\.|\.\.)/);if(3!==r.length)return;e=r[0],t=r[2],null!=(i=o.get("prRepoUrl")??void 0)&&(i=decodeURIComponent(i))}else if("f"===s){a=u;let i=o.get("ref")??void 0;null!=i&&(i=decodeURIComponent(i)),e=i;let r=o.get("lines")??void 0;null!=r&&(r=decodeURIComponent(r)),t=r}else e=u;return{type:s,mainId:r,remoteUrl:l,repoPath:h,filePath:a,targetId:e,secondaryTargetId:t,secondaryRemoteUrl:i,action:c,params:o}}case"drafts":{if(null==r||r.match(/^v\d+$/))return;let e=o.get("patch")??void 0;return null!=e&&(e=decodeURIComponent(e)),{type:"drafts",targetId:r,secondaryTargetId:e,params:o}}case"workspace":return{type:"workspace",mainId:r,params:o};default:return}}var g=((n=g||{})[n.Idle=0]="Idle",n[n.AccountCheck=1]="AccountCheck",n[n.PlanCheck=2]="PlanCheck",n[n.TypeMatch=3]="TypeMatch",n[n.RepoMatch=4]="RepoMatch",n[n.CloneOrAddRepo=5]="CloneOrAddRepo",n[n.AddedRepoMatch=6]="AddedRepoMatch",n[n.RemoteMatch=7]="RemoteMatch",n[n.AddRemote=8]="AddRemote",n[n.TargetMatch=9]="TargetMatch",n[n.Fetch=10]="Fetch",n[n.FetchedTargetMatch=11]="FetchedTargetMatch",n[n.MaybeOpenRepo=12]="MaybeOpenRepo",n[n.RepoOpening=13]="RepoOpening",n[n.EnsureRemoteMatch=14]="EnsureRemoteMatch",n[n.GoToTarget=15]="GoToTarget",n[n.OpenGraph=16]="OpenGraph",n[n.OpenComparison=17]="OpenComparison",n[n.OpenDraft=18]="OpenDraft",n[n.OpenWorkspace=19]="OpenWorkspace",n[n.OpenFile=20]="OpenFile",n[n.SwitchToRef=21]="SwitchToRef",n),m=((o=m||{})[o.AccountCheckPassed=0]="AccountCheckPassed",o[o.DeepLinkEventFired=1]="DeepLinkEventFired",o[o.DeepLinkCancelled=2]="DeepLinkCancelled",o[o.DeepLinkResolved=3]="DeepLinkResolved",o[o.DeepLinkStored=4]="DeepLinkStored",o[o.DeepLinkErrored=5]="DeepLinkErrored",o[o.LinkIsRepoType=6]="LinkIsRepoType",o[o.LinkIsDraftType=7]="LinkIsDraftType",o[o.LinkIsWorkspaceType=8]="LinkIsWorkspaceType",o[o.PlanCheckPassed=9]="PlanCheckPassed",o[o.RepoMatched=10]="RepoMatched",o[o.RepoMatchedInLocalMapping=11]="RepoMatchedInLocalMapping",o[o.RepoMatchFailed=12]="RepoMatchFailed",o[o.RepoAdded=13]="RepoAdded",o[o.RemoteMatched=14]="RemoteMatched",o[o.RemoteMatchFailed=15]="RemoteMatchFailed",o[o.RemoteMatchUnneeded=16]="RemoteMatchUnneeded",o[o.RemoteAdded=17]="RemoteAdded",o[o.TargetMatched=18]="TargetMatched",o[o.TargetMatchFailed=19]="TargetMatchFailed",o[o.TargetFetched=20]="TargetFetched",o[o.RepoOpened=21]="RepoOpened",o[o.RepoOpening=22]="RepoOpening",o[o.OpenGraph=23]="OpenGraph",o[o.OpenComparison=24]="OpenComparison",o[o.OpenFile=25]="OpenFile",o[o.OpenSwitch=26]="OpenSwitch",o);let f={0:{1:1,2:0},1:{0:2,5:0,2:0},2:{9:3,5:0,2:0},3:{5:0,2:0,6:4,7:18,8:19},4:{5:0,10:7,11:5,12:5},5:{13:6,5:0,2:0},6:{10:7,5:0},7:{5:0,2:0,14:9,15:8,16:9},8:{17:9,5:0,2:0},9:{5:0,18:12,19:10},10:{20:11,5:0,2:0},11:{18:12,5:0,2:0},12:{21:14,22:13,4:0,5:0,2:0},13:{21:14,5:0,2:0},14:{5:0,2:0,14:15},15:{23:16,25:20,26:21,24:17,5:0,2:0},16:{3:0,5:0},17:{3:0,5:0},18:{3:0,5:0},19:{3:0,5:0},20:{3:0,5:0},21:{3:0,5:0}},w={0:{message:"Done.",increment:100},1:{message:"Checking account...",increment:1},2:{message:"Checking plan...",increment:2},3:{message:"Matching link type...",increment:5},4:{message:"Finding a matching repository...",increment:10},5:{message:"Adding repository...",increment:20},6:{message:"Finding a matching repository...",increment:25},7:{message:"Finding a matching remote...",increment:30},8:{message:"Adding remote...",increment:40},9:{message:"finding a matching target...",increment:50},10:{message:"Fetching...",increment:60},11:{message:"Finding a matching target...",increment:65},12:{message:"Opening repository...",increment:70},13:{message:"Opening repository...",increment:75},15:{message:"Opening target...",increment:80},16:{message:"Opening graph...",increment:90},17:{message:"Opening comparison...",increment:90},18:{message:"Opening cloud patch...",increment:90},19:{message:"Opening workspace...",increment:90},20:{message:"Opening file...",increment:90},21:{message:"Switching to ref...",increment:90}}},4160:(e,t,i)=>{i.d(t,{l:()=>CacheableChildrenViewNode});var r=i(8180),s=i(1051),n=i(5911),o=Object.defineProperty,a=Object.getOwnPropertyDescriptor;let CacheableChildrenViewNode=class CacheableChildrenViewNode extends n.eu{_children;get children(){return this._children}set children(e){this._children!==e&&((0,s.lm)(this._children,e),this._children=e)}dispose(){super.dispose(),this.children=void 0}refresh(e=!1){e&&(this.children=void 0)}};((e,t,i,r)=>{for(var s,n=r>1?void 0:r?a(t,i):t,l=e.length-1;l>=0;l--)(s=e[l])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&o(t,i,n)})([(0,r.Yz)()],CacheableChildrenViewNode.prototype,"refresh",1)},4118:(e,t,i)=>{i.d(t,{P:()=>RepositoryFolderNode});var r=i(1398),s=i(3807),n=i(7788),o=i(9634),a=i(6950),l=i(8180),h=i(4022),c=i(4911),u=i(7279),d=i(9345),p=i(5911),g=Object.defineProperty,m=Object.getOwnPropertyDescriptor,f=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?m(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&g(t,i,n),n};let RepositoryFolderNode=class RepositoryFolderNode extends d.Y{constructor(e,t,i,r,s,n){super("repo-folder",e,t,i),this.parent=i,this.repo=r,this.options=n,this.updateContext({repository:this.repo}),this._uniqueId=(0,p.pF)(this.type,this.context),this.splatted=s}splatted=!0;_child;get child(){return this._child}set child(e){this._child!==e&&(this._child?.dispose(),this._child=e)}dispose(){super.dispose(),this.child=void 0}get id(){return this._uniqueId}toClipboard(){return this.repo.path}get repoPath(){return this.repo.path}async getTreeItem(){this.splatted=!1;let e=await this.repo.getBranch(),t=(e?.state.ahead??0)>0,i=(e?.state.behind??0)>0,a=t||i||this.repo.starred||this.view.container.git.isRepositoryForEditor(this.repo),l=this.repo.formattedName??this.uri.repoPath??"";if(this.options?.showBranchAndLastFetched&&null!=e){let t=`: ${(0,c.P8)(e.name)}`,i=`: ${e.name}`;l.endsWith(t)?l=l.substring(0,l.length-t.length)+i:l.endsWith(i)||(l+=i)}let h=new r.TreeItem(l,a?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed);if(h.contextValue=`${p.U0.RepositoryFolder}${this.repo.starred?"+starred":""}`,t&&(h.contextValue+="+ahead"),i&&(h.contextValue+="+behind"),"commits"===this.view.type&&this.view.state.filterCommits.get(this.repo.id)?.length&&(h.contextValue+="+filtered"),null!=e&&this.options?.showBranchAndLastFetched){let t;let i=await this.repo.getLastFetched()??0,a=e.getTrackingStatus();if(a&&(h.description=a,i&&(h.description+=(0,u.eV)(s.EO.Dot,1,1))),i&&(h.description=`${h.description??""}Last fetched ${o.LN.formatLastFetched(i)}`),null!=e.upstream){let i=(0,n.zF)(await this.view.container.git.getRemotesWithProviders(e.repoPath));t=i?.length?i[0].name:void 0}else{let i=await e.getRemote();t=i?.provider?.name}h.tooltip=new r.MarkdownString(`${this.repo.formattedName??this.uri.repoPath??""}${i?`${(0,u.eV)(s.EO.Dash,2,2)}Last fetched ${o.LN.formatLastFetched(i,!1)}`:""}${this.repo.formattedName?`
${this.uri.repoPath}`:""}

Current branch $(git-branch) ${e.name}${null!=e.upstream?` is ${e.getTrackingStatus({empty:e.upstream.missing?`missing upstream $(git-branch) ${e.upstream.name}`:`up to date with $(git-branch) ${e.upstream.name}${t?` on ${t}`:""}`,expand:!0,icons:!0,separator:", ",suffix:` $(git-branch) ${e.upstream.name}${t?` on ${t}`:""}`})}`:`hasn't been published to ${t??"a remote"}`}`,!0)}else h.tooltip=this.repo.formattedName?`${this.repo.formattedName}
${this.uri.repoPath}`:this.uri.repoPath??"";return h}async getSplattedChild(){return null==this.child&&await this.getChildren(),this.child}async refresh(e=!1){super.refresh(e),await this.child?.triggerChange(e,!1,this),await this.ensureSubscription()}async star(){await this.repo.star()}async unstar(){await this.repo.unstar()}subscribe(){return(0,h.HC)(this.repo.onDidChange,this.onRepositoryChanged,this)}etag(){return this.repo.etag}onRepositoryChanged(e){if(e.changed(o.Z_.Closed,o.Ti.Any)){this.dispose(),this.parent?.triggerChange(!0);return}if(e.changed(o.Z_.Opened,o.Ti.Any)||e.changed(o.Z_.Starred,o.Ti.Any)){this.parent?.triggerChange(!0);return}this.changed(e)&&(!this.loaded||this.repo.orderByLastFetched?this.parent??this:this).triggerChange(!0)}};f([(0,a.G)(),(0,l.Yz)()],RepositoryFolderNode.prototype,"refresh",1),f([(0,l.Rm)()],RepositoryFolderNode.prototype,"star",1),f([(0,l.Rm)()],RepositoryFolderNode.prototype,"unstar",1),f([(0,l.Yz)()],RepositoryFolderNode.prototype,"subscribe",1),f([(0,l.Yz)({args:{0:e=>e.toString()}})],RepositoryFolderNode.prototype,"onRepositoryChanged",1)},9345:(e,t,i)=>{i.d(t,{Y:()=>SubscribeableViewNode});var r=i(1398),s=i(6950),n=i(8180),o=i(4022),a=i(4160),l=i(5911),h=Object.defineProperty,c=Object.getOwnPropertyDescriptor,u=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?c(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&h(t,i,n),n};let SubscribeableViewNode=class SubscribeableViewNode extends a.l{disposable;subscription;loaded=!1;constructor(e,t,i,s){super(e,t,i,s);let n=[(0,o.HC)(this.view.onDidChangeVisibility,this.onVisibilityChanged,this)];(0,l.Qj)(this.view)&&n.push((0,o.HC)(this.view.onDidChangeAutoRefresh,this.onAutoRefreshChanged,this));let a=this.getTreeItem;this.getTreeItem=function(){return this.loaded=!0,this.ensureSubscription(),a.apply(this)};let h=this.getChildren;this.getChildren=function(){return this.loaded=!0,this.ensureSubscription(),h.apply(this)},this.disposable=r.Disposable.from(...n)}dispose(){super.dispose(),this.unsubscribe(),this.disposable?.dispose()}async triggerChange(e=!1,t=!1){this.loaded&&!this._disposed&&(e&&!this.view.visible&&(this._pendingReset=e),await super.triggerChange(e,t))}_canSubscribe=!0;get canSubscribe(){return this._canSubscribe&&!this._disposed}set canSubscribe(e){this._canSubscribe!==e&&(this._canSubscribe=e,this.ensureSubscription(),e&&this.triggerChange())}_etag;_pendingReset=!1;get requiresResetOnVisible(){let e=this._pendingReset;this._pendingReset=!1;let t=this.etag();return t!==this._etag&&(this._etag=t,e=!0),e}async unsubscribe(){if(this._etag=this.etag(),null!=this.subscription){let e=this.subscription;this.subscription=void 0,(await e)?.dispose()}}onAutoRefreshChanged(){this.onVisibilityChanged({visible:this.view.visible})}onVisibilityChanged(e){this.ensureSubscription(),e.visible&&this.triggerChange(this.requiresResetOnVisible)}async ensureSubscription(){if(!this.canSubscribe||!this.view.visible||(0,l.Qj)(this.view)&&!this.view.autoRefresh){await this.unsubscribe();return}null==this.subscription&&(this.subscription=Promise.resolve(this.subscribe()),await this.subscription)}async resetSubscription(){await this.unsubscribe(),await this.ensureSubscription()}};u([(0,n.Yz)()],SubscribeableViewNode.prototype,"triggerChange",1),u([(0,n.Yz)()],SubscribeableViewNode.prototype,"unsubscribe",1),u([(0,n.Yz)()],SubscribeableViewNode.prototype,"onAutoRefreshChanged",1),u([(0,n.Yz)()],SubscribeableViewNode.prototype,"onVisibilityChanged",1),u([(0,s.G)(),(0,n.Yz)()],SubscribeableViewNode.prototype,"ensureSubscription",1),u([(0,s.G)(),(0,n.Yz)()],SubscribeableViewNode.prototype,"resetSubscription",1)},5329:(e,t,i)=>{i.d(t,{k:()=>s,u:()=>ViewFileNode});var r=i(5911);let ViewFileNode=class ViewFileNode extends r.eu{constructor(e,t,i,r,s){super(e,t,i,r),this.parent=r,this.file=s}get repoPath(){return this.uri.repoPath}toString(){return`${super.toString()}:${this.file.path}`}};function s(e){return e instanceof ViewFileNode}},5911:(e,t,i)=>{i.d(t,{DQ:()=>g,K2:()=>v,Qj:()=>m,U0:()=>u,eu:()=>p,jZ:()=>f,pF:()=>d,sN:()=>y,sr:()=>w});var r,s=i(6950),n=i(8180),o=i(560),a=i(3916),l=Object.defineProperty,h=Object.getOwnPropertyDescriptor,c=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?h(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&l(t,i,n),n},u=((r=u||{}).ActiveFileHistory="gitlens:history:active:file",r.ActiveLineHistory="gitlens:history:active:line",r.AutolinkedItems="gitlens:autolinked:items",r.AutolinkedItem="gitlens:autolinked:item",r.Branch="gitlens:branch",r.Branches="gitlens:branches",r.BranchStatusAheadOfUpstream="gitlens:status-branch:upstream:ahead",r.BranchStatusBehindUpstream="gitlens:status-branch:upstream:behind",r.BranchStatusMissingUpstream="gitlens:status-branch:upstream:missing",r.BranchStatusNoUpstream="gitlens:status-branch:upstream:none",r.BranchStatusSameAsUpstream="gitlens:status-branch:upstream:same",r.BranchStatusFiles="gitlens:status-branch:files",r.CodeSuggestions="gitlens:drafts:code-suggestions",r.Commit="gitlens:commit",r.Commits="gitlens:commits",r.Compare="gitlens:compare",r.CompareBranch="gitlens:compare:branch",r.ComparePicker="gitlens:compare:picker",r.ComparePickerWithRef="gitlens:compare:picker:ref",r.CompareResults="gitlens:compare:results",r.CompareResultsCommits="gitlens:compare:results:commits",r.Contributor="gitlens:contributor",r.Contributors="gitlens:contributors",r.DateMarker="gitlens:date-marker",r.Draft="gitlens:draft",r.File="gitlens:file",r.FileHistory="gitlens:history:file",r.Folder="gitlens:folder",r.Grouping="gitlens:grouping",r.LineHistory="gitlens:history:line",r.Merge="gitlens:merge",r.MergeConflictCurrentChanges="gitlens:merge-conflict:current",r.MergeConflictIncomingChanges="gitlens:merge-conflict:incoming",r.Message="gitlens:message",r.MessageSignIn="gitlens:message:signin",r.Pager="gitlens:pager",r.PullRequest="gitlens:pullrequest",r.Rebase="gitlens:rebase",r.Reflog="gitlens:reflog",r.ReflogRecord="gitlens:reflog-record",r.Remote="gitlens:remote",r.Remotes="gitlens:remotes",r.Repositories="gitlens:repositories",r.Repository="gitlens:repository",r.RepositoryFolder="gitlens:repo-folder",r.ResultsFile="gitlens:file:results",r.ResultsFiles="gitlens:results:files",r.SearchAndCompare="gitlens:searchAndCompare",r.SearchResults="gitlens:search:results",r.SearchResultsCommits="gitlens:search:results:commits",r.Stash="gitlens:stash",r.Stashes="gitlens:stashes",r.StatusFileCommits="gitlens:status:file:commits",r.StatusFiles="gitlens:status:files",r.StatusAheadOfUpstream="gitlens:status:upstream:ahead",r.StatusBehindUpstream="gitlens:status:upstream:behind",r.StatusMissingUpstream="gitlens:status:upstream:missing",r.StatusNoUpstream="gitlens:status:upstream:none",r.StatusSameAsUpstream="gitlens:status:upstream:same",r.Tag="gitlens:tag",r.Tags="gitlens:tags",r.UncommittedFiles="gitlens:uncommitted:files",r.Workspace="gitlens:workspace",r.WorkspaceMissingRepository="gitlens:workspaceMissingRepository",r.Workspaces="gitlens:workspaces",r.Worktree="gitlens:worktree",r.Worktrees="gitlens:worktrees",r);function d(e,t){let i="";return t.root&&(i+="/root"),null!=t.workspace&&(i+=`/ws/${t.workspace.id}`),null!=t.wsRepositoryDescriptor&&(i+=`/wsrepo/${t.wsRepositoryDescriptor.id}`),null!=t.repository&&(i+=`/repo/${t.repository.id}`),null!=t.worktree&&(i+=`/worktree/${t.worktree.uri.path}`),null!=t.remote&&(i+=`/remote/${t.remote.name}`),null!=t.tag&&(i+=`/tag/${t.tag.id}`),null!=t.branch&&(i+=`/branch/${t.branch.id}`),null!=t.branchStatus&&(i+=`/branch-status/${t.branchStatus.upstream?.name??"-"}`),null!=t.branchStatusUpstreamType&&(i+=`/branch-status-direction/${t.branchStatusUpstreamType}`),null!=t.pullRequest&&(i+=`/pr/${t.pullRequest.id}`),null!=t.status&&(i+=`/status/${t.status}`),null!=t.reflog&&(i+=`/reflog/${t.reflog.sha}+${t.reflog.selector}+${t.reflog.command}+${t.reflog.commandArgs??""}+${t.reflog.date.getTime()}`),null!=t.contributor&&(i+=`/contributor/${t.contributor.id??`${t.contributor.username}+${t.contributor.email}+${t.contributor.name}`}`),null!=t.autolinksId&&(i+=`/autolinks/${t.autolinksId}`),null!=t.comparisonId&&(i+=`/comparison/${t.comparisonId}`),null!=t.searchId&&(i+=`/search/${t.searchId}`),null!=t.commit&&(i+=`/commit/${t.commit.sha}`),null!=t.file&&(i+=`/file/${t.file.path}+${t.file.status}`),null!=t.draft&&(i+=`/draft/${t.draft.id}`),`gitlens://viewnode/${e}${i}`}let p=class{constructor(e,t,i,r){this.type=e,this.view=i,this.parent=r,this._uri=t}is(e){return this.type===e}isAny(...e){return e.includes(this.type)}_uniqueId;splatted=!1;_disposed=!1;dispose(){this._disposed=!0}get id(){return this._uniqueId}_context;get context(){return this._context??this.parent?.context??{}}updateContext(e,t=!1){this._context=this.getNewContext(e,t)}getNewContext(e,t=!1){return{...t?this.parent?.context:this.context,...e}}toString(){let e=this.id;return`${(0,a.zu)(this)}${null!=e?`(${e})`:""}`}_uri;get uri(){return this._uri}getParent(){return this.parent?.splatted?this.parent?.getParent():this.parent}getCommand(){}triggerChange(e=!1,t=!1,i){return this._disposed?Promise.resolve():this.splatted&&null!=this.parent&&this.parent!==i?this.parent.triggerChange(e,t):this.view.refreshNode(this,e,t)}deleteState(e){if(null==this.id)throw Error("Id is required to delete state");this.view.nodeState.deleteState(this.id,e)}getState(e){if(null==this.id)throw Error("Id is required to get state");return this.view.nodeState.getState(this.id,e)}storeState(e,t,i){if(null==this.id)throw Error("Id is required to store state");this.view.nodeState.storeState(this.id,e,t,i)}};function g(e){return(0,o.is)(e,"loadMore")}function m(e){return(0,o.is)(e,"onDidChangeAutoRefresh")}function f(e){return"function"==typeof e.edit}function w(e){return"function"==typeof e.dismissNode}function v(e){return null!=e&&"repoPath"in e&&"string"==typeof e.repoPath?e.repoPath:void 0}function y(e,t){return null!=e&&e instanceof p&&(null==t||e.type===t)}c([(0,s.G)(),(0,n.Yz)()],p.prototype,"triggerChange",1),p=c([(0,n.Is)((e,t)=>`${t}${null!=e.id?`(${e.id})`:""}`)],p)},4178:(e,t,i)=>{i.d(t,{p:()=>ViewRefFileNode,t:()=>ViewRefNode});var r=i(6645),s=i(5329),n=i(5911);let ViewRefNode=class ViewRefNode extends n.eu{constructor(e,t,i,r){super(e,t,i,r),this.parent=r}get repoPath(){return this.uri.repoPath}toString(){return`${super.toString()}:${(0,r.M4)(this.ref,!1)}`}};let ViewRefFileNode=class ViewRefFileNode extends s.u{toString(){return`${super.toString()}:${this.file.path}`}}},7558:(e,t,i)=>{i.d(t,{k:()=>CommitFileNode,p:()=>CommitFileNodeBase});var r=i(1398),s=i(3807),n=i(6861),o=i(7931),a=i(5248),l=i(4911),h=i(5911),c=i(4178);let CommitFileNodeBase=class CommitFileNodeBase extends c.p{constructor(e,t,i,r,s,n){super(e,o.nk.fromFile(r,s.repoPath,s.sha),t,i,r),this.commit=s,this.options=n,this.updateContext({commit:s,file:r}),this._uniqueId=(0,h.pF)(e,this.context)}get id(){return this._uniqueId}toClipboard(){return this.file.path}get priority(){return 0}get ref(){return this.commit}getChildren(){return[]}async getTreeItem(){if(null==this.commit.file){let e=await this.commit.getCommitForFile(this.file);if(null==e){let e=await this.view.container.git.getLogForFile(this.repoPath,this.file.path,{limit:2,ref:this.commit.sha});null!=e&&(this.commit=e.commits.get(this.commit.sha)??this.commit)}else this.commit=e}let e=new r.TreeItem(this.label,r.TreeItemCollapsibleState.None);if(e.id=this.id,e.contextValue=this.contextValue,e.description=this.description,"type"===this.view.config.files.icon)e.resourceUri=r.Uri.from({scheme:s.xB.Git,authority:"gitlens-view",path:this.uri.path,query:JSON.stringify({path:this.uri.fsPath,ref:this.uri.sha,decoration:`gitlens-view://commit-file/status/${this.file.status}`})});else{e.resourceUri=r.Uri.parse(`gitlens-view://commit-file/status/${this.file.status}`);let t=(0,a.OG)(this.file.status);e.iconPath={dark:this.view.container.context.asAbsolutePath((0,l.HS)("images","dark",t)),light:this.view.container.context.asAbsolutePath((0,l.HS)("images","light",t))}}return e.tooltip=this.tooltip,e.command=this.getCommand(),this._label=void 0,e}get contextValue(){return this.commit.isUncommitted?this.commit.isUncommittedStaged?`${h.U0.File}+staged`:`${h.U0.File}+unstaged`:`${h.U0.File}+committed${this.options?.branch?.current?"+current":""}${this.options?.branch?.current&&this.options.branch.sha===this.commit.ref?"+HEAD":""}${this.options?.unpublished?"+unpublished":""}`}get description(){return n.Z.fromTemplate(this.view.config.formats.files.description,this.file,{relativePath:this.relativePath})}_folderName;get folderName(){return void 0===this._folderName&&(this._folderName=(0,l.A3)(this.uri.relativePath)),this._folderName}_label;get label(){return void 0===this._label&&(this._label=n.Z.fromTemplate(this.view.config.formats.files.label,this.file,{relativePath:this.relativePath})),this._label}_relativePath;get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0}get tooltip(){let e=n.Z.fromTemplate(`\${file}\${'&nbsp;&nbsp;\u2022&nbsp;&nbsp;'changesDetail}\${'&nbsp;\\
'directory}&nbsp;

\${status}\${ (originalPath)}`,this.file),t=new r.MarkdownString(e,!0);return t.supportHtml=!0,t.isTrusted=!0,t}getCommand(){let e;e=this.commit.lines.length?this.commit.lines[0].line-1:this.options?.selection?.active.line??0;let t={commit:this.commit,uri:o.nk.fromFile(this.file,this.commit.repoPath),line:e,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes with Previous Revision",command:s.Ts.DiffWithPrevious,arguments:[void 0,t]}}};let CommitFileNode=class CommitFileNode extends CommitFileNodeBase{constructor(e,t,i,r,s){super("commit-file",e,t,i,r,s)}}},4424:(e,t,i)=>{i.d(t,{e:()=>CommitNode});var r=i(1398),s=i(3807),n=i(236),o=i(2927),a=i(1031),l=i(4832),h=i(8973),c=i(4911),u=i(3131),d=i(7279),p=i(1051),g=i(5911),m=i(4178),f=i(7558),w=i(9573),v=i(5158);let CommitNode=class CommitNode extends m.t{constructor(e,t,i,r,s,n,o={}){super("commit",i.getGitUri(),e,t),this.commit=i,this.unpublished=r,this.branch=s,this.getBranchAndTagTips=n,this._options=o,this.updateContext({commit:i}),this._uniqueId=(0,g.pF)(this.type,this.context)}dispose(){super.dispose(),this.children=void 0}get id(){return this._uniqueId}toClipboard(){return`${this.commit.shortSha}: ${this.commit.summary}`}get isTip(){return(this.branch?.current&&this.branch.sha===this.commit.ref)??!1}get ref(){return this.commit}_children;get children(){return this._children}set children(e){this._children!==e&&((0,p.lm)(this._children,e),this._children=e)}async getChildren(){if(null==this.children){let e,t;let i=this.commit,r=[];if("tags"!==this.view.type&&!this.unpublished&&(0,h.SD)("gitlens:hasConnectedRemotes")&&this.view.config.pullRequests?.enabled&&this.view.config.pullRequests?.showForCommits&&void 0===(t=this.getState("pullRequest"))&&void 0===this.getState("pendingPullRequest")){e=(0,u.v6)();let t=this.getAssociatedPullRequest(i);queueMicrotask(async()=>{await e?.promise;let r=!1,s=setTimeout(()=>{r=!0,this.view.triggerNodeChange(this)},250),n=await t;clearTimeout(s),null!=n&&null!=this.children&&this.children.unshift(new v.X(this.view,this,n,i)),(r||null!=n)&&this.view.triggerNodeChange(this)})}for(let e of(await i.getCommitsForFiles()))r.push(new f.k(this.view,this,e.file,e));if("list"!==this.view.config.files.layout){let e=(0,o.Ay)(r,e=>e.uri.relativePath.split("/"),(...e)=>(0,c.Fd)((0,c.HS)(...e)),this.view.config.files.compact);r=new w.x(this.view,this,e,this.repoPath,"",void 0).getChildren()}else r.sort((e,t)=>(0,d.wN)(e.label,t.label));null!=t&&r.unshift(new v.X(this.view,this,t,i)),this.children=r,setTimeout(()=>e?.fulfill(),1)}return this.children}async getTreeItem(){let e=n.c.fromTemplate(this.view.config.formats.commits.label,this.commit,{dateFormat:l.H.get("defaultDateFormat"),getBranchAndTagTips:e=>this.getBranchAndTagTips?.(e,{compact:!0}),messageTruncateAtNewLine:!0}),t=new r.TreeItem(e,this._options.expand?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed);t.id=this.id,t.contextValue=`${g.U0.Commit}${this.branch?.current?"+current":""}${this.isTip?"+HEAD":""}${this.unpublished?"+unpublished":""}`,t.description=n.c.fromTemplate(this.view.config.formats.commits.description,this.commit,{dateFormat:l.H.get("defaultDateFormat"),getBranchAndTagTips:e=>this.getBranchAndTagTips?.(e,{compact:!0}),messageTruncateAtNewLine:!0});let i=this.getState("pendingPullRequest");return t.iconPath=null!=i?new r.ThemeIcon("loading~spin"):this.unpublished?new r.ThemeIcon("arrow-up",new r.ThemeColor("gitlens.unpublishedCommitIconColor")):this.view.config.avatars?await this.commit.getAvatarUri({defaultStyle:l.H.get("defaultGravatarsStyle")}):void 0,t}getCommand(){let e={commit:this.commit,uri:this.uri,line:0,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes with Previous Revision",command:s.Ts.DiffWithPrevious,arguments:[void 0,e]}}refresh(e){super.refresh?.(e),this.children=void 0,e&&this.deleteState()}async resolveTreeItem(e,t){return null==e.tooltip&&(e.tooltip=await this.getTooltip(t)),e}async getAssociatedPullRequest(e,t){let i=this.getState("pullRequest");if(void 0!==i)return Promise.resolve(i??void 0);let r=this.getState("pendingPullRequest");return null==r?(r=e.getAssociatedPullRequest(t),this.storeState("pendingPullRequest",r),i=await r,this.storeState("pullRequest",i??null),this.deleteState("pendingPullRequest"),i):r}async getTooltip(e){let t,i;let[s,o]=await Promise.allSettled([this.view.container.git.getBestRemotesWithProviders(this.commit.repoPath,e),null==this.commit.message?this.commit.ensureFullDetails():void 0]);if(e.isCancellationRequested)return;let h=(0,u.Ro)(s,[]),[c]=h;if(c?.hasIntegration()){let[r,s]=await Promise.allSettled([(0,a.zu)(this.commit.getEnrichedAutolinks(c),e),this.getAssociatedPullRequest(this.commit,c)]);if(e.isCancellationRequested)return;let n=(0,u.Ro)(r);n?.paused||(t=n?.value),i=(0,u.Ro)(s)}let d=await n.c.fromTemplateAsync(this.getTooltipTemplate(),this.commit,{enrichedAutolinks:t,dateFormat:l.H.get("defaultDateFormat"),getBranchAndTagTips:this.getBranchAndTagTips,messageAutolinks:!0,messageIndent:4,pullRequest:i,outputFormat:"markdown",remotes:h,unpublished:this.unpublished}),p=new r.MarkdownString(d,!0);return p.supportHtml=!0,p.isTrusted=!0,p}getTooltipTemplate(){return this.view.config.formats.commits.tooltip}}},9972:(e,t,i)=>{i.d(t,{RK:()=>CommandMessageNode,S2:()=>MessageNode,cb:()=>LoadMoreNode});var r=i(1398),s=i(3807),n=i(7931),o=i(4832),a=i(5911);let MessageNode=class MessageNode extends a.eu{constructor(e,t,i,r,s,o,a){super("message",n.Bd,e,t),this.parent=t,this._message=i,this._description=r,this._tooltip=s,this._iconPath=o,this._contextValue=a}getChildren(){return[]}getTreeItem(){let e=new r.TreeItem(this._message,r.TreeItemCollapsibleState.None);return e.contextValue=this._contextValue??a.U0.Message,e.description=this._description,e.tooltip=this._tooltip,e.iconPath=this._iconPath,e}};let CommandMessageNode=class CommandMessageNode extends MessageNode{constructor(e,t,i,r,s,n,o){super(e,t,r,s,n,o),this.parent=t,this._command=i}getTreeItem(){let e=super.getTreeItem();return e instanceof r.TreeItem?(e.command=this._command,e):e.then(e=>(e.command=this._command,e))}};let PagerNode=class PagerNode extends a.eu{constructor(e,t,i,r,s){super("pager",n.Bd,e,t),this.message=i,this.previousNode=r,this.options=s}async loadAll(){let e=await this.options?.getCount?.()??0;return this.view.loadMoreNodeChildren(this.parent,e>5e3?5e3:0,this.previousNode,this.options?.context)}loadMore(){return this.view.loadMoreNodeChildren(this.parent,this.options?.pageSize??o.H.get("views.pageItemLimit"),this.previousNode,this.options?.context)}getChildren(){return[]}getTreeItem(){let e=new r.TreeItem(this.message,r.TreeItemCollapsibleState.None);return e.contextValue=a.U0.Pager,e.command=this.getCommand(),e}getCommand(){return{title:"Load more",command:"gitlens.views.loadMoreChildren",arguments:[this]}}};let LoadMoreNode=class LoadMoreNode extends PagerNode{constructor(e,t,i,r){super(e,t,r?.message??(r?.pageSize===0?`Load all ${s.EO.Space}${s.EO.Dash}${s.EO.Space} this may take a while`:"Load more"),i,r)}}},522:(e,t,i)=>{i.d(t,{dt:()=>b,ip:()=>CompareResultsNode,oI:()=>C,pi:()=>R,sV:()=>S});var r=i(1398),s=i(9032),n=i(7931),o=i(6645),a=i(8875),l=i(6950),h=i(8180),c=i(4022),u=i(7279),d=i(9345),p=i(5911),g=i(1652),m=i(4621),f=Object.defineProperty,w=Object.getOwnPropertyDescriptor,v=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?w(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&f(t,i,n),n};let y=0;let CompareResultsNode=class CompareResultsNode extends d.Y{constructor(e,t,i,r,s,o=0){super("compare-results",n.nk.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this._ref=r,this._compareWith=s,this._storedAt=o,this._instanceId=y++,this.updateContext({comparisonId:`${r.ref}+${s.ref}+${this._instanceId}`,storedComparisonId:this.getStorageId()}),this._uniqueId=(0,p.pF)(this.type,this.context),0===this._storedAt&&(this._storedAt=Date.now(),this.store(!0))}_instanceId;get id(){return this._uniqueId}etag(){return this._storedAt}get order(){return this._storedAt}get ahead(){return{ref1:this._compareWith.ref||"HEAD",ref2:this._ref.ref}}get behind(){return{ref1:this._ref.ref,ref2:this._compareWith.ref||"HEAD"}}get compareRef(){return this._ref}get compareWithRef(){return this._compareWith}_isFiltered;get filterByAuthors(){let e=this.getState("filterCommits"),t=!!e?.length;return null!=this._isFiltered&&this._isFiltered!==t&&this.updateContext({comparisonFiltered:t}),this._isFiltered=t,e}subscribe(){return r.Disposable.from((0,c.HC)(this.view.onDidChangeNodesCheckedState,this.onNodesCheckedStateChanged,this),(0,c.HC)(this.view.container.integrations.onDidChangeConnectionState,this.onIntegrationConnectionStateChanged,this))}onIntegrationConnectionStateChanged(){this.view.triggerNodeChange(this.parent)}onNodesCheckedStateChanged(e){let t=b(this.getStorageId());e.items.some(([e])=>e.id?.startsWith(t))&&this.store(!0)}dismiss(){this.remove(!0)}async getChildren(){if(null==this.children){let e=this.ahead,t=this.behind,i=await this.view.container.git.getAheadBehindCommitCount(this.repoPath,[(0,o.Xn)(t.ref1||"HEAD",t.ref2,"...")],{authors:this.filterByAuthors}),r=await this.view.container.git.getMergeBase(this.repoPath,t.ref1,t.ref2,{forkPoint:!0})??await this.view.container.git.getMergeBase(this.repoPath,t.ref1,t.ref2),s=[new g.V(this.view,this,this.repoPath,"Behind",{query:this.getCommitsQuery((0,o.Xn)(t.ref1,t.ref2,"..")),comparison:t,direction:"behind",files:{ref1:""===t.ref1?"":r??t.ref1,ref2:t.ref2,query:this.getBehindFilesQuery.bind(this)}},{description:(0,u.td)("commit",i?.behind??0),expand:!1}),new g.V(this.view,this,this.repoPath,"Ahead",{query:this.getCommitsQuery((0,o.Xn)(e.ref1,e.ref2,"..")),comparison:e,direction:"ahead",files:{ref1:r??e.ref1,ref2:e.ref2,query:this.getAheadFilesQuery.bind(this)}},{description:(0,u.td)("commit",i?.ahead??0),expand:!1})];this.filterByAuthors?.length||s.push(new m.o(this.view,this,this.repoPath,this._compareWith.ref,this._ref.ref,this.getFilesQuery.bind(this),void 0,{expand:!1})),this.children=s}return this.children}getTreeItem(){let e;if(this.view.container.git.repositoryCount>1){let t=this.repoPath?this.view.container.git.getRepository(this.repoPath):void 0;e=t?.formattedName??this.repoPath}let t=new r.TreeItem(`Comparing ${this._ref.label??(0,o.pV)(this._ref.ref,{strings:{working:"Working Tree"}})} with ${this._compareWith.label??(0,o.pV)(this._compareWith.ref,{strings:{working:"Working Tree"}})}`,r.TreeItemCollapsibleState.Collapsed);return t.id=this.id,t.contextValue=`${p.U0.CompareResults}${""===this._ref.ref?"+working":""}${this.filterByAuthors?.length?"+filtered":""}`,t.description=e,t.iconPath=new r.ThemeIcon("compare-changes"),t}async getDiffRefs(){return Promise.resolve([this._compareWith.ref,this._ref.ref])}async getFilesComparison(){let e=(await this.getChildren()).find(e=>e.is("results-files"));return e?.getFilesComparison()}clearReviewed(){R(this.view,this.getStorageId()),this.store()}async swap(){if(""===this._ref.ref){r.window.showErrorMessage("Cannot swap comparisons with the working tree");return}let e=this.getStorageId(),t=this._ref;this._ref=this._compareWith,this._compareWith=t,await this.replace(e,!0),this.children=void 0,this.view.triggerNodeChange(this.parent),queueMicrotask(()=>this.view.reveal(this,{expand:!0,focus:!0,select:!0}))}async getAheadFilesQuery(){return(0,a.Hn)(this.view.container,this.repoPath,(0,o.Xn)(this._compareWith?.ref||"HEAD",this._ref.ref||"HEAD","..."),""===this._ref.ref)}async getBehindFilesQuery(){return(0,a.Hn)(this.view.container,this.repoPath,(0,o.Xn)(this._ref.ref||"HEAD",this._compareWith.ref||"HEAD","..."),!1)}getCommitsQuery(e){return(0,a.R6)(this.view.container,this.repoPath,e,this.filterByAuthors)}getFilesQuery(){return(0,a.i9)(this.view.container,this.repoPath,this._ref.ref,this._compareWith.ref)}getStorageId(){return(0,s.Fx)(`${this.repoPath}|${this._ref.ref}|${this._compareWith.ref}`,"base64")}remove(e=!1){return R(this.view,this.getStorageId()),this.view.updateStorage(this.getStorageId(),void 0,e)}async replace(e,t=!1){return R(this.view,e),await this.view.updateStorage(e,void 0,t),this.store(t)}store(e=!1){let t=this.getStorageId(),i=C(this.view,t);return this.view.updateStorage(t,{type:"comparison",timestamp:this._storedAt,path:this.repoPath,ref1:{label:this._ref.label,ref:this._ref.ref},ref2:{label:this._compareWith.label,ref:this._compareWith.ref},checkedFiles:i.length>0?i:void 0},e)}};function b(e){return`${e}|`}function C(e,t){let i=[];for(let[s,n]of e.nodeState.get(b(t),"checked"))n===r.TreeItemCheckboxState.Checked&&i.push(s);return i}function R(e,t){e.nodeState.delete(b(t),"checked")}function S(e,t){if(t?.length)for(let i of t)e.nodeState.storeState(i,"checked",r.TreeItemCheckboxState.Checked,!0)}v([(0,l.G)(),(0,h.Yz)()],CompareResultsNode.prototype,"getDiffRefs",1),v([(0,h.Rm)()],CompareResultsNode.prototype,"clearReviewed",1),v([(0,h.Rm)()],CompareResultsNode.prototype,"swap",1)},7142:(e,t,i)=>{i.d(t,{e:()=>DraftNode});var r=i(1398),s=i(5176),n=i(4832),o=i(1856),a=i(5911);let DraftNode=class DraftNode extends a.eu{constructor(e,t,i,r){super("draft",e,t,i),this.parent=i,this.draft=r,this.updateContext({draft:r}),this._uniqueId=(0,a.pF)(this.type,this.context)}get id(){return this._uniqueId}toClipboard(){return this.getUrl()}getUrl(){return this.view.container.drafts.generateWebUrl(this.draft.id)}getChildren(){return[]}getTreeItem(){let e;let t=this.draft.title??`Draft (${this.draft.id})`,i=new r.TreeItem(t,r.TreeItemCollapsibleState.None),l=n.H.get("defaultDateFormat")??"MMMM Do, YYYY h:mma",h=this.draft.updatedAt.getTime()-this.draft.createdAt.getTime()>=3e4;i.id=this.id;let c=a.U0.Draft;return this.draft.isMine&&(c+="+mine"),i.contextValue=c,i.description=(0,o.PI)(this.draft.updatedAt),i.command={title:"Open",command:"gitlens.views.draft.open",arguments:[this]},this.view.config.avatars&&null!=this.draft.author&&(e=this.draft.author.avatarUri??(0,s.m_)(this.draft.author.email)),i.iconPath=e??new r.ThemeIcon("suggested_pr_change"==this.draft.type?"gitlens-code-suggestion":"cloud"),i.tooltip=new r.MarkdownString(`${t}${this.draft.description?`\\
${this.draft.description}`:""}

Created ${this.draft.author?.name?` by ${this.draft.author.name}`:""} ${(0,o.PI)(this.draft.createdAt)} &nbsp; _(${(0,o.Yq)(this.draft.createdAt,l)})_${h?` \\
Last updated ${(0,o.PI)(this.draft.updatedAt)} &nbsp; _(${(0,o.Yq)(this.draft.updatedAt,l)})_`:""}`),i}}},9115:(e,t,i)=>{i.d(t,{f:()=>FileRevisionAsCommitNode,m:()=>w});var r=i(1398),s=i(3807),n=i(236),o=i(6861),a=i(7931),l=i(5248),h=i(1031),c=i(4832),u=i(4911),d=i(3131),p=i(5911),g=i(4178),m=i(2441),f=i(4414);let FileRevisionAsCommitNode=class FileRevisionAsCommitNode extends g.p{constructor(e,t,i,r,s={}){super("file-commit",a.nk.fromFile(i,r.repoPath,r.sha),e,t,i),this.commit=r,this._options=s}toClipboard(){return`${this.commit.shortSha}: ${this.commit.summary}`}get isTip(){return(this._options.branch?.current&&this._options.branch.sha===this.commit.ref)??!1}get ref(){return this.commit}async getChildren(){if(!this.commit.file?.hasConflicts)return[];let[e,t]=await Promise.allSettled([this.view.container.git.getMergeStatus(this.commit.repoPath),this.view.container.git.getRebaseStatus(this.commit.repoPath)]),i=(0,d.Ro)(e),r=(0,d.Ro)(t);return null==i&&null==r?[]:[new m.N(this.view,this,i??r,this.file),new f.a(this.view,this,i??r,this.file)]}async getTreeItem(){if(null==this.commit.file){let e=await this.commit.getCommitForFile(this.file);if(null==e){let e=await this.view.container.git.getLogForFile(this.repoPath,this.file.path,{limit:2,ref:this.commit.sha});null!=e&&(this.commit=e.commits.get(this.commit.sha)??this.commit)}else this.commit=e}let e=new r.TreeItem(n.c.fromTemplate(this.view.config.formats.commits.label,this.commit,{dateFormat:c.H.get("defaultDateFormat"),getBranchAndTagTips:e=>this._options.getBranchAndTagTips?.(e,{compact:!0}),messageTruncateAtNewLine:!0}),this.commit.file?.hasConflicts?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.None);if(e.contextValue=this.contextValue,e.description=n.c.fromTemplate(this.view.config.formats.commits.description,this.commit,{dateFormat:c.H.get("defaultDateFormat"),getBranchAndTagTips:e=>this._options.getBranchAndTagTips?.(e,{compact:!0}),messageTruncateAtNewLine:!0}),e.resourceUri=r.Uri.parse(`gitlens-view://commit-file/status/${this.file.status}`),!this.commit.isUncommitted&&this.view.config.avatars&&(e.iconPath=this._options.unpublished?new r.ThemeIcon("arrow-up",new r.ThemeColor("gitlens.unpublishedCommitIconColor")):await this.commit.getAvatarUri({defaultStyle:c.H.get("defaultGravatarsStyle")})),null==e.iconPath){let t=(0,l.OG)(this.file.status);e.iconPath={dark:this.view.container.context.asAbsolutePath((0,u.HS)("images","dark",t)),light:this.view.container.context.asAbsolutePath((0,u.HS)("images","light",t))}}return e.command=this.getCommand(),e}get contextValue(){return this.commit.isUncommitted?this.commit.file?.hasConflicts?`${p.U0.File}+conflicted`:this.commit.isUncommittedStaged?`${p.U0.File}+staged`:`${p.U0.File}+unstaged`:`${p.U0.File}+committed${this._options.branch?.current?"+current":""}${this.isTip?"+HEAD":""}${this._options.unpublished?"+unpublished":""}`}getCommand(){let e;if(e=this.commit.lines.length?this.commit.lines[0].line-1:this._options.selection?.active.line??0,this.commit.file?.hasConflicts)return{title:"Open Changes",command:s.Ts.DiffWith,arguments:[{lhs:{sha:"MERGE_HEAD",uri:a.nk.fromFile(this.file,this.repoPath,void 0,!0)},rhs:{sha:"HEAD",uri:a.nk.fromFile(this.file,this.repoPath)},repoPath:this.repoPath,line:0,showOptions:{preserveFocus:!1,preview:!1}}]};let t={commit:this.commit,uri:a.nk.fromFile(this.file,this.commit.repoPath),line:e,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes with Previous Revision",command:s.Ts.DiffWithPrevious,arguments:[void 0,t]}}async resolveTreeItem(e,t){return null==e.tooltip&&(e.tooltip=await this.getTooltip(t)),e}async getConflictBaseUri(){if(!this.commit.file?.hasConflicts)return;let e=await this.view.container.git.getMergeBase(this.repoPath,"MERGE_HEAD","HEAD");return a.nk.fromFile(this.file,this.repoPath,e??"HEAD")}async getTooltip(e){let t=await w(this.view.container,this.commit,this.file,this.view.config.formats.commits.tooltipWithStatus,{getBranchAndTagTips:this._options.getBranchAndTagTips,unpublished:this._options.unpublished,cancellation:e}),i=new r.MarkdownString(t,!0);return i.supportHtml=!0,i.isTrusted=!0,i}};async function w(e,t,i,r,s){let a,l;let[u,p]=await Promise.allSettled([e.git.getBestRemotesWithProviders(t.repoPath,s?.cancellation),null==t.message?t.ensureFullDetails():void 0]);if(s?.cancellation?.isCancellationRequested)return;let g=(0,d.Ro)(u,[]),[m]=g;if(m?.hasIntegration()){let[e,i]=await Promise.allSettled([(0,h.zu)(t.getEnrichedAutolinks(m),s?.cancellation),t.getAssociatedPullRequest(m)]),r=(0,d.Ro)(e);r?.paused||(a=r?.value),l=(0,d.Ro)(i)}let f=o.Z.fromTemplate(`\${status}\${ (originalPath)}\${'&nbsp;&nbsp;\u2022&nbsp;&nbsp;'changesDetail}`,i);return n.c.fromTemplateAsync(r.replace("{{slot-status}}",f),t,{enrichedAutolinks:a,dateFormat:c.H.get("defaultDateFormat"),getBranchAndTagTips:s?.getBranchAndTagTips,messageAutolinks:!0,messageIndent:4,pullRequest:l,outputFormat:"markdown",remotes:g,unpublished:s?.unpublished})}},9573:(e,t,i)=>{i.d(t,{x:()=>FolderNode});var r=i(1398),s=i(7931),n=i(7279),o=i(5911);let FolderNode=class FolderNode extends o.eu{constructor(e,t,i,r,n,a,l){super("folder",s.nk.fromRepoPath(r),e,t),this.parent=t,this.root=i,this.repoPath=r,this.folderName=n,this.relativePath=a,this.containsWorkingFiles=l,this._uniqueId=(0,o.pF)(`${this.type}+${a??n}`,this.context)}priority=1;get id(){return this._uniqueId}toClipboard(){return this.folderName}getChildren(){let e;if(void 0===this.root.descendants||void 0===this.root.children)return[];if("list"===FolderNode.getFileNesting(this.view.config.files,this.root.descendants,void 0===this.relativePath))this.root.descendants.forEach(e=>e.relativePath=this.root.relativePath),e=this.root.descendants;else for(let t of(e=[],this.root.children.values())){if(void 0===t.value){e.push(new FolderNode(this.view,this.folderName?this:this.parent,t,this.repoPath,t.name,t.relativePath,this.containsWorkingFiles));continue}t.value.parent=this.folderName?this:this.parent,t.value.relativePath=this.root.relativePath,e.push(t.value)}return e.sort((e,t)=>(e instanceof FolderNode?-1:1)-(t instanceof FolderNode?-1:1)||e.priority-t.priority||(0,n.wN)(e.label,t.label)),e}getTreeItem(){let e=new r.TreeItem(this.label,r.TreeItemCollapsibleState.Expanded);return e.id=this.id,e.contextValue=o.U0.Folder,this.containsWorkingFiles&&(e.contextValue+="+working"),e.iconPath=r.ThemeIcon.Folder,e.tooltip=this.label,e}get label(){return this.folderName}static getFileNesting(e,t,i){let r=e.layout||"auto";if("auto"===r){if(i||e.compact){let i=e.threshold||5;if(t.length<=i)return"list"}return"tree"}return r}}},8364:(e,t,i)=>{i.d(t,{h:()=>o});var r=i(5911),s=i(9972);let n=[[0,"Less than a week ago"],[7,"Over a week ago"],[25,"Over a month ago"],[77,"Over 3 months ago"]];function*o(e,t,i,{show:o}={show:!0}){let a;if(!t.view.config.showRelativeDateMarkers||!o)return yield*e;let l=i??0,h=Date.now(),c=!0;for(let i of e){if(l<n.length){let[e,o]=n[l];if(void 0===a){let t=new Date(h);a=t.setDate(t.getDate()-e)}let u=new Date(i.commit.committer.date).setUTCHours(0,0,0,0);if(u<=a){for(;l<n.length-1;){[e]=n[l+1];let t=new Date(h);if(u>t.setDate(t.getDate()-e))break;l++,a=void 0,[,o]=n[l]}c||(yield new s.S2(t.view,t,"",o,void 0,void 0,r.U0.DateMarker)),l++,a=void 0}}c=!1,yield i}}},2441:(e,t,i)=>{i.d(t,{N:()=>MergeConflictCurrentChangesNode});var r=i(1398),s=i(3807),n=i(7931),o=i(6645),a=i(7899),l=i(4832),h=i(5911),c=i(9115);let MergeConflictCurrentChangesNode=class MergeConflictCurrentChangesNode extends h.eu{constructor(e,t,i,r){super("conflict-current-changes",n.nk.fromFile(r,i.repoPath,"HEAD"),e,t),this.parent=t,this.status=i,this.file=r}_commit;async getCommit(){return null==this._commit&&(this._commit=this.view.container.git.getCommit(this.status.repoPath,"HEAD")),this._commit}getChildren(){return[]}async getTreeItem(){let e=await this.getCommit(),t=new r.TreeItem("Current changes",r.TreeItemCollapsibleState.None);return t.contextValue=h.U0.MergeConflictCurrentChanges,t.description=`${(0,o.M4)(this.status.current,{expand:!1,icon:!1})}${null!=e?` (${(0,o.M4)(e,{expand:!1,icon:!1})})`:" (HEAD)"}`,t.iconPath=this.view.config.avatars?await e?.getAvatarUri({defaultStyle:l.H.get("defaultGravatarsStyle")})??new r.ThemeIcon("diff"):new r.ThemeIcon("diff"),t.command=this.getCommand(),t}getCommand(){return null==this.status.mergeBase?(0,a.Jl)("vscode.open","Open Revision",this.view.container.git.getRevisionUri("HEAD",this.file.path,this.status.repoPath)):(0,a.gu)(s.Ts.DiffWith,"Open Changes",{lhs:{sha:this.status.mergeBase,uri:n.nk.fromFile(this.file,this.status.repoPath,void 0,!0),title:`${this.file.path} (merge-base)`},rhs:{sha:"HEAD",uri:n.nk.fromFile(this.file,this.status.repoPath),title:`${this.file.path} (${(0,o.M4)(this.status.current,{expand:!1,icon:!1})})`},repoPath:this.status.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}})}async resolveTreeItem(e,t){return null==e.tooltip&&(e.tooltip=await this.getTooltip(t)),e}async getTooltip(e){let t=await this.getCommit();if(e.isCancellationRequested)return;let i=new r.MarkdownString(`Current changes on ${(0,o.M4)(this.status.current,{label:!1})}\\
$(file)${s.EO.Space}${this.file.path}`,!0);if(null==t)return i;let n=await (0,c.m)(this.view.container,t,this.file,this.view.config.formats.commits.tooltipWithStatus,{cancellation:e});return i.appendMarkdown(`

${n}`),i.isTrusted=!0,i}}},4414:(e,t,i)=>{i.d(t,{a:()=>MergeConflictIncomingChangesNode});var r=i(1398),s=i(3807),n=i(7931),o=i(6645),a=i(7899),l=i(4832),h=i(5911),c=i(9115);let MergeConflictIncomingChangesNode=class MergeConflictIncomingChangesNode extends h.eu{constructor(e,t,i,r){super("conflict-incoming-changes",n.nk.fromFile(r,i.repoPath,i.HEAD.ref),e,t),this.parent=t,this.status=i,this.file=r}_commit;async getCommit(){if(null==this._commit){let e="rebase"===this.status.type?this.status.steps.current.commit?.ref:this.status.HEAD.ref;if(null==e)return;this._commit=this.view.container.git.getCommit(this.status.repoPath,e)}return this._commit}getChildren(){return[]}async getTreeItem(){let e=await this.getCommit(),t=new r.TreeItem("Incoming changes",r.TreeItemCollapsibleState.None);return t.contextValue=h.U0.MergeConflictIncomingChanges,t.description=`${(0,o.M4)(this.status.incoming,{expand:!1,icon:!1})}${"rebase"===this.status.type?` (${(0,o.M4)(this.status.steps.current.commit,{expand:!1,icon:!1})})`:` (${(0,o.M4)(this.status.HEAD,{expand:!1,icon:!1})})`}`,t.iconPath=this.view.config.avatars?await e?.getAvatarUri({defaultStyle:l.H.get("defaultGravatarsStyle")})??new r.ThemeIcon("diff"):new r.ThemeIcon("diff"),t.command=this.getCommand(),t}getCommand(){return null==this.status.mergeBase?(0,a.Jl)("vscode.open","Open Revision",this.view.container.git.getRevisionUri(this.status.HEAD.ref,this.file.path,this.status.repoPath)):(0,a.gu)(s.Ts.DiffWith,"Open Changes",{lhs:{sha:this.status.mergeBase,uri:n.nk.fromFile(this.file,this.status.repoPath,void 0,!0),title:`${this.file.path} (merge-base)`},rhs:{sha:this.status.HEAD.ref,uri:n.nk.fromFile(this.file,this.status.repoPath),title:`${this.file.path} (${null!=this.status.incoming?(0,o.M4)(this.status.incoming,{expand:!1,icon:!1}):"incoming"})`},repoPath:this.status.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}})}async resolveTreeItem(e,t){return null==e.tooltip&&(e.tooltip=await this.getTooltip(t)),e}async getTooltip(e){let t=await this.getCommit();if(e.isCancellationRequested)return;let i=new r.MarkdownString(`Incoming changes from ${(0,o.M4)(this.status.incoming,{label:!1})}\\
$(file)${s.EO.Space}${this.file.path}`,!0);if(null==t)return i.appendMarkdown("rebase"===this.status.type?`

${(0,o.M4)(this.status.steps.current.commit,{capitalize:!0,label:!1})}`:`

${(0,o.M4)(this.status.HEAD,{capitalize:!0,label:!1})}`),i;let n=await (0,c.m)(this.view.container,t,this.file,this.view.config.formats.commits.tooltipWithStatus,{cancellation:e});return i.appendMarkdown(`

${n}`),i.isTrusted=!0,i}}},5158:(e,t,i)=>{i.d(t,{X:()=>PullRequestNode});var r=i(1398),s=i(7931),n=i(9102),o=i(8559),a=i(304),l=i(6645),h=i(8875),c=i(7279),u=i(4160),d=i(5911),p=i(9972),g=i(7142);let CodeSuggestionsNode=class CodeSuggestionsNode extends u.l{constructor(e,t,i,r){super("drafts-code-suggestions",s.nk.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this.pullRequest=r,this._uniqueId=(0,d.pF)(this.type,this.context)}get id(){return this._uniqueId}async getChildren(){if(null==this.children){let e;let t=await this.getSuggestedChanges();t?.length&&(t.sort((e,t)=>t.updatedAt.getTime()-e.updatedAt.getTime()),e=t.map(e=>new g.e(this.uri,this.view,this,e))),e?.length||(e=[new p.S2(this.view,this,"No code suggestions")]),this.children=e}return this.children}getTreeItem(){let e=new r.TreeItem("Code Suggestions",r.TreeItemCollapsibleState.Collapsed);return e.contextValue=d.U0.CodeSuggestions,e}async getSuggestedChanges(){let e=this.view.container.git.getRepository(this.repoPath);return null==e?[]:await this.view.container.drafts.getCodeSuggestions(this.pullRequest,e)}};var m=i(1652),f=i(4621);let PullRequestNode=class PullRequestNode extends u.l{constructor(e,t,i,r,o){let a,l;"string"==typeof r?l=r:(l=r.repoPath,a=r),super("pullrequest",s.nk.fromRepoPath(l),e,t),this.parent=t,this.pullRequest=i,this.options=o,null!=a&&(a instanceof n.Zr?this.updateContext({branch:a}):this.updateContext({commit:a})),this.updateContext({pullRequest:i}),this._uniqueId=(0,d.pF)(this.type,this.context),this.repoPath=l}repoPath;get id(){return this._uniqueId}toClipboard(e){return"markdown"===e?`[${this.pullRequest.id}](${this.pullRequest.url}) ${this.pullRequest.title}`:this.pullRequest.url}getUrl(){return this.pullRequest.url}get baseRef(){if(this.pullRequest.refs?.base!=null)return{refType:"branch",repoPath:this.repoPath,ref:this.pullRequest.refs.base.sha,name:this.pullRequest.refs.base.branch,remote:!0}}get ref(){if(this.pullRequest.refs?.head!=null)return{refType:"branch",repoPath:this.repoPath,ref:this.pullRequest.refs.head.sha,name:this.pullRequest.refs.head.branch,remote:!0}}async getChildren(){if(null==this.children){let e=await (0,a.tI)(this.view.container,this.repoPath,this.pullRequest.refs),t={ref1:e.base.ref,ref2:e.head.ref},i=await this.view.container.git.getAheadBehindCommitCount(this.repoPath,[(0,l.Xn)(t.ref2,t.ref1,"...")]),r=[new m.V(this.view,this,this.repoPath,"Commits",{query:(0,h.R6)(this.view.container,this.repoPath,(0,l.Xn)(t.ref1,t.ref2,"..")),comparison:t},{autolinks:!1,expand:!1,description:(0,c.td)("commit",i?.ahead??0)}),new CodeSuggestionsNode(this.view,this,this.repoPath,this.pullRequest),new f.o(this.view,this,this.repoPath,t.ref1,t.ref2,()=>(0,h.Hn)(this.view.container,this.repoPath,(0,l.Xn)(t.ref1,t.ref2,"..."),!1),void 0,{expand:!0,timeout:!1})];this.children=r}return this.children}getTreeItem(){let e=this.pullRequest.refs?.base!=null&&null!=this.pullRequest.refs.head,t=new r.TreeItem(`#${this.pullRequest.id}: ${this.pullRequest.title}`,e?this.options?.expand?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed:r.TreeItemCollapsibleState.None);t.id=this.id,t.contextValue=d.U0.PullRequest,this.pullRequest.refs?.base!=null&&null!=this.pullRequest.refs.head&&(t.contextValue+="+refs"),t.description=`${this.pullRequest.state}, ${this.pullRequest.formatDateFromNow()}`,t.iconPath=(0,o.pr)(this.pullRequest);let i=new r.MarkdownString("",!0);i.supportHtml=!0,i.isTrusted=!0,null!=this.context.commit&&i.appendMarkdown(`Commit \`$(git-commit) ${this.context.commit.shortSha}\` was introduced by $(git-pull-request) PR #${this.pullRequest.id}

`);let s=` "Open Pull Request \\#${this.pullRequest.id} on ${this.pullRequest.provider.name}"`;return i.appendMarkdown(`${(0,o.xu)(this.pullRequest)} [**${this.pullRequest.title.trim()}**](${this.pullRequest.url}${s}) \\
[#${this.pullRequest.id}](${this.pullRequest.url}${s}) by [@${this.pullRequest.author.name}](${this.pullRequest.author.url} "Open @${this.pullRequest.author.name} on ${this.pullRequest.provider.name}") was ${this.pullRequest.state.toLowerCase()} ${this.pullRequest.formatDateFromNow()}`),t.tooltip=i,t}}},1652:(e,t,i)=>{i.d(t,{V:()=>ResultsCommitsNode});var r=i(1398),s=i(7931),n=i(5287),o=i(1031),a=i(4832),l=i(6950),h=i(8180),c=i(4026),u=i(3131),d=i(5911),p=i(304),g=i(4160),m=i(8559),f=i(1856);let AutolinkedItemNode=class AutolinkedItemNode extends d.eu{constructor(e,t,i,r,n){super("autolink",s.nk.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this.item=r,this.maybeEnriched=n,this._uniqueId=(0,d.pF)(`${this.type}+${r.id}`,this.context)}get id(){return this._uniqueId}async toClipboard(e){let t=await this.maybeEnriched;return"markdown"===e?`[${this.item.prefix??""}${this.item.id}](${this.item.url})${t?.title?` - ${t?.title}`:""}`:`${this.item.id}: ${t?.title??this.item.url}`}getUrl(){return this.item.url}getChildren(){return[]}getTreeItem(){let e=this.maybeEnriched,t=(0,u.yL)(e);if(t&&e.then(e=>{this.maybeEnriched=e,this.view.triggerNodeChange(this)}),t||null==e){let e=this.item,{provider:i}=e,s=new r.TreeItem(e.description??`Autolink ${e.prefix}${e.id}`,r.TreeItemCollapsibleState.None);return s.description=i?.name??"Custom",s.iconPath=new r.ThemeIcon(t?"loading~spin":null==e.type?"link":"pullrequest"===e.type?"git-pull-request":"issues"),s.contextValue=d.U0.AutolinkedItem,s.tooltip=new r.MarkdownString(`${e.description?`Autolinked ${e.description}`:`${null==e.type?"Autolinked":"pullrequest"===e.type?"Autolinked Pull Request":"Autolinked Issue"} ${e.prefix}${e.id}`} \\
[${e.url}](${e.url}${null!=e.title?` "${e.title}"`:""})`),s}let i=(0,f.PI)(e.closedDate??e.updatedDate??e.createdDate),s=new r.TreeItem(`${e.id}: ${e.title}`,r.TreeItemCollapsibleState.None);s.description=i,s.iconPath=(0,m.pr)(e),s.contextValue=`${d.U0.AutolinkedItem}+${"pullrequest"===e.type?"pr":"issue"}`;let n=` "Open ${"pullrequest"===e.type?"Pull Request":"Issue"} \\#${e.id} on ${e.provider.name}"`,o=new r.MarkdownString(`${(0,m.xu)(e)} [**${e.title.trim()}**](${e.url}${n}) \\
[#${e.id}](${e.url}${n}) was ${e.closed?"merged"===e.state?"merged":"closed":"opened"} ${i}`,!0);return o.supportHtml=!0,o.isTrusted=!0,s.tooltip=o,s}};var w=i(9972),v=i(5158);let y=0;let AutolinkedItemsNode=class AutolinkedItemsNode extends g.l{constructor(e,t,i,r,n){super("autolinks",s.nk.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this.log=r,this.expand=n,this._instanceId=y++,this.updateContext({autolinksId:String(this._instanceId)}),this._uniqueId=(0,d.pF)(this.type,this.context)}_instanceId;get id(){return this._uniqueId}async getChildren(){if(null==this.children){let e;let t=[...this.log.commits.values()];if(t.length){let i=await this.view.container.git.getBestRemoteWithProvider(this.repoPath),r=t.map(e=>e.message).join("\n"),[s]=await Promise.allSettled([this.view.container.autolinks.getEnrichedAutolinks(r,i).then(e=>null!=e?(0,o.sc)(e,void 0,250):void 0)]),n=(0,u.Ro)(s);n?.size&&(e=[...n.values()].map(([e,t])=>null!=e&&(0,p.r0)(e?.value)?new v.X(this.view,this,e.value,this.log.repoPath):new AutolinkedItemNode(this.view,this,this.repoPath,t,e?.value)))}e?.length||(e=[new w.S2(this.view,this,"No autolinked issues or pull requests could be found.")]),this.log.hasMore&&e.push(new w.cb(this.view,this.parent,e[e.length-1],{context:{expandAutolinks:!0},message:"Load more commits to search for autolinks"})),this.children=e}return this.children}getTreeItem(){let e=new r.TreeItem("Autolinked Issues and Pull Requests",this.expand?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=d.U0.AutolinkedItems,e}};var b=i(4424),C=i(8364),R=i(4621),S=i(5179),P=Object.defineProperty,A=Object.getOwnPropertyDescriptor;let ResultsCommitsNode=class ResultsCommitsNode extends d.eu{constructor(e,t,i,r,n,o,a){super("results-commits",s.nk.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this._label=r,this._results=n,null!=n.direction&&this.updateContext({branchStatusUpstreamType:n.direction}),this._uniqueId=(0,d.pF)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this),this._options={autolinks:!0,expand:!0,...o},null!=a&&(this.splatted=a)}limit;_options;get id(){return this._uniqueId}get ref1(){return this._results.comparison?.ref1}get ref2(){return this._results.comparison?.ref2}get isComparisonFiltered(){return this.context.comparisonFiltered}_onChildrenCompleted;async getChildren(){this._onChildrenCompleted?.cancel(),this._onChildrenCompleted=(0,u.v6)();let{log:e}=await this.getCommitsQueryResults();if(null==e)return this._onChildrenCompleted?.fulfill(),[new w.S2(this.view,this,"No results found")];let[t]=await Promise.all([this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath)]),i=[];this._options.autolinks&&i.push(new AutolinkedItemsNode(this.view,this,this.uri.repoPath,e,this._expandAutolinks)),this._expandAutolinks=!1;let{files:r}=this._results;null==r||this.isComparisonFiltered||i.push(new R.o(this.view,this,this.uri.repoPath,r.ref1,r.ref2,r.query,this._results.direction,{expand:!1}));let s={expand:this._options.expand&&1===e.count};return i.push(...(0,C.h)((0,c.Tj)(e.commits.values(),e=>(0,n.kk)(e)?new S.m(this.view,this,e,{icon:!0}):new b.e(this.view,this,e,void 0,void 0,t,s)),this,void 0,{show:e.count>1})),e.hasMore&&i.push(new w.cb(this.view,this,i[i.length-1])),this._onChildrenCompleted?.fulfill(),i}async getTreeItem(){let e,t;if(this._results.deferred)e=this._label,t=r.TreeItemCollapsibleState.Collapsed;else{let i;let s=await (0,o.wW)(this.getCommitsQueryResults(),void 0,100);s.paused?(queueMicrotask(async()=>{try{await this._onChildrenCompleted?.promise}catch{return}await s.value,this.view.triggerNodeChange(this.parent)}),t=r.TreeItemCollapsibleState.Collapsed):({label:e,log:i}=s.value,t=null==i||0===i.count?r.TreeItemCollapsibleState.None:this._options.expand?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed)}let i=new r.TreeItem(e??this._label,t);return i.id=this.id,i.contextValue=null!=this._results.comparison?d.U0.CompareResultsCommits:d.U0.SearchResultsCommits,i.description=this._options.description,i}refresh(e=!1){e&&(this._commitsQueryResults=void 0,this._commitsQueryResultsPromise=void 0,this.getCommitsQueryResults())}_commitsQueryResultsPromise;async getCommitsQueryResults(){if(null==this._commitsQueryResultsPromise){this._commitsQueryResultsPromise=this._results.query(this.limit??a.H.get("advanced.maxSearchItems"));let e=await this._commitsQueryResultsPromise;this._commitsQueryResults=e,this._hasMore=e.hasMore,this._results.deferred&&(this._results.deferred=!1,this.parent.triggerChange(!1))}return this._commitsQueryResultsPromise}_commitsQueryResults;maybeGetCommitsQueryResults(){return this._commitsQueryResults}_hasMore=!0;get hasMore(){return this._hasMore}_expandAutolinks=!1;async loadMore(e,t){let i=await this.getCommitsQueryResults();i?.hasMore&&(null!=t&&"expandAutolinks"in t&&(this._expandAutolinks=!!t.expandAutolinks),await i.more?.(e??this.view.config.pageItemLimit),this.limit=i.log?.count,this.triggerChange(!1))}};((e,t,i,r)=>{for(var s,n=r>1?void 0:r?A(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&P(t,i,n)})([(0,l.G)(),(0,h.Yz)()],ResultsCommitsNode.prototype,"refresh",1)},4621:(e,t,i)=>{i.d(t,{U:()=>S,o:()=>ResultsFilesNode});var r,s=i(1398),n=i(7931),o=i(2927),a=i(6950),l=i(8180),h=i(4026),c=i(4911),u=i(3131),d=i(7279),p=i(5911),g=i(9573),m=i(3807),f=i(6861),w=i(5248),v=i(6645),y=i(4178),b=i(522);let ResultsFileNode=class ResultsFileNode extends y.p{constructor(e,t,i,r,s,o,a){super("results-file",n.nk.fromFile(r,i,s||o),e,t,r),this.ref1=s,this.ref2=o,this.direction=a,this.updateContext({file:r}),null!=this.context.storedComparisonId?this._uniqueId=`${(0,b.dt)(this.context.storedComparisonId)}${this.direction}|${r.path}`:this._uniqueId=(0,p.pF)(this.type,this.context)}toClipboard(){return this.file.path}get ref(){return(0,v.kA)(this.ref1||this.ref2,this.uri.repoPath)}getChildren(){return[]}getTreeItem(){let e=new s.TreeItem(this.label,s.TreeItemCollapsibleState.None);e.contextValue=p.U0.ResultsFile,e.description=this.description,e.tooltip=f.Z.fromTemplate(`\${file}
\${directory}/

\${status}\${ (originalPath)}`,this.file);let t=(0,w.OG)(this.file.status);return e.iconPath={dark:this.view.container.context.asAbsolutePath((0,c.HS)("images","dark",t)),light:this.view.container.context.asAbsolutePath((0,c.HS)("images","light",t))},e.command=this.getCommand(),e.checkboxState={state:this.getState("checked")??s.TreeItemCheckboxState.Unchecked,tooltip:"Mark as Reviewed"},e}_description;get description(){return void 0===this._description&&(this._description=f.Z.fromTemplate(this.view.config.formats.files.description,this.file,{relativePath:this.relativePath})),this._description}_folderName;get folderName(){return void 0===this._folderName&&(this._folderName=(0,c.A3)(this.uri.relativePath)),this._folderName}_label;get label(){return void 0===this._label&&(this._label=f.Z.fromTemplate(this.view.config.formats.files.label,this.file,{relativePath:this.relativePath})),this._label}_relativePath;get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0,this._description=void 0}get priority(){return 0}getCommand(){let e={lhs:{sha:this.ref1,uri:("R"===this.file.status||"C"===this.file.status)&&"behind"===this.direction?n.nk.fromFile(this.file,this.uri.repoPath,this.ref2,!0):this.uri},rhs:{sha:this.ref2,uri:("R"===this.file.status||"C"===this.file.status)&&"behind"!==this.direction?n.nk.fromFile(this.file,this.uri.repoPath,this.ref2,!0):this.uri},repoPath:this.uri.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes",command:m.Ts.DiffWith,arguments:[e]}}};var C=Object.defineProperty,R=Object.getOwnPropertyDescriptor,S=((r=S||{})[r.Left=0]="Left",r[r.Right=1]="Right",r);let ResultsFilesNode=class ResultsFilesNode extends p.eu{constructor(e,t,i,r,s,o,a,l){super("results-files",n.nk.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this.ref1=r,this.ref2=s,this._filesQuery=o,this.direction=a,null!=this.direction&&this.updateContext({branchStatusUpstreamType:this.direction}),this._uniqueId=(0,p.pF)(this.type,this.context),this._options={expand:!0,timeout:100,...l}}_options;get id(){return this._uniqueId}get filter(){return this.getState("filter")}set filter(e){this.filter!==e&&(this.storeState("filter",e,!0),this._filterResults=void 0,this.triggerChange(!1))}get filterable(){return null!=this.filter||this.ref1!==this.ref2&&void 0===this.direction}async getFilesComparison(){let{files:e}=await this.getFilesQueryResults();return{files:e??[],repoPath:this.repoPath,ref1:this.ref1,ref2:this.ref2}}getFilterContextValue(){switch(this.filter){case 0:return"+filtered~left";case 1:return"+filtered~right";default:return""}}async getChildren(){let e=await this.getFilesQueryResults(),t=(null!=this.filter?e.filtered?.get(this.filter):void 0)??e.files;if(null==t)return[];let i=[...(0,h.Tj)(t,e=>new ResultsFileNode(this.view,this,this.repoPath,e,this.ref1,this.ref2,this.direction))];if("list"!==this.view.config.files.layout){let e=(0,o.Ay)(i,e=>e.uri.relativePath.split("/"),(...e)=>(0,c.Fd)((0,c.HS)(...e)),this.view.config.files.compact);i=new g.x(this.view,this,e,this.repoPath,"",void 0).getChildren()}else i.sort((e,t)=>e.priority-t.priority||(0,d.wN)(e.label,t.label));return i}async getTreeItem(){let e,t,i,r,n,o;let a=this.filter;try{let l=await (0,u.nZ)(this.getFilesQueryResults(),!1===this._options.timeout?void 0:this._options.timeout);e=l.label,null==a&&null!=l.stats&&(t=`${(0,d.td)("addition",l.stats.additions)} (+), ${(0,d.td)("deletion",l.stats.deletions)} (-)${l.stats.approximated?" *approximated":""}`,o=`${e}, ${t}`),null!=a?(t="Filtered",o=`${e} &mdash; ${t}`,r=l.filtered?.get(a),null==r&&(e="files changed",i=new s.ThemeIcon("ellipsis"),n=s.TreeItemCollapsibleState.Collapsed,this._filterResults?.then(()=>queueMicrotask(()=>this.triggerChange(!1))))):r=l.files,void 0===n&&(n=null==r||0===r.length?s.TreeItemCollapsibleState.None:this._options.expand?s.TreeItemCollapsibleState.Expanded:s.TreeItemCollapsibleState.Collapsed)}catch(t){t instanceof u.NY&&t.promise.then(()=>queueMicrotask(()=>this.triggerChange(!1))),e="files changed",i=new s.ThemeIcon("ellipsis"),n=s.TreeItemCollapsibleState.Collapsed}let l=new s.TreeItem(`${null!=a&&null!=r?`Showing ${r.length} of `:""}${e}`,n);return l.description=t,l.id=this.id,l.iconPath=i,l.contextValue=`${p.U0.ResultsFiles}${this.filterable?"+filterable":""}${this.getFilterContextValue()}`,l.tooltip=o,l}refresh(e=!1){e&&(this.deleteState("filter"),this._filterResults=void 0,this._filesQueryResults=this._filesQuery())}_filesQueryResults;_filterResults;async getFilesQueryResults(){void 0===this._filesQueryResults&&(this._filesQueryResults=this._filesQuery());let e=await this._filesQueryResults;return null!=e.files&&this.filterable&&null!=this.filter&&e.filtered?.get(this.filter)==null&&(void 0===this._filterResults&&(this._filterResults=this.filterResults(this.filter,e)),await this._filterResults),e}async filterResults(e,t){let i;let r=0===this.filter?this.ref2:this.ref1,s=await this.view.container.git.getMergeBase(this.repoPath,this.ref1||"HEAD",this.ref2||"HEAD");if(null!=s){let e=await this.view.container.git.getDiffStatus(this.uri.repoPath,`${s}..${r}`);null!=e&&(i=new Set(e.map(e=>e.path)))}else{let e=await this.view.container.git.getCommit(this.uri.repoPath,r||"HEAD");e?.files!=null&&(i=new Set(e.files.map(e=>e.path)))}null==t.filtered&&(t.filtered=new Map),t.filtered.set(e,null==i?[]:t.files.filter(e=>i.has(e.path)))}};((e,t,i,r)=>{for(var s,n=r>1?void 0:r?R(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&C(t,i,n)})([(0,a.G)(),(0,l.Yz)()],ResultsFilesNode.prototype,"refresh",1)},8547:(e,t,i)=>{i.d(t,{X:()=>SearchResultsNode});var r=i(1398),s=i(9032),n=i(6090),o=i(7931),a=i(3269),l=i(6950),h=i(8180),c=i(7279),u=i(5911),d=i(1652),p=Object.defineProperty,g=Object.getOwnPropertyDescriptor;let m=0;let SearchResultsNode=class SearchResultsNode extends u.eu{constructor(e,t,i,r,s,n,l=0){super("search-results",o.nk.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this._search=r,this._labels=s,this._searchQueryOrLog=n,this._storedAt=l,this._instanceId=m++,this.updateContext({searchId:`${(0,a.b4)(this._search)}+${this._instanceId}`}),this._uniqueId=(0,u.pF)(this.type,this.context),0===this._storedAt&&(this._storedAt=Date.now(),this.store(!0))}_instanceId;get id(){return this._uniqueId}toClipboard(){return this.search.query}get order(){return this._storedAt}get search(){return this._search}dismiss(){this.remove(!0)}_resultsNode;ensureResults(){if(null==this._resultsNode){let e;null==this._searchQueryOrLog?(e=!0,this._searchQueryOrLog=this.getSearchQuery({label:this._labels.queryLabel})):"function"!=typeof this._searchQueryOrLog&&(this._searchQueryOrLog=this.getSearchQuery({label:this._labels.queryLabel},this._searchQueryOrLog)),this._resultsNode=new d.V(this.view,this,this.repoPath,this._labels.label,{query:this._searchQueryOrLog,deferred:e},{expand:!1},!0)}return this._resultsNode}async getChildren(){return this.ensureResults().getChildren()}async getTreeItem(){let e=await this.ensureResults().getTreeItem();if(e.id=this.id,e.contextValue=u.U0.SearchResults,this.view.container.git.repositoryCount>1){let t=this.view.container.git.getRepository(this.repoPath);e.description=t?.formattedName??this.repoPath}return e.iconPath=new r.ThemeIcon("search"),e}get hasMore(){return this.ensureResults().hasMore}async loadMore(e){return this.ensureResults().loadMore(e)}async edit(e){if(null==e){await (0,n.b)({command:"search",prefillOnly:!0,state:{repo:this.repoPath,...this.search,showResultsInSideBar:this}});return}let t=this.getStorageId();this._search=e.pattern,this._labels=e.labels,this._searchQueryOrLog=e.log,this._resultsNode=void 0,await this.replace(t,!0),this.triggerChange(!1),queueMicrotask(()=>this.view.reveal(this,{expand:!0,focus:!0,select:!0}))}refresh(e=!1){this._resultsNode?.refresh(e)}getSearchLabel(e,t){if("string"==typeof e)return e;let i=t?.count??0,r=void 0===e.resultsType?{singular:"search result",plural:"search results"}:e.resultsType;return`${(0,c.td)(r.singular,i,{format:e=>t?.hasMore?`${e}+`:void 0,plural:r.plural,zero:"No"})} ${e.label}`}getSearchQuery(e,t){let i=!0;return async r=>{t=await (t??this.view.container.git.richSearchCommits(this.repoPath,this.search)),i||t?.query==null||(t=await t.query(r)),i=!1;let s={label:this.getSearchLabel(e.label,t),log:t,hasMore:t?.hasMore??!1};return s.hasMore&&(s.more=async t=>{s.log=await s.log?.more?.(t)??s.log,s.label=this.getSearchLabel(e.label,s.log),s.hasMore=s.log?.hasMore??!0}),s}}getStorageId(){return(0,s.Fx)(`${this.repoPath}|${(0,a.b4)(this.search)}`,"base64")}remove(e=!1){return this.view.updateStorage(this.getStorageId(),void 0,e)}async replace(e,t=!1){return await this.view.updateStorage(e,void 0,t),this.store(t)}store(e=!1){return this.view.updateStorage(this.getStorageId(),{type:"search",timestamp:this._storedAt,path:this.repoPath,labels:this._labels,search:(0,a.GQ)(this.search)},e)}};((e,t,i,r)=>{for(var s,n=r>1?void 0:r?g(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&p(t,i,n)})([(0,l.G)(),(0,h.Yz)()],SearchResultsNode.prototype,"refresh",1)},5179:(e,t,i)=>{i.d(t,{m:()=>StashNode});var r=i(1398),s=i(236),n=i(2927),o=i(4832),a=i(4911),l=i(7279),h=i(5911),c=i(4178),u=i(9573),d=i(7558);let StashFileNode=class StashFileNode extends d.p{constructor(e,t,i,r){super("stash-file",e,t,i,r)}get contextValue(){return`${h.U0.File}+stashed`}};let StashNode=class StashNode extends c.t{constructor(e,t,i,r){super("stash",i.getGitUri(),e,t),this.parent=t,this.commit=i,this.options=r,this.updateContext({commit:i}),this._uniqueId=(0,h.pF)(this.type,this.context)}get id(){return this._uniqueId}toClipboard(){return this.commit.stashName}get ref(){return this.commit}async getChildren(){let e=(await this.commit.getCommitsForFiles()).map(e=>new StashFileNode(this.view,this,e.file,e));if("list"!==this.view.config.files.layout){let t=(0,n.Ay)(e,e=>e.uri.relativePath.split("/"),(...e)=>(0,a.Fd)((0,a.HS)(...e)),this.view.config.files.compact);e=new u.x(this.view,this,t,this.repoPath,"",void 0).getChildren()}else e.sort((e,t)=>(0,l.wN)(e.label,t.label));return e}getTreeItem(){let e=new r.TreeItem(s.c.fromTemplate(this.view.config.formats.stashes.label,this.commit,{messageTruncateAtNewLine:!0,dateFormat:o.H.get("defaultDateFormat")}),r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.description=s.c.fromTemplate(this.view.config.formats.stashes.description,this.commit,{messageTruncateAtNewLine:!0,dateFormat:o.H.get("defaultDateFormat")}),e.contextValue=h.U0.Stash,this.options?.icon&&(e.iconPath=new r.ThemeIcon("archive")),e.tooltip=s.c.fromTemplate(`\${'On 'stashOnRef
}\${ago} (\${date})

\${message}`,this.commit,{dateFormat:o.H.get("defaultDateFormat")}),e}}},5677:(e,t,i)=>{i.d(t,{Z:()=>StatusFileNode});var r=i(1398),s=i(3807),n=i(6861),o=i(7931),a=i(5248),l=i(4911),h=i(7279),c=i(5329),u=i(5911),d=i(9115);let StatusFileNode=class StatusFileNode extends c.u{commits;_hasStagedChanges;_hasUnstagedChanges;_type;constructor(e,t,i,r,s,n){let a,l=!1,h=!1;for(let e of s)if(e.isUncommitted){if(e.isUncommittedStaged){l=!0,h||(a=e.sha);break}a=void 0,h=!0}else if(h)break;else{a=e.sha;break}super("status-file",o.nk.fromFile(i,r,a),e,t,i),this.commits=s,this._type=n,this._hasStagedChanges=l,this._hasUnstagedChanges=h}toClipboard(){return this.fileName}get fileName(){return this.file.path}getChildren(){return this.commits.map(e=>new d.f(this.view,this,this.file,e))}getTreeItem(){let e=new r.TreeItem(this.label,r.TreeItemCollapsibleState.None);if(e.description=this.description,(this._hasStagedChanges||this._hasUnstagedChanges)&&1===this.commits.length)e.contextValue=u.U0.File,this._hasStagedChanges?(e.contextValue+="+staged",e.tooltip=n.Z.fromTemplate(`\${file}
\${directory}/

\${status}\${ (originalPath)} in Index (staged)`,this.file)):(e.contextValue+="+unstaged",e.tooltip=n.Z.fromTemplate(`\${file}
\${directory}/

\${status}\${ (originalPath)} in Working Tree`,this.file)),e.resourceUri=this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath),e.iconPath=r.ThemeIcon.File,e.command=this.getCommand();else{if(e.collapsibleState=r.TreeItemCollapsibleState.Collapsed,this._hasStagedChanges||this._hasUnstagedChanges)e.contextValue=u.U0.File,this._hasStagedChanges&&this._hasUnstagedChanges?e.contextValue+="+staged+unstaged":this._hasStagedChanges?e.contextValue+="+staged":e.contextValue+="+unstaged",e.resourceUri=this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath),e.iconPath=r.ThemeIcon.File;else{e.contextValue=u.U0.StatusFileCommits;let t=(0,a.OG)(this.file.status);e.iconPath={dark:this.view.container.context.asAbsolutePath((0,l.HS)("images","dark",t)),light:this.view.container.context.asAbsolutePath((0,l.HS)("images","light",t))}}e.tooltip=n.Z.fromTemplate(`\${file}
\${directory}/

\${status}\${ (originalPath)} in ${this.getChangedIn()}`,this.file),e.command=this.getCommand()}return this._label=void 0,this._description=void 0,e}_description;get description(){return null==this._description&&(this._description=n.Z.fromTemplate(this.view.config.formats.files.description,{...this.file,commit:this.commit},{relativePath:this.relativePath})),this._description}_folderName;get folderName(){return null==this._folderName&&(this._folderName=(0,l.A3)(this.uri.relativePath)),this._folderName}_label;get label(){return null==this._label&&(this._label=n.Z.fromTemplate(this.view.config.formats.files.label,{...this.file,commit:this.commit},{relativePath:this.relativePath})),this._label}get commit(){return this.commits[0]}get priority(){return this._hasStagedChanges&&!this._hasUnstagedChanges?-3:this._hasStagedChanges?-2:this._hasUnstagedChanges?-1:0}_relativePath;get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0,this._description=void 0}getChangedIn(){let e=[],t=0;return this._hasUnstagedChanges&&(t++,e.push("Working Tree")),this._hasStagedChanges&&(t++,e.push("Index (staged)")),this.commits.length>t&&(t=this.commits.length-t),t>0&&e.push((0,h.td)("commit",t)),e.length>2&&(e[e.length-1]=`and ${e[e.length-1]}`),e.join(e.length>2?", ":" and ")}getCommand(){let e;if((this._hasStagedChanges||this._hasUnstagedChanges)&&1===this.commits.length){let e={commit:this.commit,uri:o.nk.fromFile(this.file,this.repoPath),line:0,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes with Previous Revision",command:s.Ts.DiffWithPrevious,arguments:[void 0,e]}}switch(this._type){case"ahead":case"behind":{let t=this.commits[this.commits.length-1],i=this.commits[0];e={lhs:{sha:`${t.sha}^`,uri:o.nk.fromFile(t.files?.find(e=>e.path===this.file.path)??this.file.path,this.repoPath,`${t.sha}^`,!0)},rhs:{sha:i.sha,uri:o.nk.fromFile(i.files?.find(e=>e.path===this.file.path)??this.file.path,this.repoPath,i.sha)},repoPath:this.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}};break}default:{let t=this.commits[this.commits.length-1],i=t.files?.find(e=>e.path===this.file.path)??this.file;e={lhs:{sha:`${t.sha}^`,uri:o.nk.fromFile(i,this.repoPath,void 0,!0)},rhs:{sha:"",uri:o.nk.fromFile(this.file,this.repoPath)},repoPath:this.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}}}}return{title:"Open Changes",command:s.Ts.DiffWith,arguments:[e]}}}},1051:(e,t,i)=>{i.d(t,{DN:()=>ViewBase,lm:()=>w});var r=i(1398),s=i(2434),n=i(7899),o=i(4832),a=i(8180),l=i(4022),h=i(560),c=i(3916),u=i(3446),d=i(3131),p=i(5911),g=Object.defineProperty,m=Object.getOwnPropertyDescriptor,f=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?m(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&g(t,i,n),n};let ViewBase=class ViewBase{constructor(e,t,i,s){if(this.container=e,this.type=t,this.name=i,this.trackingFeature=s,this.disposables.push((0,l.Oo)(e.onReady)(this.onReady,this)),this.container.debugging||o.H.get("debug")){let e=function(e,t,i){null==e.tooltip&&(e.tooltip=new r.MarkdownString(null!=e.label&&"string"!=typeof e.label?e.label.label:e.label??"")),"string"==typeof e.tooltip?e.tooltip=`${e.tooltip}

---
context: ${e.contextValue}
node: ${t.toString()}${null!=i?`
parent: ${i.toString()}`:""}`:e.tooltip.appendMarkdown(`

---

context: \`${e.contextValue}\`\\
node: \`${t.toString()}\`${null!=i?`\\
parent: \`${i.toString()}\``:""}`)},t=this.getTreeItem;this.getTreeItem=async function(i){let r=await t.apply(this,[i]);return null==i.resolveTreeItem&&e(r,i,i.getParent()),r};let i=this.resolveTreeItem;this.resolveTreeItem=async function(t,r,s){return e(t=await i.apply(this,[t,r,s]),r,r.getParent()),t}}this.disposables.push(...this.registerCommands())}get id(){return`gitlens.views.${this.type}`}_onDidInitialize=new r.EventEmitter;initialized=!1;_onDidChangeTreeData=new r.EventEmitter;get onDidChangeTreeData(){return this._onDidChangeTreeData.event}_onDidChangeSelection=new r.EventEmitter;get onDidChangeSelection(){return this._onDidChangeSelection.event}_onDidChangeVisibility=new r.EventEmitter;get onDidChangeVisibility(){return this._onDidChangeVisibility.event}_onDidChangeNodeCollapsibleState=new r.EventEmitter;get onDidChangeNodeCollapsibleState(){return this._onDidChangeNodeCollapsibleState.event}_onDidChangeNodesCheckedState=new r.EventEmitter;get onDidChangeNodesCheckedState(){return this._onDidChangeNodesCheckedState.event}disposables=[];root;tree;_lastKnownLimits=new Map;dispose(){this._nodeState?.dispose(),this._nodeState=void 0,r.Disposable.from(...this.disposables).dispose()}onReady(){this.initialize({canSelectMany:this.canSelectMany,showCollapseAll:this.showCollapseAll}),queueMicrotask(()=>this.onConfigurationChanged())}get canReveal(){return!0}get canSelectMany(){return!1}_nodeState;get nodeState(){return null==this._nodeState&&(this._nodeState=new ViewNodeState),this._nodeState}get showCollapseAll(){return!0}filterConfigurationChanged(e){if(!o.H.changed(e,"views"))return!1;if(o.H.changed(e,`views.${this.configKey}`))return!0;for(let t of s.md)if(o.H.changed(e,`views.${t}`))return!0;return!1}get badge(){return this.tree?.badge}set badge(e){null!=this.tree&&(this.tree.badge=e)}_title;get title(){return this._title}set title(e){this._title=e,null!=this.tree&&(this.tree.title=e)}_description;get description(){return this._description}set description(e){this._description=e,null!=this.tree&&(this.tree.description=e)}_message;get message(){return this._message}set message(e){this._message=e,null!=this.tree&&(this.tree.message=e)}getQualifiedCommand(e){return`gitlens.views.${this.type}.${e}`}onConfigurationChanged(e){null!=e&&null!=this.root&&this.refresh(!0)}initialize(e={}){this.tree=r.window.createTreeView(this.id,{...e,treeDataProvider:this}),this.disposables.push(o.H.onDidChange(e=>{this.filterConfigurationChanged(e)&&(this._config=void 0,this.onConfigurationChanged(e))},this),this.tree,this.tree.onDidChangeSelection((0,h.sg)(this.onSelectionChanged,250),this),this.tree.onDidChangeVisibility((0,h.sg)(this.onVisibilityChanged,250),this),this.tree.onDidChangeCheckboxState(this.onCheckboxStateChanged,this),this.tree.onDidCollapseElement(this.onElementCollapsed,this),this.tree.onDidExpandElement(this.onElementExpanded,this)),null!=this._title?this.tree.title=this._title:this._title=this.tree.title,null!=this._description&&(this.tree.description=this._description),null!=this._message&&(this.tree.message=this._message)}ensureRoot(e=!1){return(null==this.root||e)&&(this.root=this.getRoot()),this.root}getChildren(e){if(null!=e)return e.getChildren();let t=this.ensureRoot().getChildren();return this.initialized||((0,d.yL)(t)?t.then(()=>{this.initialized||(this.initialized=!0,setTimeout(()=>this._onDidInitialize.fire(),1))}):(this.initialized=!0,setTimeout(()=>this._onDidInitialize.fire(),1))),t}getParent(e){return e.getParent()}getTreeItem(e){return e.getTreeItem()}resolveTreeItem(e,t,i){return t.resolveTreeItem?.(e,i)??e}onElementCollapsed(e){this._onDidChangeNodeCollapsibleState.fire({...e,state:r.TreeItemCollapsibleState.Collapsed})}onElementExpanded(e){this._onDidChangeNodeCollapsibleState.fire({...e,state:r.TreeItemCollapsibleState.Expanded})}onCheckboxStateChanged(e){try{for(let[t,i]of e.items){if(null==t.id)throw Error("Id is required for checkboxes");t.storeState("checked",i,!0)}}finally{this._onDidChangeNodesCheckedState.fire(e)}}onSelectionChanged(e){this._onDidChangeSelection.fire(e),this.notifySelections()}onVisibilityChanged(e){e.visible&&this.container.usage.track(`${this.trackingFeature}:shown`),this._onDidChangeVisibility.fire(e),e.visible&&this.notifySelections()}notifySelections(){let e=this.selection?.[0];null!=e&&((e.is("commit")||e.is("stash")||e.is("file-commit")||e.is("commit-file")||e.is("stash-file"))&&this.container.events.fire("commit:selected",{commit:e.commit,interaction:"passive",preserveFocus:!0,preserveVisibility:!0},{source:this.id}),(e.is("file-commit")||e.is("commit-file")||e.is("stash-file"))&&this.container.events.fire("file:selected",{uri:e.uri,preserveFocus:!0,preserveVisibility:!0},{source:this.id}))}get activeSelection(){if(null!=this.tree&&null!=this.root)return this.tree.selection[0]}get selection(){return null==this.tree||null==this.root?[]:this.tree.selection}get visible(){return this.tree?.visible??!1}async findNode(e,t){let i=(0,u.dQ)();async function r(){try{return await this.findNodeCoreBFS(e,this.ensureRoot(),t?.allowPaging??!1,t?.canTraverse,t?.maxDepth??2,t?.token)}catch(e){c.Vy.error(e,i);return}}return this.initialized?r.call(this):(this.show({preserveFocus:!0}),new Promise(e=>(0,l.Oo)(this._onDidInitialize.event)(()=>e(r.call(this)),this)))}async findNodeCoreBFS(e,t,i,r,s,n){let a,l;let h=[t,void 0],c=o.H.get("advanced.maxListItems"),u=0;for(;h.length>1&&!n?.isCancellationRequested;){if(null==(a=h.shift())){if(u++,h.push(void 0),u>s)break;continue}if(e(a))return a;if(null!=r){let e=r(a);if((0,d.yL)(e)){if(!await e)continue}else if(!e)continue}if(0!==(l=await a.getChildren()).length){for(;null!=a&&!(0,p.DQ)(a);)a=await a.getSplattedChild?.();if(null!=a&&(0,p.DQ)(a)){let t=l.find(e);if(null!=t)return t;if(i&&a.hasMore)for(;;){if(n?.isCancellationRequested)return;if(await this.loadMoreNodeChildren(a,c),null!=(t=(await (0,d.nZ)(Promise.resolve(a.getChildren()),6e4,n,{onDidCancel:e=>e([])})).find(e)))return t;if(!a.hasMore)break}continue}h.push(...l)}}}async ensureRevealNode(e,t){let i=[],r=e;for(;null!=r;)i.push(r),r=r.getParent();for(let e of(i.length>1&&i.pop(),i.reverse()))try{await this.reveal(e,t)}catch{}}async refresh(e=!1){e&&this.nodeState.reset(),await this.root?.refresh?.(e),this.triggerNodeChange()}async refreshNode(e,t=!1,i=!1){let r=await e.refresh?.(t);(i||!0!==r)&&this.triggerNodeChange(e)}async reveal(e,t){if(null!=this.tree)try{await this.tree.reveal(e,t)}catch(e){c.Vy.error(e)}}async show(e){let t=(0,u.dQ)();try{await (0,n.S4)(`${this.id}.focus`,e)}catch(e){c.Vy.error(e,t)}}getNodeLastKnownLimit(e){return this._lastKnownLimits.get(e.id)}async loadMoreNodeChildren(e,t,i,r){null!=i&&await this.reveal(i,{select:!0}),await e.loadMore(t,r),this._lastKnownLimits.set(e.id,e.limit)}resetNodeLastKnownLimit(e){this._lastKnownLimits.delete(e.id)}triggerNodeChange(e){this._onDidChangeTreeData.fire(null!=e&&e!==this.root?e:void 0)}_config;get config(){if(null==this._config){let e={...o.H.get("views")};for(let t of s.ZD)delete e[t];this._config={...e,...o.H.get("views")[this.configKey]}}return this._config}};f([(0,a.Rm)({args:{0:"<function>",1:e=>`options=${JSON.stringify({...e,canTraverse:void 0,token:void 0})}`}})],ViewBase.prototype,"findNode",1),f([(0,a.Yz)()],ViewBase.prototype,"refresh",1),f([(0,a.Yz)({args:{0:e=>e.toString()}})],ViewBase.prototype,"refreshNode",1),f([(0,a.Rm)({args:{0:e=>e.toString()}})],ViewBase.prototype,"reveal",1),f([(0,a.Rm)()],ViewBase.prototype,"show",1),f([(0,a.Yz)({args:{0:e=>e.toString(),2:e=>e?.toString()}})],ViewBase.prototype,"loadMoreNodeChildren",1),f([(0,a.Yz)({args:{0:e=>e.toString()},singleLine:!0})],ViewBase.prototype,"resetNodeLastKnownLimit",1),f([(0,a.Yz)({args:{0:e=>e?.toString()}})],ViewBase.prototype,"triggerNodeChange",1);let ViewNodeState=class ViewNodeState{_store;_stickyStore;dispose(){this.reset(),this._stickyStore?.clear(),this._stickyStore=void 0}reset(){this._store?.clear(),this._store=void 0}delete(e,t){for(let i of[this._store,this._stickyStore])if(null!=i)for(let[r,s]of i)r.startsWith(e)&&(s.delete(t),0===s.size&&i.delete(r))}deleteState(e,t){if(null==t)this._store?.delete(e),this._stickyStore?.delete(e);else for(let i of[this._store,this._stickyStore]){if(null==i)continue;let r=i.get(e);null!=r&&(r.delete(t),0===r.size&&i.delete(e))}}get(e,t){let i=new Map;for(let r of[this._store,this._stickyStore])if(null!=r)for(let[s,n]of r)s.startsWith(e)&&n.has(t)&&i.set(s,n.get(t));return i}getState(e,t){return this._stickyStore?.get(e)?.get(t)??this._store?.get(e)?.get(t)}storeState(e,t,i,r){let s;r?(null==this._stickyStore&&(this._stickyStore=new Map),s=this._stickyStore):(null==this._store&&(this._store=new Map),s=this._store);let n=s.get(e);null!=n?n.set(t,i):s.set(e,new Map([[t,i]]))}};function w(e,t){if(!e?.length)return;let i=t?.length?e.filter(e=>!t.includes(e)):[...e];if(i.length){if(i.length>1e3)setTimeout(()=>{for(let e of i)e.dispose()},500);else for(let e of i)e.dispose()}}},378:(e,t,i)=>{i.d(t,{$:()=>s});var r=i(2972);async function s(e,t){return r.m.instance.commitDetailsView.show(t,e)}},8299:(e,t,i)=>{i.d(t,{CommitDetailsWebviewProvider:()=>CommitDetailsWebviewProvider});var r=i(910),s=i(1398),n=i(9659),o=i(5176),a=i(3807),l=i(6090),h=i(9432),c=i(3161),u=i(236),d=i(5287),p=i(5313),g=i(8559),m=i(304),f=i(6645),w=i(9634),v=i(103),y=i(1298),b=i(7463),C=i(1014),R=i(1031),S=i(7899),P=i(4832),A=i(8973),k=i(8180),D=i(560),T=i(4026),_=i(3916),I=i(3446);let MRU=class MRU{constructor(e=10,t){this.maxSize=e,this.comparator=t}stack=[];get count(){return this.stack.length}_position=0;get position(){return this._position}add(e){this._position>0&&(this.stack.splice(0,this._position),this._position=0);let t=null!=this.comparator?this.stack.findIndex(t=>this.comparator(e,t)):this.stack.indexOf(e);-1!==t?this.stack.splice(t,1):this.stack.length===this.maxSize&&this.stack.pop(),this.stack.unshift(e),this._position=0}get(e){if(null!=e){if(e<0||e>=this.stack.length)return;return this.stack[e]}return this.stack.length>0?this.stack[0]:void 0}insert(e){this._position>0&&(this.stack.splice(0,this._position),this._position=0),this.stack.unshift(e),this._position++}navigate(e){if(!(this.stack.length<=1)){if("back"===e){if(this._position>=this.stack.length-1)return;this._position+=1}else{if(this._position<=0)return;this._position-=1}return this.stack[this._position]}}};var $=i(3131),E=i(1112),O=i(7565),x=i(1500),F=i(3355);let B="commitDetails",L=new F.Q2(B,"commit/suggestChanges"),U=new F.Q2(B,"commit/actions/execute"),W=new F.Q2(B,"file/actions/execute"),q=new F.Q2(B,"file/open"),M=new F.Q2(B,"file/openOnRemote"),N=new F.Q2(B,"file/compareWorking"),H=new F.Q2(B,"file/comparePrevious"),G=new F.Q2(B,"file/stage"),V=new F.Q2(B,"file/unstage"),Q=new F.Q2(B,"pickCommit"),j=new F.Q2(B,"searchCommit"),z=new F.Q2(B,"switchMode");new F.Q2(B,"autolinkSettings");let Y=new F.Q2(B,"pin"),K=new F.Q2(B,"navigate"),J=new F.Q2(B,"preferences/update"),Z=new F.Q2(B,"wip/createPatch"),X=new F.Q2(B,"wip/changeReviewMode"),ee=new F.Q2(B,"wip/showCodeSuggestion"),et=new F.Q2(B,"fetch"),ei=new F.Q2(B,"publish"),er=new F.Q2(B,"push"),es=new F.Q2(B,"pull"),en=new F.Q2(B,"switch"),eo=new F.Q2(B,"openPullRequestChanges"),ea=new F.Q2(B,"openPullRequestComparison"),el=new F.Q2(B,"openPullRequestOnRemote"),eh=new F.Q2(B,"openPullRequestDetails"),ec=new F.Oz(B,"explain"),eu=new F.C1(B,"didChange",!0),ed=new F.C1(B,"didChange/wip");new F.C1(B,"org/settings/didChange");let ep=new F.C1(B,"didChange/jira"),eg=new F.C1(B,"didChange/account"),em=new F.C1(B,"didChange/patch");var ef=Object.defineProperty,ew=Object.getOwnPropertyDescriptor,ev=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?ew(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&ef(t,i,n),n};let CommitDetailsWebviewProvider=class CommitDetailsWebviewProvider{constructor(e,t,i){this.container=e,this.host=t,this.options=i,this._context={mode:"commit",inReview:!1,navigationStack:{count:0,position:0},pinned:!1,preferences:this.getPreferences(),commit:void 0,richStateLoaded:!1,formattedMessage:void 0,autolinkedIssues:void 0,pullRequest:void 0,wip:void 0,orgSettings:this.getOrgSettings(),hasConnectedJira:void 0,hasAccount:void 0},this._disposable=s.Disposable.from(P.H.onDidChangeAny(this.onAnyConfigurationChanged,this),(0,A.wt)(this.onContextChanged,this),this.container.subscription.onDidChange(this.onSubscriptionChanged,this),e.integrations.onDidChangeConnectionState(this.onIntegrationConnectionStateChanged,this))}_bootstraping=!0;_context;_pendingContext;_disposable;_pinned=!1;_focused=!1;_commitStack=new MRU(10,(e,t)=>e.ref===t.ref);dispose(){this._disposable.dispose(),this._lineTrackerDisposable?.dispose(),this._repositorySubscription?.subscription.dispose(),this._selectionTrackerDisposable?.dispose(),this._wipSubscription?.subscription.dispose()}_skipNextRefreshOnVisibilityChange=!1;_shouldRefreshPullRequestDetails=!1;async onShowing(e,t,...i){let[r]=i;return r?.type==="wip"?this.onShowingWip(r):this.onShowingCommit(r,t)}get inReview(){return this._pendingContext?.inReview??this._context.inReview}async onShowingWip(e,t){this.updatePendingContext({source:e.source});let i=null!=e.inReview&&this.inReview!=e.inReview;return"wip"!=this.mode||null!=e.repository&&this._context.wip?.repo!=e.repository?(i&&this.updatePendingContext({inReview:e.inReview}),await this.setMode("wip",e.repository),i&&!0===e.inReview&&this.trackOpenReviewMode(e.source)):i&&await this.setInReview(e.inReview,e.source),(!t?.preserveVisibility||!!this.host.visible)&&("launchpad"===e.source&&this.host.visible&&(this._shouldRefreshPullRequestDetails=!0,this.onRefresh()),!0)}async onShowingCommit(e,t){let i,r;if((0,x.c)(e)){let{commit:t}=e.state;t?.repoPath!=null&&t?.sha!=null&&(i=null!=t.stashNumber?{commit:(0,f.kA)(t.sha,t.repoPath,{refType:"stash",name:t.message,number:t.stashNumber})}:{commit:(0,f.kA)(t.sha,t.repoPath,{refType:"revision",message:t.message})})}else i=null!=e&&"object"==typeof e?e:void 0;return null!=i&&(i.preserveFocus&&(null==t?t={preserveFocus:!0}:t.preserveFocus=!0),{commit:r,...i}=i),null!=r&&"wip"===this.mode&&i?.interaction!=="passive"&&await this.setMode("commit"),null!=r||this._pinned||(r=this.getBestCommitOrStash()),null==r||this._context.commit?.ref.startsWith(r.ref)||await this.updateCommit(r,{pinned:!1}),(!i?.preserveVisibility||!!this.host.visible)&&(this._skipNextRefreshOnVisibilityChange=!0,!0)}async trackOpenReviewMode(e){if(this._context.wip?.pullRequest==null)return;let t=this._context.wip.pullRequest.provider.id,i=await this.container.git.visibility(this._context.wip.repo.path),r=this._context.wip.changes?.files.length??0;this.container.telemetry.sendEvent("openReviewMode",{provider:t,repoPrivacy:i,source:e??"inspect",filesChanged:r})}includeBootstrap(){return this._bootstraping=!0,this._context={...this._context,...this._pendingContext},this._pendingContext=void 0,this.getState(this._context)}registerCommands(){return[(0,S.Lb)(`${this.host.id}.refresh`,()=>this.host.refresh(!0))]}onFocusChanged(e){this._focused!==e&&(this._focused=e,e&&this.isLineTrackerSuspended&&this.ensureTrackers())}onMessageReceived(e){switch(!0){case M.is(e):this.openFileOnRemote(e.params);break;case q.is(e):this.openFile(e.params);break;case N.is(e):this.openFileComparisonWithWorking(e.params);break;case H.is(e):this.openFileComparisonWithPrevious(e.params);break;case W.is(e):this.showFileActions(e.params);break;case U.is(e):switch(e.params.action){case"graph":{let e;if(null==(e="wip"===this._context.mode?this._context.wip?.changes!=null?(0,f.kA)(p.SU,this._context.wip.changes.repository.path,{refType:"revision"}):void 0:null!=this._context.commit?(0,f.rd)(this._context.commit):void 0))return;(0,S.RS)("graph"===this.options.attachedTo?a.Ts.ShowInCommitGraphView:a.Ts.ShowInCommitGraph,{ref:e});break}case"more":this.showCommitActions();break;case"scm":(0,S.S4)("workbench.view.scm");break;case"sha":null!=this._context.commit&&(e.params.alt?(0,S.RS)(a.Ts.CopyMessageToClipboard,{message:this._context.commit.message}):(0,d.kk)(this._context.commit)?s.env.clipboard.writeText(this._context.commit.stashName):(0,S.RS)(a.Ts.CopyShaToClipboard,{sha:this._context.commit.sha}))}break;case Q.is(e):this.showCommitPicker();break;case j.is(e):this.showCommitSearch();break;case z.is(e):this.switchMode(e.params);break;case Y.is(e):this.updatePinned(e.params.pin??!1,!0);break;case K.is(e):this.navigateStack(e.params.direction);break;case J.is(e):this.updatePreferences(e.params);break;case ec.is(e):this.explainRequest(ec,e);break;case G.is(e):this.stageFile(e.params);break;case V.is(e):this.unstageFile(e.params);break;case Z.is(e):this.createPatchFromWip(e.params);break;case et.is(e):this.fetch();break;case ei.is(e):this.publish();break;case er.is(e):this.push();break;case es.is(e):this.pull();break;case en.is(e):this.switch();break;case L.is(e):this.suggestChanges(e.params);break;case ee.is(e):this.showCodeSuggestion(e.params.id);break;case X.is(e):this.setInReview(e.params.inReview,"inspect-overview");break;case eo.is(e):this.openPullRequestChanges();break;case ea.is(e):this.openPullRequestComparison();break;case el.is(e):this.openPullRequestOnRemote();break;case eh.is(e):this.showPullRequestDetails()}}getEncodedEntityid(e=this._context.wip?.pullRequest){if(null==e)return;let t=(0,b.D)(e);if(null!=t)return r.EntityIdentifierUtils.encode(t)}async trackCreateCodeSuggestion(e,t){if(this._context.wip?.pullRequest==null)return;let i=this._context.wip.pullRequest.provider.id,r=await this.container.git.visibility(this._context.wip.repo.path);this.container.telemetry.sendEvent("openReviewMode",{provider:i,repoPrivacy:r,source:"reviewMode",filesChanged:t,draftId:e.id,draftPrivacy:e.visibility})}async suggestChanges(e){if(!await (0,C.G5)(this.container,"Code Suggestions are a Preview feature and require an account.",{source:"code-suggest",detail:"create"})||!await (0,C.l7)(this.container))return;let t=[],i=Object.entries(e.changesets),n=1===i.length,o=0;for(let[e,r]of i){if(!n&&!1===r.checked)continue;let e=this._context.wip.repo.id===r.repository.path?this._context.wip.repo:void 0;if(null==e)continue;let{checked:i}=r,s={to:p.SU,from:"HEAD"};"staged"===i&&(s={...s,to:p.id});let a=this.getEncodedEntityid();null!=a&&(r.files&&r.files.length>0&&("staged"===i?o+=r.files.filter(e=>!0===e.staged).length:o+=r.files.length),t.push({repository:e,revision:s,prEntityId:a}))}if(0!==t.length)try{let i=(0,b.D)(this._context.wip.pullRequest),n=r.EntityIdentifierUtils.encode(i),a={description:e.description,visibility:"provider_access",prEntityId:n},l=await this.container.drafts.createDraft("suggested_pr_change",e.title,t,a);(async function(){let e={title:"View Code Suggestions"},t={title:"Copy Link"},i=!1;for(;;){let r=await s.window.showInformationMessage(`Code Suggestion successfully created${i?"— link copied to the clipboard":""}`,e,t);if(r===t){s.env.clipboard.writeText(l.deepLinkUrl),i=!0;continue}r===e&&(0,v.X)({mode:"view",draft:l,source:"notification"});break}})(),this.setInReview(!1),this.trackCreateCodeSuggestion(l,o)}catch(e){s.window.showErrorMessage(`Unable to create draft: ${e.message}`)}}getRepoActionPath(){return"wip"===this._context.mode?this._context.wip?.repo.path:this._context.commit?.repoPath}fetch(){let e=this.getRepoActionPath();null!=e&&c.hd(e)}publish(){let e=this.getRepoActionPath();null!=e&&(0,S.wS)("git.publish",s.Uri.file(e))}push(){let e=this.getRepoActionPath();null!=e&&c.VC(e)}pull(){let e=this.getRepoActionPath();null!=e&&c.a$(e)}switch(){let e=this.getRepoActionPath();null!=e&&c.S_(e)}get pullRequestContext(){if("wip"===this.mode){if(this._context.wip?.pullRequest==null)return;return{repoPath:this._context.wip.repo.path,branch:this._context.wip.branch,pr:this._context.wip.pullRequest}}if(null!=this._context.pullRequest)return{repoPath:this._context.commit.repoPath,commit:this._context.commit,pr:this._context.pullRequest}}async openPullRequestChanges(){if(null==this.pullRequestContext)return;let{repoPath:e,pr:t}=this.pullRequestContext;if(null==t.refs)return;let i=await (0,m.tI)(this.container,e,t.refs);return(0,h.$5)(this.container,{repoPath:i.repoPath,lhs:i.base.ref,rhs:i.head.ref},{title:`Changes in Pull Request #${t.id}`})}async openPullRequestComparison(){if(null==this.pullRequestContext)return;let{repoPath:e,pr:t}=this.pullRequestContext;if(null==t.refs)return;let i=await (0,m.tI)(this.container,e,t.refs);return this.container.searchAndCompareView.compare(i.repoPath,i.head,i.base)}async openPullRequestOnRemote(e){if(null==this.pullRequestContext)return;let{pr:{url:t}}=this.pullRequestContext;return(0,S.RS)(a.Ts.OpenPullRequestOnRemote,{pr:{url:t},clipboard:e})}async showPullRequestDetails(){if(null==this.pullRequestContext)return;let{pr:e,repoPath:t,branch:i,commit:r}=this.pullRequestContext;if(null!=e)return this.container.pullRequestView.showPullRequest(e,r??i??t)}onRefresh(e){if(!this._pinned){if("wip"===this.mode){let e=this._context.wip?.changes?.repository.uri;this.updateWipState(this.container.git.getBestRepositoryOrFirst(null!=e?s.Uri.parse(e):void 0))}else{let e=this._pendingContext?.commit??this.getBestCommitOrStash();this.updateCommit(e,{immediate:!1})}}}onReloaded(){this.notifyDidChangeState(!0)}onVisibilityChanged(e){if(this.ensureTrackers(),!e)return;let t=this._skipNextRefreshOnVisibilityChange;if(t&&(this._skipNextRefreshOnVisibilityChange=!1),this._bootstraping){if(this._bootstraping=!1,null==this._pendingContext)return;this.updateState()}else t||this.onRefresh(),this.updateState(!0)}onAnyConfigurationChanged(e){(P.H.changed(e,["defaultDateFormat","defaultDateStyle","views.commitDetails.files","views.commitDetails.avatars"])||P.H.changedCore(e,"workbench.tree.renderIndentGuides")||P.H.changedCore(e,"workbench.tree.indent"))&&(this.updatePendingContext({preferences:{...this._context.preferences,...this._pendingContext?.preferences,...this.getPreferences()}}),this.updateState()),null!=this._context.commit&&P.H.changed(e,["views.commitDetails.autolinks","views.commitDetails.pullRequests"])&&(this.updateCommit(this._context.commit,{force:!0}),this.updateState())}onSubscriptionChanged(e){this.updateCodeSuggestions(),this.updateHasAccount(e.current)}updateHasAccount(e){let t=null!=e.account;this._context.hasAccount!=t&&(this._context.hasAccount=t,this.host.notify(eg,{hasAccount:t}))}onIntegrationConnectionStateChanged(e){if("jira"===e.key){let t="connected"===e.reason;this._context.hasConnectedJira!==t&&(this._context.hasConnectedJira=t,this.host.notify(ep,{hasConnectedJira:this._context.hasConnectedJira}))}}async getHasJiraConnection(e=!1){if(null!=this._context.hasConnectedJira&&!e)return this._context.hasConnectedJira;let t=await this.container.integrations.get(y.tp.Jira);return null==t?this._context.hasConnectedJira=!1:this._context.hasConnectedJira=t.maybeConnected??await t.isConnected(),this._context.hasConnectedJira}async getHasAccount(e=!1){return(null==this._context.hasAccount||e)&&(this._context.hasAccount=(await this.container.subscription.getSubscription())?.account!=null),this._context.hasAccount}getPreferences(){return{autolinksExpanded:this.container.storage.getWorkspace("views:commitDetails:autolinksExpanded")??!0,pullRequestExpanded:this.container.storage.getWorkspace("views:commitDetails:pullRequestExpanded")??!0,avatars:P.H.get("views.commitDetails.avatars"),dateFormat:P.H.get("defaultDateFormat")??"MMMM Do, YYYY h:mma",dateStyle:P.H.get("defaultDateStyle")??"relative",files:P.H.get("views.commitDetails.files"),indentGuides:P.H.getCore("workbench.tree.renderIndentGuides")??"onHover",indent:P.H.getCore("workbench.tree.indent")}}onContextChanged(e){["gitlens:gk:organization:ai:enabled","gitlens:gk:organization:drafts:enabled"].includes(e)&&(this.updatePendingContext({orgSettings:this.getOrgSettings()}),this.updateState())}getOrgSettings(){return{ai:(0,A.SD)("gitlens:gk:organization:ai:enabled",!1),drafts:(0,A.SD)("gitlens:gk:organization:drafts:enabled",!1)}}onCommitSelected(e){if(null!=e.data&&("graph"!==this.options.attachedTo||"gitlens.views.graph"===e.source)&&("default"!==this.options.attachedTo||"gitlens.views.graph"!==e.source)){if("graph"===this.options.attachedTo){e.data.commit.ref===p.SU?"wip"!==this.mode?this.setMode("wip",this.container.git.getRepository(e.data.commit.repoPath)):e.data.commit.repoPath!==this._context.wip?.changes?.repository.path&&this.updateWipState(this.container.git.getRepository(e.data.commit.repoPath)):(this._pinned&&"passive"===e.data.interaction&&(this._commitStack.insert((0,f.rd)(e.data.commit)),this.updateNavigation()),"commit"!==this.mode&&this.setMode("commit",this.container.git.getRepository(e.data.commit.repoPath)),this._pinned&&"passive"===e.data.interaction||this.host.show(!1,{preserveFocus:e.data.preserveFocus},e.data));return}if("wip"===this.mode){e.data.commit.repoPath!==this._context.wip?.changes?.repository.path&&this.updateWipState(this.container.git.getRepository(e.data.commit.repoPath));return}this._pinned&&"passive"===e.data.interaction?(this._commitStack.insert((0,f.rd)(e.data.commit)),this.updateNavigation()):this.host.show(!1,{preserveFocus:e.data.preserveFocus},e.data)}}_lineTrackerDisposable;_selectionTrackerDisposable;ensureTrackers(){if(this._selectionTrackerDisposable?.dispose(),this._selectionTrackerDisposable=void 0,this._lineTrackerDisposable?.dispose(),this._lineTrackerDisposable=void 0,this.host.visible&&(this._selectionTrackerDisposable=this.container.events.on("commit:selected",this.onCommitSelected,this),!this._pinned&&"graph"!==this.options.attachedTo)){let{lineTracker:e}=this.container;this._lineTrackerDisposable=e.subscribe(this,e.onDidChangeActiveLines(this.onActiveEditorLinesChanged,this))}}get isLineTrackerSuspended(){return"graph"!==this.options.attachedTo&&null==this._lineTrackerDisposable}suspendLineTracker(){setTimeout(()=>{this._lineTrackerDisposable?.dispose(),this._lineTrackerDisposable=void 0},100)}createPatchFromWip(e){if(null==e.changes)return;let t={type:"wip",repository:{name:e.changes.repository.name,path:e.changes.repository.path,uri:e.changes.repository.uri},files:e.changes.files,revision:{to:p.SU,from:"HEAD"},checked:e.checked};(0,v.X)({mode:"create",create:{changes:[t]}})}showCodeSuggestion(e){let t=this._context.wip?.codeSuggestions?.find(t=>t.id===e);null!=t&&(0,v.X)({mode:"view",draft:t,source:"inspect"})}onActiveEditorLinesChanged(e){if(e.pending||null==e.editor||e.suspended)return;if("wip"===this.mode){let t=this.container.git.getBestRepositoryOrFirst(e.editor);this.updateWipState(t,!0);return}let t=e.selections?.[0]?.active,i=null!=t?this.container.lineTracker.getState(t)?.commit:void 0;this.updateCommit(i)}_wipSubscription;get mode(){return this._pendingContext?.mode??this._context.mode}async setMode(e,t){this.updatePendingContext({mode:e}),"commit"===e?this.updateState(!0):await this.updateWipState(t??this.container.git.getBestRepositoryOrFirst()),this.updateTitle()}updateTitle(){if("commit"===this.mode){if(null==this._context.commit)this.host.title=this.host.originalTitle;else{let e="Commit Details";"stash"===this._context.commit.refType?e="Stash Details":this._context.commit.isUncommitted&&(e="Uncommitted Changes"),this.host.title=`${this.host.originalTitle}: ${e}`}}else this.host.title=`${this.host.originalTitle}: Overview`}async explainRequest(e,t){let i;try{let e=await (await this.container.ai)?.explainCommit(this._context.commit,{progress:{location:{viewId:this.host.id}}});if(null==e)throw Error("Error retrieving content");i={summary:e}}catch(e){i={error:{message:e.message}}}this.host.respond(e,t,i)}navigateStack(e){let t=this._commitStack.navigate(e);null!=t&&this.updateCommit(t,{immediate:!0,skipStack:!0})}_cancellationTokenSource=void 0;async getState(e){let t;if(null!=this._cancellationTokenSource&&(this._cancellationTokenSource.cancel(),this._cancellationTokenSource=void 0),null!=e.commit&&(t=await this.getDetailsModel(e.commit,e.formattedMessage),!e.richStateLoaded)){this._cancellationTokenSource=new s.CancellationTokenSource;let t=this._cancellationTokenSource.token;setTimeout(()=>{t.isCancellationRequested||this.updateRichState(e,t)},100)}let i=e.wip;if(null==i&&this._repositorySubscription){null==this._cancellationTokenSource&&(this._cancellationTokenSource=new s.CancellationTokenSource);let e=this._cancellationTokenSource.token;setTimeout(()=>{e.isCancellationRequested||this.updateWipState(this._repositorySubscription?.repo)},100)}return null==e.hasConnectedJira&&(e.hasConnectedJira=await this.getHasJiraConnection()),null==e.hasAccount&&(e.hasAccount=await this.getHasAccount()),(0,E.l)({...this.host.baseWebviewState,mode:e.mode,commit:t,navigationStack:e.navigationStack,pinned:e.pinned,preferences:e.preferences,includeRichContent:e.richStateLoaded,autolinkedIssues:e.autolinkedIssues?.map(g.Vz),pullRequest:null!=e.pullRequest?(0,m.pf)(e.pullRequest):void 0,wip:ey(i),orgSettings:e.orgSettings,inReview:e.inReview,hasConnectedJira:e.hasConnectedJira,hasAccount:e.hasAccount})}async updateWipState(e,t=!1){let i;if(null!=this._wipSubscription){let{repo:i,subscription:r}=this._wipSubscription;if(e?.path!==i.path)r.dispose(),this._wipSubscription=void 0;else if(t)return}let r=this.inReview;if(null!=e){null==this._wipSubscription&&(this._wipSubscription={repo:e,subscription:this.subscribeToRepositoryWip(e)});let t=await this.getWipChange(e);if(i={changes:t,repo:e,repositoryCount:this.container.git.openRepositoryCount},null!=t){let r=await this.getWipBranchDetails(e,t.branchName);null!=r&&(i.branch=r.branch,i.pullRequest=r.pullRequest,i.codeSuggestions=r.codeSuggestions)}if(i.pullRequest?.state!=="opened"&&(r=!1),this._shouldRefreshPullRequestDetails&&null!=i.pullRequest&&("launchpad"===this._context.source||this._pendingContext?.source==="launchpad")&&(this.container.pullRequestView.showPullRequest(i.pullRequest,i.branch??e.path),this._shouldRefreshPullRequestDetails=!1),null==this._pendingContext&&await this.host.notify(ed,(0,E.l)({wip:ey(i),inReview:r}))){this._context.wip=i,this._context.inReview=r;return}}this.updatePendingContext({wip:i,inReview:r}),this.updateState(!0)}async getWipBranchDetails(e,t){let i=await e.getBranch(t);if(null==i)return;if("commit"===this.mode)return{branch:i,pullRequest:void 0,codeSuggestions:[]};let r=await i.getAssociatedPullRequest({expiryOverride:3e5}),s=[];if(null!=r){let t=await this.getCodeSuggestions(r,e);t.length&&(s=t)}return{branch:i,pullRequest:r,codeSuggestions:s}}async canAccessDrafts(){return await this.getHasAccount()!==!1&&(0,A.SD)("gitlens:gk:organization:drafts:enabled",!1)}async getCodeSuggestions(e,t){if(!await this.canAccessDrafts())return[];let i=await this.container.drafts.getCodeSuggestions(e,t);for(let e of i){if(null!=e.author.avatarUri||null==e.organizationId)continue;let t=e.author.email;if(null==t){let i=await this.container.organizations.getMemberById(e.author.id,e.organizationId);t=i?.email}null!=t&&(e.author.avatarUri=(0,o.m_)(t))}return i}async updateCodeSuggestions(){if("wip"!==this.mode||this._context.wip?.pullRequest==null)return;let e=this._context.wip,{pullRequest:t,repo:i}=e;if(e.codeSuggestions=await this.getCodeSuggestions(t,i),null==this._pendingContext&&await this.host.notify(ed,(0,E.l)({wip:ey(e)}))){this._context.wip=e;return}this.updatePendingContext({wip:e}),this.updateState(!0)}async updateRichState(e,t){let{commit:i}=e;if(null==i)return;let r=await this.container.git.getBestRemoteWithIntegration(i.repoPath);if(t.isCancellationRequested)return;let[s,n]=r?.provider!=null?await Promise.allSettled([P.H.get("views.commitDetails.autolinks.enabled")&&P.H.get("views.commitDetails.autolinks.enhanced")?(0,R.zu)(i.getEnrichedAutolinks(r)):void 0,P.H.get("views.commitDetails.pullRequests.enabled")?i.getAssociatedPullRequest(r):void 0]):[];if(t.isCancellationRequested)return;let o=$.Ro(s)?.value,a=(0,$.Ro)(n),l=this.getFormattedMessage(i,r,o);this.updatePendingContext({richStateLoaded:!0,formattedMessage:l,autolinkedIssues:null!=o?[...(0,T.x1)(o.values(),([e])=>e?.value)]:void 0,pullRequest:a}),this.updateState()}_repositorySubscription;async updateCommit(e,t){let i;if(!t?.force&&this._context.commit?.sha===e?.ref)return;if((0,d.WM)(e))i=e;else if(null!=e){if("stash"===e.refType){let t=await this.container.git.getStash(e.repoPath);i=t?.commits.get(e.ref)}else i=await this.container.git.getCommit(e.repoPath,e.ref)}let r=this._pendingContext?.wip??this._context.wip;if(null!=this._repositorySubscription){let{repo:e,subscription:t}=this._repositorySubscription;i?.repoPath!==e.path&&(t.dispose(),this._repositorySubscription=void 0,r=void 0)}if(null==this._repositorySubscription&&null!=i){let e=await this.container.git.getOrOpenRepository(i.repoPath);null!=e&&(this._repositorySubscription={repo:e,subscription:this.subscribeToRepositoryWip(e)},"wip"===this.mode?this.updateWipState(e):r=void 0)}this.updatePendingContext({commit:i,richStateLoaded:!!i?.isUncommitted||!(0,A.SD)("gitlens:hasConnectedRemotes"),formattedMessage:void 0,autolinkedIssues:void 0,pullRequest:void 0,wip:r},t?.force),t?.pinned!=null&&this.updatePinned(t?.pinned),this.isLineTrackerSuspended&&this.ensureTrackers(),null!=i&&(t?.skipStack||this._commitStack.add((0,f.rd)(i)),this.updateNavigation()),this.updateState(t?.immediate??!0),this.updateTitle()}subscribeToRepositoryWip(e){return s.Disposable.from(e.watchFileSystem(1e3),e.onDidChangeFileSystem(()=>this.onWipChanged(e)),e.onDidChange(t=>{t.changed(w.Z_.Index,w.Ti.Any)&&this.onWipChanged(e)}))}onWipChanged(e){this.updateWipState(e)}async getWipChange(e){let t=await this.container.git.getStatusForRepo(e.path);if(null==t)return;let i=[];for(let e of t.files){let t={repoPath:e.repoPath,path:e.path,status:e.status,originalPath:e.originalPath,staged:e.staged};i.push(t),e.staged&&e.wip&&i.push({...t,staged:!1})}return{repository:{name:e.name,path:e.path,uri:e.uri.toString()},branchName:t.branch,files:i}}updatePinned(e,t){e!==this._context.pinned&&(this._pinned=e,this.ensureTrackers(),this.updatePendingContext({pinned:e}),this.updateState(t))}updatePreferences(e){if(this._context.preferences?.autolinksExpanded===e.autolinksExpanded&&this._context.preferences?.pullRequestExpanded===e.pullRequestExpanded&&this._context.preferences?.files?.compact===e.files?.compact&&this._context.preferences?.files?.icon===e.files?.icon&&this._context.preferences?.files?.layout===e.files?.layout&&this._context.preferences?.files?.threshold===e.files?.threshold)return;let t={...this._context.preferences,...this._pendingContext?.preferences};null!=e.autolinksExpanded&&this._context.preferences?.autolinksExpanded!==e.autolinksExpanded&&(this.container.storage.storeWorkspace("views:commitDetails:autolinksExpanded",e.autolinksExpanded),t.autolinksExpanded=e.autolinksExpanded),null!=e.pullRequestExpanded&&this._context.preferences?.pullRequestExpanded!==e.pullRequestExpanded&&(this.container.storage.storeWorkspace("views:commitDetails:pullRequestExpanded",e.pullRequestExpanded),t.pullRequestExpanded=e.pullRequestExpanded),null!=e.files&&(this._context.preferences?.files?.compact!==e.files?.compact&&P.H.updateEffective("views.commitDetails.files.compact",e.files?.compact),this._context.preferences?.files?.icon!==e.files?.icon&&P.H.updateEffective("views.commitDetails.files.icon",e.files?.icon),this._context.preferences?.files?.layout!==e.files?.layout&&P.H.updateEffective("views.commitDetails.files.layout",e.files?.layout),this._context.preferences?.files?.threshold!==e.files?.threshold&&P.H.updateEffective("views.commitDetails.files.threshold",e.files?.threshold),t.files=e.files),this.updatePendingContext({preferences:t}),this.updateState()}updatePendingContext(e,t=!1){let[i,r]=(0,O.ql)(this._context,this._pendingContext,e,t);return i&&(this._pendingContext=r),i}_notifyDidChangeStateDebounced=void 0;updateState(e=!1){if(e){this.notifyDidChangeState();return}null==this._notifyDidChangeStateDebounced&&(this._notifyDidChangeStateDebounced=(0,D.sg)(this.notifyDidChangeState.bind(this),500)),this._notifyDidChangeStateDebounced()}updateNavigation(){let e=this._commitStack.get(this._commitStack.position-1)?.ref;null!=e&&(e=(0,f.pV)(e)),this.updatePendingContext({navigationStack:{count:this._commitStack.count,position:this._commitStack.position,hint:e}}),this.updateState()}async setInReview(e,t){this.inReview!==e&&(null==this._pendingContext&&await this.host.notify(em,{inReview:e})&&(this._context.inReview=e),this.updatePendingContext({inReview:e}),this.updateState(!0),e&&this.trackOpenReviewMode(t))}async notifyDidChangeState(e=!1){let t;let i=(0,I.dQ)();return this._notifyDidChangeStateDebounced?.cancel(),(!!e||null!=this._pendingContext)&&(null!=this._pendingContext?(t={...this._context,...this._pendingContext},this._context=t,this._pendingContext=void 0):t=this._context,s.window.withProgress({location:{viewId:this.host.id}},async()=>{try{await this.host.notify(eu,{state:await this.getState(t)})}catch(e){_.Vy.error(i,e)}}))}getBestCommitOrStash(){let e;if(!this._pinned){if("graph"!==this.options.attachedTo&&null!=s.window.activeTextEditor){let{lineTracker:t}=this.container,i=t.selections?.[0].active;null!=i&&(e=t.getState(i)?.commit)}else if(null==(e=this._pendingContext?.commit)){let t=this.container.events.getCachedEventArgs("commit:selected");e=t?.commit}return e}}async getDetailsModel(e,t){let[i,r,s]=await Promise.allSettled([e.hasFullDetails()?e:e.ensureFullDetails().then(()=>e),e.author.getAvatarUri(e,{size:32}),this.container.git.getBestRemoteWithIntegration(e.repoPath,{includeDisconnected:!0})]);e=(0,$.Ro)(i,e);let o=(0,$.Ro)(r),a=(0,$.Ro)(s);null==t&&(t=this.getFormattedMessage(e,a));let l=null!=e.message?await this.container.autolinks.getAutolinks(e.message,a):void 0;return{repoPath:e.repoPath,sha:e.sha,shortSha:e.shortSha,author:{...e.author,avatar:o?.toString(!0)},message:t,parents:e.parents,stashNumber:"stash"===e.refType?e.number:void 0,files:e.files,stats:e.stats,autolinks:null!=l?[...(0,T.Tj)(l.values(),n.U8)]:void 0}}getFormattedMessage(e,t,i){let r=u.c.fromTemplate("${message}",e),s=r.indexOf("\n");return(-1!==s&&(r=`${r.substring(0,s)}\0
\0${r.substring(s+1)}`),P.H.get("views.commitDetails.autolinks.enabled"))?this.container.autolinks.linkify(r,"html",null!=t?[t]:void 0,i):r}async getFileCommitFromParams(e){let t;if("wip"===this.mode){let e=this._context.wip?.changes?.repository.uri;if(null==e)return;t=await this.container.git.getCommit(s.Uri.parse(e),p.SU)}else t=this._context.commit;return null!=(t=await t?.getCommitForFile(e.path,e.staged))?[t,t.file]:void 0}showCommitPicker(){(0,l.b)({command:"log",state:{reference:"HEAD",repo:this._context.commit?.repoPath,openPickInView:!0}})}showCommitSearch(){(0,l.b)({command:"search",state:{openPickInView:!0}})}showCommitActions(){null==this._context.commit||this._context.commit.isUncommitted||(0,h.G4)(this._context.commit)}async showFileActions(e){let t=await this.getFileCommitFromParams(e);if(null==t)return;let[i,r]=t;this.suspendLineTracker(),(0,h.G4)(i,r)}switchMode(e){let t;if(this.mode!==e.mode){if("wip"===e.mode){let{repoPath:i}=e;if(null==i){if(null==(t=this.container.git.getBestRepositoryOrFirst()))return;i=t.path}else t=this.container.git.getRepository(i)}this.setMode(e.mode,t)}}async openFileComparisonWithWorking(e){let t=await this.getFileCommitFromParams(e);if(null==t)return;let[i,r]=t;this.suspendLineTracker(),(0,h.DD)(r,i,{preserveFocus:!0,preview:!0,...this.getShowOptions(e)})}async openFileComparisonWithPrevious(e){let t=await this.getFileCommitFromParams(e);if(null==t)return;let[i,r]=t;this.suspendLineTracker(),(0,h.eX)(r,i,{preserveFocus:!0,preview:!0,...this.getShowOptions(e)}),this.container.events.fire("file:selected",{uri:r.uri},{source:this.host.id})}async openFile(e){let t=await this.getFileCommitFromParams(e);if(null==t)return;let[i,r]=t;this.suspendLineTracker(),(0,h.Tq)(r,i,{preserveFocus:!0,preview:!0,...this.getShowOptions(e)})}async openFileOnRemote(e){let t=await this.getFileCommitFromParams(e);if(null==t)return;let[i,r]=t;(0,h.gV)(r,i)}async stageFile(e){let t=await this.getFileCommitFromParams(e);if(null==t)return;let[i,r]=t;await this.container.git.stageFile(i.repoPath,r.path)}async unstageFile(e){let t=await this.getFileCommitFromParams(e);if(null==t)return;let[i,r]=t;await this.container.git.unstageFile(i.repoPath,r.path)}getShowOptions(e){return e.showOptions}};function ey(e){if(null!=e)return{changes:e.changes,repositoryCount:e.repositoryCount,branch:function(e){if(null!=e)return{name:e.name,repoPath:e.repoPath,upstream:e.upstream,tracking:{ahead:e.state.ahead,behind:e.state.behind}}}(e.branch),repo:{uri:e.repo.uri.toString(),name:e.repo.name,path:e.repo.path},pullRequest:null!=e.pullRequest?(0,m.pf)(e.pullRequest):void 0,codeSuggestions:e.codeSuggestions?.map(e=>(0,E.l)({...e,changesets:void 0}))}}ev([(0,k.Yz)({args:!1})],CommitDetailsWebviewProvider.prototype,"getState",1),ev([(0,k.Yz)({args:!1})],CommitDetailsWebviewProvider.prototype,"updateWipState",1),ev([(0,k.Yz)({args:!1})],CommitDetailsWebviewProvider.prototype,"updateRichState",1)},9887:(e,t,i)=>{i.d(t,{HomeWebviewProvider:()=>HomeWebviewProvider});var r=i(1398),s=i(4293),n=i(7899),o=i(8973),a=i(3355);let l="home",h=new a.Q2(l,"section/collapse"),c=new a.C1(l,"repositories/didChange"),u=new a.C1(l,"subscription/didChange"),d=new a.C1(l,"org/settings/didChange"),p=Object.freeze({dispose:()=>{}});let HomeWebviewProvider=class HomeWebviewProvider{constructor(e,t){this.container=e,this.host=t,this._disposable=r.Disposable.from(this.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this),r.workspace.isTrusted?p:r.workspace.onDidGrantWorkspaceTrust(this.notifyDidChangeRepositories,this),this.container.subscription.onDidChange(this.onSubscriptionChanged,this),(0,o.wt)(this.onContextChanged,this))}_disposable;dispose(){this._disposable.dispose()}onRepositoriesChanged(){this.notifyDidChangeRepositories()}registerCommands(){return[(0,n.Lb)(`${this.host.id}.refresh`,()=>this.host.refresh(!0),this)]}onMessageReceived(e){!0===h.is(e)&&this.onCollapseSection(e.params)}includeBootstrap(){return this.getState()}onReloaded(){this.notifyDidChangeRepositories()}onCollapseSection(e){let t=this.container.storage.get("home:sections:collapsed");if(null==t){!0===e.collapsed&&this.container.storage.store("home:sections:collapsed",[e.section]);return}let i=t.indexOf(e.section);if(!0===e.collapsed){-1===i&&this.container.storage.store("home:sections:collapsed",[...t,e.section]);return}-1!==i&&(t.splice(i,1),this.container.storage.store("home:sections:collapsed",t))}getWalkthroughCollapsed(){return this.container.storage.get("home:sections:collapsed")?.includes("walkthrough")??!1}getOrgSettings(){return{drafts:(0,o.SD)("gitlens:gk:organization:drafts:enabled",!1)}}onContextChanged(e){"gitlens:gk:organization:drafts:enabled"===e&&this.notifyDidChangeOrgSettings()}onSubscriptionChanged(e){this.notifyDidChangeSubscription(e.current)}async getState(e){return e??=await this.container.subscription.getSubscription(!0),{...this.host.baseWebviewState,repositories:this.getRepositoriesState(),webroot:this.host.getWebRoot(),promoStates:await this.getCanShowPromos(e),subscription:e,orgSettings:this.getOrgSettings(),walkthroughCollapsed:this.getWalkthroughCollapsed()}}getRepositoriesState(){return{count:this.container.git.repositoryCount,openCount:this.container.git.openRepositoryCount,hasUnsafe:this.container.git.hasUnsafeRepositories(),trusted:r.workspace.isTrusted}}async getCanShowPromos(e){let t={hs2023:!1,pro50:!1},i=e??await this.container.subscription.getSubscription(!0),r=new Date("2023-12-31T07:59:00.000Z").getTime();return Date.now()<r&&!(0,s.A_)(i)?t.hs2023=!0:null!=e&&((0,s.Mt)(e)||(0,s.Jc)(e))&&(t.pro50=!0),t}notifyDidChangeRepositories(){this.host.notify(c,this.getRepositoriesState())}async notifyDidChangeSubscription(e){e??=await this.container.subscription.getSubscription(!0),this.host.notify(u,{promoStates:await this.getCanShowPromos(e),subscription:e})}notifyDidChangeOrgSettings(){this.host.notify(d,{orgSettings:this.getOrgSettings()})}}},3355:(e,t,i)=>{i.d(t,{C1:()=>IpcNotification,Ge:()=>r,HE:()=>h,HM:()=>u,Oz:()=>IpcRequest,Q2:()=>IpcCommand,RR:()=>a,TM:()=>l,Vw:()=>n,YU:()=>d,lJ:()=>o,pY:()=>s});let IpcCall=class IpcCall{constructor(e,t,i=!1,r=!1){this.scope=e,this.reset=i,this.pack=r,this.method=`${e}/${t}`}method;is(e){return e.method===this.method}};let IpcCommand=class IpcCommand extends IpcCall{};let IpcRequest=class IpcRequest extends IpcCall{response;constructor(e,t,i,r){super(e,t,i,r),this.response=new IpcNotification(this.scope,`${t}/completion`,this.reset,this.pack)}};let IpcNotification=class IpcNotification extends IpcCall{};let r=new IpcCommand("core","webview/ready"),s=new IpcCommand("core","webview/focus/changed"),n=new IpcCommand("core","command/execute"),o=new IpcCommand("core","configuration/update"),a=new IpcNotification("core","window/focus/didChange"),l=new IpcCommand("core","webview/focus/didChange"),h=new IpcNotification("core","configuration/didChange"),c=["rebaseEditor.enabled","currentLine.useUncommittedChangesFormat"];function u(e){return c.includes(e)}function d(e,t){}},9765:(e,t,i)=>{i.d(t,{SettingsWebviewProvider:()=>SettingsWebviewProvider});var r=i(1398),s=i(3807),n=i(236),o=i(5287),a=i(5248),l=i(304),h=i(1298),c=i(4832),u=i(4026),d=i(3355);let p="settings",g=new d.Oz(p,"configuration/preview"),m=new d.C1(p,"didOpenAnchor"),f=new d.C1(p,"didChangeAccount"),w=new d.C1(p,"didChangeConnectedJira");let SettingsWebviewProvider=class SettingsWebviewProvider{constructor(e,t){this.container=e,this.host=t,this._disposable=r.Disposable.from(c.H.onDidChangeAny(this.onAnyConfigurationChanged,this),e.subscription.onDidChange(this.onSubscriptionChanged,this),e.integrations.onDidChangeConnectionState(this.onIntegrationConnectionStateChanged,this))}_disposable;_pendingJumpToAnchor;dispose(){this._disposable.dispose()}onSubscriptionChanged(e){this.host.notify(f,{hasAccount:null!=e.current.account})}onIntegrationConnectionStateChanged(e){"jira"===e.key&&this.host.notify(w,{hasConnectedJira:"connected"===e.reason})}async getAccountState(){return null!=(await this.container.subscription.getSubscription()).account}async getJiraConnected(){let e=await this.container.integrations.get(h.tp.Jira);return null!=e&&(e.maybeConnected??e.isConnected())}async includeBootstrap(){let e=[["user","User"]];return r.workspace.workspaceFolders?.length&&e.push(["workspace","Workspace"]),{...this.host.baseWebviewState,version:this.container.version,config:c.H.getAll(!0),customSettings:this.getCustomSettings(),scope:"user",scopes:e,hasAccount:await this.getAccountState(),hasConnectedJira:await this.getJiraConnected()}}onReloaded(){this.notifyDidChangeConfiguration()}onShowing(e,t,...i){let r=i[0];if(r&&"string"==typeof r){if(!e&&this.host.ready&&this.host.visible)return queueMicrotask(()=>void this.host.notify(m,{anchor:r,scrollBehavior:"smooth"})),!0;this._pendingJumpToAnchor=r}return!0}onActiveChanged(e){e&&this.notifyDidChangeConfiguration()}onReady(){if(null!=this._pendingJumpToAnchor){let e=this._pendingJumpToAnchor;this._pendingJumpToAnchor=void 0,this.host.notify(m,{anchor:e,scrollBehavior:"auto"})}}async onMessageReceived(e){if(null!=e)switch(!0){case d.lJ.is(e):{let t;let{params:i}=e,s="workspace"===i.scope?r.ConfigurationTarget.Workspace:r.ConfigurationTarget.Global;for(t in i.changes){let e=i.changes[t];if((0,d.HM)(t)){let i=this.customSettings.get(t);null!=i&&"boolean"==typeof e&&await i.update(e);continue}(0,d.YU)(t,e);let r=c.H.inspect(t);if(null!=e){if("workspace"===i.scope){if(e===r.workspaceValue)continue}else{if(e===r.globalValue&&e!==r.defaultValue)continue;e===r.defaultValue&&(e=void 0)}}await c.H.update(t,e,s)}for(let e of i.removes)await c.H.update(e,void 0,s);break}case g.is(e):switch(e.params.type){case"commit":case"commit-uncommitted":{let t,i;let r=new o.Yg(this.container,"~/code/eamodio/vscode-gitlens-demo","fe26af408293cba5b4bfd77306e1ac9ff7ccaef8",new o.M7("You","eamodio@gmail.com",new Date("2016-11-12T20:41:00.000Z")),new o.M7("You","eamodio@gmail.com",new Date("2020-11-01T06:57:21.000Z")),"commit-uncommitted"===e.params.type?"Uncommitted changes":"Supercharged",["3ac1d3f51d7cf5f438cc69f25f6740536ad80fef"],"commit-uncommitted"===e.params.type?"Uncommitted changes":"Supercharged",new a.lY("~/code/eamodio/vscode-gitlens-demo","code.ts",a.NO.Modified),void 0,[]),s=!1;switch(e.params.key){case c.H.name("currentLine.format"):s=c.H.get("currentLine.pullRequests.enabled");break;case c.H.name("statusBar.format"):s=c.H.get("statusBar.pullRequests.enabled")}s&&(t=new l.B9({id:"github",name:"GitHub",domain:"github.com",icon:"github"},{name:"Eric Amodio",avatarUrl:"https://avatars1.githubusercontent.com/u/641685?s=32&v=4",url:"https://github.com/eamodio"},"1",void 0,"Supercharged","https://github.com/gitkraken/vscode-gitlens/pulls/1",{owner:"gitkraken",repo:"vscode-gitlens"},"merged",new Date("Sat, 12 Nov 2016 19:41:00 GMT"),new Date("Sat, 12 Nov 2016 19:41:00 GMT"),void 0,new Date("Sat, 12 Nov 2016 20:41:00 GMT")));try{i=n.c.fromTemplate(e.params.format,r,{dateFormat:c.H.get("defaultDateFormat"),pullRequest:t,messageTruncateAtNewLine:!0})}catch{i="Invalid format"}await this.host.respond(g,e,{preview:i})}}}}onAnyConfigurationChanged(e){(c.H.changedAny(e,s.Od)||c.H.changedAny(e,[...(0,u.Tj)(this.customSettings.values(),e=>e.name)]))&&this.notifyDidChangeConfiguration()}_customSettings;get customSettings(){return null==this._customSettings&&(this._customSettings=new Map([["rebaseEditor.enabled",{name:"workbench.editorAssociations",enabled:()=>this.container.rebaseEditor.enabled,update:this.container.rebaseEditor.setEnabled}],["currentLine.useUncommittedChangesFormat",{name:"currentLine.uncommittedChangesFormat",enabled:()=>null!=c.H.get("currentLine.uncommittedChangesFormat"),update:async e=>c.H.updateEffective("currentLine.uncommittedChangesFormat",e?"✏️ ${ago}":null)}]])),this._customSettings}getCustomSettings(){let e=Object.create(null);for(let[t,i]of this.customSettings)e[t]=i.enabled();return e}notifyDidChangeConfiguration(){return this.host.notify(d.HE,{config:c.H.getAll(!0),customSettings:this.getCustomSettings()})}}},7565:(e,t,i)=>{i.d(t,{Id:()=>C,Dv:()=>R,Do:()=>S,WJ:()=>P,ql:()=>A});var r=i(1398),s=i(9032),n=i(1031),o=i(7899),a=i(8973),l=i(6330),h=i(8180),c=i(3916),u=i(3446),d=i(3131),p=i(937),g=i(3355),m=Object.defineProperty,f=Object.getOwnPropertyDescriptor,w=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?f(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&m(t,i,n),n};let v=(0,l.N)(),y=new TextDecoder("utf8"),b=new TextEncoder,C=class{constructor(e,t,i,s,n,o){this.container=e,this._commandRegistrar=t,this.descriptor=i,this.instanceId=s,this.parent=n,this.id=i.id,this.webview=n.webview;let a="onDidChangeViewState"in n;this._isInEditor=a,this._originalTitle=i.title,n.title=i.title,this._initializing=o(e,this).then(e=>{if(this.provider=e,this._disposed){e.dispose();return}this.disposable=r.Disposable.from(r.window.onDidChangeWindowState(this.onWindowStateChanged,this),n.webview.onDidReceiveMessage(this.onMessageReceivedCore,this),a?n.onDidChangeViewState(({webviewPanel:{visible:e,active:t}})=>this.onParentVisibilityChanged(e,t)):n.onDidChangeVisibility(()=>this.onParentVisibilityChanged(this.visible,this.active)),n.onDidDispose(this.onParentDisposed,this),...this.provider.registerCommands?.()??[],this.provider)})}static async create(e,t,i,r,s,n){let o=new C(e,t,i,r,s,n);return await o.initialize(),o}_onDidDispose=new r.EventEmitter;get onDidDispose(){return this._onDidDispose.event}id;_ready=!1;get ready(){return this._ready}disposable;_isInEditor;provider;webview;_disposed=!1;dispose(){this._disposed=!0,S(this.descriptor.contextKeyPrefix),this.provider?.onFocusChanged?.(!1),this.provider?.onVisibilityChanged?.(!1),this._ready=!1,this._onDidDispose.fire(),this.disposable?.dispose()}registerWebviewCommand(e,t){return this._commandRegistrar.registerCommand(this.provider,this.id,this.instanceId,e,t)}_initializing;async initialize(){null!=this._initializing&&(await this._initializing,this._initializing=void 0)}isHost(e){return"editor"===e?this._isInEditor:!this._isInEditor}get active(){return"active"in this.parent?!this._disposed&&this.parent.active:!this._disposed&&void 0}get badge(){return"badge"in this.parent?this.parent.badge:void 0}set badge(e){if("badge"in this.parent)this.parent.badge=e;else throw Error("The 'badge' property not supported on Webview parent")}_description;get description(){return"description"in this.parent?this.parent.description:this._description}set description(e){"description"in this.parent&&(this.parent.description=e),this._description=e}_originalTitle;get originalTitle(){return this._originalTitle}get title(){return this.parent.title??this._originalTitle}set title(e){this.parent.title=e}get visible(){return!this._disposed&&this.parent.visible}canReuseInstance(e,...t){if(this.isHost("editor"))return(e?.column==null||e.column===this.parent.viewColumn)&&this.provider.canReuseInstance?.(...t)}getSplitArgs(){return this.isHost("view")?[]:this.provider.getSplitArgs?.()??[]}async show(e,t,...i){null==t&&(t={});let s=this.provider.onShowing?.(e,t,...i);if(null!=s){if((0,d.yL)(s)){if(await s===!1)return}else if(!1===s)return}e&&(this.webview.html=await this.getHtml(this.webview)),this.isHost("editor")?e||this.parent.reveal(t.column??this.parent.viewColumn??this.descriptor.column??r.ViewColumn.Beside,t.preserveFocus??!1):this.isHost("view")&&(await (0,o.S4)(`${this.id}.focus`,t),e&&this.provider.onVisibilityChanged?.(!0)),P(this.descriptor.contextKeyPrefix)}get baseWebviewState(){return{webviewId:this.id,webviewInstanceId:this.instanceId,timestamp:Date.now()}}_cspNonce=(0,s.m9)();get cspNonce(){return this._cspNonce}asWebviewUri(e){return this.webview.asWebviewUri(e)}async refresh(e){e&&this.clearPendingIpcNotifications(),this.provider.onRefresh?.(e);let t=this._ready;this._ready=!1;let i=await this.getHtml(this.webview);if(e&&(this.webview.html=""),this.webview.html===i){t&&(this._ready=!0);return}this.webview.html=i}onParentDisposed(){this.dispose()}onMessageReceivedCore(e){if(null!=e)switch(!0){case g.Ge.is(e):this._ready=!0,this.sendPendingIpcNotifications(),this.provider.onReady?.();break;case g.pY.is(e):this.onViewFocusChanged(e.params);break;case g.Vw.is(e):null!=e.params.args?(0,o.RS)(e.params.command,...e.params.args):(0,o.RS)(e.params.command);break;default:this.provider.onMessageReceived?.(e)}}onViewFocusChanged(e){P(this.descriptor.contextKeyPrefix),this.handleFocusChanged(e.focused)}onParentVisibilityChanged(e,t){this.descriptor.webviewHostOptions?.retainContextWhenHidden!==!0&&(e?this._ready?this.sendPendingIpcNotifications():null!=this.provider.onReloaded?(this.clearPendingIpcNotifications(),this.provider.onReloaded()):this.refresh():this._ready=!1),e?(this.container.usage.track(`${this.descriptor.trackingFeature}:shown`),P(this.descriptor.contextKeyPrefix),null==t||(this.provider.onActiveChanged?.(t),t||this.handleFocusChanged(!1))):(S(this.descriptor.contextKeyPrefix),null!=t&&this.provider.onActiveChanged?.(!1),this.handleFocusChanged(!1)),this.provider.onVisibilityChanged?.(e)}onWindowStateChanged(e){this.visible&&(this.notify(g.RR,{focused:e.focused}),this.provider.onWindowFocusChanged?.(e.focused))}handleFocusChanged(e){this.notify(g.TM,{focused:e}),this.provider.onFocusChanged?.(e)}getRootUri(){return this.container.context.extensionUri}_webRoot;getWebRoot(){return null==this._webRoot&&(this._webRoot=this.asWebviewUri(this.getWebRootUri()).toString()),this._webRoot}_webRootUri;getWebRootUri(){return null==this._webRootUri&&(this._webRootUri=r.Uri.joinPath(this.getRootUri(),"dist","webviews")),this._webRootUri}async getHtml(e){let t=this.getWebRootUri(),i=r.Uri.joinPath(t,this.descriptor.fileName),[s,n,o,a,l]=await Promise.all([r.workspace.fs.readFile(i),this.provider.includeBootstrap?.(),this.provider.includeHead?.(),this.provider.includeBody?.(),this.provider.includeEndOfBody?.()]);return R(y.decode(s),this.id,this.instanceId,e.cspSource,this._cspNonce,this.asWebviewUri(this.getRootUri()).toString(),this.getWebRoot(),this.isHost("editor")?"editor":"view",n,o,a,l)}nextIpcId(){return`host:${v.next()}`}async notify(e,t,i){let r;if(e.pack&&null!=t){let i=(0,u.dQ)(),s=(0,p.u)((0,u.jr)(` serializing msg=${e.method}`,i),{log:!1,logLevel:"debug"});r=b.encode(JSON.stringify(t)),s?.stop()}let s={id:this.nextIpcId(),scope:e.scope,method:e.method,params:r??t,packed:null!=r,completionId:i},n=await this.postMessage(s);return n?this._pendingIpcNotifications.clear():this.addPendingIpcNotificationCore(e,s),n}respond(e,t,i){return this.notify(e.response,i,t.completionId)}async postMessage(e){let t,i;if(!this._ready)return Promise.resolve(!1);let s=(0,u.dQ)(),o=Promise.race([this.webview.postMessage(e).then(e=>(clearTimeout(t),e),e=>(clearTimeout(t),c.Vy.error(s,e),!1)),new Promise(e=>{t=setTimeout(()=>{(0,u.TT)(s,void 0,"TIMEDOUT"),e(!1)},3e4)})]);if(this.isHost("view")){let e=await (0,n.wW)(o,void 0,100);i=e.paused?await r.window.withProgress({location:{viewId:this.id}},()=>e.value):e.value}else i=await o;return i}_pendingIpcNotifications=new Map;addPendingIpcNotification(e,t,i){this.addPendingIpcNotificationCore(e,t.get(e)?.bind(i))}addPendingIpcNotificationCore(e,t){e.reset&&this._pendingIpcNotifications.clear(),null!=t&&this._pendingIpcNotifications.set(e,t)}clearPendingIpcNotifications(){this._pendingIpcNotifications.clear()}sendPendingIpcNotifications(){if(!this._ready||0===this._pendingIpcNotifications.size)return;let e=new Map(this._pendingIpcNotifications);for(let t of(this._pendingIpcNotifications.clear(),e.values()))"function"==typeof t?t():this.postMessage(t)}};function R(e,t,i,r,s,n,o,a,l,h,c,u){return e.replace(/#{(head|body|endOfBody|webviewId|webviewInstanceId|placement|cspSource|cspNonce|root|webroot)}/g,(e,d)=>{switch(d){case"head":return h??"";case"body":return c??"";case"endOfBody":return`${null!=l?`<script type="text/javascript" nonce="${s}">window.bootstrap=${JSON.stringify(l)};</script>`:""}${u??""}`;case"webviewId":return t;case"webviewInstanceId":return i??"";case"placement":return a;case"cspSource":return r;case"cspNonce":return s;case"root":return n;case"webroot":return o;default:return""}})}function S(e){(0,a.o)(`${e}:visible`,!1)}function P(e){(0,a.o)(`${e}:visible`,!0)}function A(e,t,i,s=!1){let n=!1;for(let[o,a]of Object.entries(i)){let i=e[o];!s&&(i instanceof r.Uri||a instanceof r.Uri)&&i?.toString()===a?.toString()||!s&&i===a&&(void 0!==a||o in e)&&(null==t||!(o in t))||(null==t&&(t={}),t[o]=a,n=!0)}return[n,t]}w([(0,h.Yz)({args:!1})],C.prototype,"show",1),w([(0,h.Yz)()],C.prototype,"refresh",1),w([(0,h.Yz)()],C.prototype,"onParentDisposed",1),w([(0,h.Yz)({args:{0:e=>null!=e?`${e.id}, method=${e.method}`:"<undefined>"}})],C.prototype,"onMessageReceivedCore",1),w([(0,h.Yz)({args:{0:e=>`focused=${e.focused}, inputFocused=${e.inputFocused}`}})],C.prototype,"onViewFocusChanged",1),w([(0,h.Yz)()],C.prototype,"onParentVisibilityChanged",1),w([(e,t,i)=>{let r;if("function"==typeof i.value?r=i.value:"function"==typeof i.get&&(r=i.get),void 0===r)throw Error("Not supported");let s=`$serialize$${t}`;i.value=function(...e){Object.prototype.hasOwnProperty.call(this,s)||Object.defineProperty(this,s,{configurable:!1,enumerable:!1,writable:!0,value:void 0});let t=this[s],i=async()=>await r.apply(this,e);return t=null==t?i():t.then(i,i),this[s]=t,t}},(0,h.Yz)({args:!1,enter:e=>`(${e.id}|${e.method}${e.completionId?`+${e.completionId}`:""})`})],C.prototype,"postMessage",1),C=w([(0,h.Is)(e=>`WebviewController(${e.id}${null!=e.instanceId?`|${e.instanceId}`:""})`)],C)},1500:(e,t,i)=>{i.d(t,{x:()=>WebviewsController,c:()=>v});var r=i(1398),s=i(9032),n=i(4379),o=i(7899),a=i(8180),l=i(4026),h=i(3916),c=i(3446),u=i(4125);let WebviewCommandRegistrar=class WebviewCommandRegistrar{_commandRegistrations=new Map;dispose(){this._commandRegistrations.forEach(({subscription:e})=>void e.dispose())}registerCommand(e,t,i,r,s){let n=this._commandRegistrations.get(r);if(null==n){let e=new Map;n={subscription:(0,o.Ip)(r,(...t)=>{let[i]=t;if(!(0,u.RR)(i))return;let s=i.webviewInstance?`${i.webview}:${i.webviewInstance}`:i.webview,n=e.get(s);if(null==n)throw Error(`Unable to find Command '${r}' registration for Webview '${s}'`);n.callback.call(n.thisArg,i)},this),handlers:e},this._commandRegistrations.set(r,n)}let a=i?`${t}:${i}`:t;if(n.handlers.has(a))throw Error(`Command '${r}' has already been registered for Webview '${a}'`);return n.handlers.set(a,{callback:s,thisArg:e}),{dispose:()=>{n.handlers.delete(a),0===n.handlers.size&&(this._commandRegistrations.delete(r),n.subscription.dispose())}}}};var d=i(7565),p=Object.defineProperty,g=Object.getOwnPropertyDescriptor,m=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?g(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&p(t,i,n),n};let WebviewsController=class WebviewsController{constructor(e){this.container=e,this.disposables.push(this._commandRegistrar=new WebviewCommandRegistrar)}disposables=[];_commandRegistrar;_panels=new Map;_views=new Map;dispose(){this.disposables.forEach(e=>void e.dispose())}registerWebviewView(e,t,i){let s=(0,c.jr)(`WebviewView(${e.id})`),a={descriptor:e};this._views.set(e.id,a);let l=[];l.push(r.window.registerWebviewViewProvider(e.id,{resolveWebviewView:async(i,o,c)=>{if(a.descriptor.plusFeature&&(!await (0,n.Z)()||c.isCancellationRequested))return;h.Vy.debug(s,"Resolving view"),i.webview.options={enableCommandUris:!0,enableScripts:!0,localResourceRoots:[r.Uri.file(this.container.context.extensionPath)],...e.webviewOptions},i.title=e.title;let u=await d.Id.create(this.container,this._commandRegistrar,e,void 0,i,t);a.controller?.dispose(),a.controller=u,l.push(u.onDidDispose(()=>{h.Vy.debug(s,"Disposing view"),a.pendingShowArgs=void 0,a.controller=void 0}),u);let[p,g]=a.pendingShowArgs??[];a.pendingShowArgs=void 0,null==g&&v(o)&&(g=[{state:o.state}]),h.Vy.debug(s,"Showing view"),await u.show(!0,p,...g??[])}},null!=e.webviewHostOptions?{webviewOptions:e.webviewHostOptions}:void 0));let u=r.Disposable.from(...l);return this.disposables.push(u),{id:e.id,get ready(){return a.controller?.ready??!1},get visible(){return a.controller?.visible??!1},dispose:function(){u.dispose()},refresh:function(e){return null!=a.controller?a.controller.refresh(e):Promise.resolve()},show:async function(t,...r){if(h.Vy.debug(s,"Showing view"),null!=a.controller)return a.controller.show(!1,t,...r);a.pendingShowArgs=[t,r],null!=i&&await i?.(...r),(0,o.S4)(`${e.id}.focus`,t)}}}registerWebviewPanel(e,t,i){let a;let u=(0,c.jr)(`WebviewPanel(${t.id})`),p={descriptor:t};this._panels.set(t.id,p);let g=[],{container:m,_commandRegistrar:v}=this;async function y(e,...t){let{descriptor:o}=p;if(o.plusFeature&&!await (0,n.Z)())return;m.usage.track(`${o.trackingFeature}:shown`);let l=e?.column??o.column??r.ViewColumn.Beside;l===r.ViewColumn.Beside&&null==r.window.tabGroups.activeTabGroup.activeTab&&(l=r.ViewColumn.Active);let c=w(p,e,...t);if(null==c){let n;null!=a?(h.Vy.debug(u,"Restoring panel"),n=a,a=void 0):(h.Vy.debug(u,"Creating panel"),n=r.window.createWebviewPanel(o.id,o.title,{viewColumn:l,preserveFocus:e?.preserveFocus??!1},{enableCommandUris:!0,enableScripts:!0,localResourceRoots:[r.Uri.file(m.context.extensionPath)],...o.webviewOptions,...o.webviewHostOptions})),n.iconPath=r.Uri.file(m.context.asAbsolutePath(o.iconPath)),c=await d.Id.create(m,v,o,o.allowMultipleInstances?(0,s.uR)():void 0,n,i),p.controllers??=new Map,p.controllers.set(c.instanceId,c),g.push(c.onDidDispose(()=>{h.Vy.debug(u,`Disposing panel (${c.instanceId})`),p.controllers?.delete(c.instanceId)}),c),h.Vy.debug(u,`Showing panel (${c.instanceId})`),await c.show(!0,e,...t)}else h.Vy.debug(u,`Showing existing panel (${c.instanceId})`),await c.show(!1,e,...t)}async function b(e,t){a=e,h.Vy.debug(u,`Deserializing panel state=${null!=t?"<state>":"undefined"}`),await y({column:e.viewColumn,preserveFocus:!0,preserveInstance:!1},...null!=t?[{state:t}]:[])}let C=r.Disposable.from(...g,r.window.registerWebviewPanelSerializer(t.id,{deserializeWebviewPanel:b}),(0,o.Lb)(e.id,(t,...i)=>y({...e.options,...t},...i),this));return this.disposables.push(C),{id:t.id,get instances(){if(!p.controllers?.size)return[];return(0,l.Tj)(p.controllers.values(),e=>f(e))},getActiveInstance:function(){if(!p.controllers?.size)return;let e=(0,l.I6)(p.controllers.values(),e=>e.active??!1);return null!=e?f(e):void 0},getBestInstance:function(e,...t){let i=w(p,e,...t);return null!=i?f(i):void 0},splitActiveInstance:function(e){let t=null!=p.controllers?(0,l.I6)(p.controllers.values(),e=>e.active??!1):void 0,i=t?.getSplitArgs()??[];return y({...e,preserveInstance:!1},...i)},dispose:function(){C.dispose()},show:y}}};function f(e){return{id:e.id,instanceId:e.instanceId,ready:e.ready,active:e.active??!1,visible:e.visible,canReuseInstance:function(t,...i){return e.canReuseInstance(t,...i)},close:function(){e.parent.dispose()},dispose:function(){e.dispose()},refresh:function(t){return e.refresh(t)},show:function(t,...i){return e.show(!1,t,...i)}}}function w(e,t,...i){let r;if(e.controllers?.size){if(e.descriptor.allowMultipleInstances){if(t?.preserveInstance!==!1&&(t?.preserveInstance!=null&&"string"==typeof t.preserveInstance&&(r=e.controllers.get(t.preserveInstance)),null==r)){let s,n;for(let o of[...e.controllers.values()].sort((e,t)=>(e.active?-1:1)-(t.active?-1:1))){n??=o,o.active&&(s=o);let e=o.canReuseInstance(t,...i);if(!0===e){r=o;break}!1===e&&(n===o&&(n=void 0),s===o&&(s=void 0))}null==r&&t?.preserveInstance===!0&&(r=s??n)}}else r=l.$1(e.controllers)?.[1]}return r}function v(e){return null!=e&&"object"==typeof e&&"state"in e&&null!=e.state&&"object"==typeof e.state}m([(0,a.Yz)({args:{0:e=>e.id,1:!1,2:!1},singleLine:!0})],WebviewsController.prototype,"registerWebviewView",1),m([(0,a.Yz)({args:{0:e=>e.id,1:e=>e.id,2:!1,3:!1},singleLine:!0})],WebviewsController.prototype,"registerWebviewPanel",1)},700:(e,t,i)=>{i.d(t,{WelcomeWebviewProvider:()=>WelcomeWebviewProvider});var r=i(1398),s=i(4293),n=i(4832),o=i(8973),a=i(3355);let l="welcome",h=new a.Q2(l,"configuration/update"),c=new a.C1(l,"didChange",!0),u=new a.C1(l,"org/settings/didChange"),d=Object.freeze({dispose:()=>{}});let WelcomeWebviewProvider=class WelcomeWebviewProvider{constructor(e,t){this.container=e,this.host=t,this._disposable=r.Disposable.from(n.H.onDidChange(this.onConfigurationChanged,this),this.container.git.onDidChangeRepositories(()=>this.notifyDidChange(),this),r.workspace.isTrusted?d:r.workspace.onDidGrantWorkspaceTrust(()=>this.notifyDidChange(),this),this.container.subscription.onDidChange(this.onSubscriptionChanged,this),(0,o.wt)(this.onContextChanged,this))}_disposable;dispose(){this._disposable.dispose()}includeBootstrap(){return this.getState()}onReloaded(){this.notifyDidChange()}getOrgSettings(){return{ai:(0,o.SD)("gitlens:gk:organization:ai:enabled",!1),drafts:(0,o.SD)("gitlens:gk:organization:drafts:enabled",!1)}}onContextChanged(e){["gitlens:gk:organization:ai:enabled","gitlens:gk:organization:drafts:enabled"].includes(e)&&this.notifyDidChangeOrgSettings()}onSubscriptionChanged(e){this.notifyDidChange(e.current)}onConfigurationChanged(e){(n.H.changed(e,"codeLens.enabled")||n.H.changed(e,"currentLine.enabled"))&&this.notifyDidChange()}onMessageReceived(e){!0===h.is(e)&&this.updateConfiguration(e.params)}async getState(e){return{...this.host.baseWebviewState,version:this.container.version,config:{codeLens:n.H.get("codeLens.enabled",void 0,!0,!0),currentLine:n.H.get("currentLine.enabled",void 0,!0,!0)},repoFeaturesBlocked:!r.workspace.isTrusted||0===this.container.git.openRepositoryCount||this.container.git.hasUnsafeRepositories(),isTrialOrPaid:await this.getTrialOrPaidState(e),canShowPromo:await this.getCanShowPromo(e),orgSettings:this.getOrgSettings()}}async getTrialOrPaidState(e){let t=e??await this.container.subscription.getSubscription(!0);return!![s.zZ.FreePlusInTrial,s.zZ.Paid].includes(t.state)}async getCanShowPromo(e){let t=new Date("2023-12-31T07:59:00.000Z").getTime();if(Date.now()>t)return!1;let i=e??await this.container.subscription.getSubscription(!0);return!(0,s.A_)(i)}updateConfiguration(e){n.H.updateEffective(`${e.type}.enabled`,e.value)}async notifyDidChange(e){this.host.notify(c,{state:await this.getState(e)})}notifyDidChangeOrgSettings(){this.host.notify(u,{orgSettings:this.getOrgSettings()})}}},8127:function(e,t,i){var r;"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==i.g&&i.g,r=function(){var e,t="3.7.5",i="function"==typeof atob,r="function"==typeof btoa,s="function"==typeof Buffer,n="function"==typeof TextDecoder?new TextDecoder:void 0,o="function"==typeof TextEncoder?new TextEncoder:void 0,a=Array.prototype.slice.call("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="),l=(e={},a.forEach(function(t,i){return e[t]=i}),e),h=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,c=String.fromCharCode.bind(String),u="function"==typeof Uint8Array.from?Uint8Array.from.bind(Uint8Array):function(e){return new Uint8Array(Array.prototype.slice.call(e,0))},d=function(e){return e.replace(/=/g,"").replace(/[+\/]/g,function(e){return"+"==e?"-":"_"})},p=function(e){return e.replace(/[^A-Za-z0-9\+\/]/g,"")},g=function(e){for(var t,i,r,s,n="",o=e.length%3,l=0;l<e.length;){if((i=e.charCodeAt(l++))>255||(r=e.charCodeAt(l++))>255||(s=e.charCodeAt(l++))>255)throw TypeError("invalid character found");n+=a[(t=i<<16|r<<8|s)>>18&63]+a[t>>12&63]+a[t>>6&63]+a[63&t]}return o?n.slice(0,o-3)+"===".substring(o):n},m=r?function(e){return btoa(e)}:s?function(e){return Buffer.from(e,"binary").toString("base64")}:g,f=s?function(e){return Buffer.from(e).toString("base64")}:function(e){for(var t=[],i=0,r=e.length;i<r;i+=4096)t.push(c.apply(null,e.subarray(i,i+4096)));return m(t.join(""))},w=function(e,t){return void 0===t&&(t=!1),t?d(f(e)):f(e)},v=function(e){if(e.length<2){var t=e.charCodeAt(0);return t<128?e:t<2048?c(192|t>>>6)+c(128|63&t):c(224|t>>>12&15)+c(128|t>>>6&63)+c(128|63&t)}var t=65536+(e.charCodeAt(0)-55296)*1024+(e.charCodeAt(1)-56320);return c(240|t>>>18&7)+c(128|t>>>12&63)+c(128|t>>>6&63)+c(128|63&t)},y=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,b=function(e){return e.replace(y,v)},C=s?function(e){return Buffer.from(e,"utf8").toString("base64")}:o?function(e){return f(o.encode(e))}:function(e){return m(b(e))},R=function(e,t){return void 0===t&&(t=!1),t?d(C(e)):C(e)},S=function(e){return R(e,!0)},P=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,A=function(e){switch(e.length){case 4:var t=((7&e.charCodeAt(0))<<18|(63&e.charCodeAt(1))<<12|(63&e.charCodeAt(2))<<6|63&e.charCodeAt(3))-65536;return c((t>>>10)+55296)+c((1023&t)+56320);case 3:return c((15&e.charCodeAt(0))<<12|(63&e.charCodeAt(1))<<6|63&e.charCodeAt(2));default:return c((31&e.charCodeAt(0))<<6|63&e.charCodeAt(1))}},k=function(e){return e.replace(P,A)},D=function(e){if(e=e.replace(/\s+/g,""),!h.test(e))throw TypeError("malformed base64.");e+="==".slice(2-(3&e.length));for(var t,i,r,s="",n=0;n<e.length;)t=l[e.charAt(n++)]<<18|l[e.charAt(n++)]<<12|(i=l[e.charAt(n++)])<<6|(r=l[e.charAt(n++)]),s+=64===i?c(t>>16&255):64===r?c(t>>16&255,t>>8&255):c(t>>16&255,t>>8&255,255&t);return s},T=i?function(e){return atob(p(e))}:s?function(e){return Buffer.from(e,"base64").toString("binary")}:D,_=s?function(e){return u(Buffer.from(e,"base64"))}:function(e){return u(T(e).split("").map(function(e){return e.charCodeAt(0)}))},I=function(e){return _(E(e))},$=s?function(e){return Buffer.from(e,"base64").toString("utf8")}:n?function(e){return n.decode(_(e))}:function(e){return k(T(e))},E=function(e){return p(e.replace(/[-_]/g,function(e){return"-"==e?"+":"/"}))},O=function(e){return $(E(e))},x=function(e){return{value:e,enumerable:!1,writable:!0,configurable:!0}},F=function(){var e=function(e,t){return Object.defineProperty(String.prototype,e,x(t))};e("fromBase64",function(){return O(this)}),e("toBase64",function(e){return R(this,e)}),e("toBase64URI",function(){return R(this,!0)}),e("toBase64URL",function(){return R(this,!0)}),e("toUint8Array",function(){return I(this)})},B=function(){var e=function(e,t){return Object.defineProperty(Uint8Array.prototype,e,x(t))};e("toBase64",function(e){return w(this,e)}),e("toBase64URI",function(){return w(this,!0)}),e("toBase64URL",function(){return w(this,!0)})},L={version:t,VERSION:t,atob:T,atobPolyfill:D,btoa:m,btoaPolyfill:g,fromBase64:O,toBase64:R,encode:R,encodeURI:S,encodeURL:S,utob:b,btou:k,decode:O,isValid:function(e){if("string"!=typeof e)return!1;var t=e.replace(/\s+/g,"").replace(/={0,2}$/,"");return!/[^\s0-9a-zA-Z\+/]/.test(t)||!/[^\s0-9a-zA-Z\-_]/.test(t)},fromUint8Array:w,toUint8Array:I,extendString:F,extendUint8Array:B,extendBuiltins:function(){F(),B()}};return L.Base64={},Object.keys(L).forEach(function(e){return L.Base64[e]=L[e]}),L},e.exports=r()},3092:(e,t,i)=>{var r=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==i.g)return i.g;throw Error("unable to locate global object")}();e.exports=t=r.fetch,r.fetch&&(t.default=r.fetch.bind(r)),t.Headers=r.Headers,t.Request=r.Request,t.Response=r.Response},7975:e=>{function t(e){if("string"!=typeof e)throw TypeError("Path must be a string. Received "+JSON.stringify(e))}function i(e,t){for(var i,r="",s=0,n=-1,o=0,a=0;a<=e.length;++a){if(a<e.length)i=e.charCodeAt(a);else if(47===i)break;else i=47;if(47===i){if(n===a-1||1===o);else if(n!==a-1&&2===o){if(r.length<2||2!==s||46!==r.charCodeAt(r.length-1)||46!==r.charCodeAt(r.length-2)){if(r.length>2){var l=r.lastIndexOf("/");if(l!==r.length-1){-1===l?(r="",s=0):s=(r=r.slice(0,l)).length-1-r.lastIndexOf("/"),n=a,o=0;continue}}else if(2===r.length||1===r.length){r="",s=0,n=a,o=0;continue}}t&&(r.length>0?r+="/..":r="..",s=2)}else r.length>0?r+="/"+e.slice(n+1,a):r=e.slice(n+1,a),s=a-n-1;n=a,o=0}else 46===i&&-1!==o?++o:o=-1}return r}var r={resolve:function(){for(var e,r,s="",n=!1,o=arguments.length-1;o>=-1&&!n;o--)o>=0?r=arguments[o]:(void 0===e&&(e=process.cwd()),r=e),t(r),0!==r.length&&(s=r+"/"+s,n=47===r.charCodeAt(0));return(s=i(s,!n),n)?s.length>0?"/"+s:"/":s.length>0?s:"."},normalize:function(e){if(t(e),0===e.length)return".";var r=47===e.charCodeAt(0),s=47===e.charCodeAt(e.length-1);return(0!==(e=i(e,!r)).length||r||(e="."),e.length>0&&s&&(e+="/"),r)?"/"+e:e},isAbsolute:function(e){return t(e),e.length>0&&47===e.charCodeAt(0)},join:function(){if(0==arguments.length)return".";for(var e,i=0;i<arguments.length;++i){var s=arguments[i];t(s),s.length>0&&(void 0===e?e=s:e+="/"+s)}return void 0===e?".":r.normalize(e)},relative:function(e,i){if(t(e),t(i),e===i||(e=r.resolve(e))===(i=r.resolve(i)))return"";for(var s=1;s<e.length&&47===e.charCodeAt(s);++s);for(var n=e.length,o=n-s,a=1;a<i.length&&47===i.charCodeAt(a);++a);for(var l=i.length-a,h=o<l?o:l,c=-1,u=0;u<=h;++u){if(u===h){if(l>h){if(47===i.charCodeAt(a+u))return i.slice(a+u+1);if(0===u)return i.slice(a+u)}else o>h&&(47===e.charCodeAt(s+u)?c=u:0===u&&(c=0));break}var d=e.charCodeAt(s+u);if(d!==i.charCodeAt(a+u))break;47===d&&(c=u)}var p="";for(u=s+c+1;u<=n;++u)(u===n||47===e.charCodeAt(u))&&(0===p.length?p+="..":p+="/..");return p.length>0?p+i.slice(a+c):(a+=c,47===i.charCodeAt(a)&&++a,i.slice(a))},_makeLong:function(e){return e},dirname:function(e){if(t(e),0===e.length)return".";for(var i=e.charCodeAt(0),r=47===i,s=-1,n=!0,o=e.length-1;o>=1;--o)if(47===(i=e.charCodeAt(o))){if(!n){s=o;break}}else n=!1;return -1===s?r?"/":".":r&&1===s?"//":e.slice(0,s)},basename:function(e,i){if(void 0!==i&&"string"!=typeof i)throw TypeError('"ext" argument must be a string');t(e);var r,s=0,n=-1,o=!0;if(void 0!==i&&i.length>0&&i.length<=e.length){if(i.length===e.length&&i===e)return"";var a=i.length-1,l=-1;for(r=e.length-1;r>=0;--r){var h=e.charCodeAt(r);if(47===h){if(!o){s=r+1;break}}else -1===l&&(o=!1,l=r+1),a>=0&&(h===i.charCodeAt(a)?-1==--a&&(n=r):(a=-1,n=l))}return s===n?n=l:-1===n&&(n=e.length),e.slice(s,n)}for(r=e.length-1;r>=0;--r)if(47===e.charCodeAt(r)){if(!o){s=r+1;break}}else -1===n&&(o=!1,n=r+1);return -1===n?"":e.slice(s,n)},extname:function(e){t(e);for(var i=-1,r=0,s=-1,n=!0,o=0,a=e.length-1;a>=0;--a){var l=e.charCodeAt(a);if(47===l){if(!n){r=a+1;break}continue}-1===s&&(n=!1,s=a+1),46===l?-1===i?i=a:1!==o&&(o=1):-1!==i&&(o=-1)}return -1===i||-1===s||0===o||1===o&&i===s-1&&i===r+1?"":e.slice(i,s)},format:function(e){var t,i;if(null===e||"object"!=typeof e)throw TypeError('The "pathObject" argument must be of type Object. Received type '+typeof e);return t=e.dir||e.root,i=e.base||(e.name||"")+(e.ext||""),t?t===e.root?t+i:t+"/"+i:i},parse:function(e){t(e);var i,r={root:"",dir:"",base:"",ext:"",name:""};if(0===e.length)return r;var s=e.charCodeAt(0),n=47===s;n?(r.root="/",i=1):i=0;for(var o=-1,a=0,l=-1,h=!0,c=e.length-1,u=0;c>=i;--c){if(47===(s=e.charCodeAt(c))){if(!h){a=c+1;break}continue}-1===l&&(h=!1,l=c+1),46===s?-1===o?o=c:1!==u&&(u=1):-1!==o&&(u=-1)}return -1===o||-1===l||0===u||1===u&&o===l-1&&o===a+1?-1!==l&&(0===a&&n?r.base=r.name=e.slice(1,l):r.base=r.name=e.slice(a,l)):(0===a&&n?(r.name=e.slice(1,o),r.base=e.slice(1,l)):(r.name=e.slice(a,o),r.base=e.slice(a,l)),r.ext=e.slice(o,l)),a>0?r.dir=e.slice(0,a-1):n&&(r.dir="/"),r},sep:"/",delimiter:":",win32:null,posix:null};r.posix=r,e.exports=r},1398:e=>{e.exports=require("vscode")}},t={};function i(r){var s=t[r];if(void 0!==s)return s.exports;var n=t[r]={exports:{}};return e[r].call(n.exports,n,n.exports,i),n.exports}i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},i.d=(e,t)=>{for(var r in t)i.o(t,r)&&!i.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};(()=>{i.r(r),i.d(r,{activate:()=>r9,deactivate:()=>r6});var e,t,s,n,o,a=i(1398),l=i(9262),h=i(3794),c=i(2972),u=i(1760);Object.freeze({dispose:()=>{}});let Api=class Api{#i;constructor(e){this.#i=e}registerActionRunner(e,t){if(t.name===u.zM)throw Error(`Cannot use the reserved name '${u.zM}'`);return"hover.commandHelp"===e&&(e="hover.commands"),this.#i.actionRunners.register(e,t)}};var d=i(2434),p=i(3807),g=i(7931),m=i(9102),f=i(5287),w=i(9634),v=i(468),y=i(3536),b=i(7899),C=i(4832),R=i(8973),S=i(1856),P=i(4022),A=i(3916),k=i(3395),D=i(937),T=i(8180),_=Object.defineProperty,I=Object.getOwnPropertyDescriptor,$=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?I(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&_(t,i,n),n};let Storage=class Storage{constructor(e){this.context=e,this._disposable=this.context.secrets.onDidChange(e=>this._onDidChangeSecrets.fire(e))}_onDidChange=new a.EventEmitter;get onDidChange(){return this._onDidChange.event}_onDidChangeSecrets=new a.EventEmitter;get onDidChangeSecrets(){return this._onDidChangeSecrets.event}_disposable;dispose(){this._disposable.dispose()}get(e,t){return this.context.globalState.get(`${p.Od}:${e}`,t)}async delete(e){await this.context.globalState.update(`${p.Od}:${e}`,void 0),this._onDidChange.fire({key:e,workspace:!1})}async deleteWithPrefix(e){let t=`${p.Od}:${e}`,i=`${t}:`;for(let e of this.context.globalState.keys())(e===t||e.startsWith(i))&&(await this.context.globalState.update(e,void 0),this._onDidChange.fire({key:e,workspace:!1}))}async store(e,t){await this.context.globalState.update(`${p.Od}:${e}`,t),this._onDidChange.fire({key:e,workspace:!1})}async getSecret(e){return this.context.secrets.get(e)}async deleteSecret(e){return this.context.secrets.delete(e)}async storeSecret(e,t){return this.context.secrets.store(e,t)}getWorkspace(e,t){return this.context.workspaceState.get(`${p.Od}:${e}`,t)}async deleteWorkspace(e){await this.context.workspaceState.update(`${p.Od}:${e}`,void 0),this._onDidChange.fire({key:e,workspace:!0})}async deleteWorkspaceWithPrefix(e){let t=`${p.Od}:${e}`,i=`${t}:`;for(let e of this.context.workspaceState.keys())(e===t||e.startsWith(i))&&(await this.context.workspaceState.update(e,void 0),this._onDidChange.fire({key:e,workspace:!0}))}async storeWorkspace(e,t){await this.context.workspaceState.update(`${p.Od}:${e}`,t),this._onDidChange.fire({key:e,workspace:!0})}};$([(0,T.Yz)({logThreshold:50})],Storage.prototype,"get",1),$([(0,T.Yz)({logThreshold:250})],Storage.prototype,"delete",1),$([(0,T.Yz)({logThreshold:250})],Storage.prototype,"deleteWithPrefix",1),$([(0,T.Yz)({args:{1:!1},logThreshold:250})],Storage.prototype,"store",1),$([(0,T.Yz)({args:!1,logThreshold:250})],Storage.prototype,"getSecret",1),$([(0,T.Yz)({args:!1,logThreshold:250})],Storage.prototype,"deleteSecret",1),$([(0,T.Yz)({args:!1,logThreshold:250})],Storage.prototype,"storeSecret",1),$([(0,T.Yz)({logThreshold:25})],Storage.prototype,"getWorkspace",1),$([(0,T.Yz)({logThreshold:250})],Storage.prototype,"deleteWorkspace",1),$([(0,T.Yz)({logThreshold:250})],Storage.prototype,"deleteWorkspaceWithPrefix",1),$([(0,T.Yz)({args:{1:!1},logThreshold:250})],Storage.prototype,"storeWorkspace",1);var E=i(4766),O=i(5911),x=i(6090),F=i(3900),B=Object.defineProperty,L=Object.getOwnPropertyDescriptor;let U=class extends F.uB{constructor(e){super(p.Ts.AddAuthors),this.container=e}execute(e){let t;return e?.rootUri!=null&&(t=this.container.git.getRepository(e.rootUri)),(0,x.b)({command:"co-authors",state:{repo:t,contributors:void 0}})}};U=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?L(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&B(t,i,n),n})([(0,b.G5)()],U);var W=i(4911),q=i(2471),M=Object.defineProperty,N=Object.getOwnPropertyDescriptor;let H=class extends F.Zr{constructor(e){super([p.Ts.BrowseRepoAtRevision,p.Ts.BrowseRepoAtRevisionInNewWindow,p.Ts.BrowseRepoBeforeRevision,p.Ts.BrowseRepoBeforeRevisionInNewWindow]),this.container=e}preExecute(e,t){switch(e.command){case p.Ts.BrowseRepoAtRevisionInNewWindow:t={...t,before:!1,openInNewWindow:!0};break;case p.Ts.BrowseRepoBeforeRevision:t={...t,before:!0,openInNewWindow:!1};break;case p.Ts.BrowseRepoBeforeRevisionInNewWindow:t={...t,before:!0,openInNewWindow:!0}}return this.execute(e.editor,e.uri,t)}async execute(e,t,i){i={...i};try{if(null==i.uri){if(t=(0,F.qx)(t,e),null==t)return}else t=i.uri;let r=await g.nk.fromUri(t);if(null==r.sha)return;let s=i?.before?await this.container.git.resolveReference(r.repoPath,`${r.sha}^`):r.sha;t=this.container.git.getRevisionUri(s,r.repoPath,r.repoPath),r=g.nk.fromRevisionUri(t),(0,q.OH)(t,{location:i.openInNewWindow?"newWindow":"addToWorkspace",name:`${(0,W.P8)(r.repoPath)} @ ${r.shortSha}`}),i.openInNewWindow||(0,b.S4)("workbench.files.action.focusFilesExplorer")}catch(e){A.Vy.error(e,"BrowseRepoAtRevisionCommand"),(0,y.qQ)("Unable to open the repository at the specified revision")}}};H=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?N(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&M(t,i,n),n})([(0,b.G5)()],H);var G=i(6964),V=i(1994),Q=Object.defineProperty,j=Object.getOwnPropertyDescriptor;let z=class extends F.uB{constructor(e){super(p.Ts.CloseUnchangedFiles),this.container=e}async execute(e){e={...e};try{if(null==e.uris){let t=await (0,G.t6)("Close All Unchanged Files");if(null==t)return;let i=await this.container.git.getStatusForRepo(t.uri);if(null==i){a.window.showWarningMessage("Unable to close unchanged files");return}e.uris=i.files.map(e=>e.uri)}let t=0===e.uris.length;for(let i of a.window.tabGroups.all)for(let r of i.tabs)if(r.input instanceof a.TabInputText||r.input instanceof a.TabInputCustom||r.input instanceof a.TabInputNotebook){let i=r.input.uri;(t||!e.uris.some(e=>V.Y.equals(e,i)))&&a.window.tabGroups.close(r,!0)}else if(r.input instanceof a.TabInputTextDiff||r.input instanceof a.TabInputNotebookDiff){let i=r.input.modified;(t||!e.uris.some(e=>V.Y.equals(e,i)))&&a.window.tabGroups.close(r,!0)}}catch(e){A.Vy.error(e,"CloseUnchangedFilesCommand"),(0,y.qQ)("Unable to close all unchanged files")}}};z=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?j(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&Q(t,i,n),n})([(0,b.G5)()],z);var Y=Object.defineProperty,K=Object.getOwnPropertyDescriptor;let J=class extends F.uB{constructor(e){super(p.Ts.PlusManageCloudIntegrations),this.container=e}async execute(e){await this.container.integrations.manageCloudIntegrations(e?.integrationId,e?.source?{source:e.source,detail:e?.detail}:void 0)}};J=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?K(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&Y(t,i,n),n})([(0,b.G5)()],J);var Z=Object.defineProperty,X=Object.getOwnPropertyDescriptor;let ee=class extends F.Zr{constructor(e){super([p.Ts.CompareWith,p.Ts.CompareHeadWith,p.Ts.CompareWorkingWith,p.Ts.Deprecated_DiffHeadWith,p.Ts.Deprecated_DiffWorkingWith]),this.container=e}preExecute(e,t){switch(e.command){case p.Ts.CompareWith:t={...t};break;case p.Ts.CompareHeadWith:case p.Ts.Deprecated_DiffHeadWith:(t={...t}).ref1="HEAD";break;case p.Ts.CompareWorkingWith:case p.Ts.Deprecated_DiffWorkingWith:(t={...t}).ref1=""}return this.execute(e.editor,e.uri,t)}async execute(e,t,i){t=(0,F.qx)(t,e),i={...i};try{let r;switch(i.ref1){case null:r="Compare";break;case"":r="Compare Working Tree with";break;case"HEAD":r="Compare HEAD with";break;default:r=`Compare ${i.ref1} with`}let s=(await G.X(t,e,r))?.path;if(!s)return;null!=i.ref1&&null!=i.ref2?await this.container.searchAndCompareView.compare(s,i.ref1,i.ref2):this.container.searchAndCompareView.selectForCompare(s,i.ref1,{prompt:!0})}catch(e){A.Vy.error(e,"CompareWithCommmand"),(0,y.qQ)("Unable to open comparison")}}};ee=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?X(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&Z(t,i,n),n})([(0,b.G5)()],ee);var et=Object.defineProperty,ei=Object.getOwnPropertyDescriptor;let er=class extends F.Zr{constructor(e){super(p.Ts.CopyCurrentBranch),this.container=e}async execute(e,t){let i=null!=(t=(0,F.qx)(t,e))?await g.nk.fromUri(t):void 0,r=await (0,G.X)(i,e,"Copy Current Branch Name");if(null!=r)try{let e=await r.getBranch();e?.name&&await a.env.clipboard.writeText(e.name)}catch(e){A.Vy.error(e,"CopyCurrentBranchCommand"),(0,y.qQ)("Unable to copy current branch name")}}};er=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?ei(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&et(t,i,n),n})([(0,b.G5)()],er);var es=i(6645),en=i(7587),eo=i(5854),ea=i(6541);async function el(e,t="Choose a remote",i,r){let s;let n=[];if(0===i.length)t="No remotes found";else{if(r?.autoPick==="default"&&i.length>1){let e=i.find(e=>e.default);null!=e&&(i=[e])}let e={upstream:!0,buttons:r?.setDefault?[eo.$o]:void 0};for(let t of i)n.push((0,ea.G0)(t,void 0,e)),t.name===r?.picked&&(s=n[n.length-1])}if(r?.autoPick&&1===i.length)return n[0].item;let o=a.window.createQuickPick();o.ignoreFocusOut=(0,q.dW)();let l=[];try{let i=await new Promise(i=>{l.push(o.onDidHide(()=>i(void 0)),o.onDidAccept(()=>{0!==o.activeItems.length&&i(o.activeItems[0])}),o.onDidTriggerItemButton(async e=>{e.button===eo.$o&&(await e.item.item.setAsDefault(),i(e.item))})),o.title=e,o.placeholder=t,o.matchOnDetail=!0,o.items=n,null!=s&&(o.activeItems=[s]),o.show()});return i?.item}finally{o.dispose(),l.forEach(e=>void e.dispose())}}var eh=i(1144),ec=Object.defineProperty,eu=Object.getOwnPropertyDescriptor,ed=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?eu(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&ec(t,i,n),n};let ep=class extends F.Zr{constructor(e){super([p.Ts.CopyDeepLinkToBranch,p.Ts.CopyDeepLinkToCommit,p.Ts.CopyDeepLinkToRepo,p.Ts.CopyDeepLinkToTag,p.Ts.CopyDeepLinkToComparison,p.Ts.CopyDeepLinkToWorkspace]),this.container=e}preExecute(e,t){return null==t&&((0,F.j7)(e)?t={refOrRepoPath:e.node.commit}:(0,F.K0)(e)?t=e.command===p.Ts.CopyDeepLinkToRepo?{refOrRepoPath:e.node.branch.repoPath,remote:e.node.branch.getRemoteName()}:{refOrRepoPath:e.node.branch}:(0,F.oD)(e)?t={refOrRepoPath:e.node.tag}:(0,F.qv)(e)?t={refOrRepoPath:e.node.remote.repoPath,remote:e.node.remote.name}:(0,F.d2)(e)?t={refOrRepoPath:e.node.uri.fsPath,compareRef:e.node.compareRef,compareWithRef:e.node.compareWithRef}:(0,F.vH)(e)&&(t={workspaceId:e.node.workspace.id})),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r,s;if(null!=(i={...i}).workspaceId){try{await this.container.deepLinks.copyDeepLinkUrl(i.workspaceId)}catch(e){A.Vy.error(e,"CopyDeepLinkCommand"),(0,y.qQ)("Unable to copy link")}return}if(i?.refOrRepoPath==null){let i=null!=(t=(0,F.qx)(t,e))?await g.nk.fromUri(t):void 0;r=eh.vk.Repository,s=(await G.X(i,e,`Copy Link to ${eh.$(r)}`))?.path}else"string"==typeof i.refOrRepoPath?(r=null==i.compareRef?eh.vk.Repository:eh.vk.Comparison,s=i.refOrRepoPath,i.refOrRepoPath=void 0):(r=(0,eh.NK)(i.refOrRepoPath.refType),s=i.refOrRepoPath.repoPath);if(s){if(!i.remote&&i.refOrRepoPath?.refType==="branch"&&(i.refOrRepoPath.remote||i.refOrRepoPath.upstream?.name!=null)){let[e,t]=(0,m.He)(i.refOrRepoPath);null!=e&&null!=t&&(i.remote=t,i.prePickRemote=!0)}try{let e;let t=await this.container.git.getRemotes(s,{sort:!0}),n=t.find(e=>e.default);if(i.remote&&!i.prePickRemote)e=t.find(e=>e.name===i?.remote);else if(null!=n)e=n;else{let s=await el(`Copy Link to ${(0,eh.$)(r)}`,"Choose which remote to copy the link for",t,{autoPick:!0,picked:i.remote,setDefault:!0});if(null==s)return;e=s}if(null==e)return;null==i.refOrRepoPath?await this.container.deepLinks.copyDeepLinkUrl(s,e.url,i.compareRef,i.compareWithRef):await this.container.deepLinks.copyDeepLinkUrl(i.refOrRepoPath,e.url)}catch(e){A.Vy.error(e,"CopyDeepLinkCommand"),(0,y.qQ)("Unable to copy link")}}}};ep=ed([(0,b.G5)()],ep);let eg=class extends F.Zr{constructor(e){super([p.Ts.CopyDeepLinkToFile,p.Ts.CopyDeepLinkToFileAtRevision,p.Ts.CopyDeepLinkToLines]),this.container=e}preExecute(e,t){if(null==t&&(t={}),null==t.ref&&e.command===p.Ts.CopyDeepLinkToFileAtRevision&&(t.chooseRef=!0),null==t.lines&&e.command===p.Ts.CopyDeepLinkToLines){let i;(0,F.Or)(e)&&null!=e.line?i=[e.line+1]:e.editor?.selection==null||e.editor.selection.isEmpty||(i=e.editor.selection.isSingleLine?[e.editor.selection.start.line+1]:[e.editor.selection.start.line+1,e.editor.selection.end.line+1]),t.lines=i}return this.execute(e.editor,e.uri,t)}async execute(e,t,i){i={...i};let r=eh.vk.File,s=i?.repoPath,n=i?.filePath,o=i?.ref;if(null==s||null==n||null==o){let r=null!=(t=(0,F.qx)(t,e))?await g.nk.fromUri(t):void 0;if(r?.path==null||r?.repoPath==null||(null==s&&(s=r.repoPath),null==n&&(n=r?.fsPath),i?.chooseRef!==!0&&null==o&&null!=s&&r?.sha!=null&&(o=(0,es.kA)(r.sha,s,{refType:"revision"})),null==s||null==n))return;s=(0,W.Fd)(s),(n=(0,W.Fd)(n)).startsWith(s)||(A.Vy.error(`CopyFileDeepLinkCommand: File path ${n} is not contained in repo path ${s}`),(0,y.qQ)("Unable to copy file link")),(n=n.substring(s.length+1)).startsWith("/")&&(n=n.substring(1))}if(s&&n){if(i?.chooseRef){let e=await (0,en.N)(s,`Copy Link to ${n} at Reference`,"Choose a reference (branch, tag, etc) to copy the file link for",{allowRevisions:!0,include:en.m.All});if(null==e)return;o=""===e.ref?void 0:e}if(!i.remote&&i.ref?.refType==="branch"&&(i.ref.remote||i.ref.upstream?.name!=null)){let[e,t]=(0,m.He)(i.ref);null!=e&&null!=t&&(i.remote=t,i.prePickRemote=!0)}try{let e;let t=await this.container.git.getRemotes(s,{sort:!0}),a=t.find(e=>e.default);if(i.remote&&!i.prePickRemote)e=t.find(e=>e.name===i?.remote);else if(null!=a)e=a;else{let s=await el(`Copy Link to ${(0,eh.$)(r)}`,"Choose which remote to copy the link for",t,{autoPick:!0,picked:i.remote,setDefault:!0});if(null==s)return;e=s}if(null==e)return;await this.container.deepLinks.copyFileDeepLinkUrl(s,n,e.url,i.lines,o)}catch(e){A.Vy.error(e,"CopyFileDeepLinkCommand"),(0,y.qQ)("Unable to copy file link")}}}};eg=ed([(0,b.G5)()],eg);var em=i(9432),ef=i(4026),ew=Object.defineProperty,ev=Object.getOwnPropertyDescriptor;let ey=class extends F.Zr{constructor(e){super(p.Ts.CopyMessageToClipboard),this.container=e}async preExecute(e,t){return(0,F.j7)(e)?((t={...t}).sha=e.node.commit.sha,null!=e.node.commit.message&&await e.node.commit.ensureFullDetails(),t.message=e.node.commit.message,this.execute(e.editor,e.node.commit.file?.uri??e.node.commit.getRepository()?.uri,t)):(0,F.K0)(e)?((t={...t}).sha=e.node.branch.sha,this.execute(e.editor,e.node.uri,t)):(0,F.oD)(e)?((t={...t}).sha=e.node.tag.sha,this.execute(e.editor,e.node.uri,t)):this.execute(e.editor,e.uri,t)}async execute(e,t,i){t=(0,F.qx)(t,e),i={...i};try{if(!i.message){let r;if(null!=i.repoPath&&null!=i.sha){await (0,em.eU)({ref:i.sha,repoPath:i.repoPath});return}if(null==t){if(!(r=this.container.git.getBestRepository(e)?.path))return;let t=await this.container.git.getLog(r,{limit:1});if(null==t)return;let s=(0,ef.$1)(t.commits.values());if(s?.message==null)return;i.message=s.message}else if(null==i.message){let s=await g.nk.fromUri(t);if(!(r=s.repoPath))return;if(null==i.sha){let t=e?.selection.active.line??0;if(t<0)return;try{let i=await this.container.git.getBlameForLine(s,t,e?.document);if(null==i||i.commit.isUncommitted)return;await (0,em.eU)(i.commit);return}catch(e){A.Vy.error(e,"CopyMessageToClipboardCommand",`getBlameForLine(${t})`),(0,y.qQ)("Unable to copy message");return}}else{await (0,em.eU)({ref:i.sha,repoPath:r});return}}}await a.env.clipboard.writeText(i.message)}catch(e){A.Vy.error(e,"CopyMessageToClipboardCommand"),(0,y.qQ)("Unable to copy message")}}};ey=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?ev(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&ew(t,i,n),n})([(0,b.G5)()],ey);var eb=Object.defineProperty,eC=Object.getOwnPropertyDescriptor;let eR=class extends F.Zr{constructor(e){super(p.Ts.CopyShaToClipboard),this.container=e}preExecute(e,t){return(0,F.j7)(e)?((t={...t}).sha=e.node.commit.sha,this.execute(e.editor,e.node.commit.file?.uri??e.node.commit.getRepository()?.uri,t)):(0,F.K0)(e)?((t={...t}).sha=e.node.branch.sha,this.execute(e.editor,e.node.uri,t)):(0,F.oD)(e)?((t={...t}).sha=e.node.tag.sha,this.execute(e.editor,e.node.uri,t)):this.execute(e.editor,e.uri,t)}async execute(e,t,i){t=(0,F.qx)(t,e),i={...i};try{if(!i.sha){if(null==t){let t=this.container.git.getBestRepository(e)?.path;if(!t)return;let r=await this.container.git.getLog(t,{limit:1});if(null==r||(i.sha=ef.$1(r.commits.values())?.sha,null==i.sha))return}else if(null==i.sha){let r=e?.selection.active.line??0;if(r<0)return;try{let s=await g.nk.fromUri(t),n=await this.container.git.getBlameForLine(s,r,e?.document);if(null==n)return;i.sha=n.commit.sha}catch(e){A.Vy.error(e,"CopyShaToClipboardCommand",`getBlameForLine(${r})`),(0,y.qQ)("Unable to copy commit SHA");return}}}await a.env.clipboard.writeText(C.H.get("advanced.abbreviateShaOnCopy")?(0,es.pV)(i.sha):i.sha)}catch(e){A.Vy.error(e,"CopyShaToClipboardCommand"),(0,y.qQ)("Unable to copy commit SHA")}}};eR=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?eC(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&eb(t,i,n),n})([(0,b.G5)()],eR);var eS=Object.defineProperty,eP=Object.getOwnPropertyDescriptor;let eA=class extends F.Zr{constructor(e){super(p.Ts.CopyRelativePathToClipboard),this.container=e}preExecute(e){return(0,F.xT)(e)?this.execute(e.editor,e.node.commit.file.uri):this.execute(e.editor,e.uri)}async execute(e,t){t=(0,F.qx)(t,e);let i="";if(null!=t){let r=this.container.git.getBestRepository(e)?.uri;null!=r&&(i=this.container.git.getRelativePath(t,r))}await a.env.clipboard.writeText(i)}};eA=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?eP(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&eS(t,i,n),n})([(0,b.G5)()],eA);var ek=i(2124),eD=Object.defineProperty,eT=Object.getOwnPropertyDescriptor;let e_=class extends F.uB{constructor(e){super(p.Ts.CreatePullRequestOnRemote),this.container=e}async execute(e){if(e?.repoPath==null)return;let t=this.container.git.getRepository(e.repoPath);if(null==t)return;let i=await t.getRemote(e.remote);if(i?.provider==null)return;let r=i.provider.id,s=await t.getRemotes({filter:e=>e.provider?.id===r,sort:!0}),n={type:ek.J.CreatePullRequest,base:{branch:e.base,remote:void 0},compare:{branch:e.compare,remote:{path:i.path,url:i.url}}};await (0,b.RS)(p.Ts.OpenOnRemote,{resource:n,remotes:s})}};e_=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?eT(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&eD(t,i,n),n})([(0,b.G5)()],e_);var eI=i(522),e$=Object.defineProperty,eE=Object.getOwnPropertyDescriptor;let eO=class extends F.Zr{constructor(e){super([p.Ts.DiffDirectory,p.Ts.DiffDirectoryWithHead,p.Ts.ViewsOpenDirectoryDiff,p.Ts.ViewsOpenDirectoryDiffWithWorking]),this.container=e}async preExecute(e,t){switch(e.command){case p.Ts.DiffDirectoryWithHead:(t={...t}).ref1="HEAD",t.ref2=void 0;break;case p.Ts.ViewsOpenDirectoryDiff:"viewItem"===e.type&&e.node instanceof eI.ip&&(t={...t},[t.ref1,t.ref2]=await e.node.getDiffRefs());break;case p.Ts.ViewsOpenDirectoryDiffWithWorking:(0,F.nX)(e)&&((t={...t}).ref1=e.node.ref.ref,t.ref2=void 0)}return this.execute(e.editor,e.uri,t)}async execute(e,t,i){t=(0,F.qx)(t,e),i={...i};try{let r=(await G.X(t,e,"Directory Compare Working Tree With"))?.path;if(!r)return;if(!i.ref1){let e=await (0,en.N)(r,"Directory Compare Working Tree with","Choose a branch or tag to compare with",{allowRevisions:!0});if(null==e||(i.ref1=e.ref,null==i.ref1))return}(0,em.nA)(r,i.ref1,i.ref2)}catch(e){A.Vy.error(e,"OpenDirectoryCompareCommand"),(0,y.qQ)("Unable to open directory compare")}}};eO=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?eE(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&e$(t,i,n),n})([(0,b.G5)()],eO);var ex=i(6169),eF=i(1270),eB=i(7279),eL=Object.defineProperty,eU=Object.getOwnPropertyDescriptor;let eW=class extends F.Zr{constructor(e){super(p.Ts.DiffFolderWithRevision),this.container=e}async execute(e,t,i){if(i={...i},null==(t=i?.uri??(0,F.qx)(t,e)))return;try{(await a.workspace.fs.stat(t)).type!==a.FileType.Directory&&(t=a.Uri.joinPath(t,".."))}catch{}let r=await g.nk.fromUri(t);try{let i=(await G.X(t,e,"Open Folder Changes with Revision"))?.path;if(!i)return;let s=this.container.git.getLogForFile(r.repoPath,r.fsPath).then(e=>e??(r.sha?this.container.git.getLogForFile(r.repoPath,r.fsPath,{ref:r.sha}):void 0)),n=this.container.git.getRelativePath(t,i),o=`Open Folder Changes with Revision${(0,eB.eV)(p.EO.Dot,2,2)}${n}${r.sha?` at ${(0,es.pV)(r.sha)}`:""}`,a=await (0,ex.X)(s,o,"Choose a commit to compare with",{picked:r.sha,showOtherReferences:[eF.Fj.fromCommand("Choose a Branch or Tag...",p.Ts.DiffFolderWithRevisionFrom)]});if(null==a)return;(0,em.Kg)(t,{repoPath:i,lhs:a.ref,rhs:r.sha??""})}catch(e){A.Vy.error(e,"DiffFolderWithRevisionCommand"),(0,y.qQ)("Unable to open comparison")}}};eW=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?eU(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&eL(t,i,n),n})([(0,b.G5)()],eW);var eq=Object.defineProperty,eM=Object.getOwnPropertyDescriptor;let eN=class extends F.Zr{constructor(e){super(p.Ts.DiffFolderWithRevisionFrom),this.container=e}async execute(e,t,i){let r=null==i;if(i={...i},null!=(t=i?.uri??(0,F.qx)(t,e))){try{(await a.workspace.fs.stat(t)).type!==a.FileType.Directory&&(t=a.Uri.joinPath(t,".."))}catch{}try{let s=(await G.X(t,e,"Open Folder Changes with Branch or Tag"))?.path;if(!s)return;let n=this.container.git.getRelativePath(t,s);if(null==i.rhs){if(r){let e=await g.nk.fromUri(t);i.rhs=e.sha??""}else{let e=await (0,en.N)(s,`Open Folder Changes with Branch or Tag${(0,eB.eV)(p.EO.Dot,2,2)}${n}`,"Choose a reference (branch, tag, etc) to compare",{allowRevisions:!0,include:en.m.All,sort:{branches:{current:!0},tags:{}}});if(e?.ref==null)return;i.rhs=e.ref}}if(!i.lhs){let e=await (0,en.N)(s,`Open Folder Changes with Branch or Tag${(0,eB.eV)(p.EO.Dot,2,2)}${n}${i.rhs?` at ${(0,es.pV)(i.rhs)}`:""}`,"Choose a reference (branch, tag, etc) to compare with",{allowRevisions:!0,include:""===i.rhs?en.m.All&~en.m.WorkingTree:en.m.All});if(e?.ref==null)return;i.lhs=e.ref,""!==i.rhs&&""===i.lhs&&(i.lhs=i.rhs,i.rhs="")}(0,em.Kg)(t,{repoPath:s,lhs:i.lhs,rhs:i.rhs})}catch(e){A.Vy.error(e,"DiffFolderWithRevisionFromCommand"),(0,y.qQ)("Unable to open comparison")}}}};eN=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?eM(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&eq(t,i,n),n})([(0,b.G5)()],eN);var eH=Object.defineProperty,eG=Object.getOwnPropertyDescriptor;let eV=class extends F.Zr{constructor(e){super(p.Ts.DiffLineWithPrevious),this.container=e}preExecute(e,t){return"editorLine"===e.type&&(t={...t,line:e.line}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null==(t=(0,F.qx)(t,e)))return;null==(i={...i}).line&&(i.line=e?.selection.active.line??0);let r=i.commit?.getGitUri()??await g.nk.fromUri(t);try{let e=await this.container.git.getPreviousComparisonUrisForLine(r.repoPath,r,i.line,r.sha);if(e?.previous==null){(0,y.pR)();return}await (0,b.RS)(p.Ts.DiffWith,{repoPath:e.current.repoPath,lhs:{sha:e.previous.sha??"",uri:e.previous.documentUri()},rhs:{sha:e.current.sha??"",uri:e.current.documentUri()},line:e.line,showOptions:i.showOptions})}catch(e){A.Vy.error(e,"DiffLineWithPreviousCommand",`getPreviousLineDiffUris(${r.repoPath}, ${r.fsPath}, ${r.sha})`),(0,y.qQ)("Unable to open compare")}}};eV=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?eG(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&eH(t,i,n),n})([(0,b.G5)()],eV);var eQ=i(5313),ej=Object.defineProperty,ez=Object.getOwnPropertyDescriptor;let eY=class extends F.Zr{constructor(e){super(p.Ts.DiffLineWithWorking),this.container=e}preExecute(e,t){return"editorLine"===e.type&&(t={...t,line:e.line}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r,s;if(null==(t=(0,F.qx)(t,e)))return;let n=await g.nk.fromUri(t);if(null==(i={...i}).line&&(i.line=e?.selection.active.line??0),null==i.commit||i.commit.isUncommitted){let t=i.line;if(t<0)return;try{let o=await this.container.git.getBlameForLine(n,t,e?.document);if(null==o){(0,y.gD)("Unable to open compare");return}if(i.commit=o.commit,i.commit.isUncommitted){let e=await this.container.git.getStatusForFile(n.repoPath,n);e?.indexStatus!=null?(r=eQ.id,s=this.container.git.getAbsoluteUri(e.originalPath||e.path,i.commit.repoPath)):(r=i.commit.unresolvedPreviousSha,s=i.commit.file.originalUri??i.commit.file.uri)}else r=i.commit.sha,s=i.commit.file.uri;i.line=o.line.line-1}catch(e){A.Vy.error(e,"DiffLineWithWorkingCommand",`getBlameForLine(${t})`),(0,y.qQ)("Unable to open compare");return}}else r=i.commit.sha,s=i.commit.file?.uri??n;let o=await i.commit.file?.getWorkingUri();if(null==o){a.window.showWarningMessage("Unable to open compare. File has been deleted from the working tree");return}await (0,b.RS)(p.Ts.DiffWith,{repoPath:i.commit.repoPath,lhs:{sha:r,uri:s},rhs:{sha:"",uri:o},line:i.line,showOptions:i.showOptions})}};eY=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?ez(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&ej(t,i,n),n})([(0,b.G5)()],eY),i(7622);var eK=Object.defineProperty,eJ=Object.getOwnPropertyDescriptor;let eZ=class extends F.Zr{constructor(e){super([p.Ts.DiffWithNext,p.Ts.DiffWithNextInDiffLeft,p.Ts.DiffWithNextInDiffRight]),this.container=e}preExecute(e,t){return e.command===p.Ts.DiffWithNextInDiffLeft&&(t={...t,inDiffLeftEditor:!0}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null==(t=(0,F.qx)(t,e)))return;null==(i={...i}).line&&(i.line=e?.selection.active.line??0);let r=i.commit?.getGitUri()??await g.nk.fromUri(t);try{let e=await this.container.git.getNextComparisonUris(r.repoPath,r,r.sha,i.inDiffLeftEditor?1:0);if(e?.next==null)return;await (0,b.RS)(p.Ts.DiffWith,{repoPath:e.current.repoPath,lhs:{sha:e.current.sha??"",uri:e.current.documentUri()},rhs:{sha:e.next.sha??"",uri:e.next.documentUri()},line:i.line,showOptions:i.showOptions})}catch(e){A.Vy.error(e,"DiffWithNextCommand",`getNextDiffUris(${r.repoPath}, ${r.fsPath}, ${r.sha})`),(0,y.qQ)("Unable to open compare")}}};eZ=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?eJ(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&eK(t,i,n),n})([(0,b.G5)()],eZ);var eX=Object.defineProperty,e0=Object.getOwnPropertyDescriptor;let e1=class extends F.Zr{constructor(e){super([p.Ts.DiffWithPrevious,p.Ts.DiffWithPreviousInDiffLeft,p.Ts.DiffWithPreviousInDiffRight]),this.container=e}preExecute(e,t){return e.command===p.Ts.DiffWithPreviousInDiffRight&&(t={...t,inDiffRightEditor:!0}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r;if(null==(i={...i}).uri){if(null==(t=(0,F.qx)(t,e)))return}else t=i.uri;if(null==i.line&&(i.line=e?.selection.active.line??0),i.commit?.file!=null){if(!i.commit.isUncommitted){await (0,b.RS)(p.Ts.DiffWith,{repoPath:i.commit.repoPath,lhs:{sha:`${i.commit.sha}^`,uri:i.commit.file.originalUri??i.commit.file.uri},rhs:{sha:"?"===i.commit.file.status?`${i.commit.sha}^3`:i.commit.sha||"",uri:i.commit.file.uri},line:i.line,showOptions:i.showOptions});return}r=i.commit?.getGitUri()}else r=await g.nk.fromUri(t);try{let e=await this.container.git.getPreviousComparisonUris(r.repoPath,r,r.sha,i.inDiffRightEditor?1:0);if(e?.previous==null){if(null==e){(0,y.pR)();return}if(null==e.current.sha){await (0,q.Ol)(e.current,i.showOptions);return}if(!e.current.isUncommittedStaged){(0,y.pR)();return}e.previous=g.nk.fromFile(e.current.fileName,e.current.repoPath,eQ.nB)}await (0,b.RS)(p.Ts.DiffWith,{repoPath:e.current.repoPath,lhs:{sha:e.previous.sha??"",uri:e.previous.documentUri()},rhs:{sha:e.current.sha??"",uri:e.current.documentUri()},line:i.line,showOptions:i.showOptions})}catch(e){A.Vy.error(e,"DiffWithPreviousCommand",`getPreviousDiffUris(${r.repoPath}, ${r.fsPath}, ${r.sha})`),(0,y.qQ)("Unable to open compare")}}};e1=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?e0(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&eX(t,i,n),n})([(0,b.G5)()],e1);var e2=i(2362),e3=Object.defineProperty,e4=Object.getOwnPropertyDescriptor;let e8=class extends F.Zr{constructor(e){super(p.Ts.DiffWithRevision),this.container=e}async execute(e,t,i){if(null==(t=(0,F.qx)(t,e)))return;let r=await g.nk.fromUri(t);null==(i={...i}).line&&(i.line=e?.selection.active.line??0);try{let e=this.container.git.getLogForFile(r.repoPath,r.fsPath).then(e=>e??(r.sha?this.container.git.getLogForFile(r.repoPath,r.fsPath,{ref:r.sha}):void 0)),s=`Open Changes with Revision${(0,eB.eV)(p.EO.Dot,2,2)}`,n=`${s}${r.getFormattedFileName({suffix:r.sha?`:${(0,es.pV)(r.sha)}`:void 0,truncateTo:p.uR-s.length})}`,o=await (0,ex.X)(e,n,"Choose a commit to compare with",{empty:r.sha?void 0:{getState:async()=>{let e,t;let i=[],s=await this.container.git.getStatusForRepo(r.repoPath);if(null!=s)for(let e of s.files){if("?"===e.workingTreeStatus||"!"===e.workingTreeStatus)continue;let[t,s]=(0,W.Uf)(e.path,void 0,!0);i.push(new eF.Fj({label:t,description:s},void 0,p.Ts.DiffWithRevision,[this.container.git.getAbsoluteUri(e.path,r.repoPath)]))}return i.length?(e=`${r.getFormattedFileName()} is likely untracked, choose a different file?`,t=`${n} (Untracked?)`):e="No commits found",i.push((0,e2.Du)(e2.WL.Cancel,void 0,{label:i.length?"Cancel":"OK"})),{items:i,placeholder:e,title:t}}},picked:r.sha,keyboard:{keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{await (0,b.RS)(p.Ts.DiffWith,{repoPath:r.repoPath,lhs:{sha:t.item.ref,uri:r},rhs:{sha:"",uri:r},line:i.line,showOptions:i.showOptions})}},showOtherReferences:[eF.Fj.fromCommand("Choose a Branch or Tag...",p.Ts.DiffWithRevisionFrom,[t]),eF.Fj.fromCommand("Choose a Stash...",p.Ts.DiffWithRevisionFrom,[t,{stash:!0}])]});if(null==o)return;await (0,b.RS)(p.Ts.DiffWith,{repoPath:r.repoPath,lhs:{sha:o.ref,uri:r},rhs:{sha:"",uri:r},line:i.line,showOptions:i.showOptions})}catch(e){A.Vy.error(e,"DiffWithRevisionCommand"),(0,y.qQ)("Unable to open compare")}}};e8=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?e4(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&e3(t,i,n),n})([(0,b.G5)()],e8);var e5=Object.defineProperty,e7=Object.getOwnPropertyDescriptor;let e9=class extends F.Zr{constructor(e){super(p.Ts.DiffWithRevisionFrom),this.container=e}async execute(e,t,i){let r,s,n,o;if(null==(t=(0,F.qx)(t,e)))return;let a=await g.nk.fromUri(t);if(!a.repoPath){(0,y.A5)("Unable to open file comparison");return}null==(i={...i}).line&&(i.line=e?.selection.active.line??0);let l=this.container.git.getRelativePath(a,a.repoPath);if(i?.stash){let e=`Open Changes with Stash${(0,eB.eV)(p.EO.Dot,2,2)}`,t=await (0,ex.F)(this.container.git.getStash(a.repoPath),`${e}${a.getFormattedFileName({truncateTo:p.uR-e.length})}`,"Choose a stash to compare with",{empty:`No stashes with '${a.getFormattedFileName()}' found`,filter:e=>e.files?.some(e=>e.path===l||e.originalPath===l)??!0});if(null==t)return;s=r=t.ref}else{let e=`Open Changes with Branch or Tag${(0,eB.eV)(p.EO.Dot,2,2)}`,t=await (0,en.N)(a.repoPath,`${e}${a.getFormattedFileName({truncateTo:p.uR-e.length})}`,"Choose a reference (branch, tag, etc) to compare with",{allowRevisions:!0});if(null==t)return;r=t.ref,s=(0,es.gC)(t)&&t.remote?`remotes/${r}`:r}if(null==r)return;let h=await this.container.git.getDiffStatus(a.repoPath,"HEAD",r,{filters:["R","C"]});if(null!=h){let e=h.find(e=>e.path===l);e?.originalPath!=null&&(n=this.container.git.getAbsoluteUri(e.originalPath,a.repoPath),o=`${(0,W.P8)(e.originalPath)} (${(0,es.pV)(r)})`)}await (0,b.RS)(p.Ts.DiffWith,{repoPath:a.repoPath,lhs:{sha:s,uri:n??a,title:o??`${(0,W.P8)(a.fsPath)} (${(0,es.pV)(r)})`},rhs:{sha:"",uri:a},line:i.line,showOptions:i.showOptions})}};e9=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?e7(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&e5(t,i,n),n})([(0,b.G5)()],e9);var e6=i(5622),te=Object.defineProperty,tt=Object.getOwnPropertyDescriptor;let ti=class extends F.Zr{constructor(e){super([p.Ts.DiffWithWorking,p.Ts.DiffWithWorkingInDiffLeft,p.Ts.DiffWithWorkingInDiffRight]),this.container=e}async execute(e,t,i){if(null==(i={...i}).uri){if(null==(t=(0,F.qx)(t,e)))return}else t=i.uri;let r=await g.nk.fromUri(t);if(null==i.line&&(i.line=e?.selection.active.line??0),i.inDiffRightEditor)try{let e=await this.container.git.getPreviousComparisonUris(r.repoPath,r,r.sha);r=e?.previous??r}catch(e){A.Vy.error(e,"DiffWithWorkingCommand",`getPreviousDiffUris(${r.repoPath}, ${r.fsPath}, ${r.sha})`),(0,y.qQ)("Unable to open compare");return}if(null==r.sha){a.window.showInformationMessage("File matches the working tree");return}if(r.sha===eQ.nB){a.window.showWarningMessage("Unable to open compare. File has been deleted from the working tree");return}if(r.isUncommittedStaged){let e=await this.container.git.getStatusForFile(r.repoPath,r);if(e?.indexStatus!=null){await (0,b.RS)(p.Ts.DiffWith,{repoPath:r.repoPath,lhs:{sha:eQ.id,uri:r.documentUri()},rhs:{sha:"",uri:r.documentUri()},line:i.line,showOptions:i.showOptions});return}}t=r.toFileUri();let s=await this.container.git.getWorkingUri(r.repoPath,t);if(null==s){let e=await (0,e6.G)(this.container,(0,es.kA)("HEAD",r.repoPath),{ignoreFocusOut:!0,initialPath:r.relativePath,title:`Open File \u2022 Unable to open '${r.relativePath}'`,placeholder:"Choose another working file to open",keyboard:{keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{await (0,q.Ol)(t,{...i.showOptions,preserveFocus:!0,preview:!0})}}});if(null==e)return;s=e}await (0,b.RS)(p.Ts.DiffWith,{repoPath:r.repoPath,lhs:{sha:r.sha,uri:t,title:i?.lhsTitle},rhs:{sha:"",uri:s},line:i.line,showOptions:i.showOptions})}};ti=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?tt(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&te(t,i,n),n})([(0,b.G5)()],ti);var tr=((e=tr||{})[e.Force=0]="Force",e[e.ForceWithLease=1]="ForceWithLease",e[e.ForceWithLeaseIfIncludes=2]="ForceWithLeaseIfIncludes",e),ts=((t=ts||{})[t.Head=0]="Head",t[t.RemoteHead=1]="RemoteHead",t[t.Tag=2]="Tag",t),tn=((s=tn||{})[s.INDEX_MODIFIED=0]="INDEX_MODIFIED",s[s.INDEX_ADDED=1]="INDEX_ADDED",s[s.INDEX_DELETED=2]="INDEX_DELETED",s[s.INDEX_RENAMED=3]="INDEX_RENAMED",s[s.INDEX_COPIED=4]="INDEX_COPIED",s[s.MODIFIED=5]="MODIFIED",s[s.DELETED=6]="DELETED",s[s.UNTRACKED=7]="UNTRACKED",s[s.IGNORED=8]="IGNORED",s[s.INTENT_TO_ADD=9]="INTENT_TO_ADD",s[s.INTENT_TO_RENAME=10]="INTENT_TO_RENAME",s[s.TYPE_CHANGED=11]="TYPE_CHANGED",s[s.ADDED_BY_US=12]="ADDED_BY_US",s[s.ADDED_BY_THEM=13]="ADDED_BY_THEM",s[s.DELETED_BY_US=14]="DELETED_BY_US",s[s.DELETED_BY_THEM=15]="DELETED_BY_THEM",s[s.BOTH_ADDED=16]="BOTH_ADDED",s[s.BOTH_DELETED=17]="BOTH_DELETED",s[s.BOTH_MODIFIED=18]="BOTH_MODIFIED",s),to=((n=to||{}).BadConfigFile="BadConfigFile",n.AuthenticationFailed="AuthenticationFailed",n.NoUserNameConfigured="NoUserNameConfigured",n.NoUserEmailConfigured="NoUserEmailConfigured",n.NoRemoteRepositorySpecified="NoRemoteRepositorySpecified",n.NotAGitRepository="NotAGitRepository",n.NotAtRepositoryRoot="NotAtRepositoryRoot",n.Conflict="Conflict",n.StashConflict="StashConflict",n.UnmergedChanges="UnmergedChanges",n.PushRejected="PushRejected",n.ForcePushWithLeaseRejected="ForcePushWithLeaseRejected",n.ForcePushWithLeaseIfIncludesRejected="ForcePushWithLeaseIfIncludesRejected",n.RemoteConnectionError="RemoteConnectionError",n.DirtyWorkTree="DirtyWorkTree",n.CantOpenResource="CantOpenResource",n.GitNotFound="GitNotFound",n.CantCreatePipe="CantCreatePipe",n.PermissionDenied="PermissionDenied",n.CantAccessRemote="CantAccessRemote",n.RepositoryNotFound="RepositoryNotFound",n.RepositoryIsLocked="RepositoryIsLocked",n.BranchNotFullyMerged="BranchNotFullyMerged",n.NoRemoteReference="NoRemoteReference",n.InvalidBranchName="InvalidBranchName",n.BranchAlreadyExists="BranchAlreadyExists",n.NoLocalChanges="NoLocalChanges",n.NoStashFound="NoStashFound",n.LocalChangesOverwritten="LocalChangesOverwritten",n.NoUpstreamBranch="NoUpstreamBranch",n.IsInSubmodule="IsInSubmodule",n.WrongCase="WrongCase",n.CantLockRef="CantLockRef",n.CantRebaseMultipleBranches="CantRebaseMultipleBranches",n.PatchDoesNotApply="PatchDoesNotApply",n.NoPathFound="NoPathFound",n.UnknownPath="UnknownPath",n.EmptyCommitMessage="EmptyCommitMessage",n.BranchFastForwardRejected="BranchFastForwardRejected",n.BranchNotYetBorn="BranchNotYetBorn",n.TagConflict="TagConflict",n),ta=((o=ta||{})[o.Merge=0]="Merge",o[o.Index=1]="Index",o[o.WorkingTree=2]="WorkingTree",o),tl=i(2927),th=Object.defineProperty,tc=Object.getOwnPropertyDescriptor;let tu=class extends F.uB{constructor(e){super([p.Ts.ExternalDiff,p.Ts.ExternalDiffAll]),this.container=e}async preExecute(e,t){if(t={...t},(0,F.xT)(e)){let i=await e.node.commit.getPreviousSha(),r=(0,es._k)(i)?"":i,s=e.node.commit.isUncommitted?"":e.node.commit.sha;return t.files=[{uri:g.nk.fromFile(e.node.file,e.node.file.repoPath??e.node.repoPath),staged:e.node.commit.isUncommittedStaged||null!=e.node.file.indexStatus,ref1:r,ref2:s}],this.execute(t)}if((0,F.cD)(e))return t.files=[{uri:g.nk.fromFile(e.node.file,e.node.file.repoPath??e.node.repoPath),staged:null!=e.node.file.indexStatus,ref1:e.node.ref1,ref2:e.node.ref2}],this.execute(t);if(null==t.files&&("scm-states"===e.type?t.files=e.scmResourceStates.map(e=>({uri:e.resourceUri,staged:e.resourceGroupType===ta.Index})):"scm-groups"===e.type&&(t.files=(0,tl.x1)(e.scmResourceGroups[0].resourceStates,e=>this.isModified(e)?{uri:e.resourceUri,staged:e.resourceGroupType===ta.Index}:void 0))),e.command===p.Ts.ExternalDiffAll&&null==t.files){let e=await (0,G.t6)("Open All Changes (difftool)");if(null==e)return;let i=await this.container.git.getStatusForRepo(e.uri);if(null==i)return a.window.showInformationMessage("The repository doesn't have any changes");for(let e of(t.files=[],i.files))"M"===e.indexStatus&&t.files.push({uri:e.uri,staged:!0}),"M"===e.workingTreeStatus&&t.files.push({uri:e.uri,staged:!1})}return this.execute(t)}isModified(e){let t=e.type;return t===tn.BOTH_MODIFIED||t===tn.INDEX_MODIFIED||t===tn.MODIFIED}async execute(e){e={...e};try{let t;if(null==e.files){let i=a.window.activeTextEditor;if(null==i||!(t=this.container.git.getBestRepository(i)?.path))return;let r=i.document.uri,s=await this.container.git.getStatusForFile(t,r);if(null==s){a.window.showInformationMessage("The current file doesn't have any changes");return}e.files=[],"M"===s.indexStatus&&e.files.push({uri:s.uri,staged:!0}),"M"===s.workingTreeStatus&&e.files.push({uri:s.uri,staged:!1})}else if(!(t=(await this.container.git.getOrOpenRepository(e.files[0].uri))?.path))return;let i=C.H.get("advanced.externalDiffTool")||await this.container.git.getDiffTool(t);if(!i){let e="View Git Docs";await a.window.showWarningMessage("Unable to open changes because no Git diff tool is configured",e)===e&&a.env.openExternal(a.Uri.parse("https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool"));return}for(let r of e.files)this.container.git.openDiffTool(t,r.uri,{ref1:r.ref1,ref2:r.ref2,staged:r.staged,tool:i})}catch(e){A.Vy.error(e,"ExternalDiffCommand"),(0,y.qQ)("Unable to open changes in diff tool")}}};tu=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?tc(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&th(t,i,n),n})([(0,b.G5)()],tu);var td=Object.defineProperty,tp=Object.getOwnPropertyDescriptor;let tg=class extends F.Zr{constructor(e){super(p.Ts.GenerateCommitMessage),this.container=e}async execute(e,t,i){let r;if(null!=(i={...i}).repoPath)r=this.container.git.getRepository(i.repoPath);else{let i=null!=(t=(0,F.qx)(t,e))?await g.nk.fromUri(t):void 0;r=await (0,G.X)(i,e,"Generate Commit Message")}if(null==r)return;let s=await this.container.git.getScmRepository(r.path);if(null!=s)try{let e=s.inputBox.value,t=await (await this.container.ai)?.generateCommitMessage(r,{context:e,progress:{location:a.ProgressLocation.Notification,title:"Generating commit message..."}});if(null==t)return;(0,b.S4)("workbench.view.scm"),s.inputBox.value=e?`${e}

${t}`:t}catch(e){if(A.Vy.error(e,"GenerateCommitMessageCommand"),e instanceof Error&&e.message.startsWith("No changes")){a.window.showInformationMessage("No changes to generate a commit message from.");return}(0,y.qQ)(e.message)}}};tg=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?tp(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&td(t,i,n),n})([(0,b.G5)()],tg);var tm=i(8880),tf=i(3607),tw=i(1225),tv=i(3131),ty=Object.defineProperty,tb=Object.getOwnPropertyDescriptor;let tC=class extends F.uB{constructor(e){super(p.Ts.OpenOrCreateWorktreeForGHPR),this.container=e}async execute(...e){let t,i,r,s;let[n]=e,{base:{repositoryCloneUrl:{url:o,owner:l,repositoryName:h}},githubRepository:{rootUri:c},head:{repositoryCloneUrl:{url:u,owner:d},ref:p},item:{number:g}}="pullRequestModel"in n?n.pullRequestModel:n,f=this.container.git.getRepository(c);if(null==f){a.window.showWarningMessage(`Unable to find repository(${c.toString()}) for PR #${g}`);return}if(null==(f=await f.getCommonRepository())){a.window.showWarningMessage(`Unable to find main repository(${c.toString()}) for PR #${g}`);return}let w=u.toString(),[,v,y]=(0,tw.BX)(w),b=(await f.getRemotes({filter:e=>e.matches(v,y)}))[0];null!=b?(i=b.name,await this.container.git.fetch(f.path,{remote:b.name})):(i=d,t={name:d,url:w});let C=`${i}/${p}`,R=`pr/${o.toString()===u.toString()?p:C}`,S=`remotes/${C}`,P=await (0,tf.vV)(f,R,C);if(null!=P){(0,tm.ho)(P,{openOnly:!0});return}let k=await (0,m.kY)(f,C);null!=k?r=(0,es.iw)(k):(r=(0,es.kA)(S,f.path,{refType:"branch",name:S,remote:!0}),s=R),await (0,tv.Ar)();try{let e=await (0,tm.vt)(f,void 0,r,{addRemote:t,createBranch:s});if(null==e)return;this.container.git.setConfig(f.path,`branch.${R}.github-pr-owner-number`,`${l}#${h}#${g}`)}catch(e){A.Vy.error(e,"CreateWorktreeCommand","Unable to create worktree"),a.window.showErrorMessage(`Unable to create worktree for ${d}:${p}`)}}};tC=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?tb(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&ty(t,i,n),n})([(0,b.G5)()],tC);var tR=i(7165),tS=i(6741),tP=Object.defineProperty,tA=Object.getOwnPropertyDescriptor,tk=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?tA(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&tP(t,i,n),n};let tD=/\$\(.+?\)|\s/g,tT=Symbol("ShowLoading"),t_=class extends F.uB{constructor(e){super([p.Ts.GitCommands,p.Ts.GitCommandsBranch,p.Ts.GitCommandsBranchCreate,p.Ts.GitCommandsBranchDelete,p.Ts.GitCommandsBranchPrune,p.Ts.GitCommandsBranchRename,p.Ts.GitCommandsCheckout,p.Ts.GitCommandsCherryPick,p.Ts.GitCommandsHistory,p.Ts.GitCommandsMerge,p.Ts.GitCommandsRebase,p.Ts.GitCommandsRemote,p.Ts.GitCommandsRemoteAdd,p.Ts.GitCommandsRemotePrune,p.Ts.GitCommandsRemoteRemove,p.Ts.GitCommandsReset,p.Ts.GitCommandsRevert,p.Ts.GitCommandsShow,p.Ts.GitCommandsStash,p.Ts.GitCommandsStashDrop,p.Ts.GitCommandsStashList,p.Ts.GitCommandsStashPop,p.Ts.GitCommandsStashPush,p.Ts.GitCommandsStashRename,p.Ts.GitCommandsStatus,p.Ts.GitCommandsSwitch,p.Ts.GitCommandsTag,p.Ts.GitCommandsTagCreate,p.Ts.GitCommandsTagDelete,p.Ts.GitCommandsWorktree,p.Ts.GitCommandsWorktreeCreate,p.Ts.GitCommandsWorktreeDelete,p.Ts.GitCommandsWorktreeOpen,p.Ts.CopyWorkingChangesToWorktree,p.Ts.ShowLaunchpad]),this.container=e}startedWith="menu";preExecute(e,t){switch(e.command){case p.Ts.GitCommandsBranch:t={command:"branch"};break;case p.Ts.GitCommandsBranchCreate:t={command:"branch",state:{subcommand:"create"}};break;case p.Ts.GitCommandsBranchDelete:t={command:"branch",state:{subcommand:"delete"}};break;case p.Ts.GitCommandsBranchPrune:t={command:"branch",state:{subcommand:"prune"}};break;case p.Ts.GitCommandsBranchRename:t={command:"branch",state:{subcommand:"rename"}};break;case p.Ts.GitCommandsCherryPick:t={command:"cherry-pick"};break;case p.Ts.GitCommandsHistory:t={command:"log"};break;case p.Ts.GitCommandsMerge:t={command:"merge"};break;case p.Ts.GitCommandsRebase:t={command:"rebase"};break;case p.Ts.GitCommandsRemote:t={command:"remote"};break;case p.Ts.GitCommandsRemoteAdd:t={command:"remote",state:{subcommand:"add"}};break;case p.Ts.GitCommandsRemotePrune:t={command:"remote",state:{subcommand:"prune"}};break;case p.Ts.GitCommandsRemoteRemove:t={command:"remote",state:{subcommand:"remove"}};break;case p.Ts.GitCommandsReset:t={command:"reset"};break;case p.Ts.GitCommandsRevert:t={command:"revert"};break;case p.Ts.GitCommandsShow:t={command:"show"};break;case p.Ts.GitCommandsStash:t={command:"stash"};break;case p.Ts.GitCommandsStashDrop:t={command:"stash",state:{subcommand:"drop"}};break;case p.Ts.GitCommandsStashList:t={command:"stash",state:{subcommand:"list"}};break;case p.Ts.GitCommandsStashPop:t={command:"stash",state:{subcommand:"pop"}};break;case p.Ts.GitCommandsStashPush:t={command:"stash",state:{subcommand:"push"}};break;case p.Ts.GitCommandsStashRename:t={command:"stash",state:{subcommand:"rename"}};break;case p.Ts.GitCommandsStatus:t={command:"status"};break;case p.Ts.GitCommandsSwitch:case p.Ts.GitCommandsCheckout:t={command:"switch"};break;case p.Ts.GitCommandsTag:t={command:"tag"};break;case p.Ts.GitCommandsTagCreate:t={command:"tag",state:{subcommand:"create"}};break;case p.Ts.GitCommandsTagDelete:t={command:"tag",state:{subcommand:"delete"}};break;case p.Ts.GitCommandsWorktree:t={command:"worktree"};break;case p.Ts.GitCommandsWorktreeCreate:t={command:"worktree",state:{subcommand:"create"}};break;case p.Ts.GitCommandsWorktreeDelete:t={command:"worktree",state:{subcommand:"delete"}};break;case p.Ts.GitCommandsWorktreeOpen:t={command:"worktree",state:{subcommand:"open"}};break;case p.Ts.CopyWorkingChangesToWorktree:t={command:"worktree",state:{subcommand:"copy-changes",changes:{type:"working-tree"}}};break;case p.Ts.ShowLaunchpad:t={command:"focus",...t}}return this.execute(t)}async execute(e){let t,i;let r=new tR.N(this.container,e),s=e?.command!=null?r.find(e.command):void 0;for(this.startedWith=null!=s?"command":"menu",i=null==s?r:await this.showLoadingIfNeeded(s,this.getCommandStep(s,r)),i?.ignoreFocusOut===!0&&(i.ignoreFocusOut=void 0);null!=i;){if(i===r&&null!=s){i=await this.getCommandStep(s,r);continue}if(t&&null==i.ignoreFocusOut&&(i.ignoreFocusOut=!0),(0,tS.xb)(i)){i=await this.showPickStep(i,r),i?.ignoreFocusOut===!0&&(t=!0);continue}if((0,tS.ud)(i)){i=await this.showInputStep(i,r),i?.ignoreFocusOut===!0&&(t=!0);continue}if((0,tS.U5)(i)){i=await this.showCustomStep(i,r),i?.ignoreFocusOut===!0&&(t=!0);continue}break}e?.completion?.fulfill()}async showLoadingIfNeeded(e,t){let i;let r=await Promise.race([t,new Promise(e=>setTimeout(e,250,tT))]);if(r!==tT)return r;let s=a.window.createQuickPick();s.ignoreFocusOut=!1;let n=[];try{return await new Promise(async r=>{n.push(s.onDidHide(()=>r(i))),s.title=e.title,s.placeholder="Loading...",s.busy=!0,s.enabled=!1,s.show(),i=await t,s.hide()})}finally{s.dispose(),n.forEach(e=>void e.dispose())}}getButtons(e,t){let i=[];if(null!=e){if(null!=e.buttons)return i.push(...e.buttons),i;!0!==e.disallowBack&&i.push(a.QuickInputButtons.Back),null!=e.additionalButtons&&i.push(...e.additionalButtons)}if(t?.canConfirm){if(t.canSkipConfirm){let r=new eo.UO(t.confirm(),e?.isConfirmationStep??!1,async()=>{if(t?.skipConfirmKey==null)return;let e=C.H.get("gitCommands.skipConfirmations")??[],i=e.indexOf(t.skipConfirmKey);-1!==i?e.splice(i,1):e.push(t.skipConfirmKey),await C.H.updateEffective("gitCommands.skipConfirmations",e)});i.push(r)}else e?.isConfirmationStep||i.push(eo.V3)}return i}async getCommandStep(e,t){t.setCommand(e,"command"),null!=this.container.git.isDiscoveringRepositories&&await this.container.git.isDiscoveringRepositories;let i=await e.next();if(!i.done)return i.value}async nextStep(e,t,i){null!=i&&(i.busy=!0);let r=await e.next(t);if(!r.done)return null!=i&&(i.value=""),r.value}async showCustomStep(e,t){let i=await e.show(e);if(i!==tS.Lt){if(!(0,e2.qT)(i))return this.nextStep(t.command,i);switch(i){case e2.WL.Back:return await t?.command?.previous()??t;case e2.WL.Noop:case e2.WL.Reload:return t.command?.retry();case e2.WL.Cancel:default:return}}}async showInputStep(e,t){let i=a.window.createInputBox();i.ignoreFocusOut=!C.H.get("gitCommands.closeOnFocusOut")||(e.ignoreFocusOut??!1);let r=[];try{return await new Promise(async s=>{let n=async()=>{!0!==e.disallowBack&&(i.value="",null!=t.command&&(i.busy=!0,s(await t.command.previous()??t)))},o={};if(null!=e.onDidPressKey&&null!=e.keys&&0!==e.keys.length)for(let t of e.keys)o[t]={onDidPressKey:t=>e.onDidPressKey(i,t)};let l=this.container.keyboard.createScope(o);if(l.start(),null!=e.value&&l.pause(["left","ctrl+left","right","ctrl+right"]),r.push(l,i.onDidHide(()=>s(void 0)),i.onDidTriggerButton(async r=>{if(r===a.QuickInputButtons.Back){n();return}if(r!==eo.V3){if(r instanceof eo.K0&&null!=r.onDidClick){let n=r.onDidClick(i);if(i.buttons=this.getButtons(e,t.command),await n===!0){s(t.command?.retry());return}(0,tv.yL)(n)&&(i.buttons=this.getButtons(e,t.command));return}if(null!=e.onDidClickButton){let n=e.onDidClickButton(i,r);i.buttons=this.getButtons(e,t.command),await n===!0&&s(t.command?.retry())}}}),i.onDidChangeValue(async t=>{if(i.ignoreFocusOut||(i.ignoreFocusOut=!0),null!=l&&(0!==t.length?l.pause(["left","ctrl+left","right","ctrl+right"]):l.resume()),null==e.validate)return;let[,r]=await e.validate(t);i.validationMessage=r}),i.onDidAccept(async()=>{s(await this.nextStep(t.command,i.value,i))})),i.buttons=this.getButtons(e,t.command),i.title=e.title,i.placeholder=e.placeholder,i.prompt=e.prompt,null!=e.value&&(i.value=e.value,null!=e.validate)){let[t,r]=await e.validate(e.value);t||null==r||(i.validationMessage={severity:a.InputBoxValidationSeverity.Error,message:r})}if(i.show(),null!=e.value)try{i._onDidChangeValueEmitter?.fire(i.value)}catch{}})}finally{i.dispose(),r.forEach(e=>void e.dispose())}}async showPickStep(e,t){let i=a.window.createQuickPick();i.ignoreFocusOut=!C.H.get("gitCommands.closeOnFocusOut")||(e.ignoreFocusOut??!1);let r=[];try{return await new Promise(async s=>{let n;async function o(){!0!==e.disallowBack&&(i.value="",null!=t.command&&(i.busy=!0,s(await t.command.previous()??t)))}async function l(){if(null!=e.onDidLoadMore){i.busy=!0;try{let t=await e.onDidLoadMore?.(i),r=-1;if(0!==i.activeItems.length){let e=i.activeItems[0];r=i.items.indexOf(e),(0,e2.hr)(e)&&r--}i.items=e.items=t,r&&(i.activeItems=[i.items[r]])}finally{i.busy=!1}}}let h={left:{onDidPressKey:o}};if(null!=e.onDidPressKey&&e.keys?.length)for(let t of e.keys)h[t]={onDidPressKey:t=>{if(!i.activeItems.length)return;let r=i.activeItems[0];if(!(0,e2.hr)(r))return e.onDidPressKey(i,t,r)}};let u=this.container.keyboard.createScope(h);u.start(),null!=e.value&&u.pause(["left","ctrl+left","right","ctrl+right"]);let d=!0,p=!1;r.push(u,i.onDidHide(()=>{e.frozen||s(void 0)}),i.onDidTriggerItemButton(async r=>{await e.onDidClickItemButton?.(i,r.button,r.item)===!0&&s(await this.nextStep(t.command,[r.item],i))}),i.onDidTriggerButton(async r=>{if(r===a.QuickInputButtons.Back){o();return}if(r!==eo.V3){if(r===eo.TR){l();return}if(r instanceof eo.K0&&null!=r.onDidClick){let n;if(null==t.command&&0!==i.activeItems.length){let e=i.activeItems[0];(0,tS.XD)(e)&&(n=e)}let o=r.onDidClick(i);if(i.buttons=this.getButtons(n?.value&&!(0,tS.U5)(n.value)?n.value:e,n??t.command),await o===!0){s(t.command?.retry());return}(0,tv.yL)(o)&&(i.buttons=this.getButtons(n?.value&&!(0,tS.U5)(n.value)?n.value:e,n??t.command));return}if(null!=e.onDidClickButton){let n=e.onDidClickButton(i,r);i.buttons=this.getButtons(e,t.command),await n===!0&&s(t.command?.retry())}}}),i.onDidChangeValue(async r=>{if(i.ignoreFocusOut||(i.ignoreFocusOut=!0,e.ignoreFocusOut=!0),null!=u&&(0!==r.length?u.pause(["left","ctrl+left","right","ctrl+right"]):u.resume()),!(null!=e.onDidChangeValue&&await e.onDidChangeValue(i))){if(!p){if(i.canSelectMany&&" "===r){i.value="",i.selectedItems=i.selectedItems.length===i.items.length?[]:i.items;return}if(r.endsWith(" ")){let r;if(i.canSelectMany&&0!==i.selectedItems.length)return;if(null==t.command){let e=t.find(i.value.trim(),!0);if(null==e)return;t.setCommand(e,this.startedWith)}else{let t=i.value.trim().toLowerCase(),s=(await e.items).find(e=>e.label.replace(tD,"").toLowerCase()===t);if(null==s)return;r=[s]}s(await this.nextStep(t.command,r,i));return}}if(!i.canSelectMany&&null!=t.command&&0!==r.trim().length&&(p||0===i.activeItems.length)){if(null==e.onValidateValue)return;p=await e.onValidateValue(i,r.trim(),await e.items)}else p=!1;p||(e.items=await e.items,i.items.length===e.items.length||(i.items=e.items))}}),i.onDidChangeActive(()=>{if(d||i.ignoreFocusOut||(i.ignoreFocusOut=!0,e.ignoreFocusOut=!0),d&&(d=!1),null!=t.command||0===i.activeItems.length)return;let r=i.activeItems[0];(0,tS.XD)(r)&&(i.buttons=this.getButtons(void 0,r))}),i.onDidChangeSelection(t=>{i.canSelectMany&&(i.ignoreFocusOut||(i.ignoreFocusOut=!0,e.ignoreFocusOut=!0),e.onDidChangeSelection?.(i,t))}),i.onDidAccept(async()=>{let r=i.selectedItems;if(0===r.length){if(!i.canSelectMany||0===i.activeItems.length){let r=i.value.trim();if(0===r.length&&!e.allowEmpty)return;if(null==e.onDidAccept){e.allowEmpty&&s(await this.nextStep(t.command,[],i));return}i.busy=!0,await e.onDidAccept(i)&&s(await this.nextStep(t.command,r,i)),i.busy=!1;return}r=i.activeItems}if(1===r.length){let[i]=r;if((0,e2.hr)(i))switch(await i.onDidSelect?.(),i.directive){case e2.WL.Cancel:s(void 0);return;case e2.WL.Back:o();return;case e2.WL.LoadMore:l();return;case e2.WL.Noop:return;case e2.WL.Reload:s(await t.command?.retry());return;case e2.WL.SignIn:{let i=await c.m.instance.subscription.loginOrSignUp(!1,{source:"git-commands",detail:{action:t.command?.key,"step.title":e.title}});s(i?await t.command?.retry():void 0);return}case e2.WL.StartPreview:await c.m.instance.subscription.startPreviewTrial({source:"git-commands",detail:{action:t.command?.key,"step.title":e.title}}),s(await t.command?.retry());return;case e2.WL.RequiresVerification:{let i=await c.m.instance.subscription.resendVerification({source:"git-commands",detail:{action:t.command?.key,"step.title":e.title}});s(i?await t.command?.retry():void 0);return}case e2.WL.StartProTrial:{let i=await c.m.instance.subscription.loginOrSignUp(!0,{source:"git-commands",detail:{action:t.command?.key,"step.title":e.title}});s(i?await t.command?.retry():void 0);return}case e2.WL.RequiresPaidSubscription:c.m.instance.subscription.upgrade({source:"git-commands",detail:{action:t.command?.key,"step.title":e.title}}),s(void 0);return}}if(null==t.command){let[e]=r;if(!(0,tS.XD)(e))return;t.setCommand(e,this.startedWith)}if(!i.canSelectMany&&null!=e.onDidAccept){i.busy=!0;let t=await e.onDidAccept(i);if(i.busy=!1,!t)return}s(await this.nextStep(t.command,r,i))})),i.title=e.title,i.matchOnDescription=!!e.matchOnDescription,i.matchOnDetail=!!e.matchOnDetail;let g=e.selectValueWhenShown??!0,m=!1;if((0,tv.yL)(e.items)?(i.placeholder="Loading...",i.busy=!0,null!=e.value&&g&&(i.value=e.value),i.show(),m=!0,n=await e.items):n=e.items,i.canSelectMany=!!e.multiselect&&n.filter(e=>!(0,e2.hr)(e)).length>1,i.placeholder="function"==typeof e.placeholder?e.placeholder(n.length):e.placeholder,i.items=n,i.busy=!1,i.canSelectMany?i.selectedItems=e.selectedItems??i.items.filter(e=>e.picked):i.activeItems=e.selectedItems??i.items.filter(e=>e.picked),null!=t.command&&e===t&&t.setCommand(void 0,"menu"),i.buttons=this.getButtons(e,t.command),m||(null!=e.value&&g&&(i.value=e.value),i.show()),null==e.value||g||(i.value=e.value),null!=e.value&&g)try{i._onDidChangeValueEmitter?.fire(i.value)}catch{}})}finally{i.dispose(),r.forEach(e=>void e.dispose())}}};tk([(0,T.Rm)({args:!1,scoped:!0,singleLine:!0,timed:!1})],t_.prototype,"execute",1),t_=tk([(0,b.G5)()],t_);var tI=Object.defineProperty,t$=Object.getOwnPropertyDescriptor;let tE=class extends F.uB{constructor(e){super(p.Ts.InviteToLiveShare),this.container=e}static getMarkdownCommandArgs(e){return super.getMarkdownCommandArgsCore(p.Ts.InviteToLiveShare,void 0===e||"string"==typeof e?{email:e}:e)}preExecute(e,t){return(0,F.BA)(e)&&((t={...t}).email=e.node.contributor.email),this.execute(t)}async execute(e){if(e?.email){let t=await this.container.vsls.getContact(e.email);if(null!=t)return t.invite()}return this.container.vsls.startSession()}};tE=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?t$(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&tI(t,i,n),n})([(0,b.G5)()],tE);var tO=Object.defineProperty,tx=Object.getOwnPropertyDescriptor,tF=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?tx(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&tO(t,i,n),n};let tB=class extends F.uB{constructor(e){super(p.Ts.EnableDebugLogging),this.container=e}async execute(){await C.H.updateEffective("outputLevel","debug")}};tB=tF([(0,b.G5)()],tB);let tL=class extends F.uB{constructor(e){super(p.Ts.DisableDebugLogging),this.container=e}async execute(){await C.H.updateEffective("outputLevel","error")}};tL=tF([(0,b.G5)()],tL);var tU=Object.defineProperty,tW=Object.getOwnPropertyDescriptor;let tq=class extends F.Zr{constructor(e){super(p.Ts.OpenAssociatedPullRequestOnRemote),this.container=e}async execute(e,t){let i;let r=null!=(t=(0,F.qx)(t,e))?await g.nk.fromUri(t):void 0;if(null!=e&&null!=r){let t=e.selection.active.line;if(t<0)return;try{let e=await this.container.git.getBlameForLine(r,t);if(null==e)return;i={clipboard:!1,ref:e.commit.sha,repoPath:e.commit.repoPath}}catch(e){A.Vy.error(e,"OpenAssociatedPullRequestOnRemoteCommand",`getBlameForLine(${t})`);return}}else try{let e=await (0,G.t6)("Open Associated Pull Request",void 0,void 0,{filter:async e=>await this.container.git.getBestRemoteWithIntegration(e.uri)!=null});if(null==e)return;let t=await e?.getBranch(),r=await t?.getAssociatedPullRequest({expiryOverride:!0});i=null!=r?{clipboard:!1,pr:{url:r.url}}:{clipboard:!1,ref:t?.name??"HEAD",repoPath:e.path}}catch(e){A.Vy.error(e,"OpenAssociatedPullRequestOnRemoteCommand","No editor opened");return}await (0,b.RS)(p.Ts.OpenPullRequestOnRemote,i)}};tq=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?tW(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&tU(t,i,n),n})([(0,b.G5)()],tq);var tM=Object.defineProperty,tN=Object.getOwnPropertyDescriptor;let tH=class extends F.Zr{constructor(e){super([p.Ts.OpenBranchesOnRemote,p.Ts.Deprecated_OpenBranchesInRemote,p.Ts.CopyRemoteBranchesUrl]),this.container=e}preExecute(e,t){return(0,F.qv)(e)&&(t={...t,remote:e.node.remote.name}),e.command===p.Ts.CopyRemoteBranchesUrl&&(t={...t,clipboard:!0}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r=null!=(t=(0,F.qx)(t,e))?await g.nk.fromUri(t):void 0,s=(await G.X(r,e,i?.clipboard?"Copy Remote Branches URL":"Open Branches on Remote"))?.path;if(s)try{await (0,b.RS)(p.Ts.OpenOnRemote,{resource:{type:ek.J.Branches},repoPath:s,remote:i?.remote,clipboard:i?.clipboard})}catch(e){A.Vy.error(e,"OpenBranchesOnRemoteCommand"),(0,y.qQ)("Unable to open branches on remote provider")}}};tH=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?tN(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&tM(t,i,n),n})([(0,b.G5)()],tH);var tG=Object.defineProperty,tV=Object.getOwnPropertyDescriptor;let tQ=class extends F.Zr{constructor(e){super([p.Ts.OpenBranchOnRemote,p.Ts.Deprecated_OpenBranchInRemote,p.Ts.CopyRemoteBranchUrl]),this.container=e}preExecute(e,t){return(0,F.K0)(e)&&(t={...t,branch:e.node.branch.name,remote:e.node.branch.getRemoteName()}),e.command===p.Ts.CopyRemoteBranchUrl&&(t={...t,clipboard:!0}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r=null!=(t=(0,F.qx)(t,e))?await g.nk.fromUri(t):void 0,s=(await G.X(r,e,i?.clipboard?"Copy Remote Branch URL":"Open Branch On Remote"))?.path;if(s){i={...i};try{if(null==i.branch){let e=await (0,en.N)(s,i.clipboard?"Copy Remote Branch URL":"Open Branch On Remote",i.clipboard?"Choose a branch to copy the URL from":"Choose a branch to open",{autoPick:!0,filter:{branches:e=>null!=e.upstream},include:en.m.Branches,sort:{branches:{current:!0},tags:{}}});if(null==e||e instanceof eF.Fj)return;i.branch=e.ref}await (0,b.RS)(p.Ts.OpenOnRemote,{resource:{type:ek.J.Branch,branch:i.branch||"HEAD"},repoPath:s,remote:i.remote,clipboard:i.clipboard})}catch(e){A.Vy.error(e,"OpenBranchOnRemoteCommand"),(0,y.qQ)("Unable to open branch on remote provider")}}}};tQ=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?tV(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&tG(t,i,n),n})([(0,b.G5)()],tQ);var tj=Object.defineProperty,tz=Object.getOwnPropertyDescriptor;let tY=class extends F.Zr{constructor(e){super(p.Ts.OpenCurrentBranchOnRemote),this.container=e}async execute(e,t){let i=null!=(t=(0,F.qx)(t,e))?await g.nk.fromUri(t):void 0,r=await (0,G.X)(i,e,"Open Current Branch Name");if(null!=r)try{let e=await r.getBranch();e?.name&&await (0,b.RS)(p.Ts.OpenOnRemote,{resource:{type:ek.J.Branch,branch:e.name||"HEAD"},repoPath:r.path})}catch(e){A.Vy.error(e,"OpenCurrentBranchOnRemoteCommand"),(0,y.qQ)("Unable to open branch on remote provider")}}};tY=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?tz(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&tj(t,i,n),n})([(0,b.G5)()],tY);var tK=Object.defineProperty,tJ=Object.getOwnPropertyDescriptor;let tZ=class extends F.uB{constructor(e){super(p.Ts.OpenChangedFiles),this.container=e}async execute(e){e={...e};try{if(null==e.uris){let t=await (0,G.t6)("Open All Changed Files");if(null==t)return;let i=await this.container.git.getStatusForRepo(t.uri);if(null==i){a.window.showWarningMessage("Unable to open changed files");return}e.uris=(0,tl.x1)(i.files,e=>"D"!==e.status?e.uri:void 0)}(0,q.JR)(e.uris)}catch(e){A.Vy.error(e,"OpenChangedFilesCommand"),(0,y.qQ)("Unable to open all changed files")}}};tZ=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?tJ(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&tK(t,i,n),n})([(0,b.G5)()],tZ),i(8911);var tX=Object.defineProperty,t0=Object.getOwnPropertyDescriptor;let t1=class extends F.uB{constructor(e){super([p.Ts.OpenComparisonOnRemote,p.Ts.CopyRemoteComparisonUrl]),this.container=e}preExecute(e,t){return"viewItem"===e.type&&(e.node.is("results-commits")?t={...t,repoPath:e.node.repoPath,ref1:e.node.ref1,ref2:e.node.ref2}:e.node.is("compare-results")&&(t={...t,repoPath:e.node.repoPath,ref1:e.node.ahead.ref1,ref2:e.node.ahead.ref2})),e.command===p.Ts.CopyRemoteBranchesUrl&&(t={...t,clipboard:!0}),this.execute(t)}async execute(e){if(e?.repoPath!=null&&null!=e.ref1&&null!=e.ref2)try{await (0,b.RS)(p.Ts.OpenOnRemote,{resource:{type:ek.J.Comparison,base:e.ref1,compare:e.ref2,notation:e.notation},repoPath:e.repoPath,clipboard:e?.clipboard})}catch(e){A.Vy.error(e,"OpenComparisonOnRemoteCommand"),(0,y.qQ)("Unable to open comparison on remote provider")}}};t1=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?t0(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&tX(t,i,n),n})([(0,b.G5)()],t1);var t2=Object.defineProperty,t3=Object.getOwnPropertyDescriptor;let t4=class extends F.uB{constructor(e){super(p.Ts.OpenFileFromRemote),this.container=e}async execute(){let e,t=await a.env.clipboard.readText();try{a.Uri.parse(t,!0)}catch{t=void 0}let i=await a.window.showInputBox({prompt:"Enter a remote file url to open",placeHolder:"Remote file url",value:t,ignoreFocusOut:!0});if(null==i||0===i.length)return;let r=await this.container.git.getLocalInfoFromRemoteUri(a.Uri.parse(i));if(null==r){if(null==(r=await this.container.git.getLocalInfoFromRemoteUri(a.Uri.parse(i),{validate:!1}))){a.window.showWarningMessage("Unable to parse the provided remote url.");return}let e="Open File...";if(await a.window.showWarningMessage("Unable to find a workspace folder that matches the provided remote url.",e)!==e)return}r.startLine&&(e=r.endLine?new a.Range(r.startLine-1,0,r.endLine,0):new a.Range(r.startLine-1,0,r.startLine-1,0));try{await (0,q.k3)(r.uri,{selection:e,throwOnError:!0})}catch{let e=await a.window.showOpenDialog({title:"Open local file",defaultUri:r.uri,canSelectMany:!1,canSelectFolders:!1});if(null==e||0===e.length)return;await (0,q.k3)(e[0])}}};t4=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?t3(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&t2(t,i,n),n})([(0,b.G5)()],t4);var t8=i(5677),t5=Object.defineProperty,t7=Object.getOwnPropertyDescriptor;let t9=class extends F.Zr{constructor(e){super([p.Ts.OpenFileOnRemote,p.Ts.Deprecated_OpenFileInRemote,p.Ts.CopyRemoteFileUrl,p.Ts.CopyRemoteFileUrlWithoutRange,p.Ts.OpenFileOnRemoteFrom,p.Ts.CopyRemoteFileUrlFrom]),this.container=e}async preExecute(e,t){let i=e.uri;if("editorLine"===e.type&&(t={...t,line:e.line,range:!0}),e.command===p.Ts.CopyRemoteFileUrlWithoutRange&&(t={...t,range:!1}),(0,F.j7)(e)?(t={...t,range:!1},e.command===p.Ts.CopyRemoteFileUrl||e.command===p.Ts.CopyRemoteFileUrlWithoutRange||e.command===p.Ts.CopyRemoteFileUrlFrom?t.sha=e.node instanceof t8.Z?void 0:e.node.commit.sha:(0,F.K0)(e)&&(t.branchOrTag=e.node.branch?.name),i=e.node.uri):"viewItem"===e.type&&(t={...t,range:!1},i=e.node.uri??e.uri),(e.command===p.Ts.CopyRemoteFileUrl||e.command===p.Ts.CopyRemoteFileUrlWithoutRange||e.command===p.Ts.CopyRemoteFileUrlFrom)&&null==(t={...t,clipboard:!0}).sha){let i=(0,F.qx)(e.uri,e.editor);if(null!=i){let e=await g.nk.fromUri(i);if(e.repoPath){if(null==e.sha){let i=await this.container.git.getCommitForFile(e.repoPath,e,{firstIfNotFound:!0});null!=i&&(t.sha=i.sha)}else t.sha=e.sha}}}return(e.command===p.Ts.OpenFileOnRemoteFrom||e.command===p.Ts.CopyRemoteFileUrlFrom)&&(t={...t,pickBranchOrTag:!0,range:!1}),this.execute(e.editor,i,t)}async execute(e,t,i){if(null==(t=(0,F.qx)(t,e)))return;let r=await g.nk.fromUri(t);if(r.repoPath){i={range:!0,...i};try{let s,n=await this.container.git.getRemotesWithProviders(r.repoPath,{sort:!0});i.range&&(null!=e&&V.Y.equals(e.document.uri,t)?s=new a.Range(e.selection.start.with({line:e.selection.start.line+1}),e.selection.end.with({line:e.selection.end.line+(0===e.selection.end.character?0:1)})):null!=i.line&&(s=new a.Range(i.line+1,0,i.line+1,0)));let o=i.sha??r.sha;if(null==i.branchOrTag&&null!=o&&!(0,es.HH)(o)&&0!==n.length){let[e,t]=(0,eB.Br)(o,"/");if(null!=t){let r=n.find(t=>t.name===e);null!=r&&(i.branchOrTag=t,o=void 0,n=[r])}}if(null==i.sha&&null==i.branchOrTag||i.pickBranchOrTag){let e;if(i.pickBranchOrTag||(e=await this.container.git.getBranch(r.repoPath)),e?.upstream==null){let e=await (0,en.N)(r.repoPath,i.clipboard?`Copy Remote File URL From${(0,eB.eV)(p.EO.Dot,2,2)}${r.relativePath}`:`Open File on Remote From${(0,eB.eV)(p.EO.Dot,2,2)}${r.relativePath}`,`Choose a branch or tag to ${i.clipboard?"copy":"open"} the file revision from`,{allowRevisions:!0,autoPick:!0,filter:{branches:e=>e.remote||null!=e.upstream},picked:i.branchOrTag,sort:{branches:{current:!0,orderBy:"date:desc"},tags:{orderBy:"date:desc"}}});if(null==e)return;if("branch"===e.refType){if(e.remote){i.branchOrTag=(0,m.km)(e.name);let t=(0,m.Zq)(e.name),r=n.find(e=>e.name===t);null!=r&&(n=[r])}else i.branchOrTag=e.name;o=void 0}else"tag"===e.refType?(i.branchOrTag=e.ref,o=void 0):(i.branchOrTag=void 0,o=e.ref)}else i.branchOrTag=e.name}await (0,b.RS)(p.Ts.OpenOnRemote,{resource:{type:null==o?ek.J.File:ek.J.Revision,branchOrTag:i.branchOrTag??"HEAD",fileName:r.relativePath,range:s,sha:o??void 0},repoPath:r.repoPath,remotes:n,clipboard:i.clipboard})}catch(e){A.Vy.error(e,"OpenFileOnRemoteCommand"),(0,y.qQ)("Unable to open file on remote provider")}}}};t9=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?t7(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&t5(t,i,n),n})([(0,b.G5)()],t9),i(5283);var t6=Object.defineProperty,ie=Object.getOwnPropertyDescriptor;let it=class extends F.Zr{constructor(e){super(p.Ts.OpenFileAtRevisionFrom),this.container=e}async execute(e,t,i){if(null==(t=(0,F.qx)(t,e)))return;let r=await g.nk.fromUri(t);if(!r.repoPath){(0,y.A5)("Unable to open file revision");return}if(null==(i={...i}).line&&(i.line=e?.selection.active.line??0),null==i.reference){if(i?.stash){let e=this.container.git.getRelativePath(r,r.repoPath),t=`Open Changes with Stash${(0,eB.eV)(p.EO.Dot,2,2)}`,s=await (0,ex.F)(this.container.git.getStash(r.repoPath),`${t}${r.getFormattedFileName({truncateTo:p.uR-t.length})}`,"Choose a stash to compare with",{filter:t=>t.files?.some(t=>t.path===e||t.originalPath===e)??!0});if(null==s)return;i.reference=s}else{let e=`Open File at Branch or Tag${(0,eB.eV)(p.EO.Dot,2,2)}`,t=await (0,en.N)(r.repoPath,`${e}${r.getFormattedFileName({truncateTo:p.uR-e.length})}`,"Choose a branch or tag to open the file revision from",{allowRevisions:!0,keyboard:{keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{await (0,em.vM)(this.container.git.getRevisionUri(t.ref,r.fsPath,r.repoPath),{annotationType:i.annotationType,line:i.line,preserveFocus:!0,preview:!0})}}});if(null==t)return;i.reference=t}}await (0,em.vM)(this.container.git.getRevisionUri(i.reference.ref,r.fsPath,r.repoPath),{annotationType:i.annotationType,line:i.line,...i.showOptions})}};it=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?ie(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&t6(t,i,n),n})([(0,b.G5)()],it);var ii=i(7788),ir=i(6011),is=Object.defineProperty,io=Object.getOwnPropertyDescriptor;let ia=class extends F.uB{constructor(e){super([p.Ts.OpenOnRemote,p.Ts.Deprecated_OpenInRemote]),this.container=e}async execute(e){if(e?.resource==null)return;let t="remotes"in e?e.remotes:await this.container.git.getRemotesWithProviders(e.repoPath,{sort:!0});if(null!=e.remote){let i=t.filter(t=>t.name===e.remote);t.length>0&&(t=i)}async function i(e){try{if(e.type===ek.J.Branch){let[i,r]=(0,eB.Br)(e.branch,"/");if(null!=r){let s=t.find(e=>e.name===i);null!=s&&(e.branch=r,t=[s])}}else if(e.type===ek.J.Revision){let{commit:t,fileName:i}=e;if(null!=t){let r=await t.findFile(i);r?.status==="D"?e.sha=await this.container.git.resolveReference(t.repoPath,`${t.sha}^`,i):e.sha=t.sha}}}catch(e){A.Vy.error(e,"OpenOnRemoteCommand.processResource")}}try{let r,s=function(t){return e?.clipboard?`Copy ${a} ${t} Link${n.length>1?"s":""}`:`Open ${t} on ${a}`},n=(0,tl.D8)(e.resource);for(let e of n)await i.call(this,e);let o=(0,ii.zF)(t),a=o?.length?o[0].name:"Remote",l={autoPick:"default",clipboard:e.clipboard,setDefault:!0},h=`Choose which remote to ${e.clipboard?`copy the link${n.length>1?"s":""} for`:"open on"}`,[c]=n;switch(c.type){case ek.J.Branch:r=s("Branch"),1===n.length&&(r+=`${(0,eB.eV)(p.EO.Dot,2,2)}${c.branch}`);break;case ek.J.Branches:r=s("Branches");break;case ek.J.Commit:r=s("Commit"),1===n.length&&(r+=`${(0,eB.eV)(p.EO.Dot,2,2)}${(0,es.pV)(c.sha)}`);break;case ek.J.Comparison:r=s("Comparisons"),1===n.length&&(r+=`${(0,eB.eV)(p.EO.Dot,2,2)}${(0,es.Xn)(c.base,c.compare,c.notation??"...")}`);break;case ek.J.CreatePullRequest:l.autoPick=!0,l.setDefault=!1,n.length>1?(r=e.clipboard?`Copy ${a} Create Pull Request Links`:`Create Pull Requests on ${a}`,h=`Choose which remote to ${e.clipboard?"copy the create pull request links for":"create the pull requests on"}`):(r=`${e.clipboard?`Copy ${a} Create Pull Request Link`:`Create Pull Request on ${a}`}${(0,eB.eV)(p.EO.Dot,2,2)}${c.base?.branch?(0,es.Xn)(c.base.branch,c.compare.branch,"..."):c.compare.branch}`,h=`Choose which remote to ${e.clipboard?"copy the create pull request link for":"create the pull request on"}`);break;case ek.J.File:r=s("File"),1===n.length&&(r+=`${(0,eB.eV)(p.EO.Dot,2,2)}${c.fileName}`);break;case ek.J.Repo:r=s("Repository");break;case ek.J.Revision:r=s("File"),1===n.length&&(r+=`${(0,eB.eV)(p.EO.Dot,2,2)}${(0,es.pV)(c.sha)}${(0,eB.eV)(p.EO.Dot,1,1)}${c.fileName}`)}let u=await (0,ir.ZM)(r,h,n,t,l);await u?.execute()}catch(e){A.Vy.error(e,"OpenOnRemoteCommand"),(0,y.qQ)("Unable to open in remote provider")}}};ia=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?io(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&is(t,i,n),n})([(0,b.G5)()],ia);var il=i(5158),ih=Object.defineProperty,ic=Object.getOwnPropertyDescriptor;let iu=class extends F.uB{constructor(e){super([p.Ts.OpenPullRequestOnRemote,p.Ts.CopyRemotePullRequestUrl]),this.container=e}preExecute(e,t){return"viewItem"===e.type&&e.node instanceof il.X&&(t={...t,pr:{url:e.node.pullRequest.url},clipboard:e.command===p.Ts.CopyRemotePullRequestUrl}),this.execute(t)}async execute(e){if(e?.pr==null){if(e?.repoPath==null||e?.ref==null)return;let t=await this.container.git.getBestRemoteWithIntegration(e.repoPath);if(null==t)return;let i=await this.container.integrations.getByRemote(t);if(null==i)return;let r=await i.getPullRequestForCommit(t.provider.repoDesc,e.ref);if(null==r){a.window.showInformationMessage(`No pull request associated with '${(0,es.pV)(e.ref)}'`);return}(e={...e}).pr=r}e.clipboard?await a.env.clipboard.writeText(e.pr.url):(0,q.CZ)(e.pr.url)}};iu=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?ic(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&ih(t,i,n),n})([(0,b.G5)()],iu);var id=Object.defineProperty,ip=Object.getOwnPropertyDescriptor;let ig=class extends F.Zr{constructor(e){super([p.Ts.OpenRepoOnRemote,p.Ts.Deprecated_OpenRepoInRemote,p.Ts.CopyRemoteRepositoryUrl]),this.container=e}preExecute(e,t){return(0,F.qv)(e)&&(t={...t,remote:e.node.remote.name}),e.command===p.Ts.CopyRemoteRepositoryUrl&&(t={...t,clipboard:!0}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r=null!=(t=(0,F.qx)(t,e))?await g.nk.fromUri(t):void 0,s=(await G.X(r,e,i?.clipboard?"Choose which repository to copy the url from":"Choose which repository to open on remote"))?.path;if(s)try{await (0,b.RS)(p.Ts.OpenOnRemote,{resource:{type:ek.J.Repo},repoPath:s,remote:i?.remote,clipboard:i?.clipboard})}catch(e){A.Vy.error(e,"OpenRepoOnRemoteCommand"),(0,y.qQ)("Unable to open repository on remote provider")}}};ig=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?ip(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&id(t,i,n),n})([(0,b.G5)()],ig);var im=Object.defineProperty,iw=Object.getOwnPropertyDescriptor;let iv=class extends F.Zr{constructor(e){super([p.Ts.OpenRevisionFile,p.Ts.OpenRevisionFileInDiffLeft,p.Ts.OpenRevisionFileInDiffRight]),this.container=e}async execute(e,t,i){if(null==(t=(0,F.qx)(t,e)))return;let r=await g.nk.fromUri(t);null==(i={...i}).line&&(i.line=e?.selection.active.line??0);try{if(null==i.revisionUri){if(r?.sha){let e=await this.container.git.getCommit(r.repoPath,r.sha);i.revisionUri=e?.file?.status==="D"?this.container.git.getRevisionUri(await e.getPreviousSha()??eQ.nB,e.file,e.repoPath):this.container.git.getRevisionUri(r)}else i.revisionUri=this.container.git.getRevisionUri(r)}await (0,em.vM)(i.revisionUri,{annotationType:i.annotationType,line:i.line,...i.showOptions})}catch(e){A.Vy.error(e,"OpenRevisionFileCommand"),(0,y.qQ)("Unable to open file revision")}}};iv=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?iw(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&im(t,i,n),n})([(0,b.G5)()],iv);var iy=Object.defineProperty,ib=Object.getOwnPropertyDescriptor;let iC=class extends F.Zr{constructor(e){super([p.Ts.OpenWorkingFile,p.Ts.OpenWorkingFileInDiffLeft,p.Ts.OpenWorkingFileInDiffRight]),this.container=e}async execute(e,t,i){null==(i={...i}).line&&(i.line=e?.selection.active.line);try{if(null==i.uri){if(t=(0,F.qx)(t,e),null==t)return}else t=i.uri;if(i.uri=await g.nk.fromUri(t),(0,g.t5)(i.uri)&&i.uri.sha){let e=await this.container.git.getWorkingUri(i.uri.repoPath,i.uri);if(void 0===e){a.window.showWarningMessage("Unable to open working file. File could not be found in the working tree");return}i.uri=new g.nk(e,i.uri.repoPath)}void 0!==i.line&&0!==i.line&&(void 0===i.showOptions&&(i.showOptions={}),i.showOptions.selection=new a.Range(i.line,0,i.line,0));let r=await (0,q.Ol)(i.uri,{...i.showOptions,throwOnError:!0});if(void 0===i.annotationType)return;await this.container.fileAnnotations.show(r,i.annotationType,{selection:{line:i.line}})}catch(e){A.Vy.error(e,"OpenWorkingFileCommand"),(0,y.qQ)("Unable to open working file")}}};iC=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?ib(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&iy(t,i,n),n})([(0,b.G5)()],iC);var iR=i(910),iS=i(8803),iP=i(1310),iA=i(103),ik=i(7463),iD=Object.defineProperty,iT=Object.getOwnPropertyDescriptor,i_=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?iT(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&iD(t,i,n),n};let CreatePatchCommandBase=class CreatePatchCommandBase extends F.uB{constructor(e,t){super(t),this.container=e}async preExecute(e,t){if(null==t){if("scm-states"===e.type){let i;let r=new Map,s=new Set;for(let t of e.scmResourceStates){i??=await this.container.git.getOrOpenRepository(t.resourceUri),s.add(t.resourceUri.toString());let e=r.get(t.resourceGroupType);null==e?(e=[],r.set(t.resourceGroupType,e)):e.push(t)}t={repoPath:i?.path,to:1==r.size&&r.has(ta.Index)?eQ.id:eQ.SU,from:"HEAD",uris:[...(0,ef.Tj)(s,e=>a.Uri.parse(e))]}}else if("scm-groups"===e.type){let i=e.scmResourceGroups[0];if(!i?.resourceStates?.length)return;let r=await this.container.git.getOrOpenRepository(i.resourceStates[0].resourceUri);t={repoPath:r?.path,to:"index"===i.id?eQ.id:eQ.SU,from:"HEAD"}}else"viewItem"===e.type&&((0,F.j7)(e)?(t={repoPath:e.node.commit.repoPath,to:e.node.commit.ref,from:`${e.node.commit.ref}^`},(0,F.xT)(e)&&(t.uris=[e.node.uri])):(0,F.d2)(e)&&(t={repoPath:e.node.uri.fsPath,to:e.node.compareRef.ref,from:e.node.compareWithRef.ref}))}return this.execute(t)}async getDiff(e,t){let i;if(t?.repoPath!=null&&(i=this.container.git.getRepository(t.repoPath)),null!=(i??=await (0,G.t6)(e)))return this.container.git.getDiff(i.uri,t?.to??eQ.SU,t?.from??"HEAD",t?.uris?.length?{uris:t.uris}:void 0)}};let iI=class extends CreatePatchCommandBase{constructor(e){super(e,p.Ts.CreatePatch)}async execute(e){let t=await this.getDiff("Create Patch",e);if(null==t)return;let i=await a.workspace.openTextDocument({content:t.contents,language:"diff"});await a.window.showTextDocument(i)}};iI=i_([(0,b.G5)()],iI);let i$=class extends CreatePatchCommandBase{constructor(e){super(e,p.Ts.CopyPatchToClipboard)}async execute(e){let t=await this.getDiff("Copy as Patch",e);null!=t&&(await a.env.clipboard.writeText(t.contents),a.window.showInformationMessage("Copied patch — use 'Apply Copied Patch' in another window to apply it"))}};i$=i_([(0,b.G5)()],i$);let iE=class extends F.uB{constructor(e){super(p.Ts.ApplyPatchFromClipboard),this.container=e}async execute(){let e=await a.env.clipboard.readText(),t=this.container.git.highlander;if(!(e.length&&await this.container.git.validatePatch(t?.uri??a.Uri.file(""),e))){a.window.showWarningMessage("No valid patch found in the clipboard");return}if(null!=(t??=await (0,G.t6)("Apply Copied Patch")))try{let i=await this.container.git.createUnreachableCommitForPatch(t.uri,e,"HEAD","Pasted Patch");if(null==i)return;await this.container.git.applyUnreachableCommitForPatch(t.uri,i.sha,{stash:!1}),a.window.showInformationMessage("Patch applied successfully")}catch(e){if(e instanceof iS.AL)return;e instanceof iP.ol?e.reason===iP.a_.AppliedWithConflicts?a.window.showWarningMessage("Patch applied with conflicts"):a.window.showErrorMessage(e.message):a.window.showErrorMessage(`Unable to apply patch: ${e.message}`)}}};iE=i_([(0,b.G5)()],iE);let iO=class extends CreatePatchCommandBase{constructor(e){super(e,[p.Ts.CreateCloudPatch,p.Ts.ShareAsCloudPatch])}async execute(e){if(e?.repoPath==null)return(0,iA.X)({mode:"create"});let t=this.container.git.getRepository(e.repoPath);if(null==t)return(0,iA.X)({mode:"create"});let i=await iB(this.container,t,e);return null==i?(0,iA.X)({mode:"create",create:{repositories:[t]}}):(0,iA.X)({mode:"create",create:i})}};iO=i_([(0,b.G5)()],iO);let ix=class extends F.Zr{constructor(e){super(p.Ts.OpenPatch),this.container=e}async execute(e){let t;if(e?.document?.languageId==="diff")t=e.document;else{let e=await a.window.showOpenDialog({canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!1,filters:{Patches:["diff","patch"]},openLabel:"Open Patch",title:"Open Patch File"}),i=e?.[0];if(null==i)return;t=await a.workspace.openTextDocument(i),await a.window.showTextDocument(t)}let i={draftType:"local",patch:{type:"local",uri:t.uri,contents:t.getText()}};(0,iA.X)({mode:"view",draft:i})}};ix=i_([(0,b.G5)()],ix);let iF=class extends F.uB{constructor(e){super(p.Ts.OpenCloudPatch),this.container=e}async execute(e){let t;let i=e?.type==="code_suggestion"?"Code Suggestion":"Cloud Patch";if(e?.id==null&&e?.draft==null){a.window.showErrorMessage(`Cannot open ${i}; no patch or patch id provided`);return}if(e?.prEntityId!=null&&e?.type==="code_suggestion"){let r,s;try{let t=iR.EntityIdentifierUtils.decode(e.prEntityId);r=(0,ik.H)(t),s=t.domain??void 0}catch{a.window.showErrorMessage(`Cannot open ${i}; invalid provider details.`);return}if(null==r){a.window.showErrorMessage(`Cannot open ${i}; unsupported provider.`);return}let n=await this.container.integrations.get(r,s);if(null==n){a.window.showErrorMessage(`Cannot open ${i}; provider not found.`);return}let o=await this.container.integrationAuthentication.getSession(n.id,n.authProviderDescriptor);if(null==o){a.window.showErrorMessage(`Cannot open ${i}; provider not connected.`);return}t={provider:n.id,token:o.accessToken}}try{let i=e?.draft??await this.container.drafts.getDraft(e?.id,{providerAuth:t});(0,iA.X)({mode:"view",draft:i})}catch(t){A.Vy.error(t,"OpenCloudPatchCommand"),a.window.showErrorMessage(`Unable to open ${i} '${e.id}'`)}}};async function iB(e,t,i){if(null==i.to)return;let r=i.to??"HEAD",s={type:"revision",repository:{name:t.name,path:t.path,uri:t.uri.toString()},files:void 0,revision:{to:r,from:i.from??`${r}^`}},n={changes:[s]},o=await e.git.getCommit(t.uri,r);if(null==o)return;let a=o.message.trim(),l=a.indexOf("\n");if(l<0?n.title=a:(n.title=a.substring(0,l),n.description=a.substring(l+1).trim()),null==i.from){if(null==o.files)return;s.files=[...o.files]}else{let o=await e.git.getDiff(t.uri,r,i.from);if(null==o)return;let a=await e.git.getDiffFiles(t.uri,o.contents);if(a?.files==null)return;if(s.files=a.files,n.title=`Comparing ${(0,es.pV)(i.to)} with ${(0,es.pV)(i.from)}`,!(0,es.HH)(i.to)){let r=await e.git.getCommit(t.uri,i.to);null!=r&&(s.revision.to=r.sha)}if(!(0,es.HH)(i.from)){let r=await e.git.getCommit(t.uri,i.from);null!=r&&(s.revision.from=r.sha)}}return n}iF=i_([(0,b.G5)()],iF);var iL=Object.defineProperty,iU=Object.getOwnPropertyDescriptor,iW=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?iU(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&iL(t,i,n),n};let iq=class extends F.uB{constructor(e){super(p.Ts.DisableRebaseEditor),this.container=e}execute(){return this.container.rebaseEditor.setEnabled(!1)}};iq=iW([(0,b.G5)()],iq);let iM=class extends F.uB{constructor(e){super(p.Ts.EnableRebaseEditor),this.container=e}execute(){return this.container.rebaseEditor.setEnabled(!0)}};iM=iW([(0,b.G5)()],iM);var iN=Object.defineProperty,iH=Object.getOwnPropertyDescriptor;let iG=class extends F.uB{constructor(e){super(p.Ts.RefreshHover),this.container=e}async execute(){await (0,b.S4)("editor.action.showHover")}};iG=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?iH(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&iN(t,i,n),n})([(0,b.G5)()],iG),i(5745);var iV=Object.defineProperty,iQ=Object.getOwnPropertyDescriptor,ij=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?iQ(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&iV(t,i,n),n};let iz=class extends F.uB{constructor(e){super(p.Ts.FetchRepositories),this.container=e}async execute(){return(0,x.b)({command:"fetch",state:{repos:this.container.git.openRepositories}})}};iz=ij([(0,b.G5)()],iz);let iY=class extends F.uB{constructor(e){super(p.Ts.PullRepositories),this.container=e}async execute(){return(0,x.b)({command:"pull",state:{repos:this.container.git.openRepositories}})}};iY=ij([(0,b.G5)()],iY);let iK=class extends F.uB{constructor(e){super(p.Ts.PushRepositories),this.container=e}async execute(){return(0,x.b)({command:"push",state:{repos:this.container.git.openRepositories}})}};iK=ij([(0,b.G5)()],iK);var iJ=i(5176),iZ=Object.defineProperty,iX=Object.getOwnPropertyDescriptor,i0=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?iX(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&iZ(t,i,n),n};let i1=class extends F.uB{constructor(e){super(p.Ts.ResetAIKey),this.container=e}async execute(){(await this.container.ai)?.reset()}};i1=i0([(0,b.G5)()],i1);let i2=class extends F.uB{constructor(e){super(p.Ts.ResetAvatarCache),this.container=e}execute(){(0,iJ.H3)("all")}};i2=i0([(0,b.G5)()],i2);let i3=class extends F.uB{constructor(e){super(p.Ts.ResetSuppressedWarnings),this.container=e}async execute(){await C.H.update("advanced.messages",void 0,a.ConfigurationTarget.Global)}};i3=i0([(0,b.G5)()],i3);let i4=class extends F.uB{constructor(e){super(p.Ts.ResetTrackedUsage),this.container=e}async execute(){await this.container.usage.reset()}};i4=i0([(0,b.G5)()],i4);var i8=Object.defineProperty,i5=Object.getOwnPropertyDescriptor;let i7=class extends F.uB{constructor(e){super(p.Ts.ResetViewsLayout),this.container=e}async execute(){for(let[e,t]of p.OB){try{await (0,b.S4)("vscode.moveViews",{viewIds:t.map(e=>`gitlens.views.${e}`),destinationId:e})}catch{}e.includes("gitlens")&&await (0,b.S4)(`${e}.resetViewContainerLocation`)}}};i7=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?i5(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&i8(t,i,n),n})([(0,b.G5)()],i7);var i9=i(8547),i6=Object.defineProperty,re=Object.getOwnPropertyDescriptor;let rt=class extends F.uB{constructor(e){super([p.Ts.SearchCommits,p.Ts.SearchCommitsInView]),this.container=e}preExecute(e,t){return e.command===p.Ts.SearchCommitsInView?(t={...t}).showResultsInSideBar=!0:"viewItem"===e.type&&((t={...t}).showResultsInSideBar=!0,e.node instanceof i9.X&&(t.repoPath=e.node.repoPath,t.search=e.node.search,t.prefillOnly=!0),(0,F.q)(e)&&(t.repoPath=e.node.repo.path)),this.execute(t)}async execute(e){await (0,x.b)({command:"search",prefillOnly:e?.prefillOnly,state:{repo:e?.repoPath,...e?.search,showResultsInSideBar:C.H.get("gitCommands.search.showResultsInSideBar")??e?.showResultsInSideBar,openPickInView:e?.openPickInView??!1}})}};rt=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?re(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&i6(t,i,n),n})([(0,b.G5)()],rt),i(8458);var ri=Object.defineProperty,rr=Object.getOwnPropertyDescriptor;let rs=class extends F.uB{constructor(e){super(p.Ts.ShowLastQuickPick),this.container=e}execute(){let e=(0,F.EL)();if(void 0===e)return Promise.resolve(void 0);try{return a.commands.executeCommand(e.command,...e.args)}catch(e){return A.Vy.error(e,"ShowLastQuickPickCommand"),(0,y.qQ)("Unable to show last quick pick")}}};rs=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?rr(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&ri(t,i,n),n})([(0,b.G5)()],rs);var rn=Object.defineProperty,ro=Object.getOwnPropertyDescriptor;let ra=class extends F.uB{constructor(e){super(p.Ts.OpenOnlyChangedFiles),this.container=e}async execute(e){e={...e};try{let t,i;if(null==e.uris){let t=await (0,G.t6)("Open Changed & Close Unchanged Files");if(null==t)return;let i=await this.container.git.getStatusForRepo(t.uri);if(null==i){a.window.showWarningMessage("Unable to open changed & close unchanged files");return}e.uris=(0,tl.x1)(i.files,e=>"D"!==e.status?e.uri:void 0)}let r=0===e.uris.length,s=new Set(e.uris);for(let n of a.window.tabGroups.all)for(let o of n.tabs){if(r){a.window.tabGroups.close(o,!0);continue}i=o.input instanceof a.TabInputText||o.input instanceof a.TabInputCustom||o.input instanceof a.TabInputNotebook?o.input.uri:o.input instanceof a.TabInputTextDiff||o.input instanceof a.TabInputNotebookDiff?o.input.modified:void 0,null!=i&&(t=e.uris.find(e=>V.Y.equals(e,i)),null!=t?s.delete(t):a.window.tabGroups.close(o,!0))}s.size>0&&(0,q.JR)([...s])}catch(e){A.Vy.error(e,"OpenOnlyChangedFilesCommand"),(0,y.qQ)("Unable to open changed & close unchanged files")}}};ra=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?ro(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&rn(t,i,n),n})([(0,b.G5)()],ra);var rl=Object.defineProperty,rh=Object.getOwnPropertyDescriptor;let rc=class extends F.dY{constructor(e){super([p.Ts.ShowQuickBranchHistory,p.Ts.ShowQuickCurrentBranchHistory]),this.container=e}preExecute(e,t){return e.command===p.Ts.ShowQuickCurrentBranchHistory&&((t={...t}).branch="HEAD"),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r;let s=null!=(t=(0,F.qx)(t,e))?await g.nk.fromUri(t):void 0,n=i?.repoPath??s?.repoPath??this.container.git.highlander?.path;return null!=n&&(i?.branch!=null?r="HEAD"===i.branch?"HEAD":(0,es.kA)(i.branch,n,{refType:"branch",name:i.branch,remote:!1}):i?.tag!=null&&(r=(0,es.kA)(i.tag,n,{refType:"tag",name:i.tag}))),(0,x.b)({command:"log",state:null!=n?{repo:n,reference:r}:{}})}};rc=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?rh(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&rl(t,i,n),n})([(0,b.G5)()],rc),i(3700),i(7746);var ru=Object.defineProperty,rd=Object.getOwnPropertyDescriptor;let rp=class extends F.dY{constructor(e){super([p.Ts.OpenFileHistory,p.Ts.OpenFolderHistory,p.Ts.ShowQuickFileHistory,p.Ts.QuickOpenFileHistory,p.Ts.Deprecated_ShowFileHistoryInView]),this.container=e}preExecute(e,t){return(e.command===p.Ts.OpenFileHistory||e.command===p.Ts.OpenFolderHistory||e.command===p.Ts.Deprecated_ShowFileHistoryInView)&&((t={...t}).showInSideBar=!0),this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null==(t=(0,F.qx)(t,e)))return;let r=await g.nk.fromUri(t);if(i?.showInSideBar){await this.container.fileHistoryView.showHistoryForUri(r);return}await (0,x.b)({command:"log",state:r?.repoPath!=null?{repo:r.repoPath,reference:i?.reference??"HEAD",fileName:r.relativePath}:{}})}};rp=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?rd(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&ru(t,i,n),n})([(0,b.G5)()],rp);var rg=Object.defineProperty,rm=Object.getOwnPropertyDescriptor;let rf=class extends F.uB{constructor(e){super(p.Ts.ShowQuickRepoStatus),this.container=e}async execute(e){return(0,x.b)({command:"status",state:{repo:e?.repoPath}})}};rf=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?rm(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&rg(t,i,n),n})([(0,b.G5)()],rf);var rw=Object.defineProperty,rv=Object.getOwnPropertyDescriptor;let ry=class extends F.uB{constructor(e){super(p.Ts.ShowQuickStashList),this.container=e}execute(e){return(0,x.b)({command:"stash",state:{subcommand:"list",repo:e?.repoPath}})}};ry=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?rv(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&rw(t,i,n),n})([(0,b.G5)()],ry);var rb=Object.defineProperty,rC=Object.getOwnPropertyDescriptor;let rR=class extends F.uB{constructor(e){super([p.Ts.ShowBranchesView,p.Ts.ShowCommitDetailsView,p.Ts.ShowCommitsView,p.Ts.ShowContributorsView,p.Ts.ShowDraftsView,p.Ts.ShowFileHistoryView,p.Ts.ShowGraphView,p.Ts.ShowHomeView,p.Ts.ShowAccountView,p.Ts.ShowLineHistoryView,p.Ts.ShowRemotesView,p.Ts.ShowRepositoriesView,p.Ts.ShowSearchAndCompareView,p.Ts.ShowStashesView,p.Ts.ShowTagsView,p.Ts.ShowTimelineView,p.Ts.ShowWorktreesView,p.Ts.ShowWorkspacesView]),this.container=e}preExecute(e,...t){return this.execute(e,...t)}async execute(e,...t){switch(e.command){case p.Ts.ShowBranchesView:return this.container.branchesView.show();case p.Ts.ShowCommitDetailsView:return this.container.commitDetailsView.show();case p.Ts.ShowCommitsView:return this.container.commitsView.show();case p.Ts.ShowContributorsView:return this.container.contributorsView.show();case p.Ts.ShowDraftsView:return this.container.draftsView.show();case p.Ts.ShowFileHistoryView:return this.container.fileHistoryView.show();case p.Ts.ShowHomeView:return this.container.homeView.show();case p.Ts.ShowAccountView:return this.container.accountView.show();case p.Ts.ShowGraphView:return this.container.graphView.show(void 0,...t);case p.Ts.ShowLineHistoryView:return this.container.lineHistoryView.show();case p.Ts.ShowRemotesView:return this.container.remotesView.show();case p.Ts.ShowRepositoriesView:return this.container.repositoriesView.show();case p.Ts.ShowSearchAndCompareView:return this.container.searchAndCompareView.show();case p.Ts.ShowStashesView:return this.container.stashesView.show();case p.Ts.ShowTagsView:return this.container.tagsView.show();case p.Ts.ShowTimelineView:return this.container.timelineView.show();case p.Ts.ShowWorktreesView:return this.container.worktreesView.show();case p.Ts.ShowWorkspacesView:return this.container.workspacesView.show()}return Promise.resolve(void 0)}};rR=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?rC(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&rb(t,i,n),n})([(0,b.G5)()],rR);var rS=i(300),rP=Object.defineProperty,rA=Object.getOwnPropertyDescriptor;let rk=class extends F.uB{constructor(e){super(p.Ts.StashApply),this.container=e}async preExecute(e,t){return(0,F.j7)(e)?(null==e.node.commit.message&&await e.node.commit.ensureFullDetails(),t={...t,stashItem:e.node.commit}):(0,F.q)(e)&&(t={...t,repoPath:e.node.repo.path}),this.execute(t)}async execute(e){return e?.deleteAfter?(0,rS.uY)(e?.repoPath??e?.stashItem?.repoPath,e?.stashItem):(0,rS.Bb)(e?.repoPath??e?.stashItem?.repoPath,e?.stashItem)}};rk=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?rA(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&rP(t,i,n),n})([(0,b.G5)()],rk);var rD=i(4703),rT=Object.defineProperty,r_=Object.getOwnPropertyDescriptor;let rI=class extends F.uB{constructor(e){super([p.Ts.StashSave,p.Ts.StashSaveFiles]),this.container=e}async preExecute(e,t){if((0,F.Ey)(e))(t={...t}).repoPath=e.node.file.repoPath??e.node.repoPath,t.uris=[g.nk.fromFile(e.node.file,t.repoPath)];else if((0,F.q)(e))(t={...t}).repoPath=e.node.repo.path;else if((0,F.z2)(e))(t={...t}).repoPath=e.node.repoPath;else if("scm"===e.type){if(null!=e.scm.rootUri){let i=this.container.git.getRepository(e.scm.rootUri);null!=i&&((t={...t}).repoPath=i.path)}}else if("scm-states"===e.type){let i;t={...t};let r=!1,s=!1,n=[];for(let t of e.scmResourceStates)n.push(t.resourceUri),t.type===tn.UNTRACKED&&(s=!0),t.resourceGroupType===ta.Index?(r=!0,null==i&&(i=!0)):i=!1;let o=await this.container.git.getOrOpenRepository(n[0]);t.repoPath=o?.path,t.onlyStaged=null!=o&&!!i&&await o.supports(rD.O.StashOnlyStaged),null!=t.keepStaged||r||(t.keepStaged=!0),t.includeUntracked=s,t.uris=n}else if("scm-groups"===e.type){let i;t={...t};let r=!1,s=!1,n=[],o=[];for(let t of e.scmResourceGroups){for(let e of t.resourceStates)n.push(e.resourceUri),e.type===tn.UNTRACKED&&(s=!0);"index"===t.id?(r=!0,null==i&&(i=!0),o.push(...t.resourceStates.map(e=>e.resourceUri))):i=!1}let a=await this.container.git.getOrOpenRepository(n[0]);t.repoPath=a?.path,t.onlyStaged=null!=a&&!!i&&await a.supports(rD.O.StashOnlyStaged),null!=t.keepStaged||r||(t.keepStaged=!0),t.includeUntracked=s,t.onlyStaged?t.onlyStagedUris=o:t.uris=n}return this.execute(t)}execute(e){return(0,rS.VC)(e?.repoPath,e?.uris,e?.message,e?.includeUntracked,e?.keepStaged,e?.onlyStaged,e?.onlyStagedUris)}};rI=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?r_(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&rT(t,i,n),n})([(0,b.G5)()],rI);var r$=Object.defineProperty,rE=Object.getOwnPropertyDescriptor;let rO=class extends F.uB{constructor(e){super(p.Ts.SwitchAIModel),this.container=e}async execute(){await (await this.container.ai)?.switchProvider()}};async function rx(){let e=C.H.get("modes");if(null==e)return;let t=Object.keys(e);if(0===t.length)return;let i=C.H.get("mode.active"),r=t.map(t=>{let r=e[t];return{label:`${i===t?"$(check)  ":"     "}${r.name} mode`,description:r.description?`\xa0${p.EO.Dash}\xa0 ${r.description}`:"",key:t}});return i&&null!=e[i]&&r.unshift({label:`Exit ${e[i].name} mode`,key:void 0}),await a.window.showQuickPick(r,{placeHolder:"select a GitLens mode to enter"})}rO=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?rE(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&r$(t,i,n),n})([(0,b.G5)()],rO);var rF=i(3446),rB=Object.defineProperty,rL=Object.getOwnPropertyDescriptor,rU=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?rL(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&rB(t,i,n),n};let rW=class extends F.uB{constructor(e){super(p.Ts.SwitchMode),this.container=e}async execute(){let e=(0,rF.dQ)(),t=await rx();if(void 0===t)return;(0,rF.TT)(e,` \u2022 mode=${t.key??""}`);let i=C.H.get("mode.active");if(i!==t.key){if(null!=i&&0!==i.length){let e=C.H.get("modes"),r=e?.[i].annotations;null!=r&&r!==(null!=t.key?e?.[t.key].annotations:void 0)&&await this.container.fileAnnotations.clearAll()}await C.H.update("mode.active",t.key,a.ConfigurationTarget.Global)}}};rU([(0,T.Rm)({args:!1,scoped:!0,singleLine:!0,timed:!1})],rW.prototype,"execute",1),rW=rU([(0,b.G5)()],rW);let rq=class extends F.uB{constructor(e){super(p.Ts.ToggleReviewMode),this.container=e}async execute(){let e=C.H.get("modes");if(null==e||!Object.keys(e).includes("review"))return;let t="review"===C.H.get("mode.active")?void 0:"review";await C.H.update("mode.active",t,a.ConfigurationTarget.Global)}};rU([(0,T.Rm)({args:!1,singleLine:!0,timed:!1})],rq.prototype,"execute",1),rq=rU([(0,b.G5)()],rq);let rM=class extends F.uB{constructor(e){super(p.Ts.ToggleZenMode),this.container=e}async execute(){let e=C.H.get("modes");if(null==e||!Object.keys(e).includes("zen"))return;let t="zen"===C.H.get("mode.active")?void 0:"zen";await C.H.update("mode.active",t,a.ConfigurationTarget.Global)}};rU([(0,T.Rm)({args:!1,singleLine:!0,timed:!1})],rM.prototype,"execute",1),rM=rU([(0,b.G5)()],rM);var rN=Object.defineProperty,rH=Object.getOwnPropertyDescriptor;let rG=class extends F.uB{constructor(e){super(p.Ts.ToggleCodeLens),this.container=e}execute(){this.container.codeLens.toggleCodeLens()}};rG=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?rH(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&rN(t,i,n),n})([(0,b.G5)()],rG);var rV=Object.defineProperty,rQ=Object.getOwnPropertyDescriptor,rj=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?rQ(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&rV(t,i,n),n};let rz=class extends F.DX{constructor(e){super([p.Ts.ClearFileAnnotations,p.Ts.ComputingFileAnnotations]),this.container=e}async execute(e,t,i){if(null!=e&&!(0,q.ld)(e)&&null!=i&&!V.Y.equals(i,e.document.uri)){let t=a.window.visibleTextEditors.find(e=>V.Y.equals(i,e.document.uri));null!=t&&(e=t)}try{await this.container.fileAnnotations.clear(e)}catch(e){A.Vy.error(e,"ClearFileAnnotationsCommand"),(0,y.qQ)("Unable to clear file annotations")}}};rz=rj([(0,b.G5)()],rz);let rY=class extends F.Zr{constructor(e){super([p.Ts.ToggleFileBlame,p.Ts.ToggleFileBlameInDiffLeft,p.Ts.ToggleFileBlameInDiffRight]),this.container=e}execute(e,t,i){return rZ(this.container,e,t,{...i,type:"blame"})}};rY=rj([(0,b.G5)()],rY);let rK=class extends F.Zr{constructor(e){super(p.Ts.ToggleFileChanges),this.container=e}execute(e,t,i){return rZ(this.container,e,t,{...i,type:"changes"})}};rK=rj([(0,b.G5)()],rK);let rJ=class extends F.Zr{constructor(e){super([p.Ts.ToggleFileHeatmap,p.Ts.ToggleFileHeatmapInDiffLeft,p.Ts.ToggleFileHeatmapInDiffRight]),this.container=e}execute(e,t,i){return rZ(this.container,e,t,{...i,type:"heatmap"})}};async function rZ(e,t,i,r){if(null!=t&&!(0,q.ld)(t)&&null!=i&&!V.Y.equals(i,t.document.uri)){let e=a.window.visibleTextEditors.find(e=>V.Y.equals(i,e.document.uri));null!=e&&(t=e)}try{r={type:"blame",...r},await e.fileAnnotations.toggle(t,r.type,{selection:r.context?.selection??{line:t?.selection.active.line},...r.context},r.on)}catch(e){A.Vy.error(e,"ToggleFileAnnotationsCommand"),(0,y.qQ)(`Unable to toggle file ${r.type} annotations`)}}rJ=rj([(0,b.G5)()],rJ);var rX=Object.defineProperty,r0=Object.getOwnPropertyDescriptor;let r1=class extends F.Zr{constructor(e){super(p.Ts.ToggleLineBlame),this.container=e}async execute(e,t){try{await this.container.lineAnnotations.toggle(e)}catch(e){A.Vy.error(e,"ToggleLineBlameCommand"),(0,y.qQ)("Unable to toggle line blame annotations")}}};r1=((e,t,i,r)=>{for(var s,n=r>1?void 0:r?r0(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&rX(t,i,n),n})([(0,b.G5)()],r1);var r2=Object.defineProperty,r3=Object.getOwnPropertyDescriptor,r4=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?r3(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&r2(t,i,n),n};let r8=class extends F.uB{constructor(e){super(p.Ts.GetStarted),this.container=e}execute(e){let t=e!==this.container.context.extension.id?void 0:e;r7(this.container,t?{source:t}:void 0)}};r8=r4([(0,b.G5)()],r8);let r5=class extends F.uB{constructor(e){super(p.Ts.OpenWalkthrough),this.container=e}execute(e){r7(this.container,e)}};function r7(e,t){e.telemetry.enabled&&e.telemetry.sendEvent("walkthrough",{step:t?.step},t?.source?{source:t.source,detail:t?.detail}:void 0),(0,q.Hn)(e.context.extension.id,"welcome",t?.step,!1)}async function r9(e){let t,i;let r=e.extension.packageJSON.version,s=(0,E.ib)(r,"> 2020.0.0"),n=C.H.get("defaultDateLocale"),o=(0,d.Wn)(C.H.get("outputLevel"));A.Vy.configure({name:"GitLens",createChannel:function(t){let i=new A.j8(a.window.createOutputChannel(t),500);return e.subscriptions.push(i),("error"===o||"warn"===o)&&(i.appendLine(`GitLens${s?" (pre-release)":""} v${r} activating in ${a.env.appName} (${a.version}) on the ${h.HZ?"web":"desktop"}; language='${a.env.language}', logLevel='${o}', defaultDateLocale='${n}' (${a.env.machineId}|${a.env.sessionId})`),i.appendLine('To enable debug logging, set `"gitlens.outputLevel: "debug"` or run "GitLens: Enable Debug Logging" from the Command Palette')),i},toLoggable:function(e){return(0,g.t5)(e)?`GitUri(${e.toString(!0)}${e.repoPath?` repoPath=${e.repoPath}`:""}${e.sha?` sha=${e.sha}`:""})`:e instanceof a.Uri?`Uri(${e.toString(!0)})`:(0,w.Z6)(e)||(0,m.PX)(e)||(0,f.WM)(e)||(0,v.dz)(e)||(0,O.sN)(e)?e.toString():"rootUri"in e&&e.rootUri instanceof a.Uri?`ScmRepository(rootUri=${e.rootUri.toString(!0)})`:"uri"in e&&e.uri instanceof a.Uri?`${"name"in e&&"index"in e?"WorkspaceFolder":(0,A.zu)(e)}(uri=${e.uri.toString(!0)})`:void 0}},o,e.extensionMode===a.ExtensionMode.Development);let u=new D.e(`GitLens${s?" (pre-release)":""} v${r}`,{log:{message:` activating in ${a.env.appName} (${a.version}) on the ${h.HZ?"web":"desktop"}; language='${a.env.language}', logLevel='${o}', defaultDateLocale='${n}' (${a.env.machineId}|${a.env.sessionId})`}});if(s){let e=(0,E.sH)(r);if(new Date(e.major,e.minor-1,Number(e.patch.toString().substring(0,2))).getTime()<Date.now()-12096e5){u.stop({message:` was NOT activated because this pre-release version (${r}) has expired`}),setTimeout(y.AO,0,r);return}}a.workspace.isTrusted||(0,R.o)("gitlens:untrusted",!0),function(e,...t){e.globalState?.setKeysForSync([...t,p.e.Version,p.e.HomeViewWelcomeVisible])}(e);let T=new Storage(e),_=T.get(s?"synced:preVersion":"synced:version"),I=T.get(s?"preVersion":"version");t=null==I||null==_?_??I:1===(0,E.UD)(_,I)?_:I,A.Vy.enabled("debug")&&(i=`syncedVersion=${_}, localVersion=${I}, previousVersion=${t}, welcome=${T.get("views:welcome:visible")}`),null==t&&T.store("views:welcome:visible",!0),C.V.configure(e),(0,S.Fl)(n??a.env.language),e.subscriptions.push(C.H.onDidChange(e=>{C.H.changed(e,"defaultDateLocale")&&(0,S.Fl)(C.H.get("defaultDateLocale")??a.env.language)}));let $=c.m.create(e,T,s,r,t);(0,P.Oo)($.onReady)(()=>{e.subscriptions.push(...(0,b.yd)($)),function(e){e.context.subscriptions.push(e.actionRunners.registerBuiltIn("createPullRequest",{label:e=>`Create Pull Request on ${e.remote?.provider?.name??"Remote"}`,run:async e=>{"createPullRequest"===e.type&&await (0,b.RS)(p.Ts.CreatePullRequestOnRemote,{base:void 0,compare:e.branch.isRemote?(0,m.km)(e.branch.name):e.branch.upstream?(0,m.km)(e.branch.upstream):e.branch.name,remote:e.remote?.name??"",repoPath:e.repoPath})}}),e.actionRunners.registerBuiltIn("openPullRequest",{label:e=>`Open Pull Request on ${e.provider?.name??"Remote"}`,run:async e=>{"openPullRequest"===e.type&&await (0,b.RS)(p.Ts.OpenPullRequestOnRemote,{pr:{url:e.pullRequest.url}})}}))}($),function(e){e.subscriptions.push(c.m.instance.actionRunners.registerBuiltInPartner("liveshare","hover.commands",{name:"Live Share",label:e=>"hover.commands"===e.type&&"You"!==e.commit.author.name?`$(live-share) Invite ${e.commit.author.name}${e.commit.author.presence?.statusText?` (${e.commit.author.presence?.statusText})`:""} to a Live Share Session`:"$(live-share) Start a Live Share Session",run:async e=>{if("hover.commands"!==e.type||"You"===e.commit.author.name){await (0,b.RS)(p.Ts.InviteToLiveShare,{});return}await (0,b.RS)(p.Ts.InviteToLiveShare,{email:e.commit.author.email})}}))}(e),a.workspace.isTrusted||e.subscriptions.push(a.workspace.onDidGrantWorkspaceTrust(()=>{(0,R.o)("gitlens:untrusted",void 0),$.telemetry.setGlobalAttribute("workspace.isTrusted",a.workspace.isTrusted)})),se($,r,s,t),T.store(s?"preVersion":"version",r),(null==_||1===(0,E.UD)(r,_))&&T.store(s?"synced:preVersion":"synced:version",r),"debug"===o&&setTimeout(async()=>{"debug"===(0,d.Wn)(C.H.get("outputLevel"))&&!$.prereleaseOrDebugging&&await (0,y.pn)()&&(0,b.RS)(p.Ts.DisableDebugLogging)},6e4)}),$.debugging?((0,R.o)("gitlens:debugging",!0),(0,R.o)("gitlens:prerelease",!0)):$.prerelease&&(0,R.o)("gitlens:prerelease",!0),await $.ready();let x=(0,k.Bq)(C.H.getAll(!0),{prefix:"config",stringify:"all"});$.telemetry.setGlobalAttributes({debugging:$.debugging,prerelease:s,install:null==t,upgrade:null!=t&&r!==t,upgradedFrom:null!=t&&r!==t?t:void 0});let F=new Api($),B=$.mode,L=u.startTime,U=(0,l.k)(),W=u.elapsed();return u.stop({message:`activated${null!=i?`, ${i}`:""}${null!=B?`, mode: ${B.name}`:""}`}),$.telemetry.sendEvent("activate",{"activation.elapsed":W,"activation.mode":B?.name,...x},void 0,L,U),Promise.resolve(F)}function r6(){A.Vy.log("GitLens deactivating..."),c.m.instance.deactivate()}async function se(e,t,i,r){if(null==r){if(A.Vy.log(`GitLens first-time install; window.focused=${a.window.state.focused}`),!1===C.H.get("showWelcomeOnInstall"))return;if(a.window.state.focused)await e.storage.delete("pendingWelcomeOnFocus"),await (0,b.RS)(p.Ts.ShowWelcomePage);else{await e.storage.store("pendingWelcomeOnFocus",!0);let t=a.window.onDidChangeWindowState(i=>{i.focused&&(t.dispose(),!0===e.storage.get("pendingWelcomeOnFocus")&&(e.storage.delete("pendingWelcomeOnFocus"),C.H.get("showWelcomeOnInstall")&&(0,b.RS)(p.Ts.ShowWelcomePage)))});e.context.subscriptions.push(t)}return}r!==t&&A.Vy.log(`GitLens upgraded from v${r} to v${t}; window.focused=${a.window.state.focused}`);let s=(0,E.sH)(t),n=(0,E.sH)(r);if(s.major<n.major||s.major===n.major&&s.minor<n.minor)return;let o=i&&(0,E.ib)(n,"< 2023.6.0800");if((s.major!==n.major||o)&&(t=o?"14":String(s.major),C.H.get("showWhatsNewAfterUpgrades"))){if(a.window.state.focused)await e.storage.delete("pendingWhatsNewOnFocus"),await (0,y.U_)(t);else{await e.storage.store("pendingWhatsNewOnFocus",!0);let i=a.window.onDidChangeWindowState(r=>{r.focused&&(i.dispose(),!0===e.storage.get("pendingWhatsNewOnFocus")&&(e.storage.delete("pendingWhatsNewOnFocus"),C.H.get("showWhatsNewAfterUpgrades")&&(0,y.U_)(t)))});e.context.subscriptions.push(i)}}}r5=r4([(0,b.G5)()],r5)})(),module.exports=r})();