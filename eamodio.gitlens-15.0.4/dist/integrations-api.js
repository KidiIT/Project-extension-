exports.id=773,exports.ids=[773],exports.modules={1574:(e,r,t)=>{t.r(r),t.d(r,{ProvidersApi:()=>ProvidersApi});var s=t(910),o=t.n(s),n=t(8803),u=t(1298);let ProvidersApi=class ProvidersApi{constructor(e){this.container=e;let r=o()();this.providers={[u.Q7.GitHub]:{...u.Mt[u.Q7.GitHub],provider:r.github,getCurrentUserFn:r.github.getCurrentUser.bind(r.github),getPullRequestsForReposFn:r.github.getPullRequestsForRepos.bind(r.github),getIssuesForReposFn:r.github.getIssuesForRepos.bind(r.github)},[u.PY.GitHubEnterprise]:{...u.Mt[u.PY.GitHubEnterprise],provider:r.github,getCurrentUserFn:r.github.getCurrentUser.bind(r.github),getPullRequestsForReposFn:r.github.getPullRequestsForRepos.bind(r.github),getIssuesForReposFn:r.github.getIssuesForRepos.bind(r.github)},[u.Q7.GitLab]:{...u.Mt[u.Q7.GitLab],provider:r.gitlab,getCurrentUserFn:r.gitlab.getCurrentUser.bind(r.gitlab),getPullRequestsForReposFn:r.gitlab.getPullRequestsForRepos.bind(r.gitlab),getPullRequestsForRepoFn:r.gitlab.getPullRequestsForRepo.bind(r.gitlab),getIssuesForReposFn:r.gitlab.getIssuesForRepos.bind(r.gitlab),getIssuesForRepoFn:r.gitlab.getIssuesForRepo.bind(r.gitlab)},[u.PY.GitLabSelfHosted]:{...u.Mt[u.PY.GitLabSelfHosted],provider:r.gitlab,getCurrentUserFn:r.gitlab.getCurrentUser.bind(r.gitlab),getPullRequestsForReposFn:r.gitlab.getPullRequestsForRepos.bind(r.gitlab),getPullRequestsForRepoFn:r.gitlab.getPullRequestsForRepo.bind(r.gitlab),getIssuesForReposFn:r.gitlab.getIssuesForRepos.bind(r.gitlab),getIssuesForRepoFn:r.gitlab.getIssuesForRepo.bind(r.gitlab)},[u.Q7.Bitbucket]:{...u.Mt[u.Q7.Bitbucket],provider:r.bitbucket,getCurrentUserFn:r.bitbucket.getCurrentUser.bind(r.bitbucket),getPullRequestsForReposFn:r.bitbucket.getPullRequestsForRepos.bind(r.bitbucket),getPullRequestsForRepoFn:r.bitbucket.getPullRequestsForRepo.bind(r.bitbucket)},[u.Q7.AzureDevOps]:{...u.Mt[u.Q7.AzureDevOps],provider:r.azureDevOps,getCurrentUserForInstanceFn:r.azureDevOps.getCurrentUserForInstance.bind(r.azureDevOps),getPullRequestsForReposFn:r.azureDevOps.getPullRequestsForRepos.bind(r.azureDevOps),getPullRequestsForRepoFn:r.azureDevOps.getPullRequestsForRepo.bind(r.azureDevOps),getIssuesForAzureProjectFn:r.azureDevOps.getIssuesForAzureProject.bind(r.azureDevOps),getReposForAzureProjectFn:r.azureDevOps.getReposForAzureProject.bind(r.azureDevOps)},[u.tp.Jira]:{...u.Mt[u.tp.Jira],provider:r.jira,getCurrentUserForResourceFn:r.jira.getCurrentUserForResource.bind(r.jira),getJiraResourcesForCurrentUserFn:r.jira.getJiraResourcesForCurrentUser.bind(r.jira),getJiraProjectsForResourcesFn:r.jira.getJiraProjectsForResources.bind(r.jira),getIssueFn:r.jira.getIssue.bind(r.jira),getIssuesForProjectFn:r.jira.getIssuesForProject.bind(r.jira),getIssuesForResourceForCurrentUserFn:r.jira.getIssuesForResourceForCurrentUser.bind(r.jira)},[u.tp.Trello]:{...u.Mt[u.tp.Trello],provider:r.trello}}}providers;getScopesForProvider(e){return this.providers[e]?.scopes}getProviderDomain(e){return this.providers[e]?.domain}getProviderPullRequestsPagingMode(e){return this.providers[e]?.pullRequestsPagingMode}getProviderIssuesPagingMode(e){return this.providers[e]?.issuesPagingMode}providerSupportsPullRequestFilters(e,r){return this.providers[e]?.supportedPullRequestFilters!=null&&r.every(r=>this.providers[e]?.supportedPullRequestFilters?.includes(r))}providerSupportsIssueFilters(e,r){return this.providers[e]?.supportedIssueFilters!=null&&r.every(r=>this.providers[e]?.supportedIssueFilters?.includes(r))}isRepoIdsInput(e){return null!=e&&Array.isArray(e)&&e.every(e=>"string"==typeof e||"number"==typeof e)}async getProviderToken(e,r){let t=null==e.domain||null==e.scopes?void 0:{domain:e.domain,scopes:e.scopes};try{return(await this.container.integrationAuthentication.getSession(e.id,t,{createIfNeeded:r?.createSessionIfNeeded}))?.accessToken}catch{return}}async ensureProviderTokenAndFunction(e,r,t){let s=this.providers[e];if(null==s)throw Error(`Provider with id ${e} not registered`);let o=t??await this.getProviderToken(s);if(null==o)throw Error(`Not connected to provider ${e}`);if(null==s[r])throw Error(`Provider with id ${e} does not support function: ${r}`);return{provider:s,token:o}}handleProviderError(e,r,t){if(null==this.providers[e])throw Error(`Provider with id ${e} not registered`);if(e===u.tp.Jira&&t?.response?.status!=null){if(401===t.response.status)throw new n.v3(e,n.R.Forbidden,t);if(429===t.response.status){let e;let s=t.response.headers?.["x-ratelimit-reset"];throw null!=s&&Number.isNaN(e=parseInt(s,10))&&(e=void 0),new n.qc(t,r,e)}if(t.response.status>=400&&t.response.status<500)throw new n.Iz(t)}throw t}async getPagedResult(e,r,t,s,o="{}"){let n;try{n=JSON.parse(o)}catch{n={}}let u=n.value,i=n.type,a={};"page"===i?a={page:u}:"cursor"===i&&(a={cursor:u});let g={...r,...a},l=await t?.(g,{token:s,isPAT:e.usesPAT});if(null==l)return{values:[]};let F=l.pageInfo?.hasNextPage??!1,d="{}";return l.pageInfo?.endCursor!=null?d=JSON.stringify({value:l.pageInfo?.endCursor,type:"cursor"}):l.pageInfo?.nextPage!=null&&(d=JSON.stringify({value:l.pageInfo?.nextPage,type:"page"})),{values:l.data,paging:{cursor:d,more:F}}}async getPullRequestsForRepos(e,r,t){let{provider:s,token:o}=await this.ensureProviderTokenAndFunction(e,"getPullRequestsForReposFn",t?.accessToken);return this.getPagedResult(s,{...this.isRepoIdsInput(r)?{repoIds:r}:{repos:r},...t},s.getPullRequestsForReposFn,o,t?.cursor)}async getPullRequestsForRepo(e,r,t){let{provider:s,token:o}=await this.ensureProviderTokenAndFunction(e,"getPullRequestsForRepoFn",t?.accessToken);return this.getPagedResult(s,{repo:r,...t},s.getPullRequestsForRepoFn,o,t?.cursor)}async getIssuesForRepos(e,r,t){let{provider:s,token:o}=await this.ensureProviderTokenAndFunction(e,"getIssuesForReposFn",t?.accessToken);return this.getPagedResult(s,{...this.isRepoIdsInput(r)?{repoIds:r}:{repos:r},...t},s.getIssuesForReposFn,o,t?.cursor)}async getIssuesForRepo(e,r,t){let{provider:s,token:o}=await this.ensureProviderTokenAndFunction(e,"getIssuesForRepoFn",t?.accessToken);return this.getPagedResult(s,{repo:r,...t},s.getIssuesForRepoFn,o,t?.cursor)}async getIssuesForAzureProject(e,r,t){let{provider:s,token:o}=await this.ensureProviderTokenAndFunction(u.Q7.AzureDevOps,"getIssuesForAzureProjectFn",t?.accessToken);return this.getPagedResult(s,{namespace:e,project:r,...t},s.getIssuesForAzureProjectFn,o,t?.cursor)}async getReposForAzureProject(e,r,t){let{provider:s,token:o}=await this.ensureProviderTokenAndFunction(u.Q7.AzureDevOps,"getReposForAzureProjectFn",t?.accessToken);return this.getPagedResult(s,{namespace:e,project:r,...t},s.getReposForAzureProjectFn,o,t?.cursor)}async getCurrentUser(e,r){let{provider:t,token:s}=await this.ensureProviderTokenAndFunction(e,"getCurrentUserFn",r?.accessToken);return(await t.getCurrentUserFn?.({token:s,isPAT:t.usesPAT}))?.data}async getCurrentUserForInstance(e,r,t){let{provider:s,token:o}=await this.ensureProviderTokenAndFunction(e,"getCurrentUserForInstanceFn",t?.accessToken);return(await s.getCurrentUserForInstanceFn?.({namespace:r},{token:o,isPAT:s.usesPAT}))?.data}async getCurrentUserForResource(e,r,t){let{provider:s,token:o}=await this.ensureProviderTokenAndFunction(e,"getCurrentUserForResourceFn",t?.accessToken);try{return(await s.getCurrentUserForResourceFn?.({resourceId:r},{token:o}))?.data}catch(r){return this.handleProviderError(e,o,r)}}async getJiraResourcesForCurrentUser(e){let{provider:r,token:t}=await this.ensureProviderTokenAndFunction(u.tp.Jira,"getJiraResourcesForCurrentUserFn",e?.accessToken);try{return(await r.getJiraResourcesForCurrentUserFn?.({token:t}))?.data}catch(e){return this.handleProviderError(u.tp.Jira,t,e)}}async getJiraProjectsForResources(e,r){let{provider:t,token:s}=await this.ensureProviderTokenAndFunction(u.tp.Jira,"getJiraProjectsForResourcesFn",r?.accessToken);try{return(await t.getJiraProjectsForResourcesFn?.({resourceIds:e},{token:s}))?.data}catch(e){return this.handleProviderError(u.tp.Jira,s,e)}}async getIssuesForProject(e,r,t,s){let{provider:o,token:n}=await this.ensureProviderTokenAndFunction(e,"getIssuesForProjectFn",s?.accessToken);try{let e=await o.getIssuesForProjectFn?.({project:r,resourceId:t,...s},{token:n});return e?.data}catch(r){return this.handleProviderError(e,n,r)}}async getIssuesForResourceForCurrentUser(e,r,t){let{provider:s,token:o}=await this.ensureProviderTokenAndFunction(e,"getIssuesForResourceForCurrentUserFn",t?.accessToken);try{let e=await s.getIssuesForResourceForCurrentUserFn?.({resourceId:r},{token:o});return e?.data}catch(r){return this.handleProviderError(e,o,r)}}async getIssue(e,r,t,s){let{provider:o,token:n}=await this.ensureProviderTokenAndFunction(e,"getIssueFn",s?.accessToken);try{let e=await o.getIssueFn?.({resourceId:r,number:t},{token:n});return e?.data}catch(r){return this.handleProviderError(e,n,r)}}}}};