var e={d:(r,o)=>{for(var t in o)e.o(o,t)&&!e.o(r,t)&&Object.defineProperty(r,t,{enumerable:!0,get:o[t]})},o:(e,r)=>Object.prototype.hasOwnProperty.call(e,r)},r={};function o(e){const r=e.lastIndexOf("@");return-1===r?"tunnel+"+e:e.slice(0,r+1)+"tunnel+"+e.slice(r+1)}async function t(e,r){if(!e.workspace)return;let t,n="folderUri"in e.workspace?e.workspace.folderUri:e.workspace.workspaceUri;if("vscode-remote"===n.scheme&&n.authority&&(t=n.authority.includes(":")?n.authority.split(":")[0]:n.authority),!t)throw Error("Cannot resolve remote host from path!");const s=(i=n).with({authority:o(i.authority)});var i;e.workbenchOptions={...e.workbenchOptions,productConfiguration:{extensionAllowedProposedApi:["ms-vscode.remote-server"],extensionEnabledApiProposals:{"ms-vscode.remote-server":["resolvers"]}},commands:[{id:"remote-tunnels.internal.getTunnelKeyFromHash",handler:()=>window.location.hash.slice(1)}],remoteAuthority:s.authority},e.workspace="folderUri"in e.workspace?{folderUri:s}:{workspaceUri:s}}e.d(r,{Z:()=>t});var n=r.Z;export{n as default};