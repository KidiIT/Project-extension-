{
  "name": "DBScheme",
  "scopeName": "source.dbscheme",
  "fileTypes": [
    "dbscheme"
  ],
  "uuid": "BE08929D-CEAC-4B88-9844-57475F4E8A82",
  "patterns": [
    {
      "include": "#table-column-list"
    },
    {
      "include": "#case-declaration-head"
    },
    {
      "include": "#annotation"
    },
    {
      "include": "#non-context-sensitive"
    },
    {
      "include": "#table-name"
    },
    {
      "include": "#type-name"
    }
  ],
  "repository": {
    "id-letter": {
      "match": "(?x)[0-9A-Za-z_]"
    },
    "end-of-id": {
      "match": "(?x)(?!(?:[0-9A-Za-z_]))"
    },
    "id": {
      "match": "(?x)\\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_])))"
    },
    "at-id": {
      "match": "(?x)@[A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_])))"
    },
    "integer-literal": {
      "match": "(?x)[0-9]+(?![0-9])",
      "name": "constant.numeric.decimal.dbscheme"
    },
    "comment-start": {
      "match": "(?x)// | /\\*"
    },
    "comment": {
      "patterns": [
        {
          "begin": "(?x)/\\*\\*",
          "end": "(?x)\\*/",
          "name": "comment.block.documentation.dbscheme",
          "patterns": [
            {
              "begin": "(?x)(?<=/\\*\\*)([^*]|\\*(?!/))*$",
              "while": "(?x)(^|\\G)\\s*\\*(?!/)(?=([^*]|[*](?!/))*$)",
              "patterns": [
                {
                  "include": "text.html.markdown#fenced_code_block"
                },
                {
                  "include": "text.html.markdown#lists"
                },
                {
                  "include": "text.html.markdown#inline"
                },
                {
                  "match": "(?x)\\G\\s* (@\\S+)",
                  "name": "keyword.tag.dbscheme"
                }
              ]
            }
          ]
        },
        {
          "begin": "(?x)/\\*",
          "end": "(?x)\\*/",
          "name": "comment.block.dbscheme"
        },
        {
          "match": "(?x)//.*$",
          "name": "comment.line.double-slash.dbscheme"
        }
      ]
    },
    "sub": {
      "match": "(?x)<:",
      "name": "punctuation.sub.sub.dbscheme"
    },
    "pipe": {
      "match": "(?x)\\|",
      "name": "punctuation.separator.pipe.dbscheme"
    },
    "open-paren": {
      "match": "(?x)\\(",
      "name": "punctuation.parenthesis.open.dbscheme"
    },
    "close-paren": {
      "match": "(?x)\\)",
      "name": "punctuation.parenthesis.close.dbscheme"
    },
    "semicolon": {
      "match": "(?x);",
      "name": "punctuation.separator.statement.dbscheme"
    },
    "colon": {
      "match": "(?x):",
      "name": "punctuation.separator.colon.dbscheme"
    },
    "comma": {
      "match": "(?x),",
      "name": "punctuation.separator.comma.dbscheme"
    },
    "equals": {
      "match": "(?x)=",
      "name": "punctuation.separator.equals.dbscheme"
    },
    "dot": {
      "match": "(?x)\\.",
      "name": "punctuation.accessor.dbscheme"
    },
    "open-bracket": {
      "match": "(?x)\\[",
      "name": "punctuation.squarebracket.open.dbscheme"
    },
    "close-bracket": {
      "match": "(?x)\\]",
      "name": "punctuation.squarebracket.close.dbscheme"
    },
    "operator-or-punctuation": {
      "patterns": [
        {
          "include": "#sub"
        },
        {
          "include": "#pipe"
        },
        {
          "include": "#open-paren"
        },
        {
          "include": "#close-paren"
        },
        {
          "include": "#semicolon"
        },
        {
          "include": "#colon"
        },
        {
          "include": "#comma"
        },
        {
          "include": "#equals"
        },
        {
          "include": "#dot"
        },
        {
          "include": "#open-bracket"
        },
        {
          "include": "#close-bracket"
        }
      ]
    },
    "keyset": {
      "match": "(?x)\\#(?:keyset)(?:(?!(?:[0-9A-Za-z_])))",
      "name": "storage.modifier.keyset.dbscheme"
    },
    "computed": {
      "match": "(?x)\\#(?:computed)(?:(?!(?:[0-9A-Za-z_])))",
      "name": "storage.modifier.computed.dbscheme"
    },
    "annotation-keyword": {
      "patterns": [
        {
          "include": "#keyset"
        },
        {
          "include": "#computed"
        }
      ]
    },
    "type": {
      "match": "(?x)\\b(?:type)(?:(?!(?:[0-9A-Za-z_])))",
      "name": "keyword.other.type.dbscheme"
    },
    "subtype": {
      "match": "(?x)\\b(?:subtype)(?:(?!(?:[0-9A-Za-z_])))",
      "name": "keyword.other.subtype.dbscheme"
    },
    "case": {
      "match": "(?x)\\b(?:case)(?:(?!(?:[0-9A-Za-z_])))",
      "name": "keyword.other.case.dbscheme"
    },
    "of": {
      "match": "(?x)\\b(?:of)(?:(?!(?:[0-9A-Za-z_])))",
      "name": "keyword.other.of.dbscheme"
    },
    "order": {
      "match": "(?x)\\b(?:order)(?:(?!(?:[0-9A-Za-z_])))",
      "name": "keyword.other.order.dbscheme"
    },
    "key": {
      "match": "(?x)\\b(?:key)(?:(?!(?:[0-9A-Za-z_])))",
      "name": "keyword.other.key.dbscheme"
    },
    "ref": {
      "match": "(?x)\\b(?:ref)(?:(?!(?:[0-9A-Za-z_])))",
      "name": "storage.modifier.ref.dbscheme"
    },
    "int": {
      "match": "(?x)\\b(?:int)(?:(?!(?:[0-9A-Za-z_])))",
      "name": "keyword.type.boolean.dbscheme"
    },
    "float": {
      "match": "(?x)\\b(?:float)(?:(?!(?:[0-9A-Za-z_])))",
      "name": "keyword.type.float.dbscheme"
    },
    "boolean": {
      "match": "(?x)\\b(?:boolean)(?:(?!(?:[0-9A-Za-z_])))",
      "name": "keyword.type.boolean.dbscheme"
    },
    "date": {
      "match": "(?x)\\b(?:date)(?:(?!(?:[0-9A-Za-z_])))",
      "name": "keyword.type.date.dbscheme"
    },
    "varchar": {
      "match": "(?x)\\b(?:varchar)(?:(?!(?:[0-9A-Za-z_])))",
      "name": "keyword.type.varchar.dbscheme"
    },
    "string": {
      "match": "(?x)\\b(?:string)(?:(?!(?:[0-9A-Za-z_])))",
      "name": "keyword.type.string.dbscheme"
    },
    "unique": {
      "match": "(?x)\\b(?:unique)(?:(?!(?:[0-9A-Za-z_])))",
      "name": "storage.modifier.unique.dbscheme"
    },
    "keyword": {
      "patterns": [
        {
          "include": "#type"
        },
        {
          "include": "#subtype"
        },
        {
          "include": "#case"
        },
        {
          "include": "#of"
        },
        {
          "include": "#order"
        },
        {
          "include": "#key"
        },
        {
          "include": "#ref"
        },
        {
          "include": "#int"
        },
        {
          "include": "#float"
        },
        {
          "include": "#boolean"
        },
        {
          "include": "#date"
        },
        {
          "include": "#varchar"
        },
        {
          "include": "#string"
        },
        {
          "include": "#unique"
        }
      ]
    },
    "non-context-sensitive": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#integer-literal"
        },
        {
          "include": "#operator-or-punctuation"
        },
        {
          "include": "#keyword"
        }
      ]
    },
    "annotation": {
      "patterns": [
        {
          "include": "#keyset-annotation"
        },
        {
          "include": "#annotation-keyword"
        }
      ]
    },
    "keyset-annotation": {
      "end": "(?x)(?! \\s | (?:// | /\\*) | \\[ ) | (?<=\\])",
      "name": "meta.block.keyset-annotation.dbscheme",
      "patterns": [
        {
          "include": "#keyset-annotation-body"
        },
        {
          "include": "#non-context-sensitive"
        }
      ],
      "begin": "(?x)((?:\\#(?:keyset)(?:(?!(?:[0-9A-Za-z_])))))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#keyset"
            }
          ]
        }
      }
    },
    "keyset-annotation-body": {
      "name": "meta.block.keyset-annotation-body.dbscheme",
      "patterns": [
        {
          "include": "#non-context-sensitive"
        },
        {
          "include": "#column-name"
        }
      ],
      "begin": "(?x)((?:\\[))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#open-bracket"
            }
          ]
        }
      },
      "end": "(?x)((?:\\]))",
      "endCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#close-bracket"
            }
          ]
        }
      }
    },
    "table-column-list": {
      "name": "meta.block.table-column-list.dbscheme",
      "patterns": [
        {
          "include": "#non-context-sensitive"
        },
        {
          "include": "#column-name"
        },
        {
          "include": "#type-name"
        }
      ],
      "begin": "(?x)((?:\\())",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#open-paren"
            }
          ]
        }
      },
      "end": "(?x)((?:\\)))",
      "endCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#close-paren"
            }
          ]
        }
      }
    },
    "case-declaration-head": {
      "end": "(?x)(?!\\s|(?:\\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))|(?:@[A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))|(?:\\.)|(?:// | /\\*))",
      "name": "meta.block.case-declaration-head.dbscheme",
      "patterns": [
        {
          "include": "#non-context-sensitive"
        },
        {
          "include": "#column-name"
        },
        {
          "include": "#type-name"
        }
      ],
      "begin": "(?x)((?:\\b(?:case)(?:(?!(?:[0-9A-Za-z_])))))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#case"
            }
          ]
        }
      }
    },
    "column-name": {
      "match": "(?x)(?:\\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))",
      "name": "entity.name.variable.parameter.dbscheme"
    },
    "type-name": {
      "match": "(?x)(?:@[A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))",
      "name": "entity.name.type.dbscheme"
    },
    "table-name": {
      "match": "(?x)(?:\\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))",
      "name": "entity.name.function.dbscheme"
    }
  }
}